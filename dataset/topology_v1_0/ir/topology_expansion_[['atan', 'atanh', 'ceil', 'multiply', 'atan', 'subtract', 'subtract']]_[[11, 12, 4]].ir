# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((11, 12, 4), "float32"), compute: T.Buffer((11, 12, 4), "float32"), T_multiply: T.Buffer((11, 12, 4), "float32"), T_subtract: T.Buffer((11, 12, 4), "float32"), T_subtract_1: T.Buffer((11, 12, 4), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        ph_0_1 = T.Buffer((528,), data=ph_0.data)
        for i0 in T.parallel(11):
            for i1, i2 in T.grid(12, 4):
                cse_var_1: T.int32 = i0 * 48 + i1 * 4 + i2
                compute_1 = T.Buffer((528,), data=compute.data)
                compute_1[cse_var_1] = T.atan(ph_0_1[cse_var_1])
        for ax0_ax1_fused in T.parallel(132):
            for ax2 in range(4):
                cse_var_2: T.int32 = ax0_ax1_fused * 4 + ax2
                T_multiply_1 = T.Buffer((528,), data=T_multiply.data)
                T_multiply_1[cse_var_2] = ph_0_1[cse_var_2] * T.ceil(T.atanh(ph_0_1[cse_var_2]))
        for ax0_ax1_fused_ax2_fused in T.parallel(528):
            T_subtract_2 = T.Buffer((528,), data=T_subtract.data)
            T_subtract_2[ax0_ax1_fused_ax2_fused] = T.atan(ph_0_1[ax0_ax1_fused_ax2_fused]) - ph_0_1[ax0_ax1_fused_ax2_fused]
        for ax0_ax1_fused_ax2_fused in T.parallel(528):
            T_subtract_2 = T.Buffer((528,), data=T_subtract_1.data)
            T_subtract_2[ax0_ax1_fused_ax2_fused] = T.atan(ph_0_1[ax0_ax1_fused_ax2_fused]) - ph_0_1[ax0_ax1_fused_ax2_fused]