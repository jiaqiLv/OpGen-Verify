# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((16, 10, 2), "float32"), ph_4: T.Buffer((16, 2, 1), "float32"), compute: T.Buffer((16, 10, 2), "float32"), T_batch_matmul_NN: T.Buffer((16, 10, 1), "float32"), compute_1: T.Buffer((16, 10, 2), "float32"), compute_2: T.Buffer((16, 10, 2), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        auto_scheduler_layout_transform = T.allocate([32], "float32", "global")
        ph_0_1 = T.Buffer((320,), data=ph_0.data)
        for i0_i1_fused_i2_fused in T.parallel(320):
            compute_3 = T.Buffer((320,), data=compute.data)
            compute_3[i0_i1_fused_i2_fused] = T.asin(ph_0_1[i0_i1_fused_i2_fused])
        auto_scheduler_layout_transform_1 = T.Buffer((32,), data=auto_scheduler_layout_transform)
        for ax5, ax7 in T.grid(16, 2):
            cse_var_1: T.int32 = ax5 * 2 + ax7
            ph_4_1 = T.Buffer((32,), data=ph_4.data)
            auto_scheduler_layout_transform_1[cse_var_1] = ph_4_1[cse_var_1]
        for b_outer_outer_outer_i_outer_outer_outer_fused_j_outer_outer_outer_fused_b_outer_outer_inner_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused in T.parallel(2):
            T_batch_matmul_NN_1 = T.Buffer((160,), data=T_batch_matmul_NN.data)
            for b_outer_inner_init, i_inner_init in T.grid(16, 5):
                T_batch_matmul_NN_1[b_outer_inner_init * 10 + b_outer_outer_outer_i_outer_outer_outer_fused_j_outer_outer_outer_fused_b_outer_outer_inner_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused * 5 + i_inner_init] = T.float32(0)
            for b_outer_inner, k_inner, i_inner in T.grid(16, 2, 5):
                cse_var_2: T.int32 = b_outer_inner * 10 + b_outer_outer_outer_i_outer_outer_outer_fused_j_outer_outer_outer_fused_b_outer_outer_inner_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused * 5 + i_inner
                T_batch_matmul_NN_1[cse_var_2] = T_batch_matmul_NN_1[cse_var_2] + T.acosh(ph_0_1[b_outer_inner * 20 + b_outer_outer_outer_i_outer_outer_outer_fused_j_outer_outer_outer_fused_b_outer_outer_inner_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused * 10 + i_inner * 2 + k_inner]) * auto_scheduler_layout_transform_1[b_outer_inner * 2 + k_inner]
        for i0_i1_fused_i2_fused in T.parallel(320):
            compute_3 = T.Buffer((320,), data=compute_1.data)
            compute_3[i0_i1_fused_i2_fused] = T.asinh(T.fabs(ph_0_1[i0_i1_fused_i2_fused]))
        for i0_i1_fused_i2_fused in T.parallel(320):
            compute_3 = T.Buffer((320,), data=compute_2.data)
            compute_3[i0_i1_fused_i2_fused] = T.ceil(T.fabs(ph_0_1[i0_i1_fused_i2_fused]))