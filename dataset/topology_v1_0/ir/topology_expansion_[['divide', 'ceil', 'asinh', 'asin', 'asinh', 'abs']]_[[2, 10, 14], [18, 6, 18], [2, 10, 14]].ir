# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((2, 10, 14), "float32"), ph_3: T.Buffer((2, 10, 14), "float32"), compute: T.Buffer((2, 10, 14), "float32"), compute_1: T.Buffer((2, 10, 14), "float32"), compute_2: T.Buffer((2, 10, 14), "float32"), compute_3: T.Buffer((2, 10, 14), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        ph_0_1 = T.Buffer((280,), data=ph_0.data)
        for i0 in T.parallel(2):
            for i1, i2 in T.grid(10, 14):
                cse_var_1: T.int32 = i0 * 140 + i1 * 14 + i2
                compute_4 = T.Buffer((280,), data=compute.data)
                compute_4[cse_var_1] = T.ceil(ph_0_1[cse_var_1])
        for i0_i1_fused_i2_fused in T.parallel(280):
            compute_4 = T.Buffer((280,), data=compute_1.data)
            compute_4[i0_i1_fused_i2_fused] = T.asin(T.asinh(ph_0_1[i0_i1_fused_i2_fused]))
        for i0_i1_fused_i2_fused in T.parallel(280):
            compute_4 = T.Buffer((280,), data=compute_2.data)
            compute_4[i0_i1_fused_i2_fused] = T.asinh(T.asinh(ph_0_1[i0_i1_fused_i2_fused]))
        for i0_i1_fused_i2_fused in T.parallel(280):
            compute_4 = T.Buffer((280,), data=compute_3.data)
            ph_3_1 = T.Buffer((280,), data=ph_3.data)
            compute_4[i0_i1_fused_i2_fused] = T.fabs(ph_0_1[i0_i1_fused_i2_fused] / ph_3_1[i0_i1_fused_i2_fused])