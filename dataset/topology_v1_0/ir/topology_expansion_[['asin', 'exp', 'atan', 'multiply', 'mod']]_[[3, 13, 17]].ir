# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((3, 13, 17), "float32"), compute: T.Buffer((3, 13, 17), "float32"), T_mod: T.Buffer((3, 13, 17), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        compute_1 = T.allocate([663], "float32", "global")
        ph_0_1 = T.Buffer((663,), data=ph_0.data)
        for i0_i1_fused_i2_fused in T.parallel(663):
            compute_2 = T.Buffer((663,), data=compute.data)
            compute_2[i0_i1_fused_i2_fused] = T.asin(ph_0_1[i0_i1_fused_i2_fused])
        compute_2 = T.Buffer((663,), data=compute_1)
        for i0_i1_fused in T.parallel(39):
            for i2 in range(17):
                cse_var_1: T.int32 = i0_i1_fused * 17 + i2
                compute_2[cse_var_1] = T.exp(ph_0_1[cse_var_1])
        for ax0_ax1_fused in T.parallel(39):
            for ax2 in range(17):
                cse_var_2: T.int32 = ax0_ax1_fused * 17 + ax2
                T_mod_1 = T.Buffer((663,), data=T_mod.data)
                T_mod_1[cse_var_2] = T.truncmod(ph_0_1[cse_var_2], ph_0_1[cse_var_2] * T.atan(compute_2[cse_var_2]))