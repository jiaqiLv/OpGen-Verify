# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((8, 2, 7), "float32"), ph_3: T.Buffer((8, 2, 7), "float32"), compute: T.Buffer((8, 2, 7), "float32"), compute_1: T.Buffer((8, 2, 7), "float32"), compute_2: T.Buffer((8, 2, 7), "float32"), compute_3: T.Buffer((8, 2, 7), "float32"), compute_4: T.Buffer((8, 2, 7), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        compute_5 = T.allocate([112], "float32", "global")
        ph_0_1 = T.Buffer((112,), data=ph_0.data)
        for i0_i1_fused_i2_fused in T.parallel(112):
            compute_6 = T.Buffer((112,), data=compute.data)
            compute_6[i0_i1_fused_i2_fused] = T.exp(ph_0_1[i0_i1_fused_i2_fused])
        compute_6 = T.Buffer((112,), data=compute_5)
        for i0_i1_fused_i2_fused in T.parallel(112):
            compute_6[i0_i1_fused_i2_fused] = T.exp(ph_0_1[i0_i1_fused_i2_fused])
        for i0_i1_fused_i2_fused in T.parallel(112):
            compute_7 = T.Buffer((112,), data=compute_1.data)
            compute_7[i0_i1_fused_i2_fused] = T.acosh(compute_6[i0_i1_fused_i2_fused])
        for i0_i1_fused_i2_fused in T.parallel(112):
            compute_7 = T.Buffer((112,), data=compute_2.data)
            compute_7[i0_i1_fused_i2_fused] = T.asin(compute_6[i0_i1_fused_i2_fused])
        ph_3_1 = T.Buffer((112,), data=ph_3.data)
        for i0 in T.parallel(8):
            for i1, i2 in T.grid(2, 7):
                cse_var_1: T.int32 = i0 * 14 + i1 * 7 + i2
                compute_7 = T.Buffer((112,), data=compute_3.data)
                compute_7[cse_var_1] = T.fabs(ph_0_1[cse_var_1] - ph_3_1[cse_var_1])
        for i0_i1_fused_i2_fused in T.parallel(112):
            compute_7 = T.Buffer((112,), data=compute_4.data)
            compute_7[i0_i1_fused_i2_fused] = T.acos(ph_0_1[i0_i1_fused_i2_fused] - ph_3_1[i0_i1_fused_i2_fused])