# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((17, 10, 7), "float32"), compute: T.Buffer((17, 10, 7), "float32"), T_subtract: T.Buffer((17, 10, 7), "float32"), compute_1: T.Buffer((17, 10, 7), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        ph_0_1 = T.Buffer((1190,), data=ph_0.data)
        for i0_i1_fused_i2_fused in T.parallel(1190):
            compute_2 = T.Buffer((1190,), data=compute.data)
            compute_2[i0_i1_fused_i2_fused] = T.acosh(ph_0_1[i0_i1_fused_i2_fused])
        for ax0 in T.parallel(17):
            for ax1, ax2 in T.grid(10, 7):
                cse_var_1: T.int32 = ax0 * 70 + ax1 * 7 + ax2
                T_subtract_1 = T.Buffer((1190,), data=T_subtract.data)
                T_subtract_1[cse_var_1] = ph_0_1[cse_var_1] - T.atan(T.acos(ph_0_1[cse_var_1]))
        for i0 in T.parallel(17):
            for i1, i2 in T.grid(10, 7):
                cse_var_2: T.int32 = i0 * 70 + i1 * 7 + i2
                compute_2 = T.Buffer((1190,), data=compute_1.data)
                compute_2[cse_var_2] = T.atan(ph_0_1[cse_var_2])