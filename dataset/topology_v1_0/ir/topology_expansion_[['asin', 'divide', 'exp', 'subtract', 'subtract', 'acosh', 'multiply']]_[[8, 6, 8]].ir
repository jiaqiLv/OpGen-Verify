# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((8, 6, 8), "float32"), compute: T.Buffer((8, 6, 8), "float32"), T_multiply: T.Buffer((8, 6, 8), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        compute_1 = T.allocate([384], "float32", "global")
        compute_2 = T.Buffer((384,), data=compute_1)
        ph_0_1 = T.Buffer((384,), data=ph_0.data)
        for i0_i1_fused_i2_fused in T.parallel(384):
            compute_2[i0_i1_fused_i2_fused] = T.exp(ph_0_1[i0_i1_fused_i2_fused] / T.asin(ph_0_1[i0_i1_fused_i2_fused]))
        for i0_i1_fused_i2_fused in T.parallel(384):
            compute_3 = T.Buffer((384,), data=compute.data)
            compute_3[i0_i1_fused_i2_fused] = T.acosh(ph_0_1[i0_i1_fused_i2_fused] - (ph_0_1[i0_i1_fused_i2_fused] - compute_2[i0_i1_fused_i2_fused]))
        for ax0_ax1_fused in T.parallel(48):
            for ax2 in range(8):
                cse_var_1: T.int32 = ax0_ax1_fused * 8 + ax2
                T_multiply_1 = T.Buffer((384,), data=T_multiply.data)
                T_multiply_1[cse_var_1] = (ph_0_1[cse_var_1] - (ph_0_1[cse_var_1] - compute_2[cse_var_1])) * ph_0_1[cse_var_1]