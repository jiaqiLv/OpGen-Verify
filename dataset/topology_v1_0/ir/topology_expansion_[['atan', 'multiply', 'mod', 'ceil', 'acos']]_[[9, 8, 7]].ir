# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((9, 8, 7), "float32"), T_mod: T.Buffer((9, 8, 7), "float32"), compute: T.Buffer((9, 8, 7), "float32"), compute_1: T.Buffer((9, 8, 7), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        ph_0_1 = T.Buffer((504,), data=ph_0.data)
        for ax0_ax1_fused_ax2_fused in T.parallel(504):
            T_mod_1 = T.Buffer((504,), data=T_mod.data)
            T_mod_1[ax0_ax1_fused_ax2_fused] = T.truncmod(ph_0_1[ax0_ax1_fused_ax2_fused] * T.atan(ph_0_1[ax0_ax1_fused_ax2_fused]), ph_0_1[ax0_ax1_fused_ax2_fused])
        for i0_i1_fused_i2_fused in T.parallel(504):
            compute_2 = T.Buffer((504,), data=compute.data)
            compute_2[i0_i1_fused_i2_fused] = T.ceil(ph_0_1[i0_i1_fused_i2_fused])
        for i0 in T.parallel(9):
            for i1, i2 in T.grid(8, 7):
                cse_var_1: T.int32 = i0 * 56 + i1 * 7 + i2
                compute_2 = T.Buffer((504,), data=compute_1.data)
                compute_2[cse_var_1] = T.acos(ph_0_1[cse_var_1])