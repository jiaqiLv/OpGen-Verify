# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((1, 12, 13), "float32"), ph_3: T.Buffer((1, 12, 13), "float32"), T_add: T.Buffer((1, 12, 13), "float32"), T_divide: T.Buffer((1, 12, 13), "float32"), T_divide_1: T.Buffer((1, 12, 13), "float32"), compute: T.Buffer((1, 12, 13), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        ph_0_1 = T.Buffer((156,), data=ph_0.data)
        ph_3_1 = T.Buffer((156,), data=ph_3.data)
        for ax1, ax2 in T.grid(12, 13):
            cse_var_1: T.int32 = ax1 * 13 + ax2
            T_add_1 = T.Buffer((156,), data=T_add.data)
            T_add_1[cse_var_1] = ph_0_1[cse_var_1] + ph_3_1[cse_var_1]
        for ax0_ax1_fused_ax2_fused in T.parallel(156):
            T_divide_2 = T.Buffer((156,), data=T_divide.data)
            T_divide_2[ax0_ax1_fused_ax2_fused] = ph_0_1[ax0_ax1_fused_ax2_fused] / ph_3_1[ax0_ax1_fused_ax2_fused]
        for ax0_ax1_fused_ax2_fused in T.parallel(156):
            T_divide_2 = T.Buffer((156,), data=T_divide_1.data)
            T_divide_2[ax0_ax1_fused_ax2_fused] = T.sin(ph_0_1[ax0_ax1_fused_ax2_fused]) / ph_0_1[ax0_ax1_fused_ax2_fused]
        for i1, i2 in T.grid(12, 13):
            cse_var_2: T.int32 = i1 * 13 + i2
            compute_1 = T.Buffer((156,), data=compute.data)
            compute_1[cse_var_2] = T.exp(T.sin(ph_0_1[cse_var_2]))