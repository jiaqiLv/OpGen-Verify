# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((7, 20, 6), "float32"), compute: T.Buffer((7, 20, 6), "float32"), T_add: T.Buffer((7, 20, 6), "float32"), compute_1: T.Buffer((7, 20, 6), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        ph_0_1 = T.Buffer((840,), data=ph_0.data)
        for i0_i1_fused in T.parallel(140):
            for i2 in range(6):
                cse_var_1: T.int32 = i0_i1_fused * 6 + i2
                compute_2 = T.Buffer((840,), data=compute.data)
                compute_2[cse_var_1] = T.sin(ph_0_1[cse_var_1])
        for ax0 in T.parallel(7):
            for ax1, ax2 in T.grid(20, 6):
                cse_var_2: T.int32 = ax0 * 120 + ax1 * 6 + ax2
                T_add_1 = T.Buffer((840,), data=T_add.data)
                T_add_1[cse_var_2] = ph_0_1[cse_var_2] + T.asinh(ph_0_1[cse_var_2]) * ph_0_1[cse_var_2]
        for i0_i1_fused_i2_fused in T.parallel(840):
            compute_2 = T.Buffer((840,), data=compute_1.data)
            compute_2[i0_i1_fused_i2_fused] = T.asinh(T.atan(ph_0_1[i0_i1_fused_i2_fused]))