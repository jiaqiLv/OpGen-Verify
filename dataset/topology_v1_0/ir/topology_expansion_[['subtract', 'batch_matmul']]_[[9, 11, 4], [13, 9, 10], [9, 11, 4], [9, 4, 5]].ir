# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((9, 11, 4), "float32"), ph_3: T.Buffer((9, 11, 4), "float32"), ph_5: T.Buffer((9, 4, 5), "float32"), T_subtract: T.Buffer((9, 11, 4), "float32"), T_batch_matmul_NN: T.Buffer((9, 11, 5), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        auto_scheduler_layout_transform = T.allocate([180], "float32", "global")
        ph_0_1 = T.Buffer((396,), data=ph_0.data)
        for ax0_ax1_fused_ax2_fused in T.parallel(396):
            T_subtract_1 = T.Buffer((396,), data=T_subtract.data)
            ph_3_1 = T.Buffer((396,), data=ph_3.data)
            T_subtract_1[ax0_ax1_fused_ax2_fused] = ph_0_1[ax0_ax1_fused_ax2_fused] - ph_3_1[ax0_ax1_fused_ax2_fused]
        auto_scheduler_layout_transform_1 = T.Buffer((180,), data=auto_scheduler_layout_transform)
        for ax6, ax7, ax8 in T.grid(5, 4, 9):
            ph_5_1 = T.Buffer((180,), data=ph_5.data)
            auto_scheduler_layout_transform_1[ax6 * 36 + ax7 * 9 + ax8] = ph_5_1[ax8 * 20 + ax7 * 5 + ax6]
        T_batch_matmul_NN_1 = T.Buffer((495,), data=T_batch_matmul_NN.data)
        for i_outer_inner_init, j_outer_inner_init, b_inner_init in T.grid(11, 5, 9):
            T_batch_matmul_NN_1[b_inner_init * 55 + i_outer_inner_init * 5 + j_outer_inner_init] = T.float32(0)
        for i_outer_inner, j_outer_inner, k_inner, b_inner in T.grid(11, 5, 4, 9):
            cse_var_1: T.int32 = b_inner * 55 + i_outer_inner * 5 + j_outer_inner
            T_batch_matmul_NN_1[cse_var_1] = T_batch_matmul_NN_1[cse_var_1] + ph_0_1[b_inner * 44 + i_outer_inner * 4 + k_inner] * auto_scheduler_layout_transform_1[j_outer_inner * 36 + k_inner * 9 + b_inner]