# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((10, 4, 17), "float32"), compute: T.Buffer((10, 4, 17), "float32"), compute_1: T.Buffer((10, 4, 17), "float32"), compute_2: T.Buffer((10, 4, 17), "float32"), compute_3: T.Buffer((10, 4, 17), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        ph_0_1 = T.Buffer((680,), data=ph_0.data)
        for i0_i1_fused_i2_fused in T.parallel(680):
            compute_4 = T.Buffer((680,), data=compute.data)
            compute_4[i0_i1_fused_i2_fused] = T.acos(ph_0_1[i0_i1_fused_i2_fused])
        for i0_i1_fused_i2_fused in T.parallel(680):
            compute_4 = T.Buffer((680,), data=compute_1.data)
            compute_4[i0_i1_fused_i2_fused] = T.sin(T.acosh(ph_0_1[i0_i1_fused_i2_fused]))
        for i0_i1_fused_i2_fused in T.parallel(680):
            compute_4 = T.Buffer((680,), data=compute_2.data)
            compute_4[i0_i1_fused_i2_fused] = T.exp(ph_0_1[i0_i1_fused_i2_fused])
        for i0_i1_fused_i2_fused in T.parallel(680):
            compute_4 = T.Buffer((680,), data=compute_3.data)
            compute_4[i0_i1_fused_i2_fused] = T.exp(ph_0_1[i0_i1_fused_i2_fused])