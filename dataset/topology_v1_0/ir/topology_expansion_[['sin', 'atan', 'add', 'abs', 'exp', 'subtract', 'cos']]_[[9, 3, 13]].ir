# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((9, 3, 13), "float32"), compute: T.Buffer((9, 3, 13), "float32"), T_add: T.Buffer((9, 3, 13), "float32"), compute_1: T.Buffer((9, 3, 13), "float32"), T_subtract: T.Buffer((9, 3, 13), "float32"), compute_2: T.Buffer((9, 3, 13), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        compute_3 = T.allocate([351], "float32", "global")
        ph_0_1 = T.Buffer((351,), data=ph_0.data)
        for i0_i1_fused_i2_fused in T.parallel(351):
            compute_4 = T.Buffer((351,), data=compute.data)
            compute_4[i0_i1_fused_i2_fused] = T.sin(ph_0_1[i0_i1_fused_i2_fused])
        for ax0 in T.parallel(9):
            for ax1, ax2 in T.grid(3, 13):
                cse_var_1: T.int32 = ax0 * 39 + ax1 * 13 + ax2
                T_add_1 = T.Buffer((351,), data=T_add.data)
                T_add_1[cse_var_1] = T.atan(ph_0_1[cse_var_1]) + ph_0_1[cse_var_1]
        for i0_i1_fused_i2_fused in T.parallel(351):
            compute_4 = T.Buffer((351,), data=compute_1.data)
            compute_4[i0_i1_fused_i2_fused] = T.fabs(ph_0_1[i0_i1_fused_i2_fused])
        compute_4 = T.Buffer((351,), data=compute_3)
        for i0_i1_fused_i2_fused in T.parallel(351):
            compute_4[i0_i1_fused_i2_fused] = T.exp(ph_0_1[i0_i1_fused_i2_fused])
        for ax0_ax1_fused_ax2_fused in T.parallel(351):
            T_subtract_1 = T.Buffer((351,), data=T_subtract.data)
            T_subtract_1[ax0_ax1_fused_ax2_fused] = compute_4[ax0_ax1_fused_ax2_fused] - ph_0_1[ax0_ax1_fused_ax2_fused]
        for i0 in T.parallel(9):
            for i1, i2 in T.grid(3, 13):
                cse_var_2: T.int32 = i0 * 39 + i1 * 13 + i2
                compute_5 = T.Buffer((351,), data=compute_2.data)
                compute_5[cse_var_2] = T.cos(compute_4[cse_var_2])