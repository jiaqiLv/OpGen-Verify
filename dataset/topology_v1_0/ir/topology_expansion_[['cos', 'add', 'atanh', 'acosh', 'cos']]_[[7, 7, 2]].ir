# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((7, 7, 2), "float32"), compute: T.Buffer((7, 7, 2), "float32"), compute_1: T.Buffer((7, 7, 2), "float32"), compute_2: T.Buffer((7, 7, 2), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        ph_0_1 = T.Buffer((98,), data=ph_0.data)
        for i0_i1_fused in T.parallel(49):
            for i2 in range(2):
                cse_var_1: T.int32 = i0_i1_fused * 2 + i2
                compute_3 = T.Buffer((98,), data=compute.data)
                compute_3[cse_var_1] = T.atanh(ph_0_1[cse_var_1] + T.cos(ph_0_1[cse_var_1]))
        for i0 in T.parallel(7):
            for i1, i2 in T.grid(7, 2):
                cse_var_2: T.int32 = i0 * 14 + i1 * 2 + i2
                compute_3 = T.Buffer((98,), data=compute_1.data)
                compute_3[cse_var_2] = T.acosh(ph_0_1[cse_var_2])
        for i0_i1_fused_i2_fused in T.parallel(98):
            compute_3 = T.Buffer((98,), data=compute_2.data)
            compute_3[i0_i1_fused_i2_fused] = T.cos(ph_0_1[i0_i1_fused_i2_fused])