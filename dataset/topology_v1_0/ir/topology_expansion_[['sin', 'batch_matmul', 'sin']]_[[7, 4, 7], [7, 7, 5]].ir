# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((7, 4, 7), "float32"), ph_3: T.Buffer((7, 7, 5), "float32"), compute: T.Buffer((7, 4, 7), "float32"), T_batch_matmul_NN: T.Buffer((7, 4, 5), "float32"), compute_1: T.Buffer((7, 4, 7), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        auto_scheduler_layout_transform = T.allocate([245], "float32", "global")
        ph_0_1 = T.Buffer((196,), data=ph_0.data)
        for i0_i1_fused_i2_fused in T.parallel(196):
            compute_2 = T.Buffer((196,), data=compute.data)
            compute_2[i0_i1_fused_i2_fused] = T.sin(ph_0_1[i0_i1_fused_i2_fused])
        auto_scheduler_layout_transform_1 = T.Buffer((245,), data=auto_scheduler_layout_transform)
        for ax4, ax5, ax6 in T.grid(7, 7, 5):
            ph_3_1 = T.Buffer((245,), data=ph_3.data)
            auto_scheduler_layout_transform_1[ax4 * 35 + ax5 * 5 + ax6] = ph_3_1[ax5 * 35 + ax4 * 5 + ax6]
        for b_outer_outer_outer_i_outer_outer_outer_fused_j_outer_outer_outer_fused_b_outer_outer_inner_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused in T.parallel(2):
            T_batch_matmul_NN_1 = T.Buffer((140,), data=T_batch_matmul_NN.data)
            for b_outer_inner_init, j_outer_inner_init, i_inner_init in T.grid(7, 5, 2):
                T_batch_matmul_NN_1[b_outer_inner_init * 20 + b_outer_outer_outer_i_outer_outer_outer_fused_j_outer_outer_outer_fused_b_outer_outer_inner_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused * 10 + i_inner_init * 5 + j_outer_inner_init] = T.float32(0)
            for k_outer, b_outer_inner, j_outer_inner, i_inner in T.grid(7, 7, 5, 2):
                cse_var_1: T.int32 = b_outer_inner * 20 + b_outer_outer_outer_i_outer_outer_outer_fused_j_outer_outer_outer_fused_b_outer_outer_inner_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused * 10 + i_inner * 5 + j_outer_inner
                T_batch_matmul_NN_1[cse_var_1] = T_batch_matmul_NN_1[cse_var_1] + ph_0_1[b_outer_inner * 28 + b_outer_outer_outer_i_outer_outer_outer_fused_j_outer_outer_outer_fused_b_outer_outer_inner_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused * 14 + i_inner * 7 + k_outer] * auto_scheduler_layout_transform_1[k_outer * 35 + b_outer_inner * 5 + j_outer_inner]
        for i0_i1_fused_i2_fused in T.parallel(196):
            compute_2 = T.Buffer((196,), data=compute_1.data)
            compute_2[i0_i1_fused_i2_fused] = T.sin(ph_0_1[i0_i1_fused_i2_fused])