# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((19, 13, 5), "float32"), compute: T.Buffer((19, 13, 5), "float32"), compute_1: T.Buffer((19, 13, 5), "float32"), compute_2: T.Buffer((19, 13, 5), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        ph_0_1 = T.Buffer((1235,), data=ph_0.data)
        for i0_i1_fused_i2_fused in T.parallel(1235):
            compute_3 = T.Buffer((1235,), data=compute.data)
            compute_3[i0_i1_fused_i2_fused] = T.sin(ph_0_1[i0_i1_fused_i2_fused])
        for i0_i1_fused_i2_fused in T.parallel(1235):
            compute_3 = T.Buffer((1235,), data=compute_1.data)
            compute_3[i0_i1_fused_i2_fused] = T.sin(T.fabs(ph_0_1[i0_i1_fused_i2_fused]))
        for i0_i1_fused_i2_fused in T.parallel(1235):
            compute_3 = T.Buffer((1235,), data=compute_2.data)
            compute_3[i0_i1_fused_i2_fused] = T.fabs(T.truncmod(ph_0_1[i0_i1_fused_i2_fused], T.cos(ph_0_1[i0_i1_fused_i2_fused])))