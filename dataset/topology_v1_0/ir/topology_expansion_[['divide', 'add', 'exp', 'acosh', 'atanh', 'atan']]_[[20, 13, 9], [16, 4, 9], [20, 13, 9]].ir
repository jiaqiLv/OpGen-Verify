# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((20, 13, 9), "float32"), ph_3: T.Buffer((20, 13, 9), "float32"), T_add: T.Buffer((20, 13, 9), "float32"), compute: T.Buffer((20, 13, 9), "float32"), compute_1: T.Buffer((20, 13, 9), "float32"), compute_2: T.Buffer((20, 13, 9), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        compute_3 = T.allocate([2340], "float32", "global")
        compute_4 = T.Buffer((2340,), data=compute_3)
        ph_0_1 = T.Buffer((2340,), data=ph_0.data)
        for i0_i1_fused_i2_fused in T.parallel(2340):
            compute_4[i0_i1_fused_i2_fused] = T.exp(ph_0_1[i0_i1_fused_i2_fused])
        for i0_i1_fused_i2_fused in T.parallel(2340):
            compute_5 = T.Buffer((2340,), data=compute.data)
            compute_5[i0_i1_fused_i2_fused] = T.acosh(compute_4[i0_i1_fused_i2_fused])
        for i0_i1_fused_i2_fused in T.parallel(2340):
            compute_5 = T.Buffer((2340,), data=compute_1.data)
            compute_5[i0_i1_fused_i2_fused] = T.atanh(compute_4[i0_i1_fused_i2_fused])
        ph_3_1 = T.Buffer((2340,), data=ph_3.data)
        for ax0 in T.parallel(20):
            for ax1, ax2 in T.grid(13, 9):
                cse_var_1: T.int32 = ax0 * 117 + ax1 * 9 + ax2
                T_add_1 = T.Buffer((2340,), data=T_add.data)
                T_add_1[cse_var_1] = ph_0_1[cse_var_1] + ph_3_1[cse_var_1]
        for i0_i1_fused_i2_fused in T.parallel(2340):
            compute_5 = T.Buffer((2340,), data=compute_2.data)
            compute_5[i0_i1_fused_i2_fused] = T.atan(ph_0_1[i0_i1_fused_i2_fused] / ph_3_1[i0_i1_fused_i2_fused])