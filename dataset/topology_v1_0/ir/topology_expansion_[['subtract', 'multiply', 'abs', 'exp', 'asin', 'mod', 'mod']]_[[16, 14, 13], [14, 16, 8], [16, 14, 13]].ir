# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((16, 14, 13), "float32"), ph_3: T.Buffer((16, 14, 13), "float32"), T_multiply: T.Buffer((16, 14, 13), "float32"), compute: T.Buffer((16, 14, 13), "float32"), compute_1: T.Buffer((16, 14, 13), "float32"), T_mod: T.Buffer((16, 14, 13), "float32"), T_mod_1: T.Buffer((16, 14, 13), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        ph_0_1 = T.Buffer((2912,), data=ph_0.data)
        ph_3_1 = T.Buffer((2912,), data=ph_3.data)
        for ax0_ax1_fused_ax2_fused in T.parallel(2912):
            T_multiply_1 = T.Buffer((2912,), data=T_multiply.data)
            T_multiply_1[ax0_ax1_fused_ax2_fused] = ph_0_1[ax0_ax1_fused_ax2_fused] * ph_3_1[ax0_ax1_fused_ax2_fused]
        for i0 in T.parallel(16):
            for i1, i2 in T.grid(14, 13):
                cse_var_1: T.int32 = i0 * 182 + i1 * 13 + i2
                compute_2 = T.Buffer((2912,), data=compute.data)
                compute_2[cse_var_1] = T.exp(T.fabs(ph_0_1[cse_var_1]))
        for i0_i1_fused_i2_fused in T.parallel(2912):
            compute_2 = T.Buffer((2912,), data=compute_1.data)
            compute_2[i0_i1_fused_i2_fused] = T.asin(T.fabs(ph_0_1[i0_i1_fused_i2_fused]))
        for ax0_ax1_fused in T.parallel(224):
            for ax2 in range(13):
                cse_var_2: T.int32 = ax0_ax1_fused * 13 + ax2
                T_mod_2 = T.Buffer((2912,), data=T_mod.data)
                T_mod_2[cse_var_2] = T.truncmod(ph_0_1[cse_var_2] - ph_3_1[cse_var_2], ph_0_1[cse_var_2])
        for ax0_ax1_fused_ax2_fused in T.parallel(2912):
            T_mod_2 = T.Buffer((2912,), data=T_mod_1.data)
            T_mod_2[ax0_ax1_fused_ax2_fused] = T.truncmod(ph_0_1[ax0_ax1_fused_ax2_fused] - ph_3_1[ax0_ax1_fused_ax2_fused], ph_0_1[ax0_ax1_fused_ax2_fused])