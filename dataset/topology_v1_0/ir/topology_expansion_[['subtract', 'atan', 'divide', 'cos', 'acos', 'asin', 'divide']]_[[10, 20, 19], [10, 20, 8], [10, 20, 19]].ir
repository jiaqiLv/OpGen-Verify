# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((10, 20, 19), "float32"), ph_3: T.Buffer((10, 20, 19), "float32"), compute: T.Buffer((10, 20, 19), "float32"), compute_1: T.Buffer((10, 20, 19), "float32"), compute_2: T.Buffer((10, 20, 19), "float32"), T_divide: T.Buffer((10, 20, 19), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        ph_0_1 = T.Buffer((3800,), data=ph_0.data)
        for i0_i1_fused_i2_fused in T.parallel(3800):
            compute_3 = T.Buffer((3800,), data=compute.data)
            compute_3[i0_i1_fused_i2_fused] = T.cos(ph_0_1[i0_i1_fused_i2_fused] / T.atan(ph_0_1[i0_i1_fused_i2_fused]))
        for i0 in T.parallel(10):
            for i1, i2 in T.grid(20, 19):
                cse_var_1: T.int32 = i0 * 380 + i1 * 19 + i2
                compute_3 = T.Buffer((3800,), data=compute_1.data)
                compute_3[cse_var_1] = T.acos(ph_0_1[cse_var_1] / T.atan(ph_0_1[cse_var_1]))
        ph_3_1 = T.Buffer((3800,), data=ph_3.data)
        for i0_i1_fused in T.parallel(200):
            for i2 in range(19):
                cse_var_2: T.int32 = i0_i1_fused * 19 + i2
                compute_3 = T.Buffer((3800,), data=compute_2.data)
                compute_3[cse_var_2] = T.asin(ph_0_1[cse_var_2] - ph_3_1[cse_var_2])
        for ax0_ax1_fused_ax2_fused in T.parallel(3800):
            T_divide_1 = T.Buffer((3800,), data=T_divide.data)
            T_divide_1[ax0_ax1_fused_ax2_fused] = (ph_0_1[ax0_ax1_fused_ax2_fused] - ph_3_1[ax0_ax1_fused_ax2_fused]) / ph_0_1[ax0_ax1_fused_ax2_fused]