# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((1, 18, 5), "float32"), ph_3: T.Buffer((1, 18, 5), "float32"), compute: T.Buffer((1, 18, 5), "float32"), compute_1: T.Buffer((1, 18, 5), "float32"), T_subtract: T.Buffer((1, 18, 5), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        ph_0_1 = T.Buffer((90,), data=ph_0.data)
        ph_3_1 = T.Buffer((90,), data=ph_3.data)
        for i1, i2 in T.grid(18, 5):
            cse_var_1: T.int32 = i1 * 5 + i2
            compute_2 = T.Buffer((90,), data=compute.data)
            compute_2[cse_var_1] = T.acos(T.truncmod(ph_0_1[cse_var_1], ph_0_1[cse_var_1] / ph_3_1[cse_var_1]))
        for i1, i2 in T.grid(18, 5):
            cse_var_2: T.int32 = i1 * 5 + i2
            compute_2 = T.Buffer((90,), data=compute_1.data)
            compute_2[cse_var_2] = T.fabs(T.truncmod(ph_0_1[cse_var_2], ph_0_1[cse_var_2] / ph_3_1[cse_var_2]))
        for ax0_ax1_fused_ax2_fused in T.parallel(90):
            T_subtract_1 = T.Buffer((90,), data=T_subtract.data)
            T_subtract_1[ax0_ax1_fused_ax2_fused] = ph_0_1[ax0_ax1_fused_ax2_fused] * ph_3_1[ax0_ax1_fused_ax2_fused] - ph_0_1[ax0_ax1_fused_ax2_fused]