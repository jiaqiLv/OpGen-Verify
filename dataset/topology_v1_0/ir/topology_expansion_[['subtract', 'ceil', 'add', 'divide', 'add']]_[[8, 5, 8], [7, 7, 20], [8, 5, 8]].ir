# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((8, 5, 8), "float32"), ph_3: T.Buffer((8, 5, 8), "float32"), T_subtract: T.Buffer((8, 5, 8), "float32"), T_divide: T.Buffer((8, 5, 8), "float32"), T_add: T.Buffer((8, 5, 8), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        ph_0_1 = T.Buffer((320,), data=ph_0.data)
        for ax0_ax1_fused in T.parallel(40):
            for ax2 in range(8):
                cse_var_1: T.int32 = ax0_ax1_fused * 8 + ax2
                T_subtract_1 = T.Buffer((320,), data=T_subtract.data)
                ph_3_1 = T.Buffer((320,), data=ph_3.data)
                T_subtract_1[cse_var_1] = ph_0_1[cse_var_1] - ph_3_1[cse_var_1]
        for ax0_ax1_fused_ax2_fused in T.parallel(320):
            T_divide_1 = T.Buffer((320,), data=T_divide.data)
            T_divide_1[ax0_ax1_fused_ax2_fused] = (ph_0_1[ax0_ax1_fused_ax2_fused] + T.ceil(ph_0_1[ax0_ax1_fused_ax2_fused])) / ph_0_1[ax0_ax1_fused_ax2_fused]
        for ax0_ax1_fused_ax2_fused in T.parallel(320):
            T_add_1 = T.Buffer((320,), data=T_add.data)
            T_add_1[ax0_ax1_fused_ax2_fused] = ph_0_1[ax0_ax1_fused_ax2_fused] + T.ceil(ph_0_1[ax0_ax1_fused_ax2_fused]) + ph_0_1[ax0_ax1_fused_ax2_fused]