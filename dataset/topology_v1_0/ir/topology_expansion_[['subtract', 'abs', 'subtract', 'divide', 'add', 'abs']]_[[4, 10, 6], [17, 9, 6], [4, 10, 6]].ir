# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((4, 10, 6), "float32"), ph_3: T.Buffer((4, 10, 6), "float32"), T_divide: T.Buffer((4, 10, 6), "float32"), T_add: T.Buffer((4, 10, 6), "float32"), compute: T.Buffer((4, 10, 6), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        ph_0_1 = T.Buffer((240,), data=ph_0.data)
        for ax0 in T.parallel(4):
            for ax1, ax2 in T.grid(10, 6):
                cse_var_1: T.int32 = ax0 * 60 + ax1 * 6 + ax2
                T_divide_1 = T.Buffer((240,), data=T_divide.data)
                T_divide_1[cse_var_1] = (ph_0_1[cse_var_1] - T.fabs(ph_0_1[cse_var_1])) / ph_0_1[cse_var_1]
        for ax0_ax1_fused_ax2_fused in T.parallel(240):
            T_add_1 = T.Buffer((240,), data=T_add.data)
            T_add_1[ax0_ax1_fused_ax2_fused] = ph_0_1[ax0_ax1_fused_ax2_fused] - T.fabs(ph_0_1[ax0_ax1_fused_ax2_fused]) + ph_0_1[ax0_ax1_fused_ax2_fused]
        for i0_i1_fused_i2_fused in T.parallel(240):
            compute_1 = T.Buffer((240,), data=compute.data)
            ph_3_1 = T.Buffer((240,), data=ph_3.data)
            compute_1[i0_i1_fused_i2_fused] = T.fabs(ph_0_1[i0_i1_fused_i2_fused] - ph_3_1[i0_i1_fused_i2_fused])