# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((16, 8, 17), "float32"), compute: T.Buffer((16, 8, 17), "float32"), T_mod: T.Buffer((16, 8, 17), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        ph_0_1 = T.Buffer((2176,), data=ph_0.data)
        for i0_i1_fused_i2_fused in T.parallel(2176):
            compute_1 = T.Buffer((2176,), data=compute.data)
            compute_1[i0_i1_fused_i2_fused] = T.atan(ph_0_1[i0_i1_fused_i2_fused])
        for ax0 in T.parallel(16):
            compute_1 = T.allocate([17], "float32", "global")
            for ax1 in range(8):
                compute_2 = T.Buffer((17,), data=compute_1)
                for i2 in range(17):
                    compute_2[i2] = T.exp(ph_0_1[ax0 * 136 + ax1 * 17 + i2])
                for ax2 in range(17):
                    cse_var_1: T.int32 = ax0 * 136 + ax1 * 17 + ax2
                    T_mod_1 = T.Buffer((2176,), data=T_mod.data)
                    T_mod_1[cse_var_1] = T.truncmod(ph_0_1[cse_var_1], ph_0_1[cse_var_1] + compute_2[ax2] / ph_0_1[cse_var_1])