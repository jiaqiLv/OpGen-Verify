# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((6, 13, 16), "float32"), ph_3: T.Buffer((6, 13, 16), "float32"), ph_10: T.Buffer((6, 16, 5), "float32"), compute: T.Buffer((6, 13, 16), "float32"), T_add: T.Buffer((6, 13, 16), "float32"), compute_1: T.Buffer((6, 13, 16), "float32"), T_batch_matmul_NN: T.Buffer((6, 13, 5), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        auto_scheduler_layout_transform = T.allocate([480], "float32", "global")
        ph_0_1 = T.Buffer((1248,), data=ph_0.data)
        ph_3_1 = T.Buffer((1248,), data=ph_3.data)
        for i0_i1_fused_i2_fused in T.parallel(1248):
            compute_2 = T.Buffer((1248,), data=compute.data)
            compute_2[i0_i1_fused_i2_fused] = T.asinh(ph_0_1[i0_i1_fused_i2_fused] - ph_0_1[i0_i1_fused_i2_fused] / ph_3_1[i0_i1_fused_i2_fused])
        for ax0_ax1_fused_ax2_fused in T.parallel(1248):
            T_add_1 = T.Buffer((1248,), data=T_add.data)
            T_add_1[ax0_ax1_fused_ax2_fused] = ph_0_1[ax0_ax1_fused_ax2_fused] - ph_0_1[ax0_ax1_fused_ax2_fused] / ph_3_1[ax0_ax1_fused_ax2_fused] + ph_0_1[ax0_ax1_fused_ax2_fused]
        for i0_i1_fused_i2_fused in T.parallel(1248):
            compute_2 = T.Buffer((1248,), data=compute_1.data)
            compute_2[i0_i1_fused_i2_fused] = T.atanh(T.truncmod(ph_0_1[i0_i1_fused_i2_fused], ph_3_1[i0_i1_fused_i2_fused]))
        auto_scheduler_layout_transform_1 = T.Buffer((480,), data=auto_scheduler_layout_transform)
        for ax0_ax1_fused_ax2_fused in T.parallel(10):
            for ax4, ax5, ax7 in T.grid(4, 3, 4):
                ph_10_1 = T.Buffer((480,), data=ph_10.data)
                auto_scheduler_layout_transform_1[ax0_ax1_fused_ax2_fused * 48 + ax4 * 12 + ax5 * 4 + ax7] = ph_10_1[ax0_ax1_fused_ax2_fused % 2 * 240 + ax5 * 80 + ax4 * 20 + ax7 * 5 + ax0_ax1_fused_ax2_fused // 2]
        for b_outer_outer_outer_i_outer_outer_outer_fused_j_outer_outer_outer_fused_b_outer_outer_inner_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused in T.parallel(130):
            T_batch_matmul_NN_1 = T.Buffer((390,), data=T_batch_matmul_NN.data)
            for b_outer_inner_init in range(3):
                T_batch_matmul_NN_1[b_outer_outer_outer_i_outer_outer_outer_fused_j_outer_outer_outer_fused_b_outer_outer_inner_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused % 2 * 195 + b_outer_inner_init * 65 + b_outer_outer_outer_i_outer_outer_outer_fused_j_outer_outer_outer_fused_b_outer_outer_inner_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused // 2] = T.float32(0)
            for k_outer, b_outer_inner, k_inner in T.grid(4, 3, 4):
                cse_var_3: T.int32 = b_outer_outer_outer_i_outer_outer_outer_fused_j_outer_outer_outer_fused_b_outer_outer_inner_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused % 2
                cse_var_2: T.int32 = cse_var_3 * 195 + b_outer_inner * 65 + b_outer_outer_outer_i_outer_outer_outer_fused_j_outer_outer_outer_fused_b_outer_outer_inner_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused // 2
                cse_var_1: T.int32 = cse_var_3 * 624 + b_outer_inner * 208 + b_outer_outer_outer_i_outer_outer_outer_fused_j_outer_outer_outer_fused_b_outer_outer_inner_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused // 10 * 16 + k_outer * 4 + k_inner
                T_batch_matmul_NN_1[cse_var_2] = T_batch_matmul_NN_1[cse_var_2] + T.truncmod(ph_0_1[cse_var_1], ph_3_1[cse_var_1]) * auto_scheduler_layout_transform_1[b_outer_outer_outer_i_outer_outer_outer_fused_j_outer_outer_outer_fused_b_outer_outer_inner_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused % 10 * 48 + k_outer * 12 + b_outer_inner * 4 + k_inner]