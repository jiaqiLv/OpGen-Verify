# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((7, 19, 6), "float32"), compute: T.Buffer((7, 19, 6), "float32"), compute_1: T.Buffer((7, 19, 6), "float32"), T_subtract: T.Buffer((7, 19, 6), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        ph_0_1 = T.Buffer((798,), data=ph_0.data)
        for i0_i1_fused_i2_fused in T.parallel(798):
            compute_2 = T.Buffer((798,), data=compute.data)
            compute_2[i0_i1_fused_i2_fused] = T.acos(ph_0_1[i0_i1_fused_i2_fused])
        for i0_i1_fused_i2_fused in T.parallel(798):
            compute_2 = T.Buffer((798,), data=compute_1.data)
            compute_2[i0_i1_fused_i2_fused] = T.exp(T.fabs(ph_0_1[i0_i1_fused_i2_fused]))
        for ax0_ax1_fused in T.parallel(133):
            for ax2 in range(6):
                cse_var_1: T.int32 = ax0_ax1_fused * 6 + ax2
                T_subtract_1 = T.Buffer((798,), data=T_subtract.data)
                T_subtract_1[cse_var_1] = ph_0_1[cse_var_1] - T.acos(ph_0_1[cse_var_1])