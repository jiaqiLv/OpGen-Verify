# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((20, 19, 10), "float32"), ph_3: T.Buffer((20, 19, 10), "float32"), T_divide: T.Buffer((20, 19, 10), "float32"), T_mod: T.Buffer((20, 19, 10), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        ph_0_1 = T.Buffer((3800,), data=ph_0.data)
        ph_3_1 = T.Buffer((3800,), data=ph_3.data)
        for ax0 in T.parallel(20):
            for ax1, ax2 in T.grid(19, 10):
                cse_var_1: T.int32 = ax0 * 190 + ax1 * 10 + ax2
                T_divide_1 = T.Buffer((3800,), data=T_divide.data)
                T_divide_1[cse_var_1] = ph_0_1[cse_var_1] / ph_3_1[cse_var_1]
        for ax0_ax1_fused in T.parallel(380):
            for ax2 in range(10):
                cse_var_2: T.int32 = ax0_ax1_fused * 10 + ax2
                T_mod_1 = T.Buffer((3800,), data=T_mod.data)
                T_mod_1[cse_var_2] = T.truncmod(ph_0_1[cse_var_2] / T.truncmod(ph_0_1[cse_var_2], ph_3_1[cse_var_2]), ph_0_1[cse_var_2])