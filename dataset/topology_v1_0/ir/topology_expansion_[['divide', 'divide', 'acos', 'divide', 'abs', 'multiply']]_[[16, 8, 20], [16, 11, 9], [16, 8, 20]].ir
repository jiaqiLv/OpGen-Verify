# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((16, 8, 20), "float32"), ph_3: T.Buffer((16, 8, 20), "float32"), T_divide: T.Buffer((16, 8, 20), "float32"), T_divide_1: T.Buffer((16, 8, 20), "float32"), compute: T.Buffer((16, 8, 20), "float32"), T_multiply: T.Buffer((16, 8, 20), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        ph_0_1 = T.Buffer((2560,), data=ph_0.data)
        ph_3_1 = T.Buffer((2560,), data=ph_3.data)
        for ax0_ax1_fused_ax2_fused in T.parallel(2560):
            T_divide_2 = T.Buffer((2560,), data=T_divide.data)
            T_divide_2[ax0_ax1_fused_ax2_fused] = ph_0_1[ax0_ax1_fused_ax2_fused] / ph_3_1[ax0_ax1_fused_ax2_fused]
        for ax0_ax1_fused_ax2_fused in T.parallel(2560):
            T_divide_2 = T.Buffer((2560,), data=T_divide_1.data)
            T_divide_2[ax0_ax1_fused_ax2_fused] = T.acos(ph_0_1[ax0_ax1_fused_ax2_fused]) / ph_0_1[ax0_ax1_fused_ax2_fused]
        for i0_i1_fused_i2_fused in T.parallel(2560):
            compute_1 = T.Buffer((2560,), data=compute.data)
            compute_1[i0_i1_fused_i2_fused] = T.fabs(T.acos(ph_0_1[i0_i1_fused_i2_fused]))
        for ax0_ax1_fused_ax2_fused in T.parallel(2560):
            T_multiply_1 = T.Buffer((2560,), data=T_multiply.data)
            T_multiply_1[ax0_ax1_fused_ax2_fused] = ph_0_1[ax0_ax1_fused_ax2_fused] / ph_3_1[ax0_ax1_fused_ax2_fused] * ph_0_1[ax0_ax1_fused_ax2_fused]