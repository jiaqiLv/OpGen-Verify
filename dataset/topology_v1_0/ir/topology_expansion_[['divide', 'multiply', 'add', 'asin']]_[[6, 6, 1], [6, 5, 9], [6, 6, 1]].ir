# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((6, 6, 1), "float32"), ph_3: T.Buffer((6, 6, 1), "float32"), T_divide: T.Buffer((6, 6, 1), "float32"), compute: T.Buffer((6, 6, 1), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        ph_0_1 = T.Buffer((36,), data=ph_0.data)
        ph_3_1 = T.Buffer((36,), data=ph_3.data)
        for ax0 in T.parallel(6):
            for ax1 in range(6):
                cse_var_1: T.int32 = ax0 * 6 + ax1
                T_divide_1 = T.Buffer((36,), data=T_divide.data)
                T_divide_1[cse_var_1] = ph_0_1[cse_var_1] / ph_3_1[cse_var_1]
        for i0_i1_fused_i2_fused in T.parallel(36):
            compute_1 = T.Buffer((36,), data=compute.data)
            compute_1[i0_i1_fused_i2_fused] = T.asin(ph_0_1[i0_i1_fused_i2_fused] + ph_0_1[i0_i1_fused_i2_fused] * ph_3_1[i0_i1_fused_i2_fused])