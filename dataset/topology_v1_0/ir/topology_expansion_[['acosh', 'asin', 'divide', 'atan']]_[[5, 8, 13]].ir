# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((5, 8, 13), "float32"), compute: T.Buffer((5, 8, 13), "float32"), T_divide: T.Buffer((5, 8, 13), "float32"), compute_1: T.Buffer((5, 8, 13), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        ph_0_1 = T.Buffer((520,), data=ph_0.data)
        for i0_i1_fused_i2_fused in T.parallel(520):
            compute_2 = T.Buffer((520,), data=compute.data)
            compute_2[i0_i1_fused_i2_fused] = T.acosh(ph_0_1[i0_i1_fused_i2_fused])
        for ax0_ax1_fused in T.parallel(40):
            for ax2 in range(13):
                cse_var_1: T.int32 = ax0_ax1_fused * 13 + ax2
                T_divide_1 = T.Buffer((520,), data=T_divide.data)
                T_divide_1[cse_var_1] = T.asin(ph_0_1[cse_var_1]) / ph_0_1[cse_var_1]
        for i0_i1_fused_i2_fused in T.parallel(520):
            compute_2 = T.Buffer((520,), data=compute_1.data)
            compute_2[i0_i1_fused_i2_fused] = T.atan(ph_0_1[i0_i1_fused_i2_fused])