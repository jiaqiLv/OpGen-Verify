# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((16, 7, 10), "float32"), ph_3: T.Buffer((16, 7, 10), "float32"), compute: T.Buffer((16, 7, 10), "float32"), T_add: T.Buffer((16, 7, 10), "float32"), T_subtract: T.Buffer((16, 7, 10), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        compute_1 = T.allocate([1120], "float32", "global")
        compute_2 = T.Buffer((1120,), data=compute_1)
        ph_0_1 = T.Buffer((1120,), data=ph_0.data)
        for i0_i1_fused_i2_fused in T.parallel(1120):
            compute_2[i0_i1_fused_i2_fused] = T.exp(ph_0_1[i0_i1_fused_i2_fused])
        for i0 in T.parallel(16):
            for i1, i2 in T.grid(7, 10):
                cse_var_1: T.int32 = i0 * 70 + i1 * 10 + i2
                compute_3 = T.Buffer((1120,), data=compute.data)
                compute_3[cse_var_1] = T.acosh(T.truncmod(ph_0_1[cse_var_1], compute_2[cse_var_1]))
        for ax0 in T.parallel(16):
            for ax1, ax2 in T.grid(7, 10):
                cse_var_2: T.int32 = ax0 * 70 + ax1 * 10 + ax2
                T_add_1 = T.Buffer((1120,), data=T_add.data)
                T_add_1[cse_var_2] = T.truncmod(ph_0_1[cse_var_2], compute_2[cse_var_2]) + ph_0_1[cse_var_2]
        for ax0_ax1_fused_ax2_fused in T.parallel(1120):
            T_subtract_1 = T.Buffer((1120,), data=T_subtract.data)
            ph_3_1 = T.Buffer((1120,), data=ph_3.data)
            T_subtract_1[ax0_ax1_fused_ax2_fused] = ph_0_1[ax0_ax1_fused_ax2_fused] - ph_3_1[ax0_ax1_fused_ax2_fused] - ph_0_1[ax0_ax1_fused_ax2_fused]