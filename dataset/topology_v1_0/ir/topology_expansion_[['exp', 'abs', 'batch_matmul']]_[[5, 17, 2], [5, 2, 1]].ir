# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((5, 17, 2), "float32"), ph_4: T.Buffer((5, 2, 1), "float32"), compute: T.Buffer((5, 17, 2), "float32"), T_batch_matmul_NN: T.Buffer((5, 17, 1), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        auto_scheduler_layout_transform = T.allocate([10], "float32", "global")
        ph_0_1 = T.Buffer((170,), data=ph_0.data)
        for i0_i1_fused_i2_fused in T.parallel(170):
            compute_1 = T.Buffer((170,), data=compute.data)
            compute_1[i0_i1_fused_i2_fused] = T.exp(ph_0_1[i0_i1_fused_i2_fused])
        auto_scheduler_layout_transform_1 = T.Buffer((10,), data=auto_scheduler_layout_transform, align=32)
        for ax4, ax8 in T.grid(2, 5):
            ph_4_1 = T.Buffer((10,), data=ph_4.data)
            auto_scheduler_layout_transform_1[ax4 * 5 + ax8] = ph_4_1[ax8 * 2 + ax4]
        T_batch_matmul_NN_1 = T.Buffer((85,), data=T_batch_matmul_NN.data)
        for b_inner_init, i_inner_init in T.grid(5, 17):
            T_batch_matmul_NN_1[b_inner_init * 17 + i_inner_init] = T.float32(0)
        for k_outer, b_inner, i_inner in T.grid(2, 5, 17):
            cse_var_1: T.int32 = b_inner * 17 + i_inner
            T_batch_matmul_NN_1[cse_var_1] = T_batch_matmul_NN_1[cse_var_1] + T.fabs(ph_0_1[b_inner * 34 + i_inner * 2 + k_outer]) * auto_scheduler_layout_transform_1[k_outer * 5 + b_inner]