# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((17, 8, 2), "float32"), compute: T.Buffer((17, 8, 2), "float32"), T_subtract: T.Buffer((17, 8, 2), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        compute_1 = T.allocate([272], "float32", "global")
        ph_0_1 = T.Buffer((272,), data=ph_0.data)
        for i0_i1_fused_i2_fused in T.parallel(272):
            compute_2 = T.Buffer((272,), data=compute.data)
            compute_2[i0_i1_fused_i2_fused] = T.asin(ph_0_1[i0_i1_fused_i2_fused])
        compute_2 = T.Buffer((272,), data=compute_1)
        for i0 in T.parallel(17):
            for i1, i2 in T.grid(8, 2):
                cse_var_1: T.int32 = i0 * 16 + i1 * 2 + i2
                compute_2[cse_var_1] = T.exp(ph_0_1[cse_var_1])
        for ax0_ax1_fused_ax2_fused in T.parallel(272):
            T_subtract_1 = T.Buffer((272,), data=T_subtract.data)
            T_subtract_1[ax0_ax1_fused_ax2_fused] = ph_0_1[ax0_ax1_fused_ax2_fused] - compute_2[ax0_ax1_fused_ax2_fused] / ph_0_1[ax0_ax1_fused_ax2_fused]