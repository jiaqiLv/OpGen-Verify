# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((19, 3, 12), "float32"), T_multiply: T.Buffer((19, 3, 12), "float32"), compute: T.Buffer((19, 3, 12), "float32"), T_divide: T.Buffer((19, 3, 12), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        ph_0_1 = T.Buffer((684,), data=ph_0.data)
        for ax0_ax1_fused_ax2_fused in T.parallel(684):
            T_multiply_1 = T.Buffer((684,), data=T_multiply.data)
            T_multiply_1[ax0_ax1_fused_ax2_fused] = ph_0_1[ax0_ax1_fused_ax2_fused] * T.truncmod(ph_0_1[ax0_ax1_fused_ax2_fused] + T.acosh(ph_0_1[ax0_ax1_fused_ax2_fused]), ph_0_1[ax0_ax1_fused_ax2_fused])
        for i0_i1_fused_i2_fused in T.parallel(684):
            compute_1 = T.Buffer((684,), data=compute.data)
            compute_1[i0_i1_fused_i2_fused] = T.acosh(T.asinh(ph_0_1[i0_i1_fused_i2_fused]))
        for ax0_ax1_fused in T.parallel(57):
            for ax2 in range(12):
                cse_var_1: T.int32 = ax0_ax1_fused * 12 + ax2
                T_divide_1 = T.Buffer((684,), data=T_divide.data)
                T_divide_1[cse_var_1] = T.asinh(ph_0_1[cse_var_1]) / ph_0_1[cse_var_1]