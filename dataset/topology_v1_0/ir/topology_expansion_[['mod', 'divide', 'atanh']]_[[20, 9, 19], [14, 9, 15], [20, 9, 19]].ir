# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((20, 9, 19), "float32"), ph_3: T.Buffer((20, 9, 19), "float32"), T_mod: T.Buffer((20, 9, 19), "float32"), T_divide: T.Buffer((20, 9, 19), "float32"), compute: T.Buffer((20, 9, 19), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        ph_0_1 = T.Buffer((3420,), data=ph_0.data)
        ph_3_1 = T.Buffer((3420,), data=ph_3.data)
        for ax0_ax1_fused_ax2_fused in T.parallel(3420):
            T_mod_1 = T.Buffer((3420,), data=T_mod.data)
            T_mod_1[ax0_ax1_fused_ax2_fused] = T.truncmod(ph_0_1[ax0_ax1_fused_ax2_fused], ph_3_1[ax0_ax1_fused_ax2_fused])
        for ax0 in T.parallel(20):
            for ax1, ax2 in T.grid(9, 19):
                cse_var_1: T.int32 = ax0 * 171 + ax1 * 19 + ax2
                T_divide_1 = T.Buffer((3420,), data=T_divide.data)
                T_divide_1[cse_var_1] = ph_0_1[cse_var_1] / ph_3_1[cse_var_1]
        for i0_i1_fused_i2_fused in T.parallel(3420):
            compute_1 = T.Buffer((3420,), data=compute.data)
            compute_1[i0_i1_fused_i2_fused] = T.atanh(ph_0_1[i0_i1_fused_i2_fused])