; ModuleID = 'TVMMod'
source_filename = "TVMMod"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%0 = type { double }
%1 = type { i8*, %2, i32, %3, i64*, i64*, i64 }
%2 = type { i32, i32 }
%3 = type { i8, i8, i16 }

@__tvm_module_ctx = linkonce dllexport local_unnamed_addr global i8* null, align 8
@__TVMFuncCall = linkonce dllexport local_unnamed_addr global i32 (i8*, %0*, i32*, i32, %0*, i32*)* null, align 8
@__TVMBackendGetFuncFromEnv = linkonce dllexport local_unnamed_addr global i32 (i8*, i8*, i8**)* null, align 8
@__TVMAPISetLastError = linkonce dllexport local_unnamed_addr global void (i8*)* null, align 8
@.str = private constant [67 x i8] c"Assert fail: num_args == 7, default_function: num_args should be 7\00", align 1
@.str.1 = private constant [130 x i8] c"Assert fail: ph_0_code == 3 or ph_0_code == 13 or ph_0_code == 7 or ph_0_code == 4, default_function: Expect arg[0] to be pointer\00", align 1
@.str.2 = private constant [130 x i8] c"Assert fail: ph_3_code == 3 or ph_3_code == 13 or ph_3_code == 7 or ph_3_code == 4, default_function: Expect arg[1] to be pointer\00", align 1
@.str.3 = private constant [142 x i8] c"Assert fail: compute_code == 3 or compute_code == 13 or compute_code == 7 or compute_code == 4, default_function: Expect arg[2] to be pointer\00", align 1
@.str.4 = private constant [142 x i8] c"Assert fail: compute_code == 3 or compute_code == 13 or compute_code == 7 or compute_code == 4, default_function: Expect arg[3] to be pointer\00", align 1
@.str.5 = private constant [134 x i8] c"Assert fail: T_mod_code == 3 or T_mod_code == 13 or T_mod_code == 7 or T_mod_code == 4, default_function: Expect arg[4] to be pointer\00", align 1
@.str.6 = private constant [142 x i8] c"Assert fail: compute_code == 3 or compute_code == 13 or compute_code == 7 or compute_code == 4, default_function: Expect arg[5] to be pointer\00", align 1
@.str.7 = private constant [142 x i8] c"Assert fail: compute_code == 3 or compute_code == 13 or compute_code == 7 or compute_code == 4, default_function: Expect arg[6] to be pointer\00", align 1
@.str.8 = private constant [107 x i8] c"Assert fail: 3 == T.tvm_struct_get(ph_0, 0, 4, \22int32\22), default_function.ph_0.ndim is expected to equal 3\00", align 1
@.str.9 = private constant [235 x i8] c"Assert fail: T.tvm_struct_get(ph_0, 0, 5, \22uint8\22) == T.uint8(2) and T.tvm_struct_get(ph_0, 0, 6, \22uint8\22) == T.uint8(32) and T.tvm_struct_get(ph_0, 0, 7, \22uint16\22) == T.uint16(1), default_function.ph_0.dtype is expected to be float32\00", align 1
@.str.10 = private constant [191 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_0_shape[0]) == 5, Argument default_function.ph_0.shape[0] has an unsatisfied constraint: 5 == T.Cast(\22int32\22, default_function_ph_0_shape[0])\00", align 1
@.str.11 = private constant [193 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_0_shape[1]) == 13, Argument default_function.ph_0.shape[1] has an unsatisfied constraint: 13 == T.Cast(\22int32\22, default_function_ph_0_shape[1])\00", align 1
@.str.12 = private constant [193 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_0_shape[2]) == 14, Argument default_function.ph_0.shape[2] has an unsatisfied constraint: 14 == T.Cast(\22int32\22, default_function_ph_0_shape[2])\00", align 1
@.str.13 = private constant [250 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_ph_0_strides[2]) and 14 == T.Cast(\22int32\22, default_function_ph_0_strides[1]) and 182 == T.Cast(\22int32\22, default_function_ph_0_strides[0]), default_function.ph_0.strides: expected to be compact array\00", align 1
@.str.14 = private constant [196 x i8] c"Assert fail: T.uint64(0) == T.tvm_struct_get(ph_0, 0, 8, \22uint64\22), Argument default_function.ph_0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(ph_0, 0, 8, \22uint64\22)\00", align 1
@.str.15 = private constant [176 x i8] c"Assert fail: T.tvm_struct_get(ph_0, 0, 10, \22int32\22) == 1, Argument default_function.ph_0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(ph_0, 0, 10, \22int32\22)\00", align 1
@.str.16 = private constant [107 x i8] c"Assert fail: 3 == T.tvm_struct_get(ph_3, 0, 4, \22int32\22), default_function.ph_3.ndim is expected to equal 3\00", align 1
@.str.17 = private constant [235 x i8] c"Assert fail: T.tvm_struct_get(ph_3, 0, 5, \22uint8\22) == T.uint8(2) and T.tvm_struct_get(ph_3, 0, 6, \22uint8\22) == T.uint8(32) and T.tvm_struct_get(ph_3, 0, 7, \22uint16\22) == T.uint16(1), default_function.ph_3.dtype is expected to be float32\00", align 1
@.str.18 = private constant [191 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_3_shape[0]) == 5, Argument default_function.ph_3.shape[0] has an unsatisfied constraint: 5 == T.Cast(\22int32\22, default_function_ph_3_shape[0])\00", align 1
@.str.19 = private constant [193 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_3_shape[1]) == 13, Argument default_function.ph_3.shape[1] has an unsatisfied constraint: 13 == T.Cast(\22int32\22, default_function_ph_3_shape[1])\00", align 1
@.str.20 = private constant [193 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_3_shape[2]) == 14, Argument default_function.ph_3.shape[2] has an unsatisfied constraint: 14 == T.Cast(\22int32\22, default_function_ph_3_shape[2])\00", align 1
@.str.21 = private constant [250 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_ph_3_strides[2]) and 14 == T.Cast(\22int32\22, default_function_ph_3_strides[1]) and 182 == T.Cast(\22int32\22, default_function_ph_3_strides[0]), default_function.ph_3.strides: expected to be compact array\00", align 1
@.str.22 = private constant [196 x i8] c"Assert fail: T.uint64(0) == T.tvm_struct_get(ph_3, 0, 8, \22uint64\22), Argument default_function.ph_3.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(ph_3, 0, 8, \22uint64\22)\00", align 1
@.str.23 = private constant [176 x i8] c"Assert fail: T.tvm_struct_get(ph_3, 0, 10, \22int32\22) == 1, Argument default_function.ph_3.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(ph_3, 0, 10, \22int32\22)\00", align 1
@.str.24 = private constant [182 x i8] c"Assert fail: dev_id == T.tvm_struct_get(ph_3, 0, 9, \22int32\22), Argument default_function.ph_3.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(ph_3, 0, 9, \22int32\22)\00", align 1
@.str.25 = private constant [113 x i8] c"Assert fail: 3 == T.tvm_struct_get(compute, 0, 4, \22int32\22), default_function.compute.ndim is expected to equal 3\00", align 1
@.str.26 = private constant [247 x i8] c"Assert fail: T.tvm_struct_get(compute, 0, 5, \22uint8\22) == T.uint8(2) and T.tvm_struct_get(compute, 0, 6, \22uint8\22) == T.uint8(32) and T.tvm_struct_get(compute, 0, 7, \22uint16\22) == T.uint16(1), default_function.compute.dtype is expected to be float32\00", align 1
@.str.27 = private constant [200 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_compute_shape[0]) == 5, Argument default_function.compute.shape[0] has an unsatisfied constraint: 5 == T.Cast(\22int32\22, default_function_compute_shape[0])\00", align 1
@.str.28 = private constant [202 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_compute_shape[1]) == 13, Argument default_function.compute.shape[1] has an unsatisfied constraint: 13 == T.Cast(\22int32\22, default_function_compute_shape[1])\00", align 1
@.str.29 = private constant [202 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_compute_shape[2]) == 14, Argument default_function.compute.shape[2] has an unsatisfied constraint: 14 == T.Cast(\22int32\22, default_function_compute_shape[2])\00", align 1
@.str.30 = private constant [262 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_compute_strides[2]) and 14 == T.Cast(\22int32\22, default_function_compute_strides[1]) and 182 == T.Cast(\22int32\22, default_function_compute_strides[0]), default_function.compute.strides: expected to be compact array\00", align 1
@.str.31 = private constant [205 x i8] c"Assert fail: T.uint64(0) == T.tvm_struct_get(compute, 0, 8, \22uint64\22), Argument default_function.compute.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(compute, 0, 8, \22uint64\22)\00", align 1
@.str.32 = private constant [185 x i8] c"Assert fail: T.tvm_struct_get(compute, 0, 10, \22int32\22) == 1, Argument default_function.compute.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(compute, 0, 10, \22int32\22)\00", align 1
@.str.33 = private constant [191 x i8] c"Assert fail: dev_id == T.tvm_struct_get(compute, 0, 9, \22int32\22), Argument default_function.compute.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(compute, 0, 9, \22int32\22)\00", align 1
@.str.34 = private constant [109 x i8] c"Assert fail: 3 == T.tvm_struct_get(T_mod, 0, 4, \22int32\22), default_function.T_mod.ndim is expected to equal 3\00", align 1
@.str.35 = private constant [239 x i8] c"Assert fail: T.tvm_struct_get(T_mod, 0, 5, \22uint8\22) == T.uint8(2) and T.tvm_struct_get(T_mod, 0, 6, \22uint8\22) == T.uint8(32) and T.tvm_struct_get(T_mod, 0, 7, \22uint16\22) == T.uint16(1), default_function.T_mod.dtype is expected to be float32\00", align 1
@.str.36 = private constant [194 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_T_mod_shape[0]) == 5, Argument default_function.T_mod.shape[0] has an unsatisfied constraint: 5 == T.Cast(\22int32\22, default_function_T_mod_shape[0])\00", align 1
@.str.37 = private constant [196 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_T_mod_shape[1]) == 13, Argument default_function.T_mod.shape[1] has an unsatisfied constraint: 13 == T.Cast(\22int32\22, default_function_T_mod_shape[1])\00", align 1
@.str.38 = private constant [196 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_T_mod_shape[2]) == 14, Argument default_function.T_mod.shape[2] has an unsatisfied constraint: 14 == T.Cast(\22int32\22, default_function_T_mod_shape[2])\00", align 1
@.str.39 = private constant [254 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_T_mod_strides[2]) and 14 == T.Cast(\22int32\22, default_function_T_mod_strides[1]) and 182 == T.Cast(\22int32\22, default_function_T_mod_strides[0]), default_function.T_mod.strides: expected to be compact array\00", align 1
@.str.40 = private constant [199 x i8] c"Assert fail: T.uint64(0) == T.tvm_struct_get(T_mod, 0, 8, \22uint64\22), Argument default_function.T_mod.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_mod, 0, 8, \22uint64\22)\00", align 1
@.str.41 = private constant [179 x i8] c"Assert fail: T.tvm_struct_get(T_mod, 0, 10, \22int32\22) == 1, Argument default_function.T_mod.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_mod, 0, 10, \22int32\22)\00", align 1
@.str.42 = private constant [185 x i8] c"Assert fail: dev_id == T.tvm_struct_get(T_mod, 0, 9, \22int32\22), Argument default_function.T_mod.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_mod, 0, 9, \22int32\22)\00", align 1
@.tvm_func.default_function_kernel = internal unnamed_addr global i8* null, align 8
@.str.43 = private constant [24 x i8] c"default_function_kernel\00", align 1
@.str.44 = private constant [68 x i8] c"Assert fail: kernel_error_code == 0, Error executing compute kernel\00", align 1
@__tvm_main__ = weak dllexport local_unnamed_addr constant [17 x i8] c"default_function\00", align 1
@llvm.global_ctors = appending global [0 x { i32, void ()*, i8* }] zeroinitializer

define dllexport i32 @default_function(i8* noalias nocapture readonly %args, i32* noalias nocapture readonly %arg_type_ids, i32 %num_args, i8* noalias nocapture readnone %out_ret_value, i32* noalias nocapture readnone %out_ret_tcode, i8* noalias nocapture readnone %resource_handle) local_unnamed_addr #0 !dbg !5 {
entry:
  call void @llvm.dbg.value(metadata i8* %args, metadata !12, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i32* %arg_type_ids, metadata !13, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i32 %num_args, metadata !14, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i8* %out_ret_value, metadata !15, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i32* %out_ret_tcode, metadata !16, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i8* %resource_handle, metadata !17, metadata !DIExpression()), !dbg !18
  %stack_value_void_ptr212 = alloca [8 x %0], align 8, !dbg !18
  %stack_tcode213 = alloca [8 x i32], align 4, !dbg !18
  %stack_tcode213.sub = getelementptr inbounds [8 x i32], [8 x i32]* %stack_tcode213, i64 0, i64 0
  %stack_value = bitcast [8 x %0]* %stack_value_void_ptr212 to i8*, !dbg !18
  %0 = icmp eq i32 %num_args, 7, !dbg !18
  br i1 %0, label %assert_end, label %assert_fail, !dbg !18, !prof !19

assert_fail:                                      ; preds = %entry
  %1 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %1(i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end:                                       ; preds = %entry
  %ph_0.code = load i32, i32* %arg_type_ids, align 4, !dbg !18, !tbaa !23
  %2 = getelementptr inbounds i32, i32* %arg_type_ids, i64 1, !dbg !18
  %ph_3.code = load i32, i32* %2, align 4, !dbg !18, !tbaa !34
  %3 = getelementptr inbounds i32, i32* %arg_type_ids, i64 2, !dbg !18
  %compute.code = load i32, i32* %3, align 4, !dbg !18, !tbaa !36
  %4 = getelementptr inbounds i32, i32* %arg_type_ids, i64 3, !dbg !18
  %compute.code1 = load i32, i32* %4, align 4, !dbg !18, !tbaa !39
  %5 = getelementptr inbounds i32, i32* %arg_type_ids, i64 4, !dbg !18
  %T_mod.code = load i32, i32* %5, align 4, !dbg !18, !tbaa !41
  %6 = getelementptr inbounds i32, i32* %arg_type_ids, i64 5, !dbg !18
  %compute.code2 = load i32, i32* %6, align 4, !dbg !18, !tbaa !45
  %7 = getelementptr inbounds i32, i32* %arg_type_ids, i64 6, !dbg !18
  %compute.code3 = load i32, i32* %7, align 4, !dbg !18, !tbaa !47
  %8 = bitcast i8* %args to %1**, !dbg !18
  %ph_0214 = load %1*, %1** %8, align 8, !dbg !18
  %9 = getelementptr inbounds i8, i8* %args, i64 8, !dbg !18
  %10 = bitcast i8* %9 to %1**, !dbg !18
  %ph_3215 = load %1*, %1** %10, align 8, !dbg !18
  %11 = getelementptr inbounds i8, i8* %args, i64 16, !dbg !18
  %12 = bitcast i8* %11 to %1**, !dbg !18
  %compute216 = load %1*, %1** %12, align 8, !dbg !18
  %13 = getelementptr inbounds i8, i8* %args, i64 24, !dbg !18
  %14 = bitcast i8* %13 to %1**, !dbg !18
  %compute4217 = load %1*, %1** %14, align 8, !dbg !18
  %15 = getelementptr inbounds i8, i8* %args, i64 32, !dbg !18
  %16 = bitcast i8* %15 to %1**, !dbg !18
  %T_mod218 = load %1*, %1** %16, align 8, !dbg !18
  %17 = getelementptr inbounds i8, i8* %args, i64 40, !dbg !18
  %18 = bitcast i8* %17 to %1**, !dbg !18
  %compute5219 = load %1*, %1** %18, align 8, !dbg !18
  %19 = getelementptr inbounds i8, i8* %args, i64 48, !dbg !18
  %20 = bitcast i8* %19 to %1**, !dbg !18
  %compute6220 = load %1*, %1** %20, align 8, !dbg !18
  %21 = bitcast %1* %ph_0214 to float**, !dbg !18
  %ph_0_void_ptr221 = load float*, float** %21, align 8, !dbg !18
  %ptrint = ptrtoint float* %ph_0_void_ptr221 to i64, !dbg !18
  %maskedptr = and i64 %ptrint, 63, !dbg !18
  %maskcond = icmp eq i64 %maskedptr, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond), !dbg !18
  %22 = getelementptr inbounds %1, %1* %ph_0214, i64 0, i32 4, !dbg !18
  %default_function.ph_0.shape = load i64*, i64** %22, align 8, !dbg !18
  %23 = getelementptr inbounds %1, %1* %ph_0214, i64 0, i32 5, !dbg !18
  %default_function.ph_0.strides = load i64*, i64** %23, align 8, !dbg !18
  %24 = getelementptr inbounds %1, %1* %ph_0214, i64 0, i32 1, i32 1, !dbg !18
  %dev_id = load i32, i32* %24, align 4, !dbg !18
  %25 = bitcast %1* %ph_3215 to float**, !dbg !18
  %ph_3_void_ptr222 = load float*, float** %25, align 8, !dbg !18
  %ptrint9 = ptrtoint float* %ph_3_void_ptr222 to i64, !dbg !18
  %maskedptr10 = and i64 %ptrint9, 63, !dbg !18
  %maskcond11 = icmp eq i64 %maskedptr10, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond11), !dbg !18
  %26 = getelementptr inbounds %1, %1* %ph_3215, i64 0, i32 4, !dbg !18
  %default_function.ph_3.shape = load i64*, i64** %26, align 8, !dbg !18
  %27 = getelementptr inbounds %1, %1* %ph_3215, i64 0, i32 5, !dbg !18
  %default_function.ph_3.strides = load i64*, i64** %27, align 8, !dbg !18
  %28 = bitcast %1* %compute216 to float**, !dbg !18
  %compute_void_ptr223 = load float*, float** %28, align 8, !dbg !18
  %ptrint13 = ptrtoint float* %compute_void_ptr223 to i64, !dbg !18
  %maskedptr14 = and i64 %ptrint13, 63, !dbg !18
  %maskcond15 = icmp eq i64 %maskedptr14, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond15), !dbg !18
  %29 = getelementptr inbounds %1, %1* %compute216, i64 0, i32 4, !dbg !18
  %default_function.compute.shape = load i64*, i64** %29, align 8, !dbg !18
  %30 = getelementptr inbounds %1, %1* %compute216, i64 0, i32 5, !dbg !18
  %default_function.compute.strides = load i64*, i64** %30, align 8, !dbg !18
  %31 = bitcast %1* %compute4217 to float**, !dbg !18
  %compute_void_ptr16224 = load float*, float** %31, align 8, !dbg !18
  %ptrint18 = ptrtoint float* %compute_void_ptr16224 to i64, !dbg !18
  %maskedptr19 = and i64 %ptrint18, 63, !dbg !18
  %maskcond20 = icmp eq i64 %maskedptr19, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond20), !dbg !18
  %32 = getelementptr inbounds %1, %1* %compute4217, i64 0, i32 4, !dbg !18
  %default_function.compute.shape21 = load i64*, i64** %32, align 8, !dbg !18
  %33 = getelementptr inbounds %1, %1* %compute4217, i64 0, i32 5, !dbg !18
  %default_function.compute.strides22 = load i64*, i64** %33, align 8, !dbg !18
  %34 = bitcast %1* %T_mod218 to float**, !dbg !18
  %T_mod_void_ptr225 = load float*, float** %34, align 8, !dbg !18
  %ptrint24 = ptrtoint float* %T_mod_void_ptr225 to i64, !dbg !18
  %maskedptr25 = and i64 %ptrint24, 63, !dbg !18
  %maskcond26 = icmp eq i64 %maskedptr25, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond26), !dbg !18
  %35 = getelementptr inbounds %1, %1* %T_mod218, i64 0, i32 4, !dbg !18
  %default_function.T_mod.shape = load i64*, i64** %35, align 8, !dbg !18
  %36 = getelementptr inbounds %1, %1* %T_mod218, i64 0, i32 5, !dbg !18
  %default_function.T_mod.strides = load i64*, i64** %36, align 8, !dbg !18
  %37 = bitcast %1* %compute5219 to float**, !dbg !18
  %compute_void_ptr27226 = load float*, float** %37, align 8, !dbg !18
  %ptrint29 = ptrtoint float* %compute_void_ptr27226 to i64, !dbg !18
  %maskedptr30 = and i64 %ptrint29, 63, !dbg !18
  %maskcond31 = icmp eq i64 %maskedptr30, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond31), !dbg !18
  %38 = getelementptr inbounds %1, %1* %compute5219, i64 0, i32 4, !dbg !18
  %default_function.compute.shape32 = load i64*, i64** %38, align 8, !dbg !18
  %39 = getelementptr inbounds %1, %1* %compute5219, i64 0, i32 5, !dbg !18
  %default_function.compute.strides33 = load i64*, i64** %39, align 8, !dbg !18
  %40 = bitcast %1* %compute6220 to float**, !dbg !18
  %compute_void_ptr34227 = load float*, float** %40, align 8, !dbg !18
  %ptrint36 = ptrtoint float* %compute_void_ptr34227 to i64, !dbg !18
  %maskedptr37 = and i64 %ptrint36, 63, !dbg !18
  %maskcond38 = icmp eq i64 %maskedptr37, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond38), !dbg !18
  %41 = getelementptr inbounds %1, %1* %compute6220, i64 0, i32 4, !dbg !18
  %default_function.compute.shape39 = load i64*, i64** %41, align 8, !dbg !18
  %42 = getelementptr inbounds %1, %1* %compute6220, i64 0, i32 5, !dbg !18
  %default_function.compute.strides40 = load i64*, i64** %42, align 8, !dbg !18
  switch i32 %ph_0.code, label %assert_fail41 [
    i32 13, label %assert_end42
    i32 7, label %assert_end42
    i32 4, label %assert_end42
    i32 3, label %assert_end42
  ], !dbg !18

assert_fail41:                                    ; preds = %assert_end
  %43 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %43(i8* getelementptr inbounds ([130 x i8], [130 x i8]* @.str.1, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end42:                                     ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  switch i32 %ph_3.code, label %assert_fail43 [
    i32 13, label %assert_end44
    i32 7, label %assert_end44
    i32 4, label %assert_end44
    i32 3, label %assert_end44
  ], !dbg !18

assert_fail43:                                    ; preds = %assert_end42
  %44 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %44(i8* getelementptr inbounds ([130 x i8], [130 x i8]* @.str.2, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end44:                                     ; preds = %assert_end42, %assert_end42, %assert_end42, %assert_end42
  switch i32 %compute.code, label %assert_fail45 [
    i32 13, label %assert_end46
    i32 7, label %assert_end46
    i32 4, label %assert_end46
    i32 3, label %assert_end46
  ], !dbg !18

assert_fail45:                                    ; preds = %assert_end44
  %45 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %45(i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.3, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end46:                                     ; preds = %assert_end44, %assert_end44, %assert_end44, %assert_end44
  switch i32 %compute.code1, label %assert_fail47 [
    i32 13, label %assert_end48
    i32 7, label %assert_end48
    i32 4, label %assert_end48
    i32 3, label %assert_end48
  ], !dbg !18

assert_fail47:                                    ; preds = %assert_end46
  %46 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %46(i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.4, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end48:                                     ; preds = %assert_end46, %assert_end46, %assert_end46, %assert_end46
  switch i32 %T_mod.code, label %assert_fail49 [
    i32 13, label %assert_end50
    i32 7, label %assert_end50
    i32 4, label %assert_end50
    i32 3, label %assert_end50
  ], !dbg !18

assert_fail49:                                    ; preds = %assert_end48
  %47 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %47(i8* getelementptr inbounds ([134 x i8], [134 x i8]* @.str.5, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end50:                                     ; preds = %assert_end48, %assert_end48, %assert_end48, %assert_end48
  switch i32 %compute.code2, label %assert_fail51 [
    i32 13, label %assert_end52
    i32 7, label %assert_end52
    i32 4, label %assert_end52
    i32 3, label %assert_end52
  ], !dbg !18

assert_fail51:                                    ; preds = %assert_end50
  %48 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %48(i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.6, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end52:                                     ; preds = %assert_end50, %assert_end50, %assert_end50, %assert_end50
  switch i32 %compute.code3, label %assert_fail53 [
    i32 13, label %assert_end54
    i32 7, label %assert_end54
    i32 4, label %assert_end54
    i32 3, label %assert_end54
  ], !dbg !18

assert_fail53:                                    ; preds = %assert_end52
  %49 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %49(i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.7, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end54:                                     ; preds = %assert_end52, %assert_end52, %assert_end52, %assert_end52
  %50 = getelementptr inbounds %1, %1* %ph_0214, i64 0, i32 2, !dbg !18
  %51 = load i32, i32* %50, align 4, !dbg !18
  %52 = icmp eq i32 %51, 3, !dbg !18
  br i1 %52, label %assert_end58, label %assert_fail55, !dbg !18, !prof !19

assert_fail55:                                    ; preds = %assert_end54
  %53 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %53(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.8, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end58:                                     ; preds = %assert_end54
  %54 = getelementptr inbounds %1, %1* %ph_0214, i64 0, i32 3, i32 2, !dbg !18
  %55 = load i16, i16* %54, align 2, !dbg !18
  %56 = icmp eq i16 %55, 1, !dbg !18
  %57 = getelementptr inbounds %1, %1* %ph_0214, i64 0, i32 3, i32 1, !dbg !18
  %58 = load i8, i8* %57, align 1, !dbg !18
  %59 = icmp eq i8 %58, 32, !dbg !18
  %60 = getelementptr inbounds %1, %1* %ph_0214, i64 0, i32 3, i32 0, !dbg !18
  %61 = load i8, i8* %60, align 1, !dbg !18
  %62 = icmp eq i8 %61, 2, !dbg !18
  %63 = and i1 %59, %62, !dbg !18
  %64 = and i1 %56, %63, !dbg !18
  br i1 %64, label %assert_end60, label %assert_fail59, !dbg !18, !prof !19

assert_fail59:                                    ; preds = %assert_end58
  %65 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %65(i8* getelementptr inbounds ([235 x i8], [235 x i8]* @.str.9, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end60:                                     ; preds = %assert_end58
  %66 = load i64, i64* %default_function.ph_0.shape, align 8, !dbg !18, !tbaa !50
  %67 = trunc i64 %66 to i32, !dbg !18
  %68 = icmp eq i32 %67, 5, !dbg !18
  br i1 %68, label %assert_end62, label %assert_fail61, !dbg !18, !prof !19

assert_fail61:                                    ; preds = %assert_end60
  %69 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %69(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.10, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end62:                                     ; preds = %assert_end60
  %70 = getelementptr inbounds i64, i64* %default_function.ph_0.shape, i64 1, !dbg !18
  %71 = load i64, i64* %70, align 8, !dbg !18, !tbaa !60
  %72 = trunc i64 %71 to i32, !dbg !18
  %73 = icmp eq i32 %72, 13, !dbg !18
  br i1 %73, label %assert_end64, label %assert_fail63, !dbg !18, !prof !19

assert_fail63:                                    ; preds = %assert_end62
  %74 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %74(i8* getelementptr inbounds ([193 x i8], [193 x i8]* @.str.11, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end64:                                     ; preds = %assert_end62
  %75 = getelementptr inbounds i64, i64* %default_function.ph_0.shape, i64 2, !dbg !18
  %76 = load i64, i64* %75, align 8, !dbg !18, !tbaa !62
  %77 = trunc i64 %76 to i32, !dbg !18
  %78 = icmp eq i32 %77, 14, !dbg !18
  br i1 %78, label %assert_end66, label %assert_fail65, !dbg !18, !prof !19

assert_fail65:                                    ; preds = %assert_end64
  %79 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %79(i8* getelementptr inbounds ([193 x i8], [193 x i8]* @.str.12, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end66:                                     ; preds = %assert_end64
  %80 = icmp eq i64* %default_function.ph_0.strides, null, !dbg !18
  br i1 %80, label %if_end, label %if_then, !dbg !18, !prof !65

if_then:                                          ; preds = %assert_end66
  %81 = load i64, i64* %default_function.ph_0.strides, align 8, !dbg !18, !tbaa !66
  %82 = trunc i64 %81 to i32, !dbg !18
  %83 = icmp eq i32 %82, 182, !dbg !18
  %84 = getelementptr inbounds i64, i64* %default_function.ph_0.strides, i64 1, !dbg !18
  %85 = load i64, i64* %84, align 8, !dbg !18, !tbaa !76
  %86 = trunc i64 %85 to i32, !dbg !18
  %87 = icmp eq i32 %86, 14, !dbg !18
  %88 = getelementptr inbounds i64, i64* %default_function.ph_0.strides, i64 2, !dbg !18
  %89 = load i64, i64* %88, align 8, !dbg !18, !tbaa !78
  %90 = trunc i64 %89 to i32, !dbg !18
  %91 = icmp eq i32 %90, 1, !dbg !18
  %92 = and i1 %87, %91, !dbg !18
  %93 = and i1 %83, %92, !dbg !18
  br i1 %93, label %if_end, label %assert_fail67, !dbg !18, !prof !19

if_end:                                           ; preds = %assert_end66, %if_then
  %94 = getelementptr inbounds %1, %1* %ph_0214, i64 0, i32 6, !dbg !18
  %95 = load i64, i64* %94, align 8, !dbg !18
  %96 = icmp eq i64 %95, 0, !dbg !18
  br i1 %96, label %assert_end70, label %assert_fail69, !dbg !18, !prof !19

assert_fail67:                                    ; preds = %if_then
  %97 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %97(i8* getelementptr inbounds ([250 x i8], [250 x i8]* @.str.13, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail69:                                    ; preds = %if_end
  %98 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %98(i8* getelementptr inbounds ([196 x i8], [196 x i8]* @.str.14, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end70:                                     ; preds = %if_end
  %99 = getelementptr inbounds %1, %1* %ph_0214, i64 0, i32 1, i32 0, !dbg !18
  %100 = load i32, i32* %99, align 4, !dbg !18
  %101 = icmp eq i32 %100, 1, !dbg !18
  br i1 %101, label %assert_end72, label %assert_fail71, !dbg !18, !prof !19

assert_fail71:                                    ; preds = %assert_end70
  %102 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %102(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.15, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end72:                                     ; preds = %assert_end70
  %103 = getelementptr inbounds %1, %1* %ph_3215, i64 0, i32 2, !dbg !18
  %104 = load i32, i32* %103, align 4, !dbg !18
  %105 = icmp eq i32 %104, 3, !dbg !18
  br i1 %105, label %assert_end76, label %assert_fail73, !dbg !18, !prof !19

assert_fail73:                                    ; preds = %assert_end72
  %106 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %106(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.16, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end76:                                     ; preds = %assert_end72
  %107 = getelementptr inbounds %1, %1* %ph_3215, i64 0, i32 3, i32 2, !dbg !18
  %108 = load i16, i16* %107, align 2, !dbg !18
  %109 = icmp eq i16 %108, 1, !dbg !18
  %110 = getelementptr inbounds %1, %1* %ph_3215, i64 0, i32 3, i32 1, !dbg !18
  %111 = load i8, i8* %110, align 1, !dbg !18
  %112 = icmp eq i8 %111, 32, !dbg !18
  %113 = getelementptr inbounds %1, %1* %ph_3215, i64 0, i32 3, i32 0, !dbg !18
  %114 = load i8, i8* %113, align 1, !dbg !18
  %115 = icmp eq i8 %114, 2, !dbg !18
  %116 = and i1 %112, %115, !dbg !18
  %117 = and i1 %109, %116, !dbg !18
  br i1 %117, label %assert_end78, label %assert_fail77, !dbg !18, !prof !19

assert_fail77:                                    ; preds = %assert_end76
  %118 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %118(i8* getelementptr inbounds ([235 x i8], [235 x i8]* @.str.17, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end78:                                     ; preds = %assert_end76
  %119 = load i64, i64* %default_function.ph_3.shape, align 8, !dbg !18, !tbaa !81
  %120 = trunc i64 %119 to i32, !dbg !18
  %121 = icmp eq i32 %120, 5, !dbg !18
  br i1 %121, label %assert_end80, label %assert_fail79, !dbg !18, !prof !19

assert_fail79:                                    ; preds = %assert_end78
  %122 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %122(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.18, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end80:                                     ; preds = %assert_end78
  %123 = getelementptr inbounds i64, i64* %default_function.ph_3.shape, i64 1, !dbg !18
  %124 = load i64, i64* %123, align 8, !dbg !18, !tbaa !91
  %125 = trunc i64 %124 to i32, !dbg !18
  %126 = icmp eq i32 %125, 13, !dbg !18
  br i1 %126, label %assert_end82, label %assert_fail81, !dbg !18, !prof !19

assert_fail81:                                    ; preds = %assert_end80
  %127 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %127(i8* getelementptr inbounds ([193 x i8], [193 x i8]* @.str.19, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end82:                                     ; preds = %assert_end80
  %128 = getelementptr inbounds i64, i64* %default_function.ph_3.shape, i64 2, !dbg !18
  %129 = load i64, i64* %128, align 8, !dbg !18, !tbaa !93
  %130 = trunc i64 %129 to i32, !dbg !18
  %131 = icmp eq i32 %130, 14, !dbg !18
  br i1 %131, label %assert_end84, label %assert_fail83, !dbg !18, !prof !19

assert_fail83:                                    ; preds = %assert_end82
  %132 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %132(i8* getelementptr inbounds ([193 x i8], [193 x i8]* @.str.20, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end84:                                     ; preds = %assert_end82
  %133 = icmp eq i64* %default_function.ph_3.strides, null, !dbg !18
  br i1 %133, label %if_end86, label %if_then85, !dbg !18, !prof !65

if_then85:                                        ; preds = %assert_end84
  %134 = load i64, i64* %default_function.ph_3.strides, align 8, !dbg !18, !tbaa !96
  %135 = trunc i64 %134 to i32, !dbg !18
  %136 = icmp eq i32 %135, 182, !dbg !18
  %137 = getelementptr inbounds i64, i64* %default_function.ph_3.strides, i64 1, !dbg !18
  %138 = load i64, i64* %137, align 8, !dbg !18, !tbaa !106
  %139 = trunc i64 %138 to i32, !dbg !18
  %140 = icmp eq i32 %139, 14, !dbg !18
  %141 = getelementptr inbounds i64, i64* %default_function.ph_3.strides, i64 2, !dbg !18
  %142 = load i64, i64* %141, align 8, !dbg !18, !tbaa !108
  %143 = trunc i64 %142 to i32, !dbg !18
  %144 = icmp eq i32 %143, 1, !dbg !18
  %145 = and i1 %140, %144, !dbg !18
  %146 = and i1 %136, %145, !dbg !18
  br i1 %146, label %if_end86, label %assert_fail87, !dbg !18, !prof !19

if_end86:                                         ; preds = %assert_end84, %if_then85
  %147 = getelementptr inbounds %1, %1* %ph_3215, i64 0, i32 6, !dbg !18
  %148 = load i64, i64* %147, align 8, !dbg !18
  %149 = icmp eq i64 %148, 0, !dbg !18
  br i1 %149, label %assert_end90, label %assert_fail89, !dbg !18, !prof !19

assert_fail87:                                    ; preds = %if_then85
  %150 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %150(i8* getelementptr inbounds ([250 x i8], [250 x i8]* @.str.21, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail89:                                    ; preds = %if_end86
  %151 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %151(i8* getelementptr inbounds ([196 x i8], [196 x i8]* @.str.22, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end90:                                     ; preds = %if_end86
  %152 = getelementptr inbounds %1, %1* %ph_3215, i64 0, i32 1, i32 0, !dbg !18
  %153 = load i32, i32* %152, align 4, !dbg !18
  %154 = icmp eq i32 %153, 1, !dbg !18
  br i1 %154, label %assert_end92, label %assert_fail91, !dbg !18, !prof !19

assert_fail91:                                    ; preds = %assert_end90
  %155 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %155(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.23, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end92:                                     ; preds = %assert_end90
  %156 = getelementptr inbounds %1, %1* %ph_3215, i64 0, i32 1, i32 1, !dbg !18
  %157 = load i32, i32* %156, align 4, !dbg !18
  %158 = icmp eq i32 %dev_id, %157, !dbg !18
  br i1 %158, label %assert_end94, label %assert_fail93, !dbg !18, !prof !19

assert_fail93:                                    ; preds = %assert_end92
  %159 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %159(i8* getelementptr inbounds ([182 x i8], [182 x i8]* @.str.24, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end94:                                     ; preds = %assert_end92
  %160 = getelementptr inbounds %1, %1* %compute216, i64 0, i32 2, !dbg !18
  %161 = load i32, i32* %160, align 4, !dbg !18
  %162 = icmp eq i32 %161, 3, !dbg !18
  br i1 %162, label %assert_end98, label %assert_fail95, !dbg !18, !prof !19

assert_fail95:                                    ; preds = %assert_end94
  %163 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %163(i8* getelementptr inbounds ([113 x i8], [113 x i8]* @.str.25, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end98:                                     ; preds = %assert_end94
  %164 = getelementptr inbounds %1, %1* %compute216, i64 0, i32 3, i32 2, !dbg !18
  %165 = load i16, i16* %164, align 2, !dbg !18
  %166 = icmp eq i16 %165, 1, !dbg !18
  %167 = getelementptr inbounds %1, %1* %compute216, i64 0, i32 3, i32 1, !dbg !18
  %168 = load i8, i8* %167, align 1, !dbg !18
  %169 = icmp eq i8 %168, 32, !dbg !18
  %170 = getelementptr inbounds %1, %1* %compute216, i64 0, i32 3, i32 0, !dbg !18
  %171 = load i8, i8* %170, align 1, !dbg !18
  %172 = icmp eq i8 %171, 2, !dbg !18
  %173 = and i1 %169, %172, !dbg !18
  %174 = and i1 %166, %173, !dbg !18
  br i1 %174, label %assert_end100, label %assert_fail99, !dbg !18, !prof !19

assert_fail99:                                    ; preds = %assert_end98
  %175 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %175(i8* getelementptr inbounds ([247 x i8], [247 x i8]* @.str.26, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end100:                                    ; preds = %assert_end98
  %176 = load i64, i64* %default_function.compute.shape, align 8, !dbg !18, !tbaa !111
  %177 = trunc i64 %176 to i32, !dbg !18
  %178 = icmp eq i32 %177, 5, !dbg !18
  br i1 %178, label %assert_end102, label %assert_fail101, !dbg !18, !prof !19

assert_fail101:                                   ; preds = %assert_end100
  %179 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %179(i8* getelementptr inbounds ([200 x i8], [200 x i8]* @.str.27, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end102:                                    ; preds = %assert_end100
  %180 = getelementptr inbounds i64, i64* %default_function.compute.shape, i64 1, !dbg !18
  %181 = load i64, i64* %180, align 8, !dbg !18, !tbaa !121
  %182 = trunc i64 %181 to i32, !dbg !18
  %183 = icmp eq i32 %182, 13, !dbg !18
  br i1 %183, label %assert_end104, label %assert_fail103, !dbg !18, !prof !19

assert_fail103:                                   ; preds = %assert_end102
  %184 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %184(i8* getelementptr inbounds ([202 x i8], [202 x i8]* @.str.28, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end104:                                    ; preds = %assert_end102
  %185 = getelementptr inbounds i64, i64* %default_function.compute.shape, i64 2, !dbg !18
  %186 = load i64, i64* %185, align 8, !dbg !18, !tbaa !123
  %187 = trunc i64 %186 to i32, !dbg !18
  %188 = icmp eq i32 %187, 14, !dbg !18
  br i1 %188, label %assert_end106, label %assert_fail105, !dbg !18, !prof !19

assert_fail105:                                   ; preds = %assert_end104
  %189 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %189(i8* getelementptr inbounds ([202 x i8], [202 x i8]* @.str.29, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end106:                                    ; preds = %assert_end104
  %190 = icmp eq i64* %default_function.compute.strides, null, !dbg !18
  br i1 %190, label %if_end108, label %if_then107, !dbg !18, !prof !65

if_then107:                                       ; preds = %assert_end106
  %191 = load i64, i64* %default_function.compute.strides, align 8, !dbg !18, !tbaa !126
  %192 = trunc i64 %191 to i32, !dbg !18
  %193 = icmp eq i32 %192, 182, !dbg !18
  %194 = getelementptr inbounds i64, i64* %default_function.compute.strides, i64 1, !dbg !18
  %195 = load i64, i64* %194, align 8, !dbg !18, !tbaa !136
  %196 = trunc i64 %195 to i32, !dbg !18
  %197 = icmp eq i32 %196, 14, !dbg !18
  %198 = getelementptr inbounds i64, i64* %default_function.compute.strides, i64 2, !dbg !18
  %199 = load i64, i64* %198, align 8, !dbg !18, !tbaa !138
  %200 = trunc i64 %199 to i32, !dbg !18
  %201 = icmp eq i32 %200, 1, !dbg !18
  %202 = and i1 %197, %201, !dbg !18
  %203 = and i1 %193, %202, !dbg !18
  br i1 %203, label %if_end108, label %assert_fail109, !dbg !18, !prof !19

if_end108:                                        ; preds = %assert_end106, %if_then107
  %204 = getelementptr inbounds %1, %1* %compute216, i64 0, i32 6, !dbg !18
  %205 = load i64, i64* %204, align 8, !dbg !18
  %206 = icmp eq i64 %205, 0, !dbg !18
  br i1 %206, label %assert_end112, label %assert_fail111, !dbg !18, !prof !19

assert_fail109:                                   ; preds = %if_then107
  %207 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %207(i8* getelementptr inbounds ([262 x i8], [262 x i8]* @.str.30, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail111:                                   ; preds = %if_end108
  %208 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %208(i8* getelementptr inbounds ([205 x i8], [205 x i8]* @.str.31, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end112:                                    ; preds = %if_end108
  %209 = getelementptr inbounds %1, %1* %compute216, i64 0, i32 1, i32 0, !dbg !18
  %210 = load i32, i32* %209, align 4, !dbg !18
  %211 = icmp eq i32 %210, 1, !dbg !18
  br i1 %211, label %assert_end114, label %assert_fail113, !dbg !18, !prof !19

assert_fail113:                                   ; preds = %assert_end112
  %212 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %212(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.32, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end114:                                    ; preds = %assert_end112
  %213 = getelementptr inbounds %1, %1* %compute216, i64 0, i32 1, i32 1, !dbg !18
  %214 = load i32, i32* %213, align 4, !dbg !18
  %215 = icmp eq i32 %dev_id, %214, !dbg !18
  br i1 %215, label %assert_end116, label %assert_fail115, !dbg !18, !prof !19

assert_fail115:                                   ; preds = %assert_end114
  %216 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %216(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.33, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end116:                                    ; preds = %assert_end114
  %217 = getelementptr inbounds %1, %1* %compute4217, i64 0, i32 2, !dbg !18
  %218 = load i32, i32* %217, align 4, !dbg !18
  %219 = icmp eq i32 %218, 3, !dbg !18
  br i1 %219, label %assert_end120, label %assert_fail117, !dbg !18, !prof !19

assert_fail117:                                   ; preds = %assert_end116
  %220 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %220(i8* getelementptr inbounds ([113 x i8], [113 x i8]* @.str.25, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end120:                                    ; preds = %assert_end116
  %221 = getelementptr inbounds %1, %1* %compute4217, i64 0, i32 3, i32 2, !dbg !18
  %222 = load i16, i16* %221, align 2, !dbg !18
  %223 = icmp eq i16 %222, 1, !dbg !18
  %224 = getelementptr inbounds %1, %1* %compute4217, i64 0, i32 3, i32 1, !dbg !18
  %225 = load i8, i8* %224, align 1, !dbg !18
  %226 = icmp eq i8 %225, 32, !dbg !18
  %227 = getelementptr inbounds %1, %1* %compute4217, i64 0, i32 3, i32 0, !dbg !18
  %228 = load i8, i8* %227, align 1, !dbg !18
  %229 = icmp eq i8 %228, 2, !dbg !18
  %230 = and i1 %226, %229, !dbg !18
  %231 = and i1 %223, %230, !dbg !18
  br i1 %231, label %assert_end122, label %assert_fail121, !dbg !18, !prof !19

assert_fail121:                                   ; preds = %assert_end120
  %232 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %232(i8* getelementptr inbounds ([247 x i8], [247 x i8]* @.str.26, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end122:                                    ; preds = %assert_end120
  %233 = load i64, i64* %default_function.compute.shape21, align 8, !dbg !18, !tbaa !141
  %234 = trunc i64 %233 to i32, !dbg !18
  %235 = icmp eq i32 %234, 5, !dbg !18
  br i1 %235, label %assert_end124, label %assert_fail123, !dbg !18, !prof !19

assert_fail123:                                   ; preds = %assert_end122
  %236 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %236(i8* getelementptr inbounds ([200 x i8], [200 x i8]* @.str.27, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end124:                                    ; preds = %assert_end122
  %237 = getelementptr inbounds i64, i64* %default_function.compute.shape21, i64 1, !dbg !18
  %238 = load i64, i64* %237, align 8, !dbg !18, !tbaa !151
  %239 = trunc i64 %238 to i32, !dbg !18
  %240 = icmp eq i32 %239, 13, !dbg !18
  br i1 %240, label %assert_end126, label %assert_fail125, !dbg !18, !prof !19

assert_fail125:                                   ; preds = %assert_end124
  %241 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %241(i8* getelementptr inbounds ([202 x i8], [202 x i8]* @.str.28, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end126:                                    ; preds = %assert_end124
  %242 = getelementptr inbounds i64, i64* %default_function.compute.shape21, i64 2, !dbg !18
  %243 = load i64, i64* %242, align 8, !dbg !18, !tbaa !153
  %244 = trunc i64 %243 to i32, !dbg !18
  %245 = icmp eq i32 %244, 14, !dbg !18
  br i1 %245, label %assert_end128, label %assert_fail127, !dbg !18, !prof !19

assert_fail127:                                   ; preds = %assert_end126
  %246 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %246(i8* getelementptr inbounds ([202 x i8], [202 x i8]* @.str.29, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end128:                                    ; preds = %assert_end126
  %247 = icmp eq i64* %default_function.compute.strides22, null, !dbg !18
  br i1 %247, label %if_end130, label %if_then129, !dbg !18, !prof !65

if_then129:                                       ; preds = %assert_end128
  %248 = load i64, i64* %default_function.compute.strides22, align 8, !dbg !18, !tbaa !156
  %249 = trunc i64 %248 to i32, !dbg !18
  %250 = icmp eq i32 %249, 182, !dbg !18
  %251 = getelementptr inbounds i64, i64* %default_function.compute.strides22, i64 1, !dbg !18
  %252 = load i64, i64* %251, align 8, !dbg !18, !tbaa !166
  %253 = trunc i64 %252 to i32, !dbg !18
  %254 = icmp eq i32 %253, 14, !dbg !18
  %255 = getelementptr inbounds i64, i64* %default_function.compute.strides22, i64 2, !dbg !18
  %256 = load i64, i64* %255, align 8, !dbg !18, !tbaa !168
  %257 = trunc i64 %256 to i32, !dbg !18
  %258 = icmp eq i32 %257, 1, !dbg !18
  %259 = and i1 %254, %258, !dbg !18
  %260 = and i1 %250, %259, !dbg !18
  br i1 %260, label %if_end130, label %assert_fail131, !dbg !18, !prof !19

if_end130:                                        ; preds = %assert_end128, %if_then129
  %261 = getelementptr inbounds %1, %1* %compute4217, i64 0, i32 6, !dbg !18
  %262 = load i64, i64* %261, align 8, !dbg !18
  %263 = icmp eq i64 %262, 0, !dbg !18
  br i1 %263, label %assert_end134, label %assert_fail133, !dbg !18, !prof !19

assert_fail131:                                   ; preds = %if_then129
  %264 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %264(i8* getelementptr inbounds ([262 x i8], [262 x i8]* @.str.30, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail133:                                   ; preds = %if_end130
  %265 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %265(i8* getelementptr inbounds ([205 x i8], [205 x i8]* @.str.31, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end134:                                    ; preds = %if_end130
  %266 = getelementptr inbounds %1, %1* %compute4217, i64 0, i32 1, i32 0, !dbg !18
  %267 = load i32, i32* %266, align 4, !dbg !18
  %268 = icmp eq i32 %267, 1, !dbg !18
  br i1 %268, label %assert_end136, label %assert_fail135, !dbg !18, !prof !19

assert_fail135:                                   ; preds = %assert_end134
  %269 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %269(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.32, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end136:                                    ; preds = %assert_end134
  %270 = getelementptr inbounds %1, %1* %compute4217, i64 0, i32 1, i32 1, !dbg !18
  %271 = load i32, i32* %270, align 4, !dbg !18
  %272 = icmp eq i32 %dev_id, %271, !dbg !18
  br i1 %272, label %assert_end138, label %assert_fail137, !dbg !18, !prof !19

assert_fail137:                                   ; preds = %assert_end136
  %273 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %273(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.33, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end138:                                    ; preds = %assert_end136
  %274 = getelementptr inbounds %1, %1* %T_mod218, i64 0, i32 2, !dbg !18
  %275 = load i32, i32* %274, align 4, !dbg !18
  %276 = icmp eq i32 %275, 3, !dbg !18
  br i1 %276, label %assert_end142, label %assert_fail139, !dbg !18, !prof !19

assert_fail139:                                   ; preds = %assert_end138
  %277 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %277(i8* getelementptr inbounds ([109 x i8], [109 x i8]* @.str.34, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end142:                                    ; preds = %assert_end138
  %278 = getelementptr inbounds %1, %1* %T_mod218, i64 0, i32 3, i32 2, !dbg !18
  %279 = load i16, i16* %278, align 2, !dbg !18
  %280 = icmp eq i16 %279, 1, !dbg !18
  %281 = getelementptr inbounds %1, %1* %T_mod218, i64 0, i32 3, i32 1, !dbg !18
  %282 = load i8, i8* %281, align 1, !dbg !18
  %283 = icmp eq i8 %282, 32, !dbg !18
  %284 = getelementptr inbounds %1, %1* %T_mod218, i64 0, i32 3, i32 0, !dbg !18
  %285 = load i8, i8* %284, align 1, !dbg !18
  %286 = icmp eq i8 %285, 2, !dbg !18
  %287 = and i1 %283, %286, !dbg !18
  %288 = and i1 %280, %287, !dbg !18
  br i1 %288, label %assert_end144, label %assert_fail143, !dbg !18, !prof !19

assert_fail143:                                   ; preds = %assert_end142
  %289 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %289(i8* getelementptr inbounds ([239 x i8], [239 x i8]* @.str.35, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end144:                                    ; preds = %assert_end142
  %290 = load i64, i64* %default_function.T_mod.shape, align 8, !dbg !18, !tbaa !171
  %291 = trunc i64 %290 to i32, !dbg !18
  %292 = icmp eq i32 %291, 5, !dbg !18
  br i1 %292, label %assert_end146, label %assert_fail145, !dbg !18, !prof !19

assert_fail145:                                   ; preds = %assert_end144
  %293 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %293(i8* getelementptr inbounds ([194 x i8], [194 x i8]* @.str.36, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end146:                                    ; preds = %assert_end144
  %294 = getelementptr inbounds i64, i64* %default_function.T_mod.shape, i64 1, !dbg !18
  %295 = load i64, i64* %294, align 8, !dbg !18, !tbaa !181
  %296 = trunc i64 %295 to i32, !dbg !18
  %297 = icmp eq i32 %296, 13, !dbg !18
  br i1 %297, label %assert_end148, label %assert_fail147, !dbg !18, !prof !19

assert_fail147:                                   ; preds = %assert_end146
  %298 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %298(i8* getelementptr inbounds ([196 x i8], [196 x i8]* @.str.37, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end148:                                    ; preds = %assert_end146
  %299 = getelementptr inbounds i64, i64* %default_function.T_mod.shape, i64 2, !dbg !18
  %300 = load i64, i64* %299, align 8, !dbg !18, !tbaa !183
  %301 = trunc i64 %300 to i32, !dbg !18
  %302 = icmp eq i32 %301, 14, !dbg !18
  br i1 %302, label %assert_end150, label %assert_fail149, !dbg !18, !prof !19

assert_fail149:                                   ; preds = %assert_end148
  %303 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %303(i8* getelementptr inbounds ([196 x i8], [196 x i8]* @.str.38, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end150:                                    ; preds = %assert_end148
  %304 = icmp eq i64* %default_function.T_mod.strides, null, !dbg !18
  br i1 %304, label %if_end152, label %if_then151, !dbg !18, !prof !65

if_then151:                                       ; preds = %assert_end150
  %305 = load i64, i64* %default_function.T_mod.strides, align 8, !dbg !18, !tbaa !186
  %306 = trunc i64 %305 to i32, !dbg !18
  %307 = icmp eq i32 %306, 182, !dbg !18
  %308 = getelementptr inbounds i64, i64* %default_function.T_mod.strides, i64 1, !dbg !18
  %309 = load i64, i64* %308, align 8, !dbg !18, !tbaa !196
  %310 = trunc i64 %309 to i32, !dbg !18
  %311 = icmp eq i32 %310, 14, !dbg !18
  %312 = getelementptr inbounds i64, i64* %default_function.T_mod.strides, i64 2, !dbg !18
  %313 = load i64, i64* %312, align 8, !dbg !18, !tbaa !198
  %314 = trunc i64 %313 to i32, !dbg !18
  %315 = icmp eq i32 %314, 1, !dbg !18
  %316 = and i1 %311, %315, !dbg !18
  %317 = and i1 %307, %316, !dbg !18
  br i1 %317, label %if_end152, label %assert_fail153, !dbg !18, !prof !19

if_end152:                                        ; preds = %assert_end150, %if_then151
  %318 = getelementptr inbounds %1, %1* %T_mod218, i64 0, i32 6, !dbg !18
  %319 = load i64, i64* %318, align 8, !dbg !18
  %320 = icmp eq i64 %319, 0, !dbg !18
  br i1 %320, label %assert_end156, label %assert_fail155, !dbg !18, !prof !19

assert_fail153:                                   ; preds = %if_then151
  %321 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %321(i8* getelementptr inbounds ([254 x i8], [254 x i8]* @.str.39, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail155:                                   ; preds = %if_end152
  %322 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %322(i8* getelementptr inbounds ([199 x i8], [199 x i8]* @.str.40, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end156:                                    ; preds = %if_end152
  %323 = getelementptr inbounds %1, %1* %T_mod218, i64 0, i32 1, i32 0, !dbg !18
  %324 = load i32, i32* %323, align 4, !dbg !18
  %325 = icmp eq i32 %324, 1, !dbg !18
  br i1 %325, label %assert_end158, label %assert_fail157, !dbg !18, !prof !19

assert_fail157:                                   ; preds = %assert_end156
  %326 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %326(i8* getelementptr inbounds ([179 x i8], [179 x i8]* @.str.41, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end158:                                    ; preds = %assert_end156
  %327 = getelementptr inbounds %1, %1* %T_mod218, i64 0, i32 1, i32 1, !dbg !18
  %328 = load i32, i32* %327, align 4, !dbg !18
  %329 = icmp eq i32 %dev_id, %328, !dbg !18
  br i1 %329, label %assert_end160, label %assert_fail159, !dbg !18, !prof !19

assert_fail159:                                   ; preds = %assert_end158
  %330 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %330(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.42, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end160:                                    ; preds = %assert_end158
  %331 = getelementptr inbounds %1, %1* %compute5219, i64 0, i32 2, !dbg !18
  %332 = load i32, i32* %331, align 4, !dbg !18
  %333 = icmp eq i32 %332, 3, !dbg !18
  br i1 %333, label %assert_end164, label %assert_fail161, !dbg !18, !prof !19

assert_fail161:                                   ; preds = %assert_end160
  %334 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %334(i8* getelementptr inbounds ([113 x i8], [113 x i8]* @.str.25, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end164:                                    ; preds = %assert_end160
  %335 = getelementptr inbounds %1, %1* %compute5219, i64 0, i32 3, i32 2, !dbg !18
  %336 = load i16, i16* %335, align 2, !dbg !18
  %337 = icmp eq i16 %336, 1, !dbg !18
  %338 = getelementptr inbounds %1, %1* %compute5219, i64 0, i32 3, i32 1, !dbg !18
  %339 = load i8, i8* %338, align 1, !dbg !18
  %340 = icmp eq i8 %339, 32, !dbg !18
  %341 = getelementptr inbounds %1, %1* %compute5219, i64 0, i32 3, i32 0, !dbg !18
  %342 = load i8, i8* %341, align 1, !dbg !18
  %343 = icmp eq i8 %342, 2, !dbg !18
  %344 = and i1 %340, %343, !dbg !18
  %345 = and i1 %337, %344, !dbg !18
  br i1 %345, label %assert_end166, label %assert_fail165, !dbg !18, !prof !19

assert_fail165:                                   ; preds = %assert_end164
  %346 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %346(i8* getelementptr inbounds ([247 x i8], [247 x i8]* @.str.26, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end166:                                    ; preds = %assert_end164
  %347 = load i64, i64* %default_function.compute.shape32, align 8, !dbg !18, !tbaa !201
  %348 = trunc i64 %347 to i32, !dbg !18
  %349 = icmp eq i32 %348, 5, !dbg !18
  br i1 %349, label %assert_end168, label %assert_fail167, !dbg !18, !prof !19

assert_fail167:                                   ; preds = %assert_end166
  %350 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %350(i8* getelementptr inbounds ([200 x i8], [200 x i8]* @.str.27, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end168:                                    ; preds = %assert_end166
  %351 = getelementptr inbounds i64, i64* %default_function.compute.shape32, i64 1, !dbg !18
  %352 = load i64, i64* %351, align 8, !dbg !18, !tbaa !211
  %353 = trunc i64 %352 to i32, !dbg !18
  %354 = icmp eq i32 %353, 13, !dbg !18
  br i1 %354, label %assert_end170, label %assert_fail169, !dbg !18, !prof !19

assert_fail169:                                   ; preds = %assert_end168
  %355 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %355(i8* getelementptr inbounds ([202 x i8], [202 x i8]* @.str.28, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end170:                                    ; preds = %assert_end168
  %356 = getelementptr inbounds i64, i64* %default_function.compute.shape32, i64 2, !dbg !18
  %357 = load i64, i64* %356, align 8, !dbg !18, !tbaa !213
  %358 = trunc i64 %357 to i32, !dbg !18
  %359 = icmp eq i32 %358, 14, !dbg !18
  br i1 %359, label %assert_end172, label %assert_fail171, !dbg !18, !prof !19

assert_fail171:                                   ; preds = %assert_end170
  %360 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %360(i8* getelementptr inbounds ([202 x i8], [202 x i8]* @.str.29, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end172:                                    ; preds = %assert_end170
  %361 = icmp eq i64* %default_function.compute.strides33, null, !dbg !18
  br i1 %361, label %if_end174, label %if_then173, !dbg !18, !prof !65

if_then173:                                       ; preds = %assert_end172
  %362 = load i64, i64* %default_function.compute.strides33, align 8, !dbg !18, !tbaa !216
  %363 = trunc i64 %362 to i32, !dbg !18
  %364 = icmp eq i32 %363, 182, !dbg !18
  %365 = getelementptr inbounds i64, i64* %default_function.compute.strides33, i64 1, !dbg !18
  %366 = load i64, i64* %365, align 8, !dbg !18, !tbaa !226
  %367 = trunc i64 %366 to i32, !dbg !18
  %368 = icmp eq i32 %367, 14, !dbg !18
  %369 = getelementptr inbounds i64, i64* %default_function.compute.strides33, i64 2, !dbg !18
  %370 = load i64, i64* %369, align 8, !dbg !18, !tbaa !228
  %371 = trunc i64 %370 to i32, !dbg !18
  %372 = icmp eq i32 %371, 1, !dbg !18
  %373 = and i1 %368, %372, !dbg !18
  %374 = and i1 %364, %373, !dbg !18
  br i1 %374, label %if_end174, label %assert_fail175, !dbg !18, !prof !19

if_end174:                                        ; preds = %assert_end172, %if_then173
  %375 = getelementptr inbounds %1, %1* %compute5219, i64 0, i32 6, !dbg !18
  %376 = load i64, i64* %375, align 8, !dbg !18
  %377 = icmp eq i64 %376, 0, !dbg !18
  br i1 %377, label %assert_end178, label %assert_fail177, !dbg !18, !prof !19

assert_fail175:                                   ; preds = %if_then173
  %378 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %378(i8* getelementptr inbounds ([262 x i8], [262 x i8]* @.str.30, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail177:                                   ; preds = %if_end174
  %379 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %379(i8* getelementptr inbounds ([205 x i8], [205 x i8]* @.str.31, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end178:                                    ; preds = %if_end174
  %380 = getelementptr inbounds %1, %1* %compute5219, i64 0, i32 1, i32 0, !dbg !18
  %381 = load i32, i32* %380, align 4, !dbg !18
  %382 = icmp eq i32 %381, 1, !dbg !18
  br i1 %382, label %assert_end180, label %assert_fail179, !dbg !18, !prof !19

assert_fail179:                                   ; preds = %assert_end178
  %383 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %383(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.32, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end180:                                    ; preds = %assert_end178
  %384 = getelementptr inbounds %1, %1* %compute5219, i64 0, i32 1, i32 1, !dbg !18
  %385 = load i32, i32* %384, align 4, !dbg !18
  %386 = icmp eq i32 %dev_id, %385, !dbg !18
  br i1 %386, label %assert_end182, label %assert_fail181, !dbg !18, !prof !19

assert_fail181:                                   ; preds = %assert_end180
  %387 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %387(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.33, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end182:                                    ; preds = %assert_end180
  %388 = getelementptr inbounds %1, %1* %compute6220, i64 0, i32 2, !dbg !18
  %389 = load i32, i32* %388, align 4, !dbg !18
  %390 = icmp eq i32 %389, 3, !dbg !18
  br i1 %390, label %assert_end186, label %assert_fail183, !dbg !18, !prof !19

assert_fail183:                                   ; preds = %assert_end182
  %391 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %391(i8* getelementptr inbounds ([113 x i8], [113 x i8]* @.str.25, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end186:                                    ; preds = %assert_end182
  %392 = getelementptr inbounds %1, %1* %compute6220, i64 0, i32 3, i32 2, !dbg !18
  %393 = load i16, i16* %392, align 2, !dbg !18
  %394 = icmp eq i16 %393, 1, !dbg !18
  %395 = getelementptr inbounds %1, %1* %compute6220, i64 0, i32 3, i32 1, !dbg !18
  %396 = load i8, i8* %395, align 1, !dbg !18
  %397 = icmp eq i8 %396, 32, !dbg !18
  %398 = getelementptr inbounds %1, %1* %compute6220, i64 0, i32 3, i32 0, !dbg !18
  %399 = load i8, i8* %398, align 1, !dbg !18
  %400 = icmp eq i8 %399, 2, !dbg !18
  %401 = and i1 %397, %400, !dbg !18
  %402 = and i1 %394, %401, !dbg !18
  br i1 %402, label %assert_end188, label %assert_fail187, !dbg !18, !prof !19

assert_fail187:                                   ; preds = %assert_end186
  %403 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %403(i8* getelementptr inbounds ([247 x i8], [247 x i8]* @.str.26, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end188:                                    ; preds = %assert_end186
  %404 = load i64, i64* %default_function.compute.shape39, align 8, !dbg !18, !tbaa !231
  %405 = trunc i64 %404 to i32, !dbg !18
  %406 = icmp eq i32 %405, 5, !dbg !18
  br i1 %406, label %assert_end190, label %assert_fail189, !dbg !18, !prof !19

assert_fail189:                                   ; preds = %assert_end188
  %407 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %407(i8* getelementptr inbounds ([200 x i8], [200 x i8]* @.str.27, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end190:                                    ; preds = %assert_end188
  %408 = getelementptr inbounds i64, i64* %default_function.compute.shape39, i64 1, !dbg !18
  %409 = load i64, i64* %408, align 8, !dbg !18, !tbaa !241
  %410 = trunc i64 %409 to i32, !dbg !18
  %411 = icmp eq i32 %410, 13, !dbg !18
  br i1 %411, label %assert_end192, label %assert_fail191, !dbg !18, !prof !19

assert_fail191:                                   ; preds = %assert_end190
  %412 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %412(i8* getelementptr inbounds ([202 x i8], [202 x i8]* @.str.28, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end192:                                    ; preds = %assert_end190
  %413 = getelementptr inbounds i64, i64* %default_function.compute.shape39, i64 2, !dbg !18
  %414 = load i64, i64* %413, align 8, !dbg !18, !tbaa !243
  %415 = trunc i64 %414 to i32, !dbg !18
  %416 = icmp eq i32 %415, 14, !dbg !18
  br i1 %416, label %assert_end194, label %assert_fail193, !dbg !18, !prof !19

assert_fail193:                                   ; preds = %assert_end192
  %417 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %417(i8* getelementptr inbounds ([202 x i8], [202 x i8]* @.str.29, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end194:                                    ; preds = %assert_end192
  %418 = icmp eq i64* %default_function.compute.strides40, null, !dbg !18
  br i1 %418, label %if_end196, label %if_then195, !dbg !18, !prof !65

if_then195:                                       ; preds = %assert_end194
  %419 = load i64, i64* %default_function.compute.strides40, align 8, !dbg !18, !tbaa !246
  %420 = trunc i64 %419 to i32, !dbg !18
  %421 = icmp eq i32 %420, 182, !dbg !18
  %422 = getelementptr inbounds i64, i64* %default_function.compute.strides40, i64 1, !dbg !18
  %423 = load i64, i64* %422, align 8, !dbg !18, !tbaa !256
  %424 = trunc i64 %423 to i32, !dbg !18
  %425 = icmp eq i32 %424, 14, !dbg !18
  %426 = getelementptr inbounds i64, i64* %default_function.compute.strides40, i64 2, !dbg !18
  %427 = load i64, i64* %426, align 8, !dbg !18, !tbaa !258
  %428 = trunc i64 %427 to i32, !dbg !18
  %429 = icmp eq i32 %428, 1, !dbg !18
  %430 = and i1 %425, %429, !dbg !18
  %431 = and i1 %421, %430, !dbg !18
  br i1 %431, label %if_end196, label %assert_fail197, !dbg !18, !prof !19

if_end196:                                        ; preds = %assert_end194, %if_then195
  %432 = getelementptr inbounds %1, %1* %compute6220, i64 0, i32 6, !dbg !18
  %433 = load i64, i64* %432, align 8, !dbg !18
  %434 = icmp eq i64 %433, 0, !dbg !18
  br i1 %434, label %assert_end200, label %assert_fail199, !dbg !18, !prof !19

assert_fail197:                                   ; preds = %if_then195
  %435 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %435(i8* getelementptr inbounds ([262 x i8], [262 x i8]* @.str.30, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail199:                                   ; preds = %if_end196
  %436 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %436(i8* getelementptr inbounds ([205 x i8], [205 x i8]* @.str.31, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end200:                                    ; preds = %if_end196
  %437 = getelementptr inbounds %1, %1* %compute6220, i64 0, i32 1, i32 0, !dbg !18
  %438 = load i32, i32* %437, align 4, !dbg !18
  %439 = icmp eq i32 %438, 1, !dbg !18
  br i1 %439, label %assert_end202, label %assert_fail201, !dbg !18, !prof !19

assert_fail201:                                   ; preds = %assert_end200
  %440 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %440(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.32, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end202:                                    ; preds = %assert_end200
  %441 = getelementptr inbounds %1, %1* %compute6220, i64 0, i32 1, i32 1, !dbg !18
  %442 = load i32, i32* %441, align 4, !dbg !18
  %443 = icmp eq i32 %dev_id, %442, !dbg !18
  br i1 %443, label %assert_end204, label %assert_fail203, !dbg !18, !prof !19

assert_fail203:                                   ; preds = %assert_end202
  %444 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %444(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.33, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end204:                                    ; preds = %assert_end202
  %445 = call fastcc i32 @default_function_compute_(i8* nonnull %stack_value, float* %T_mod_void_ptr225, i32* nonnull %stack_tcode213.sub, float* %compute_void_ptr223, float* %compute_void_ptr16224, float* %compute_void_ptr27226, float* %compute_void_ptr34227, float* %ph_0_void_ptr221, float* %ph_3_void_ptr222), !dbg !18
  ret i32 %445, !dbg !18
}

; Function Attrs: nounwind willreturn
declare void @llvm.assume(i1) #1

; Function Attrs: noinline
define internal fastcc i32 @default_function_compute_(i8* noalias %0, float* noalias align 64 %1, i32* noalias %2, float* noalias align 64 %3, float* noalias align 64 %4, float* noalias align 64 %5, float* noalias align 64 %6, float* noalias align 64 %7, float* noalias align 64 %8) unnamed_addr #2 {
entry:
  %9 = alloca i8*, align 8
  %10 = bitcast i8* %0 to %0*
  %11 = bitcast i8* %0 to float**
  store float* %1, float** %11, align 8
  %12 = getelementptr inbounds i8, i8* %0, i64 8
  %13 = bitcast i8* %12 to float**
  store float* %3, float** %13, align 8
  %14 = getelementptr inbounds i8, i8* %0, i64 16
  %15 = bitcast i8* %14 to float**
  store float* %4, float** %15, align 8
  %16 = getelementptr inbounds i8, i8* %0, i64 24
  %17 = bitcast i8* %16 to float**
  store float* %5, float** %17, align 8
  %18 = bitcast i32* %2 to <4 x i32>*
  store <4 x i32> <i32 3, i32 3, i32 3, i32 3>, <4 x i32>* %18, align 4, !tbaa !261
  %19 = getelementptr inbounds i8, i8* %0, i64 32
  %20 = bitcast i8* %19 to float**
  store float* %6, float** %20, align 8
  %21 = getelementptr inbounds i32, i32* %2, i64 4
  store i32 3, i32* %21, align 4, !tbaa !270
  %22 = getelementptr inbounds i8, i8* %0, i64 40
  %23 = bitcast i8* %22 to float**
  store float* %7, float** %23, align 8
  %24 = getelementptr inbounds i32, i32* %2, i64 5
  store i32 3, i32* %24, align 4, !tbaa !274
  %25 = getelementptr inbounds i8, i8* %0, i64 48
  %26 = bitcast i8* %25 to float**
  store float* %8, float** %26, align 8
  %27 = getelementptr inbounds i32, i32* %2, i64 6
  store i32 3, i32* %27, align 4, !tbaa !276
  %28 = getelementptr inbounds i8, i8* %0, i64 56
  %29 = bitcast i8* %28 to %0*
  %30 = getelementptr inbounds i32, i32* %2, i64 7
  %31 = load i32 (i8*, %0*, i32*, i32, %0*, i32*)*, i32 (i8*, %0*, i32*, i32, %0*, i32*)** @__TVMFuncCall, align 8, !tbaa !20
  %32 = load i8*, i8** @.tvm_func.default_function_kernel, align 8
  %33 = icmp eq i8* %32, null
  br i1 %33, label %handle_init, label %handle_init_end, !prof !65

handle_init:                                      ; preds = %entry
  %34 = load i8*, i8** @__tvm_module_ctx, align 8, !tbaa !20
  %35 = load i32 (i8*, i8*, i8**)*, i32 (i8*, i8*, i8**)** @__TVMBackendGetFuncFromEnv, align 8, !tbaa !20
  %36 = call i32 %35(i8* %34, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.43, i64 0, i64 0), i8** nonnull %9)
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %call_end, label %call_fail, !prof !19

handle_init_end:                                  ; preds = %entry, %call_end
  %38 = phi i8* [ %32, %entry ], [ %41, %call_end ]
  %39 = call i32 %31(i8* %38, %0* %10, i32* nonnull %2, i32 7, %0* nonnull %29, i32* nonnull %30)
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %call_end2, label %call_fail, !prof !19

call_fail:                                        ; preds = %call_end2, %handle_init_end, %handle_init
  %merge = phi i32 [ %36, %handle_init ], [ %39, %handle_init_end ], [ 0, %call_end2 ]
  ret i32 %merge

call_end:                                         ; preds = %handle_init
  %41 = load i8*, i8** %9, align 8
  store i8* %41, i8** @.tvm_func.default_function_kernel, align 8
  br label %handle_init_end

call_end2:                                        ; preds = %handle_init_end
  %42 = bitcast i8* %28 to i64*
  %43 = load i64, i64* %42, align 8
  %kernel_error_code = trunc i64 %43 to i32
  %44 = icmp eq i32 %kernel_error_code, 0
  br i1 %44, label %call_fail, label %assert_fail, !prof !19

assert_fail:                                      ; preds = %call_end2
  %45 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !20
  call void %45(i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.44, i64 0, i64 0))
  ret i32 -1
}

; Function Attrs: nounwind readnone
define weak dso_local i16 @__truncsfhf2(float %a0) local_unnamed_addr #3 section ".text.tvm.fp16.conv" {
b0:
  %v0 = bitcast float %a0 to i32
  %v1 = and i32 %v0, 2147483647
  %v2 = add nsw i32 %v1, -947912704
  %v3 = add nsw i32 %v1, -1199570944
  %v4 = icmp ult i32 %v2, %v3
  br i1 %v4, label %b1, label %b5

b1:                                               ; preds = %b0
  %v5 = lshr i32 %v0, 13
  %v6 = and i32 %v5, 65535
  %v7 = add nuw nsw i32 %v6, -114688
  %v8 = and i32 %v0, 8191
  %v9 = icmp ugt i32 %v8, 4096
  br i1 %v9, label %b2, label %b3

b2:                                               ; preds = %b1
  %v10 = add nuw nsw i32 %v6, -114687
  br label %b13

b3:                                               ; preds = %b1
  %v11 = icmp eq i32 %v8, 4096
  br i1 %v11, label %b4, label %b13

b4:                                               ; preds = %b3
  %v12 = and i32 %v7, 65535
  %v13 = and i32 %v5, 1
  %v14 = add nuw nsw i32 %v12, %v13
  br label %b13

b5:                                               ; preds = %b0
  %v15 = icmp ugt i32 %v1, 2139095040
  br i1 %v15, label %b6, label %b7

b6:                                               ; preds = %b5
  %v16 = lshr i32 %v0, 13
  %v17 = and i32 %v16, 511
  %v18 = or i32 %v17, 32256
  br label %b13

b7:                                               ; preds = %b5
  %v19 = icmp ugt i32 %v1, 1199570943
  br i1 %v19, label %b13, label %b8

b8:                                               ; preds = %b7
  %v20 = icmp ult i32 %v1, 754974720
  br i1 %v20, label %b13, label %b9

b9:                                               ; preds = %b8
  %v21 = lshr i32 %v1, 23
  %v22 = sub nsw i32 113, %v21
  %v23 = and i32 %v0, 8388607
  %v24 = or i32 %v23, 8388608
  %v25 = add nsw i32 %v21, -81
  %v26 = shl i32 %v24, %v25
  %v27 = icmp ne i32 %v26, 0
  %v28 = lshr i32 %v24, %v22
  %v29 = zext i1 %v27 to i32
  %v30 = lshr i32 %v28, 13
  %v31 = and i32 %v28, 8191
  %v32 = or i32 %v31, %v29
  %v33 = icmp ugt i32 %v32, 4096
  br i1 %v33, label %b10, label %b11

b10:                                              ; preds = %b9
  %v34 = add nuw nsw i32 %v30, 1
  br label %b13

b11:                                              ; preds = %b9
  %v35 = icmp eq i32 %v32, 4096
  br i1 %v35, label %b12, label %b13

b12:                                              ; preds = %b11
  %v36 = and i32 %v30, 1
  %v37 = add nuw nsw i32 %v36, %v30
  br label %b13

b13:                                              ; preds = %b12, %b11, %b10, %b8, %b7, %b6, %b4, %b3, %b2
  %v38 = phi i32 [ %v18, %b6 ], [ %v10, %b2 ], [ %v14, %b4 ], [ %v7, %b3 ], [ 31744, %b7 ], [ 0, %b8 ], [ %v34, %b10 ], [ %v37, %b12 ], [ %v30, %b11 ]
  %v39 = lshr i32 %v0, 16
  %v40 = and i32 %v39, 32768
  %v41 = or i32 %v38, %v40
  %vlast = trunc i32 %v41 to i16
  ret i16 %vlast
}

; Function Attrs: nounwind readnone
define weak dso_local float @__extendhfsf2(i16 %a0) local_unnamed_addr #3 section ".text.tvm.fp16.conv" {
b0:
  %v1 = and i16 %a0, 32767
  %v2 = zext i16 %v1 to i32
  %v3 = add nsw i16 %v1, -1024
  %v4 = icmp ult i16 %v3, 30720
  br i1 %v4, label %b1, label %b2

b1:                                               ; preds = %b0
  %v5 = shl nuw nsw i32 %v2, 13
  %v6 = add nuw nsw i32 %v5, 939524096
  br label %b6

b2:                                               ; preds = %b0
  %v7 = icmp ugt i16 %v1, 31743
  br i1 %v7, label %b3, label %b4

b3:                                               ; preds = %b2
  %v8 = shl nuw nsw i32 %v2, 13
  %v9 = or i32 %v8, 2139095040
  br label %b6

b4:                                               ; preds = %b2
  %v10 = icmp eq i16 %v1, 0
  br i1 %v10, label %b6, label %b5

b5:                                               ; preds = %b4
  %v11 = icmp ult i16 %v1, 256
  %v12 = lshr i32 %v2, 8
  %v13 = select i1 %v11, i32 %v2, i32 %v12
  %v14 = select i1 %v11, i32 32, i32 24
  %v15 = icmp ult i32 %v13, 16
  %v16 = lshr i32 %v13, 4
  %v17 = add nsw i32 %v14, -4
  %v18 = select i1 %v15, i32 %v13, i32 %v16
  %v19 = select i1 %v15, i32 %v14, i32 %v17
  %v20 = icmp ult i32 %v18, 4
  %v21 = lshr i32 %v18, 2
  %v22 = add nsw i32 %v19, -2
  %v23 = select i1 %v20, i32 %v18, i32 %v21
  %v24 = select i1 %v20, i32 %v19, i32 %v22
  %v25 = icmp ult i32 %v23, 2
  %v26 = sub nsw i32 0, %v23
  %v27 = select i1 %v25, i32 %v26, i32 -2
  %v28 = add nsw i32 %v27, %v24
  %v29 = add nsw i32 %v28, -8
  %v30 = shl i32 %v2, %v29
  %v31 = xor i32 %v30, 8388608
  %v32 = shl i32 %v28, 23
  %v33 = sub i32 1124073472, %v32
  %v34 = or i32 %v31, %v33
  br label %b6

b6:                                               ; preds = %b5, %b4, %b3, %b1
  %v35 = phi i32 [ %v6, %b1 ], [ %v9, %b3 ], [ %v34, %b5 ], [ 0, %b4 ]
  %v36 = and i16 %a0, -32768
  %v37 = zext i16 %v36 to i32
  %v38 = shl nuw i32 %v37, 16
  %v39 = or i32 %v35, %v38
  %v40 = bitcast i32 %v39 to float
  ret float %v40
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.value(metadata, metadata, metadata) #4

attributes #0 = { "target-cpu"="generic" }
attributes #1 = { nounwind willreturn }
attributes #2 = { noinline "target-cpu"="generic" }
attributes #3 = { nounwind readnone "target-cpu"="generic" "target-features" }
attributes #4 = { nounwind readnone speculatable willreturn }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "TVM", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2)
!1 = !DIFile(filename: "main.tir", directory: ".")
!2 = !{}
!3 = !{i32 2, !"tvm_target", !"llvm -mtriple=x86_64-pc-linux-gnu"}
!4 = !{i32 4, !"Debug Info Version", i32 3}
!5 = distinct !DISubprogram(name: "main.tir", scope: !1, file: !1, type: !6, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !11)
!6 = !DISubroutineType(types: !7)
!7 = !{!8, !9, !10, !8, !9, !10, !9}
!8 = !DIBasicType(name: "int32", size: 32, encoding: DW_ATE_signed)
!9 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null)
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8)
!11 = !{!12, !13, !14, !15, !16, !17}
!12 = !DILocalVariable(name: "arg1", arg: 1, scope: !5, file: !1, type: !9)
!13 = !DILocalVariable(name: "arg2", arg: 2, scope: !5, file: !1, type: !10)
!14 = !DILocalVariable(name: "arg3", arg: 3, scope: !5, file: !1, type: !8)
!15 = !DILocalVariable(name: "arg4", arg: 4, scope: !5, file: !1, type: !9)
!16 = !DILocalVariable(name: "arg5", arg: 5, scope: !5, file: !1, type: !10)
!17 = !DILocalVariable(name: "arg6", arg: 6, scope: !5, file: !1, type: !9)
!18 = !DILocation(line: 0, scope: !5)
!19 = !{!"branch_weights", i32 1048576, i32 1}
!20 = !{!21, !21, i64 0}
!21 = !{!"ctx_ptr", !22, i64 0}
!22 = !{!"tvm-tbaa"}
!23 = !{!24, !24, i64 0}
!24 = !{!"0x38489c0.w4.b0", !25, i64 0}
!25 = !{!"0x38489c0.w8.b0", !26, i64 0}
!26 = !{!"0x38489c0.w16.b0", !27, i64 0}
!27 = !{!"0x38489c0.w32.b0", !28, i64 0}
!28 = !{!"0x38489c0.w64.b0", !29, i64 0}
!29 = !{!"0x38489c0.w128.b0", !30, i64 0}
!30 = !{!"0x38489c0.w256.b0", !31, i64 0}
!31 = !{!"0x38489c0.w512.b0", !32, i64 0}
!32 = !{!"0x38489c0.w1024.b0", !33, i64 0}
!33 = !{!"0x38489c0", !22, i64 0}
!34 = !{!35, !35, i64 0}
!35 = !{!"0x38489c0.w4.b4", !25, i64 0}
!36 = !{!37, !37, i64 0}
!37 = !{!"0x38489c0.w4.b8", !38, i64 0}
!38 = !{!"0x38489c0.w8.b8", !26, i64 0}
!39 = !{!40, !40, i64 0}
!40 = !{!"0x38489c0.w4.b12", !38, i64 0}
!41 = !{!42, !42, i64 0}
!42 = !{!"0x38489c0.w4.b16", !43, i64 0}
!43 = !{!"0x38489c0.w8.b16", !44, i64 0}
!44 = !{!"0x38489c0.w16.b16", !27, i64 0}
!45 = !{!46, !46, i64 0}
!46 = !{!"0x38489c0.w4.b20", !43, i64 0}
!47 = !{!48, !48, i64 0}
!48 = !{!"0x38489c0.w4.b24", !49, i64 0}
!49 = !{!"0x38489c0.w8.b24", !44, i64 0}
!50 = !{!51, !51, i64 0}
!51 = !{!"0x3da8de0.w8.b0", !52, i64 0}
!52 = !{!"0x3da8de0.w16.b0", !53, i64 0}
!53 = !{!"0x3da8de0.w32.b0", !54, i64 0}
!54 = !{!"0x3da8de0.w64.b0", !55, i64 0}
!55 = !{!"0x3da8de0.w128.b0", !56, i64 0}
!56 = !{!"0x3da8de0.w256.b0", !57, i64 0}
!57 = !{!"0x3da8de0.w512.b0", !58, i64 0}
!58 = !{!"0x3da8de0.w1024.b0", !59, i64 0}
!59 = !{!"0x3da8de0", !22, i64 0}
!60 = !{!61, !61, i64 0}
!61 = !{!"0x3da8de0.w8.b8", !52, i64 0}
!62 = !{!63, !63, i64 0}
!63 = !{!"0x3da8de0.w8.b16", !64, i64 0}
!64 = !{!"0x3da8de0.w16.b16", !53, i64 0}
!65 = !{!"branch_weights", i32 1, i32 1048576}
!66 = !{!67, !67, i64 0}
!67 = !{!"0x3d2caa0.w8.b0", !68, i64 0}
!68 = !{!"0x3d2caa0.w16.b0", !69, i64 0}
!69 = !{!"0x3d2caa0.w32.b0", !70, i64 0}
!70 = !{!"0x3d2caa0.w64.b0", !71, i64 0}
!71 = !{!"0x3d2caa0.w128.b0", !72, i64 0}
!72 = !{!"0x3d2caa0.w256.b0", !73, i64 0}
!73 = !{!"0x3d2caa0.w512.b0", !74, i64 0}
!74 = !{!"0x3d2caa0.w1024.b0", !75, i64 0}
!75 = !{!"0x3d2caa0", !22, i64 0}
!76 = !{!77, !77, i64 0}
!77 = !{!"0x3d2caa0.w8.b8", !68, i64 0}
!78 = !{!79, !79, i64 0}
!79 = !{!"0x3d2caa0.w8.b16", !80, i64 0}
!80 = !{!"0x3d2caa0.w16.b16", !69, i64 0}
!81 = !{!82, !82, i64 0}
!82 = !{!"0x35ec130.w8.b0", !83, i64 0}
!83 = !{!"0x35ec130.w16.b0", !84, i64 0}
!84 = !{!"0x35ec130.w32.b0", !85, i64 0}
!85 = !{!"0x35ec130.w64.b0", !86, i64 0}
!86 = !{!"0x35ec130.w128.b0", !87, i64 0}
!87 = !{!"0x35ec130.w256.b0", !88, i64 0}
!88 = !{!"0x35ec130.w512.b0", !89, i64 0}
!89 = !{!"0x35ec130.w1024.b0", !90, i64 0}
!90 = !{!"0x35ec130", !22, i64 0}
!91 = !{!92, !92, i64 0}
!92 = !{!"0x35ec130.w8.b8", !83, i64 0}
!93 = !{!94, !94, i64 0}
!94 = !{!"0x35ec130.w8.b16", !95, i64 0}
!95 = !{!"0x35ec130.w16.b16", !84, i64 0}
!96 = !{!97, !97, i64 0}
!97 = !{!"0x37aea40.w8.b0", !98, i64 0}
!98 = !{!"0x37aea40.w16.b0", !99, i64 0}
!99 = !{!"0x37aea40.w32.b0", !100, i64 0}
!100 = !{!"0x37aea40.w64.b0", !101, i64 0}
!101 = !{!"0x37aea40.w128.b0", !102, i64 0}
!102 = !{!"0x37aea40.w256.b0", !103, i64 0}
!103 = !{!"0x37aea40.w512.b0", !104, i64 0}
!104 = !{!"0x37aea40.w1024.b0", !105, i64 0}
!105 = !{!"0x37aea40", !22, i64 0}
!106 = !{!107, !107, i64 0}
!107 = !{!"0x37aea40.w8.b8", !98, i64 0}
!108 = !{!109, !109, i64 0}
!109 = !{!"0x37aea40.w8.b16", !110, i64 0}
!110 = !{!"0x37aea40.w16.b16", !99, i64 0}
!111 = !{!112, !112, i64 0}
!112 = !{!"0x3b66f90.w8.b0", !113, i64 0}
!113 = !{!"0x3b66f90.w16.b0", !114, i64 0}
!114 = !{!"0x3b66f90.w32.b0", !115, i64 0}
!115 = !{!"0x3b66f90.w64.b0", !116, i64 0}
!116 = !{!"0x3b66f90.w128.b0", !117, i64 0}
!117 = !{!"0x3b66f90.w256.b0", !118, i64 0}
!118 = !{!"0x3b66f90.w512.b0", !119, i64 0}
!119 = !{!"0x3b66f90.w1024.b0", !120, i64 0}
!120 = !{!"0x3b66f90", !22, i64 0}
!121 = !{!122, !122, i64 0}
!122 = !{!"0x3b66f90.w8.b8", !113, i64 0}
!123 = !{!124, !124, i64 0}
!124 = !{!"0x3b66f90.w8.b16", !125, i64 0}
!125 = !{!"0x3b66f90.w16.b16", !114, i64 0}
!126 = !{!127, !127, i64 0}
!127 = !{!"0x3f010d0.w8.b0", !128, i64 0}
!128 = !{!"0x3f010d0.w16.b0", !129, i64 0}
!129 = !{!"0x3f010d0.w32.b0", !130, i64 0}
!130 = !{!"0x3f010d0.w64.b0", !131, i64 0}
!131 = !{!"0x3f010d0.w128.b0", !132, i64 0}
!132 = !{!"0x3f010d0.w256.b0", !133, i64 0}
!133 = !{!"0x3f010d0.w512.b0", !134, i64 0}
!134 = !{!"0x3f010d0.w1024.b0", !135, i64 0}
!135 = !{!"0x3f010d0", !22, i64 0}
!136 = !{!137, !137, i64 0}
!137 = !{!"0x3f010d0.w8.b8", !128, i64 0}
!138 = !{!139, !139, i64 0}
!139 = !{!"0x3f010d0.w8.b16", !140, i64 0}
!140 = !{!"0x3f010d0.w16.b16", !129, i64 0}
!141 = !{!142, !142, i64 0}
!142 = !{!"0x423ac10.w8.b0", !143, i64 0}
!143 = !{!"0x423ac10.w16.b0", !144, i64 0}
!144 = !{!"0x423ac10.w32.b0", !145, i64 0}
!145 = !{!"0x423ac10.w64.b0", !146, i64 0}
!146 = !{!"0x423ac10.w128.b0", !147, i64 0}
!147 = !{!"0x423ac10.w256.b0", !148, i64 0}
!148 = !{!"0x423ac10.w512.b0", !149, i64 0}
!149 = !{!"0x423ac10.w1024.b0", !150, i64 0}
!150 = !{!"0x423ac10", !22, i64 0}
!151 = !{!152, !152, i64 0}
!152 = !{!"0x423ac10.w8.b8", !143, i64 0}
!153 = !{!154, !154, i64 0}
!154 = !{!"0x423ac10.w8.b16", !155, i64 0}
!155 = !{!"0x423ac10.w16.b16", !144, i64 0}
!156 = !{!157, !157, i64 0}
!157 = !{!"0x4fb7a30.w8.b0", !158, i64 0}
!158 = !{!"0x4fb7a30.w16.b0", !159, i64 0}
!159 = !{!"0x4fb7a30.w32.b0", !160, i64 0}
!160 = !{!"0x4fb7a30.w64.b0", !161, i64 0}
!161 = !{!"0x4fb7a30.w128.b0", !162, i64 0}
!162 = !{!"0x4fb7a30.w256.b0", !163, i64 0}
!163 = !{!"0x4fb7a30.w512.b0", !164, i64 0}
!164 = !{!"0x4fb7a30.w1024.b0", !165, i64 0}
!165 = !{!"0x4fb7a30", !22, i64 0}
!166 = !{!167, !167, i64 0}
!167 = !{!"0x4fb7a30.w8.b8", !158, i64 0}
!168 = !{!169, !169, i64 0}
!169 = !{!"0x4fb7a30.w8.b16", !170, i64 0}
!170 = !{!"0x4fb7a30.w16.b16", !159, i64 0}
!171 = !{!172, !172, i64 0}
!172 = !{!"0x4fb2ad0.w8.b0", !173, i64 0}
!173 = !{!"0x4fb2ad0.w16.b0", !174, i64 0}
!174 = !{!"0x4fb2ad0.w32.b0", !175, i64 0}
!175 = !{!"0x4fb2ad0.w64.b0", !176, i64 0}
!176 = !{!"0x4fb2ad0.w128.b0", !177, i64 0}
!177 = !{!"0x4fb2ad0.w256.b0", !178, i64 0}
!178 = !{!"0x4fb2ad0.w512.b0", !179, i64 0}
!179 = !{!"0x4fb2ad0.w1024.b0", !180, i64 0}
!180 = !{!"0x4fb2ad0", !22, i64 0}
!181 = !{!182, !182, i64 0}
!182 = !{!"0x4fb2ad0.w8.b8", !173, i64 0}
!183 = !{!184, !184, i64 0}
!184 = !{!"0x4fb2ad0.w8.b16", !185, i64 0}
!185 = !{!"0x4fb2ad0.w16.b16", !174, i64 0}
!186 = !{!187, !187, i64 0}
!187 = !{!"0x3894fc0.w8.b0", !188, i64 0}
!188 = !{!"0x3894fc0.w16.b0", !189, i64 0}
!189 = !{!"0x3894fc0.w32.b0", !190, i64 0}
!190 = !{!"0x3894fc0.w64.b0", !191, i64 0}
!191 = !{!"0x3894fc0.w128.b0", !192, i64 0}
!192 = !{!"0x3894fc0.w256.b0", !193, i64 0}
!193 = !{!"0x3894fc0.w512.b0", !194, i64 0}
!194 = !{!"0x3894fc0.w1024.b0", !195, i64 0}
!195 = !{!"0x3894fc0", !22, i64 0}
!196 = !{!197, !197, i64 0}
!197 = !{!"0x3894fc0.w8.b8", !188, i64 0}
!198 = !{!199, !199, i64 0}
!199 = !{!"0x3894fc0.w8.b16", !200, i64 0}
!200 = !{!"0x3894fc0.w16.b16", !189, i64 0}
!201 = !{!202, !202, i64 0}
!202 = !{!"0x4fb89c0.w8.b0", !203, i64 0}
!203 = !{!"0x4fb89c0.w16.b0", !204, i64 0}
!204 = !{!"0x4fb89c0.w32.b0", !205, i64 0}
!205 = !{!"0x4fb89c0.w64.b0", !206, i64 0}
!206 = !{!"0x4fb89c0.w128.b0", !207, i64 0}
!207 = !{!"0x4fb89c0.w256.b0", !208, i64 0}
!208 = !{!"0x4fb89c0.w512.b0", !209, i64 0}
!209 = !{!"0x4fb89c0.w1024.b0", !210, i64 0}
!210 = !{!"0x4fb89c0", !22, i64 0}
!211 = !{!212, !212, i64 0}
!212 = !{!"0x4fb89c0.w8.b8", !203, i64 0}
!213 = !{!214, !214, i64 0}
!214 = !{!"0x4fb89c0.w8.b16", !215, i64 0}
!215 = !{!"0x4fb89c0.w16.b16", !204, i64 0}
!216 = !{!217, !217, i64 0}
!217 = !{!"0x4fb9850.w8.b0", !218, i64 0}
!218 = !{!"0x4fb9850.w16.b0", !219, i64 0}
!219 = !{!"0x4fb9850.w32.b0", !220, i64 0}
!220 = !{!"0x4fb9850.w64.b0", !221, i64 0}
!221 = !{!"0x4fb9850.w128.b0", !222, i64 0}
!222 = !{!"0x4fb9850.w256.b0", !223, i64 0}
!223 = !{!"0x4fb9850.w512.b0", !224, i64 0}
!224 = !{!"0x4fb9850.w1024.b0", !225, i64 0}
!225 = !{!"0x4fb9850", !22, i64 0}
!226 = !{!227, !227, i64 0}
!227 = !{!"0x4fb9850.w8.b8", !218, i64 0}
!228 = !{!229, !229, i64 0}
!229 = !{!"0x4fb9850.w8.b16", !230, i64 0}
!230 = !{!"0x4fb9850.w16.b16", !219, i64 0}
!231 = !{!232, !232, i64 0}
!232 = !{!"0x423bdb0.w8.b0", !233, i64 0}
!233 = !{!"0x423bdb0.w16.b0", !234, i64 0}
!234 = !{!"0x423bdb0.w32.b0", !235, i64 0}
!235 = !{!"0x423bdb0.w64.b0", !236, i64 0}
!236 = !{!"0x423bdb0.w128.b0", !237, i64 0}
!237 = !{!"0x423bdb0.w256.b0", !238, i64 0}
!238 = !{!"0x423bdb0.w512.b0", !239, i64 0}
!239 = !{!"0x423bdb0.w1024.b0", !240, i64 0}
!240 = !{!"0x423bdb0", !22, i64 0}
!241 = !{!242, !242, i64 0}
!242 = !{!"0x423bdb0.w8.b8", !233, i64 0}
!243 = !{!244, !244, i64 0}
!244 = !{!"0x423bdb0.w8.b16", !245, i64 0}
!245 = !{!"0x423bdb0.w16.b16", !234, i64 0}
!246 = !{!247, !247, i64 0}
!247 = !{!"0x4246fa0.w8.b0", !248, i64 0}
!248 = !{!"0x4246fa0.w16.b0", !249, i64 0}
!249 = !{!"0x4246fa0.w32.b0", !250, i64 0}
!250 = !{!"0x4246fa0.w64.b0", !251, i64 0}
!251 = !{!"0x4246fa0.w128.b0", !252, i64 0}
!252 = !{!"0x4246fa0.w256.b0", !253, i64 0}
!253 = !{!"0x4246fa0.w512.b0", !254, i64 0}
!254 = !{!"0x4246fa0.w1024.b0", !255, i64 0}
!255 = !{!"0x4246fa0", !22, i64 0}
!256 = !{!257, !257, i64 0}
!257 = !{!"0x4246fa0.w8.b8", !248, i64 0}
!258 = !{!259, !259, i64 0}
!259 = !{!"0x4246fa0.w8.b16", !260, i64 0}
!260 = !{!"0x4246fa0.w16.b16", !249, i64 0}
!261 = !{!262, !262, i64 0}
!262 = !{!"0x4fbbb40.w16.b0", !263, i64 0}
!263 = !{!"0x4fbbb40.w32.b0", !264, i64 0}
!264 = !{!"0x4fbbb40.w64.b0", !265, i64 0}
!265 = !{!"0x4fbbb40.w128.b0", !266, i64 0}
!266 = !{!"0x4fbbb40.w256.b0", !267, i64 0}
!267 = !{!"0x4fbbb40.w512.b0", !268, i64 0}
!268 = !{!"0x4fbbb40.w1024.b0", !269, i64 0}
!269 = !{!"0x4fbbb40", !22, i64 0}
!270 = !{!271, !271, i64 0}
!271 = !{!"0x4fbbb40.w4.b16", !272, i64 0}
!272 = !{!"0x4fbbb40.w8.b16", !273, i64 0}
!273 = !{!"0x4fbbb40.w16.b16", !263, i64 0}
!274 = !{!275, !275, i64 0}
!275 = !{!"0x4fbbb40.w4.b20", !272, i64 0}
!276 = !{!277, !277, i64 0}
!277 = !{!"0x4fbbb40.w4.b24", !278, i64 0}
!278 = !{!"0x4fbbb40.w8.b24", !273, i64 0}
