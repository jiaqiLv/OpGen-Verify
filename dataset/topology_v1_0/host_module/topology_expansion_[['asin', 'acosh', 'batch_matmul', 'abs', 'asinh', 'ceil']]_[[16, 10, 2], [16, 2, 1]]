; ModuleID = 'TVMMod'
source_filename = "TVMMod"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%0 = type { double }
%1 = type { i8*, %2, i32, %3, i64*, i64*, i64 }
%2 = type { i32, i32 }
%3 = type { i8, i8, i16 }

@__tvm_module_ctx = linkonce dllexport local_unnamed_addr global i8* null, align 8
@__TVMFuncCall = linkonce dllexport local_unnamed_addr global i32 (i8*, %0*, i32*, i32, %0*, i32*)* null, align 8
@__TVMBackendGetFuncFromEnv = linkonce dllexport local_unnamed_addr global i32 (i8*, i8*, i8**)* null, align 8
@__TVMAPISetLastError = linkonce dllexport local_unnamed_addr global void (i8*)* null, align 8
@.str = private constant [67 x i8] c"Assert fail: num_args == 6, default_function: num_args should be 6\00", align 1
@.str.1 = private constant [130 x i8] c"Assert fail: ph_0_code == 3 or ph_0_code == 13 or ph_0_code == 7 or ph_0_code == 4, default_function: Expect arg[0] to be pointer\00", align 1
@.str.2 = private constant [130 x i8] c"Assert fail: ph_4_code == 3 or ph_4_code == 13 or ph_4_code == 7 or ph_4_code == 4, default_function: Expect arg[1] to be pointer\00", align 1
@.str.3 = private constant [142 x i8] c"Assert fail: compute_code == 3 or compute_code == 13 or compute_code == 7 or compute_code == 4, default_function: Expect arg[2] to be pointer\00", align 1
@.str.4 = private constant [182 x i8] c"Assert fail: T_batch_matmul_NN_code == 3 or T_batch_matmul_NN_code == 13 or T_batch_matmul_NN_code == 7 or T_batch_matmul_NN_code == 4, default_function: Expect arg[3] to be pointer\00", align 1
@.str.5 = private constant [142 x i8] c"Assert fail: compute_code == 3 or compute_code == 13 or compute_code == 7 or compute_code == 4, default_function: Expect arg[4] to be pointer\00", align 1
@.str.6 = private constant [142 x i8] c"Assert fail: compute_code == 3 or compute_code == 13 or compute_code == 7 or compute_code == 4, default_function: Expect arg[5] to be pointer\00", align 1
@.str.7 = private constant [107 x i8] c"Assert fail: 3 == T.tvm_struct_get(ph_0, 0, 4, \22int32\22), default_function.ph_0.ndim is expected to equal 3\00", align 1
@.str.8 = private constant [235 x i8] c"Assert fail: T.tvm_struct_get(ph_0, 0, 5, \22uint8\22) == T.uint8(2) and T.tvm_struct_get(ph_0, 0, 6, \22uint8\22) == T.uint8(32) and T.tvm_struct_get(ph_0, 0, 7, \22uint16\22) == T.uint16(1), default_function.ph_0.dtype is expected to be float32\00", align 1
@.str.9 = private constant [193 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_0_shape[0]) == 16, Argument default_function.ph_0.shape[0] has an unsatisfied constraint: 16 == T.Cast(\22int32\22, default_function_ph_0_shape[0])\00", align 1
@.str.10 = private constant [193 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_0_shape[1]) == 10, Argument default_function.ph_0.shape[1] has an unsatisfied constraint: 10 == T.Cast(\22int32\22, default_function_ph_0_shape[1])\00", align 1
@.str.11 = private constant [191 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_0_shape[2]) == 2, Argument default_function.ph_0.shape[2] has an unsatisfied constraint: 2 == T.Cast(\22int32\22, default_function_ph_0_shape[2])\00", align 1
@.str.12 = private constant [248 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_ph_0_strides[2]) and 2 == T.Cast(\22int32\22, default_function_ph_0_strides[1]) and 20 == T.Cast(\22int32\22, default_function_ph_0_strides[0]), default_function.ph_0.strides: expected to be compact array\00", align 1
@.str.13 = private constant [196 x i8] c"Assert fail: T.uint64(0) == T.tvm_struct_get(ph_0, 0, 8, \22uint64\22), Argument default_function.ph_0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(ph_0, 0, 8, \22uint64\22)\00", align 1
@.str.14 = private constant [176 x i8] c"Assert fail: T.tvm_struct_get(ph_0, 0, 10, \22int32\22) == 1, Argument default_function.ph_0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(ph_0, 0, 10, \22int32\22)\00", align 1
@.str.15 = private constant [107 x i8] c"Assert fail: 3 == T.tvm_struct_get(ph_4, 0, 4, \22int32\22), default_function.ph_4.ndim is expected to equal 3\00", align 1
@.str.16 = private constant [235 x i8] c"Assert fail: T.tvm_struct_get(ph_4, 0, 5, \22uint8\22) == T.uint8(2) and T.tvm_struct_get(ph_4, 0, 6, \22uint8\22) == T.uint8(32) and T.tvm_struct_get(ph_4, 0, 7, \22uint16\22) == T.uint16(1), default_function.ph_4.dtype is expected to be float32\00", align 1
@.str.17 = private constant [193 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_4_shape[0]) == 16, Argument default_function.ph_4.shape[0] has an unsatisfied constraint: 16 == T.Cast(\22int32\22, default_function_ph_4_shape[0])\00", align 1
@.str.18 = private constant [191 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_4_shape[1]) == 2, Argument default_function.ph_4.shape[1] has an unsatisfied constraint: 2 == T.Cast(\22int32\22, default_function_ph_4_shape[1])\00", align 1
@.str.19 = private constant [191 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_4_shape[2]) == 1, Argument default_function.ph_4.shape[2] has an unsatisfied constraint: 1 == T.Cast(\22int32\22, default_function_ph_4_shape[2])\00", align 1
@.str.20 = private constant [188 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_ph_4_strides[1]) and 2 == T.Cast(\22int32\22, default_function_ph_4_strides[0]), default_function.ph_4.strides: expected to be compact array\00", align 1
@.str.21 = private constant [196 x i8] c"Assert fail: T.uint64(0) == T.tvm_struct_get(ph_4, 0, 8, \22uint64\22), Argument default_function.ph_4.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(ph_4, 0, 8, \22uint64\22)\00", align 1
@.str.22 = private constant [176 x i8] c"Assert fail: T.tvm_struct_get(ph_4, 0, 10, \22int32\22) == 1, Argument default_function.ph_4.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(ph_4, 0, 10, \22int32\22)\00", align 1
@.str.23 = private constant [182 x i8] c"Assert fail: dev_id == T.tvm_struct_get(ph_4, 0, 9, \22int32\22), Argument default_function.ph_4.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(ph_4, 0, 9, \22int32\22)\00", align 1
@.str.24 = private constant [113 x i8] c"Assert fail: 3 == T.tvm_struct_get(compute, 0, 4, \22int32\22), default_function.compute.ndim is expected to equal 3\00", align 1
@.str.25 = private constant [247 x i8] c"Assert fail: T.tvm_struct_get(compute, 0, 5, \22uint8\22) == T.uint8(2) and T.tvm_struct_get(compute, 0, 6, \22uint8\22) == T.uint8(32) and T.tvm_struct_get(compute, 0, 7, \22uint16\22) == T.uint16(1), default_function.compute.dtype is expected to be float32\00", align 1
@.str.26 = private constant [202 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_compute_shape[0]) == 16, Argument default_function.compute.shape[0] has an unsatisfied constraint: 16 == T.Cast(\22int32\22, default_function_compute_shape[0])\00", align 1
@.str.27 = private constant [202 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_compute_shape[1]) == 10, Argument default_function.compute.shape[1] has an unsatisfied constraint: 10 == T.Cast(\22int32\22, default_function_compute_shape[1])\00", align 1
@.str.28 = private constant [200 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_compute_shape[2]) == 2, Argument default_function.compute.shape[2] has an unsatisfied constraint: 2 == T.Cast(\22int32\22, default_function_compute_shape[2])\00", align 1
@.str.29 = private constant [260 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_compute_strides[2]) and 2 == T.Cast(\22int32\22, default_function_compute_strides[1]) and 20 == T.Cast(\22int32\22, default_function_compute_strides[0]), default_function.compute.strides: expected to be compact array\00", align 1
@.str.30 = private constant [205 x i8] c"Assert fail: T.uint64(0) == T.tvm_struct_get(compute, 0, 8, \22uint64\22), Argument default_function.compute.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(compute, 0, 8, \22uint64\22)\00", align 1
@.str.31 = private constant [185 x i8] c"Assert fail: T.tvm_struct_get(compute, 0, 10, \22int32\22) == 1, Argument default_function.compute.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(compute, 0, 10, \22int32\22)\00", align 1
@.str.32 = private constant [191 x i8] c"Assert fail: dev_id == T.tvm_struct_get(compute, 0, 9, \22int32\22), Argument default_function.compute.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(compute, 0, 9, \22int32\22)\00", align 1
@.str.33 = private constant [133 x i8] c"Assert fail: 3 == T.tvm_struct_get(T_batch_matmul_NN, 0, 4, \22int32\22), default_function.T_batch_matmul_NN.ndim is expected to equal 3\00", align 1
@.str.34 = private constant [287 x i8] c"Assert fail: T.tvm_struct_get(T_batch_matmul_NN, 0, 5, \22uint8\22) == T.uint8(2) and T.tvm_struct_get(T_batch_matmul_NN, 0, 6, \22uint8\22) == T.uint8(32) and T.tvm_struct_get(T_batch_matmul_NN, 0, 7, \22uint16\22) == T.uint16(1), default_function.T_batch_matmul_NN.dtype is expected to be float32\00", align 1
@.str.35 = private constant [232 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_T_batch_matmul_NN_shape[0]) == 16, Argument default_function.T_batch_matmul_NN.shape[0] has an unsatisfied constraint: 16 == T.Cast(\22int32\22, default_function_T_batch_matmul_NN_shape[0])\00", align 1
@.str.36 = private constant [232 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_T_batch_matmul_NN_shape[1]) == 10, Argument default_function.T_batch_matmul_NN.shape[1] has an unsatisfied constraint: 10 == T.Cast(\22int32\22, default_function_T_batch_matmul_NN_shape[1])\00", align 1
@.str.37 = private constant [230 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_T_batch_matmul_NN_shape[2]) == 1, Argument default_function.T_batch_matmul_NN.shape[2] has an unsatisfied constraint: 1 == T.Cast(\22int32\22, default_function_T_batch_matmul_NN_shape[2])\00", align 1
@.str.38 = private constant [228 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_T_batch_matmul_NN_strides[1]) and 10 == T.Cast(\22int32\22, default_function_T_batch_matmul_NN_strides[0]), default_function.T_batch_matmul_NN.strides: expected to be compact array\00", align 1
@.str.39 = private constant [235 x i8] c"Assert fail: T.uint64(0) == T.tvm_struct_get(T_batch_matmul_NN, 0, 8, \22uint64\22), Argument default_function.T_batch_matmul_NN.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_batch_matmul_NN, 0, 8, \22uint64\22)\00", align 1
@.str.40 = private constant [215 x i8] c"Assert fail: T.tvm_struct_get(T_batch_matmul_NN, 0, 10, \22int32\22) == 1, Argument default_function.T_batch_matmul_NN.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_batch_matmul_NN, 0, 10, \22int32\22)\00", align 1
@.str.41 = private constant [221 x i8] c"Assert fail: dev_id == T.tvm_struct_get(T_batch_matmul_NN, 0, 9, \22int32\22), Argument default_function.T_batch_matmul_NN.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_batch_matmul_NN, 0, 9, \22int32\22)\00", align 1
@.tvm_func.default_function_kernel = internal unnamed_addr global i8* null, align 8
@.str.42 = private constant [24 x i8] c"default_function_kernel\00", align 1
@.str.43 = private constant [68 x i8] c"Assert fail: kernel_error_code == 0, Error executing compute kernel\00", align 1
@__tvm_main__ = weak dllexport local_unnamed_addr constant [17 x i8] c"default_function\00", align 1
@llvm.global_ctors = appending global [0 x { i32, void ()*, i8* }] zeroinitializer

define dllexport i32 @default_function(i8* noalias nocapture readonly %args, i32* noalias nocapture readonly %arg_type_ids, i32 %num_args, i8* noalias nocapture readnone %out_ret_value, i32* noalias nocapture readnone %out_ret_tcode, i8* noalias nocapture readnone %resource_handle) local_unnamed_addr #0 !dbg !5 {
entry:
  call void @llvm.dbg.value(metadata i8* %args, metadata !12, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i32* %arg_type_ids, metadata !13, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i32 %num_args, metadata !14, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i8* %out_ret_value, metadata !15, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i32* %out_ret_tcode, metadata !16, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i8* %resource_handle, metadata !17, metadata !DIExpression()), !dbg !18
  %stack_value_void_ptr178 = alloca [7 x %0], align 8, !dbg !18
  %stack_tcode179 = alloca [7 x i32], align 4, !dbg !18
  %stack_tcode179.sub = getelementptr inbounds [7 x i32], [7 x i32]* %stack_tcode179, i64 0, i64 0
  %stack_value = bitcast [7 x %0]* %stack_value_void_ptr178 to i8*, !dbg !18
  %0 = icmp eq i32 %num_args, 6, !dbg !18
  br i1 %0, label %assert_end, label %assert_fail, !dbg !18, !prof !19

assert_fail:                                      ; preds = %entry
  %1 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %1(i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end:                                       ; preds = %entry
  %ph_0.code = load i32, i32* %arg_type_ids, align 4, !dbg !18, !tbaa !23
  %2 = getelementptr inbounds i32, i32* %arg_type_ids, i64 1, !dbg !18
  %ph_4.code = load i32, i32* %2, align 4, !dbg !18, !tbaa !34
  %3 = getelementptr inbounds i32, i32* %arg_type_ids, i64 2, !dbg !18
  %compute.code = load i32, i32* %3, align 4, !dbg !18, !tbaa !36
  %4 = getelementptr inbounds i32, i32* %arg_type_ids, i64 3, !dbg !18
  %T_batch_matmul_NN.code = load i32, i32* %4, align 4, !dbg !18, !tbaa !39
  %5 = getelementptr inbounds i32, i32* %arg_type_ids, i64 4, !dbg !18
  %compute.code1 = load i32, i32* %5, align 4, !dbg !18, !tbaa !41
  %6 = getelementptr inbounds i32, i32* %arg_type_ids, i64 5, !dbg !18
  %compute.code2 = load i32, i32* %6, align 4, !dbg !18, !tbaa !45
  %7 = bitcast i8* %args to %1**, !dbg !18
  %ph_0180 = load %1*, %1** %7, align 8, !dbg !18
  %8 = getelementptr inbounds i8, i8* %args, i64 8, !dbg !18
  %9 = bitcast i8* %8 to %1**, !dbg !18
  %ph_4181 = load %1*, %1** %9, align 8, !dbg !18
  %10 = getelementptr inbounds i8, i8* %args, i64 16, !dbg !18
  %11 = bitcast i8* %10 to %1**, !dbg !18
  %compute182 = load %1*, %1** %11, align 8, !dbg !18
  %12 = getelementptr inbounds i8, i8* %args, i64 24, !dbg !18
  %13 = bitcast i8* %12 to %1**, !dbg !18
  %T_batch_matmul_NN183 = load %1*, %1** %13, align 8, !dbg !18
  %14 = getelementptr inbounds i8, i8* %args, i64 32, !dbg !18
  %15 = bitcast i8* %14 to %1**, !dbg !18
  %compute3184 = load %1*, %1** %15, align 8, !dbg !18
  %16 = getelementptr inbounds i8, i8* %args, i64 40, !dbg !18
  %17 = bitcast i8* %16 to %1**, !dbg !18
  %compute4185 = load %1*, %1** %17, align 8, !dbg !18
  %18 = bitcast %1* %ph_0180 to float**, !dbg !18
  %ph_0_void_ptr186 = load float*, float** %18, align 8, !dbg !18
  %ptrint = ptrtoint float* %ph_0_void_ptr186 to i64, !dbg !18
  %maskedptr = and i64 %ptrint, 63, !dbg !18
  %maskcond = icmp eq i64 %maskedptr, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond), !dbg !18
  %19 = getelementptr inbounds %1, %1* %ph_0180, i64 0, i32 4, !dbg !18
  %default_function.ph_0.shape = load i64*, i64** %19, align 8, !dbg !18
  %20 = getelementptr inbounds %1, %1* %ph_0180, i64 0, i32 5, !dbg !18
  %default_function.ph_0.strides = load i64*, i64** %20, align 8, !dbg !18
  %21 = getelementptr inbounds %1, %1* %ph_0180, i64 0, i32 1, i32 1, !dbg !18
  %dev_id = load i32, i32* %21, align 4, !dbg !18
  %22 = bitcast %1* %ph_4181 to float**, !dbg !18
  %ph_4_void_ptr187 = load float*, float** %22, align 8, !dbg !18
  %ptrint7 = ptrtoint float* %ph_4_void_ptr187 to i64, !dbg !18
  %maskedptr8 = and i64 %ptrint7, 63, !dbg !18
  %maskcond9 = icmp eq i64 %maskedptr8, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond9), !dbg !18
  %23 = getelementptr inbounds %1, %1* %ph_4181, i64 0, i32 4, !dbg !18
  %default_function.ph_4.shape = load i64*, i64** %23, align 8, !dbg !18
  %24 = getelementptr inbounds %1, %1* %ph_4181, i64 0, i32 5, !dbg !18
  %default_function.ph_4.strides = load i64*, i64** %24, align 8, !dbg !18
  %25 = bitcast %1* %compute182 to float**, !dbg !18
  %compute_void_ptr188 = load float*, float** %25, align 8, !dbg !18
  %ptrint11 = ptrtoint float* %compute_void_ptr188 to i64, !dbg !18
  %maskedptr12 = and i64 %ptrint11, 63, !dbg !18
  %maskcond13 = icmp eq i64 %maskedptr12, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond13), !dbg !18
  %26 = getelementptr inbounds %1, %1* %compute182, i64 0, i32 4, !dbg !18
  %default_function.compute.shape = load i64*, i64** %26, align 8, !dbg !18
  %27 = getelementptr inbounds %1, %1* %compute182, i64 0, i32 5, !dbg !18
  %default_function.compute.strides = load i64*, i64** %27, align 8, !dbg !18
  %28 = bitcast %1* %T_batch_matmul_NN183 to float**, !dbg !18
  %T_batch_matmul_NN_void_ptr189 = load float*, float** %28, align 8, !dbg !18
  %ptrint15 = ptrtoint float* %T_batch_matmul_NN_void_ptr189 to i64, !dbg !18
  %maskedptr16 = and i64 %ptrint15, 63, !dbg !18
  %maskcond17 = icmp eq i64 %maskedptr16, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond17), !dbg !18
  %29 = getelementptr inbounds %1, %1* %T_batch_matmul_NN183, i64 0, i32 4, !dbg !18
  %default_function.T_batch_matmul_NN.shape = load i64*, i64** %29, align 8, !dbg !18
  %30 = getelementptr inbounds %1, %1* %T_batch_matmul_NN183, i64 0, i32 5, !dbg !18
  %default_function.T_batch_matmul_NN.strides = load i64*, i64** %30, align 8, !dbg !18
  %31 = bitcast %1* %compute3184 to float**, !dbg !18
  %compute_void_ptr18190 = load float*, float** %31, align 8, !dbg !18
  %ptrint20 = ptrtoint float* %compute_void_ptr18190 to i64, !dbg !18
  %maskedptr21 = and i64 %ptrint20, 63, !dbg !18
  %maskcond22 = icmp eq i64 %maskedptr21, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond22), !dbg !18
  %32 = getelementptr inbounds %1, %1* %compute3184, i64 0, i32 4, !dbg !18
  %default_function.compute.shape23 = load i64*, i64** %32, align 8, !dbg !18
  %33 = getelementptr inbounds %1, %1* %compute3184, i64 0, i32 5, !dbg !18
  %default_function.compute.strides24 = load i64*, i64** %33, align 8, !dbg !18
  %34 = bitcast %1* %compute4185 to float**, !dbg !18
  %compute_void_ptr25191 = load float*, float** %34, align 8, !dbg !18
  %ptrint27 = ptrtoint float* %compute_void_ptr25191 to i64, !dbg !18
  %maskedptr28 = and i64 %ptrint27, 63, !dbg !18
  %maskcond29 = icmp eq i64 %maskedptr28, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond29), !dbg !18
  %35 = getelementptr inbounds %1, %1* %compute4185, i64 0, i32 4, !dbg !18
  %default_function.compute.shape30 = load i64*, i64** %35, align 8, !dbg !18
  %36 = getelementptr inbounds %1, %1* %compute4185, i64 0, i32 5, !dbg !18
  %default_function.compute.strides31 = load i64*, i64** %36, align 8, !dbg !18
  switch i32 %ph_0.code, label %assert_fail32 [
    i32 13, label %assert_end33
    i32 7, label %assert_end33
    i32 4, label %assert_end33
    i32 3, label %assert_end33
  ], !dbg !18

assert_fail32:                                    ; preds = %assert_end
  %37 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %37(i8* getelementptr inbounds ([130 x i8], [130 x i8]* @.str.1, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end33:                                     ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  switch i32 %ph_4.code, label %assert_fail34 [
    i32 13, label %assert_end35
    i32 7, label %assert_end35
    i32 4, label %assert_end35
    i32 3, label %assert_end35
  ], !dbg !18

assert_fail34:                                    ; preds = %assert_end33
  %38 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %38(i8* getelementptr inbounds ([130 x i8], [130 x i8]* @.str.2, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end35:                                     ; preds = %assert_end33, %assert_end33, %assert_end33, %assert_end33
  switch i32 %compute.code, label %assert_fail36 [
    i32 13, label %assert_end37
    i32 7, label %assert_end37
    i32 4, label %assert_end37
    i32 3, label %assert_end37
  ], !dbg !18

assert_fail36:                                    ; preds = %assert_end35
  %39 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %39(i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.3, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end37:                                     ; preds = %assert_end35, %assert_end35, %assert_end35, %assert_end35
  switch i32 %T_batch_matmul_NN.code, label %assert_fail38 [
    i32 13, label %assert_end39
    i32 7, label %assert_end39
    i32 4, label %assert_end39
    i32 3, label %assert_end39
  ], !dbg !18

assert_fail38:                                    ; preds = %assert_end37
  %40 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %40(i8* getelementptr inbounds ([182 x i8], [182 x i8]* @.str.4, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end39:                                     ; preds = %assert_end37, %assert_end37, %assert_end37, %assert_end37
  switch i32 %compute.code1, label %assert_fail40 [
    i32 13, label %assert_end41
    i32 7, label %assert_end41
    i32 4, label %assert_end41
    i32 3, label %assert_end41
  ], !dbg !18

assert_fail40:                                    ; preds = %assert_end39
  %41 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %41(i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.5, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end41:                                     ; preds = %assert_end39, %assert_end39, %assert_end39, %assert_end39
  switch i32 %compute.code2, label %assert_fail42 [
    i32 13, label %assert_end43
    i32 7, label %assert_end43
    i32 4, label %assert_end43
    i32 3, label %assert_end43
  ], !dbg !18

assert_fail42:                                    ; preds = %assert_end41
  %42 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %42(i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.6, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end43:                                     ; preds = %assert_end41, %assert_end41, %assert_end41, %assert_end41
  %43 = getelementptr inbounds %1, %1* %ph_0180, i64 0, i32 2, !dbg !18
  %44 = load i32, i32* %43, align 4, !dbg !18
  %45 = icmp eq i32 %44, 3, !dbg !18
  br i1 %45, label %assert_end47, label %assert_fail44, !dbg !18, !prof !19

assert_fail44:                                    ; preds = %assert_end43
  %46 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %46(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.7, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end47:                                     ; preds = %assert_end43
  %47 = getelementptr inbounds %1, %1* %ph_0180, i64 0, i32 3, i32 2, !dbg !18
  %48 = load i16, i16* %47, align 2, !dbg !18
  %49 = icmp eq i16 %48, 1, !dbg !18
  %50 = getelementptr inbounds %1, %1* %ph_0180, i64 0, i32 3, i32 1, !dbg !18
  %51 = load i8, i8* %50, align 1, !dbg !18
  %52 = icmp eq i8 %51, 32, !dbg !18
  %53 = getelementptr inbounds %1, %1* %ph_0180, i64 0, i32 3, i32 0, !dbg !18
  %54 = load i8, i8* %53, align 1, !dbg !18
  %55 = icmp eq i8 %54, 2, !dbg !18
  %56 = and i1 %52, %55, !dbg !18
  %57 = and i1 %49, %56, !dbg !18
  br i1 %57, label %assert_end49, label %assert_fail48, !dbg !18, !prof !19

assert_fail48:                                    ; preds = %assert_end47
  %58 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %58(i8* getelementptr inbounds ([235 x i8], [235 x i8]* @.str.8, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end49:                                     ; preds = %assert_end47
  %59 = load i64, i64* %default_function.ph_0.shape, align 8, !dbg !18, !tbaa !47
  %60 = trunc i64 %59 to i32, !dbg !18
  %61 = icmp eq i32 %60, 16, !dbg !18
  br i1 %61, label %assert_end51, label %assert_fail50, !dbg !18, !prof !19

assert_fail50:                                    ; preds = %assert_end49
  %62 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %62(i8* getelementptr inbounds ([193 x i8], [193 x i8]* @.str.9, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end51:                                     ; preds = %assert_end49
  %63 = getelementptr inbounds i64, i64* %default_function.ph_0.shape, i64 1, !dbg !18
  %64 = load i64, i64* %63, align 8, !dbg !18, !tbaa !57
  %65 = trunc i64 %64 to i32, !dbg !18
  %66 = icmp eq i32 %65, 10, !dbg !18
  br i1 %66, label %assert_end53, label %assert_fail52, !dbg !18, !prof !19

assert_fail52:                                    ; preds = %assert_end51
  %67 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %67(i8* getelementptr inbounds ([193 x i8], [193 x i8]* @.str.10, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end53:                                     ; preds = %assert_end51
  %68 = getelementptr inbounds i64, i64* %default_function.ph_0.shape, i64 2, !dbg !18
  %69 = load i64, i64* %68, align 8, !dbg !18, !tbaa !59
  %70 = trunc i64 %69 to i32, !dbg !18
  %71 = icmp eq i32 %70, 2, !dbg !18
  br i1 %71, label %assert_end55, label %assert_fail54, !dbg !18, !prof !19

assert_fail54:                                    ; preds = %assert_end53
  %72 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %72(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.11, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end55:                                     ; preds = %assert_end53
  %73 = icmp eq i64* %default_function.ph_0.strides, null, !dbg !18
  br i1 %73, label %if_end, label %if_then, !dbg !18, !prof !62

if_then:                                          ; preds = %assert_end55
  %74 = load i64, i64* %default_function.ph_0.strides, align 8, !dbg !18, !tbaa !63
  %75 = trunc i64 %74 to i32, !dbg !18
  %76 = icmp eq i32 %75, 20, !dbg !18
  %77 = getelementptr inbounds i64, i64* %default_function.ph_0.strides, i64 1, !dbg !18
  %78 = load i64, i64* %77, align 8, !dbg !18, !tbaa !73
  %79 = trunc i64 %78 to i32, !dbg !18
  %80 = icmp eq i32 %79, 2, !dbg !18
  %81 = getelementptr inbounds i64, i64* %default_function.ph_0.strides, i64 2, !dbg !18
  %82 = load i64, i64* %81, align 8, !dbg !18, !tbaa !75
  %83 = trunc i64 %82 to i32, !dbg !18
  %84 = icmp eq i32 %83, 1, !dbg !18
  %85 = and i1 %80, %84, !dbg !18
  %86 = and i1 %76, %85, !dbg !18
  br i1 %86, label %if_end, label %assert_fail56, !dbg !18, !prof !19

if_end:                                           ; preds = %assert_end55, %if_then
  %87 = getelementptr inbounds %1, %1* %ph_0180, i64 0, i32 6, !dbg !18
  %88 = load i64, i64* %87, align 8, !dbg !18
  %89 = icmp eq i64 %88, 0, !dbg !18
  br i1 %89, label %assert_end59, label %assert_fail58, !dbg !18, !prof !19

assert_fail56:                                    ; preds = %if_then
  %90 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %90(i8* getelementptr inbounds ([248 x i8], [248 x i8]* @.str.12, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail58:                                    ; preds = %if_end
  %91 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %91(i8* getelementptr inbounds ([196 x i8], [196 x i8]* @.str.13, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end59:                                     ; preds = %if_end
  %92 = getelementptr inbounds %1, %1* %ph_0180, i64 0, i32 1, i32 0, !dbg !18
  %93 = load i32, i32* %92, align 4, !dbg !18
  %94 = icmp eq i32 %93, 1, !dbg !18
  br i1 %94, label %assert_end61, label %assert_fail60, !dbg !18, !prof !19

assert_fail60:                                    ; preds = %assert_end59
  %95 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %95(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.14, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end61:                                     ; preds = %assert_end59
  %96 = getelementptr inbounds %1, %1* %ph_4181, i64 0, i32 2, !dbg !18
  %97 = load i32, i32* %96, align 4, !dbg !18
  %98 = icmp eq i32 %97, 3, !dbg !18
  br i1 %98, label %assert_end65, label %assert_fail62, !dbg !18, !prof !19

assert_fail62:                                    ; preds = %assert_end61
  %99 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %99(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.15, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end65:                                     ; preds = %assert_end61
  %100 = getelementptr inbounds %1, %1* %ph_4181, i64 0, i32 3, i32 2, !dbg !18
  %101 = load i16, i16* %100, align 2, !dbg !18
  %102 = icmp eq i16 %101, 1, !dbg !18
  %103 = getelementptr inbounds %1, %1* %ph_4181, i64 0, i32 3, i32 1, !dbg !18
  %104 = load i8, i8* %103, align 1, !dbg !18
  %105 = icmp eq i8 %104, 32, !dbg !18
  %106 = getelementptr inbounds %1, %1* %ph_4181, i64 0, i32 3, i32 0, !dbg !18
  %107 = load i8, i8* %106, align 1, !dbg !18
  %108 = icmp eq i8 %107, 2, !dbg !18
  %109 = and i1 %105, %108, !dbg !18
  %110 = and i1 %102, %109, !dbg !18
  br i1 %110, label %assert_end67, label %assert_fail66, !dbg !18, !prof !19

assert_fail66:                                    ; preds = %assert_end65
  %111 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %111(i8* getelementptr inbounds ([235 x i8], [235 x i8]* @.str.16, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end67:                                     ; preds = %assert_end65
  %112 = load i64, i64* %default_function.ph_4.shape, align 8, !dbg !18, !tbaa !78
  %113 = trunc i64 %112 to i32, !dbg !18
  %114 = icmp eq i32 %113, 16, !dbg !18
  br i1 %114, label %assert_end69, label %assert_fail68, !dbg !18, !prof !19

assert_fail68:                                    ; preds = %assert_end67
  %115 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %115(i8* getelementptr inbounds ([193 x i8], [193 x i8]* @.str.17, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end69:                                     ; preds = %assert_end67
  %116 = getelementptr inbounds i64, i64* %default_function.ph_4.shape, i64 1, !dbg !18
  %117 = load i64, i64* %116, align 8, !dbg !18, !tbaa !88
  %118 = trunc i64 %117 to i32, !dbg !18
  %119 = icmp eq i32 %118, 2, !dbg !18
  br i1 %119, label %assert_end71, label %assert_fail70, !dbg !18, !prof !19

assert_fail70:                                    ; preds = %assert_end69
  %120 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %120(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.18, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end71:                                     ; preds = %assert_end69
  %121 = getelementptr inbounds i64, i64* %default_function.ph_4.shape, i64 2, !dbg !18
  %122 = load i64, i64* %121, align 8, !dbg !18, !tbaa !90
  %123 = trunc i64 %122 to i32, !dbg !18
  %124 = icmp eq i32 %123, 1, !dbg !18
  br i1 %124, label %assert_end73, label %assert_fail72, !dbg !18, !prof !19

assert_fail72:                                    ; preds = %assert_end71
  %125 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %125(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.19, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end73:                                     ; preds = %assert_end71
  %126 = icmp eq i64* %default_function.ph_4.strides, null, !dbg !18
  br i1 %126, label %if_end75, label %if_then74, !dbg !18, !prof !62

if_then74:                                        ; preds = %assert_end73
  %127 = load i64, i64* %default_function.ph_4.strides, align 8, !dbg !18, !tbaa !93
  %128 = trunc i64 %127 to i32, !dbg !18
  %129 = icmp eq i32 %128, 2, !dbg !18
  %130 = getelementptr inbounds i64, i64* %default_function.ph_4.strides, i64 1, !dbg !18
  %131 = load i64, i64* %130, align 8, !dbg !18, !tbaa !103
  %132 = trunc i64 %131 to i32, !dbg !18
  %133 = icmp eq i32 %132, 1, !dbg !18
  %134 = and i1 %129, %133, !dbg !18
  br i1 %134, label %if_end75, label %assert_fail76, !dbg !18, !prof !19

if_end75:                                         ; preds = %assert_end73, %if_then74
  %135 = getelementptr inbounds %1, %1* %ph_4181, i64 0, i32 6, !dbg !18
  %136 = load i64, i64* %135, align 8, !dbg !18
  %137 = icmp eq i64 %136, 0, !dbg !18
  br i1 %137, label %assert_end79, label %assert_fail78, !dbg !18, !prof !19

assert_fail76:                                    ; preds = %if_then74
  %138 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %138(i8* getelementptr inbounds ([188 x i8], [188 x i8]* @.str.20, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail78:                                    ; preds = %if_end75
  %139 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %139(i8* getelementptr inbounds ([196 x i8], [196 x i8]* @.str.21, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end79:                                     ; preds = %if_end75
  %140 = getelementptr inbounds %1, %1* %ph_4181, i64 0, i32 1, i32 0, !dbg !18
  %141 = load i32, i32* %140, align 4, !dbg !18
  %142 = icmp eq i32 %141, 1, !dbg !18
  br i1 %142, label %assert_end81, label %assert_fail80, !dbg !18, !prof !19

assert_fail80:                                    ; preds = %assert_end79
  %143 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %143(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.22, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end81:                                     ; preds = %assert_end79
  %144 = getelementptr inbounds %1, %1* %ph_4181, i64 0, i32 1, i32 1, !dbg !18
  %145 = load i32, i32* %144, align 4, !dbg !18
  %146 = icmp eq i32 %dev_id, %145, !dbg !18
  br i1 %146, label %assert_end83, label %assert_fail82, !dbg !18, !prof !19

assert_fail82:                                    ; preds = %assert_end81
  %147 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %147(i8* getelementptr inbounds ([182 x i8], [182 x i8]* @.str.23, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end83:                                     ; preds = %assert_end81
  %148 = getelementptr inbounds %1, %1* %compute182, i64 0, i32 2, !dbg !18
  %149 = load i32, i32* %148, align 4, !dbg !18
  %150 = icmp eq i32 %149, 3, !dbg !18
  br i1 %150, label %assert_end87, label %assert_fail84, !dbg !18, !prof !19

assert_fail84:                                    ; preds = %assert_end83
  %151 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %151(i8* getelementptr inbounds ([113 x i8], [113 x i8]* @.str.24, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end87:                                     ; preds = %assert_end83
  %152 = getelementptr inbounds %1, %1* %compute182, i64 0, i32 3, i32 2, !dbg !18
  %153 = load i16, i16* %152, align 2, !dbg !18
  %154 = icmp eq i16 %153, 1, !dbg !18
  %155 = getelementptr inbounds %1, %1* %compute182, i64 0, i32 3, i32 1, !dbg !18
  %156 = load i8, i8* %155, align 1, !dbg !18
  %157 = icmp eq i8 %156, 32, !dbg !18
  %158 = getelementptr inbounds %1, %1* %compute182, i64 0, i32 3, i32 0, !dbg !18
  %159 = load i8, i8* %158, align 1, !dbg !18
  %160 = icmp eq i8 %159, 2, !dbg !18
  %161 = and i1 %157, %160, !dbg !18
  %162 = and i1 %154, %161, !dbg !18
  br i1 %162, label %assert_end89, label %assert_fail88, !dbg !18, !prof !19

assert_fail88:                                    ; preds = %assert_end87
  %163 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %163(i8* getelementptr inbounds ([247 x i8], [247 x i8]* @.str.25, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end89:                                     ; preds = %assert_end87
  %164 = load i64, i64* %default_function.compute.shape, align 8, !dbg !18, !tbaa !105
  %165 = trunc i64 %164 to i32, !dbg !18
  %166 = icmp eq i32 %165, 16, !dbg !18
  br i1 %166, label %assert_end91, label %assert_fail90, !dbg !18, !prof !19

assert_fail90:                                    ; preds = %assert_end89
  %167 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %167(i8* getelementptr inbounds ([202 x i8], [202 x i8]* @.str.26, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end91:                                     ; preds = %assert_end89
  %168 = getelementptr inbounds i64, i64* %default_function.compute.shape, i64 1, !dbg !18
  %169 = load i64, i64* %168, align 8, !dbg !18, !tbaa !115
  %170 = trunc i64 %169 to i32, !dbg !18
  %171 = icmp eq i32 %170, 10, !dbg !18
  br i1 %171, label %assert_end93, label %assert_fail92, !dbg !18, !prof !19

assert_fail92:                                    ; preds = %assert_end91
  %172 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %172(i8* getelementptr inbounds ([202 x i8], [202 x i8]* @.str.27, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end93:                                     ; preds = %assert_end91
  %173 = getelementptr inbounds i64, i64* %default_function.compute.shape, i64 2, !dbg !18
  %174 = load i64, i64* %173, align 8, !dbg !18, !tbaa !117
  %175 = trunc i64 %174 to i32, !dbg !18
  %176 = icmp eq i32 %175, 2, !dbg !18
  br i1 %176, label %assert_end95, label %assert_fail94, !dbg !18, !prof !19

assert_fail94:                                    ; preds = %assert_end93
  %177 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %177(i8* getelementptr inbounds ([200 x i8], [200 x i8]* @.str.28, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end95:                                     ; preds = %assert_end93
  %178 = icmp eq i64* %default_function.compute.strides, null, !dbg !18
  br i1 %178, label %if_end97, label %if_then96, !dbg !18, !prof !62

if_then96:                                        ; preds = %assert_end95
  %179 = load i64, i64* %default_function.compute.strides, align 8, !dbg !18, !tbaa !120
  %180 = trunc i64 %179 to i32, !dbg !18
  %181 = icmp eq i32 %180, 20, !dbg !18
  %182 = getelementptr inbounds i64, i64* %default_function.compute.strides, i64 1, !dbg !18
  %183 = load i64, i64* %182, align 8, !dbg !18, !tbaa !130
  %184 = trunc i64 %183 to i32, !dbg !18
  %185 = icmp eq i32 %184, 2, !dbg !18
  %186 = getelementptr inbounds i64, i64* %default_function.compute.strides, i64 2, !dbg !18
  %187 = load i64, i64* %186, align 8, !dbg !18, !tbaa !132
  %188 = trunc i64 %187 to i32, !dbg !18
  %189 = icmp eq i32 %188, 1, !dbg !18
  %190 = and i1 %185, %189, !dbg !18
  %191 = and i1 %181, %190, !dbg !18
  br i1 %191, label %if_end97, label %assert_fail98, !dbg !18, !prof !19

if_end97:                                         ; preds = %assert_end95, %if_then96
  %192 = getelementptr inbounds %1, %1* %compute182, i64 0, i32 6, !dbg !18
  %193 = load i64, i64* %192, align 8, !dbg !18
  %194 = icmp eq i64 %193, 0, !dbg !18
  br i1 %194, label %assert_end101, label %assert_fail100, !dbg !18, !prof !19

assert_fail98:                                    ; preds = %if_then96
  %195 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %195(i8* getelementptr inbounds ([260 x i8], [260 x i8]* @.str.29, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail100:                                   ; preds = %if_end97
  %196 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %196(i8* getelementptr inbounds ([205 x i8], [205 x i8]* @.str.30, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end101:                                    ; preds = %if_end97
  %197 = getelementptr inbounds %1, %1* %compute182, i64 0, i32 1, i32 0, !dbg !18
  %198 = load i32, i32* %197, align 4, !dbg !18
  %199 = icmp eq i32 %198, 1, !dbg !18
  br i1 %199, label %assert_end103, label %assert_fail102, !dbg !18, !prof !19

assert_fail102:                                   ; preds = %assert_end101
  %200 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %200(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.31, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end103:                                    ; preds = %assert_end101
  %201 = getelementptr inbounds %1, %1* %compute182, i64 0, i32 1, i32 1, !dbg !18
  %202 = load i32, i32* %201, align 4, !dbg !18
  %203 = icmp eq i32 %dev_id, %202, !dbg !18
  br i1 %203, label %assert_end105, label %assert_fail104, !dbg !18, !prof !19

assert_fail104:                                   ; preds = %assert_end103
  %204 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %204(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.32, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end105:                                    ; preds = %assert_end103
  %205 = getelementptr inbounds %1, %1* %T_batch_matmul_NN183, i64 0, i32 2, !dbg !18
  %206 = load i32, i32* %205, align 4, !dbg !18
  %207 = icmp eq i32 %206, 3, !dbg !18
  br i1 %207, label %assert_end109, label %assert_fail106, !dbg !18, !prof !19

assert_fail106:                                   ; preds = %assert_end105
  %208 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %208(i8* getelementptr inbounds ([133 x i8], [133 x i8]* @.str.33, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end109:                                    ; preds = %assert_end105
  %209 = getelementptr inbounds %1, %1* %T_batch_matmul_NN183, i64 0, i32 3, i32 2, !dbg !18
  %210 = load i16, i16* %209, align 2, !dbg !18
  %211 = icmp eq i16 %210, 1, !dbg !18
  %212 = getelementptr inbounds %1, %1* %T_batch_matmul_NN183, i64 0, i32 3, i32 1, !dbg !18
  %213 = load i8, i8* %212, align 1, !dbg !18
  %214 = icmp eq i8 %213, 32, !dbg !18
  %215 = getelementptr inbounds %1, %1* %T_batch_matmul_NN183, i64 0, i32 3, i32 0, !dbg !18
  %216 = load i8, i8* %215, align 1, !dbg !18
  %217 = icmp eq i8 %216, 2, !dbg !18
  %218 = and i1 %214, %217, !dbg !18
  %219 = and i1 %211, %218, !dbg !18
  br i1 %219, label %assert_end111, label %assert_fail110, !dbg !18, !prof !19

assert_fail110:                                   ; preds = %assert_end109
  %220 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %220(i8* getelementptr inbounds ([287 x i8], [287 x i8]* @.str.34, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end111:                                    ; preds = %assert_end109
  %221 = load i64, i64* %default_function.T_batch_matmul_NN.shape, align 8, !dbg !18, !tbaa !135
  %222 = trunc i64 %221 to i32, !dbg !18
  %223 = icmp eq i32 %222, 16, !dbg !18
  br i1 %223, label %assert_end113, label %assert_fail112, !dbg !18, !prof !19

assert_fail112:                                   ; preds = %assert_end111
  %224 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %224(i8* getelementptr inbounds ([232 x i8], [232 x i8]* @.str.35, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end113:                                    ; preds = %assert_end111
  %225 = getelementptr inbounds i64, i64* %default_function.T_batch_matmul_NN.shape, i64 1, !dbg !18
  %226 = load i64, i64* %225, align 8, !dbg !18, !tbaa !145
  %227 = trunc i64 %226 to i32, !dbg !18
  %228 = icmp eq i32 %227, 10, !dbg !18
  br i1 %228, label %assert_end115, label %assert_fail114, !dbg !18, !prof !19

assert_fail114:                                   ; preds = %assert_end113
  %229 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %229(i8* getelementptr inbounds ([232 x i8], [232 x i8]* @.str.36, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end115:                                    ; preds = %assert_end113
  %230 = getelementptr inbounds i64, i64* %default_function.T_batch_matmul_NN.shape, i64 2, !dbg !18
  %231 = load i64, i64* %230, align 8, !dbg !18, !tbaa !147
  %232 = trunc i64 %231 to i32, !dbg !18
  %233 = icmp eq i32 %232, 1, !dbg !18
  br i1 %233, label %assert_end117, label %assert_fail116, !dbg !18, !prof !19

assert_fail116:                                   ; preds = %assert_end115
  %234 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %234(i8* getelementptr inbounds ([230 x i8], [230 x i8]* @.str.37, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end117:                                    ; preds = %assert_end115
  %235 = icmp eq i64* %default_function.T_batch_matmul_NN.strides, null, !dbg !18
  br i1 %235, label %if_end119, label %if_then118, !dbg !18, !prof !62

if_then118:                                       ; preds = %assert_end117
  %236 = load i64, i64* %default_function.T_batch_matmul_NN.strides, align 8, !dbg !18, !tbaa !150
  %237 = trunc i64 %236 to i32, !dbg !18
  %238 = icmp eq i32 %237, 10, !dbg !18
  %239 = getelementptr inbounds i64, i64* %default_function.T_batch_matmul_NN.strides, i64 1, !dbg !18
  %240 = load i64, i64* %239, align 8, !dbg !18, !tbaa !160
  %241 = trunc i64 %240 to i32, !dbg !18
  %242 = icmp eq i32 %241, 1, !dbg !18
  %243 = and i1 %238, %242, !dbg !18
  br i1 %243, label %if_end119, label %assert_fail120, !dbg !18, !prof !19

if_end119:                                        ; preds = %assert_end117, %if_then118
  %244 = getelementptr inbounds %1, %1* %T_batch_matmul_NN183, i64 0, i32 6, !dbg !18
  %245 = load i64, i64* %244, align 8, !dbg !18
  %246 = icmp eq i64 %245, 0, !dbg !18
  br i1 %246, label %assert_end123, label %assert_fail122, !dbg !18, !prof !19

assert_fail120:                                   ; preds = %if_then118
  %247 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %247(i8* getelementptr inbounds ([228 x i8], [228 x i8]* @.str.38, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail122:                                   ; preds = %if_end119
  %248 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %248(i8* getelementptr inbounds ([235 x i8], [235 x i8]* @.str.39, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end123:                                    ; preds = %if_end119
  %249 = getelementptr inbounds %1, %1* %T_batch_matmul_NN183, i64 0, i32 1, i32 0, !dbg !18
  %250 = load i32, i32* %249, align 4, !dbg !18
  %251 = icmp eq i32 %250, 1, !dbg !18
  br i1 %251, label %assert_end125, label %assert_fail124, !dbg !18, !prof !19

assert_fail124:                                   ; preds = %assert_end123
  %252 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %252(i8* getelementptr inbounds ([215 x i8], [215 x i8]* @.str.40, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end125:                                    ; preds = %assert_end123
  %253 = getelementptr inbounds %1, %1* %T_batch_matmul_NN183, i64 0, i32 1, i32 1, !dbg !18
  %254 = load i32, i32* %253, align 4, !dbg !18
  %255 = icmp eq i32 %dev_id, %254, !dbg !18
  br i1 %255, label %assert_end127, label %assert_fail126, !dbg !18, !prof !19

assert_fail126:                                   ; preds = %assert_end125
  %256 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %256(i8* getelementptr inbounds ([221 x i8], [221 x i8]* @.str.41, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end127:                                    ; preds = %assert_end125
  %257 = getelementptr inbounds %1, %1* %compute3184, i64 0, i32 2, !dbg !18
  %258 = load i32, i32* %257, align 4, !dbg !18
  %259 = icmp eq i32 %258, 3, !dbg !18
  br i1 %259, label %assert_end131, label %assert_fail128, !dbg !18, !prof !19

assert_fail128:                                   ; preds = %assert_end127
  %260 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %260(i8* getelementptr inbounds ([113 x i8], [113 x i8]* @.str.24, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end131:                                    ; preds = %assert_end127
  %261 = getelementptr inbounds %1, %1* %compute3184, i64 0, i32 3, i32 2, !dbg !18
  %262 = load i16, i16* %261, align 2, !dbg !18
  %263 = icmp eq i16 %262, 1, !dbg !18
  %264 = getelementptr inbounds %1, %1* %compute3184, i64 0, i32 3, i32 1, !dbg !18
  %265 = load i8, i8* %264, align 1, !dbg !18
  %266 = icmp eq i8 %265, 32, !dbg !18
  %267 = getelementptr inbounds %1, %1* %compute3184, i64 0, i32 3, i32 0, !dbg !18
  %268 = load i8, i8* %267, align 1, !dbg !18
  %269 = icmp eq i8 %268, 2, !dbg !18
  %270 = and i1 %266, %269, !dbg !18
  %271 = and i1 %263, %270, !dbg !18
  br i1 %271, label %assert_end133, label %assert_fail132, !dbg !18, !prof !19

assert_fail132:                                   ; preds = %assert_end131
  %272 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %272(i8* getelementptr inbounds ([247 x i8], [247 x i8]* @.str.25, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end133:                                    ; preds = %assert_end131
  %273 = load i64, i64* %default_function.compute.shape23, align 8, !dbg !18, !tbaa !162
  %274 = trunc i64 %273 to i32, !dbg !18
  %275 = icmp eq i32 %274, 16, !dbg !18
  br i1 %275, label %assert_end135, label %assert_fail134, !dbg !18, !prof !19

assert_fail134:                                   ; preds = %assert_end133
  %276 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %276(i8* getelementptr inbounds ([202 x i8], [202 x i8]* @.str.26, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end135:                                    ; preds = %assert_end133
  %277 = getelementptr inbounds i64, i64* %default_function.compute.shape23, i64 1, !dbg !18
  %278 = load i64, i64* %277, align 8, !dbg !18, !tbaa !172
  %279 = trunc i64 %278 to i32, !dbg !18
  %280 = icmp eq i32 %279, 10, !dbg !18
  br i1 %280, label %assert_end137, label %assert_fail136, !dbg !18, !prof !19

assert_fail136:                                   ; preds = %assert_end135
  %281 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %281(i8* getelementptr inbounds ([202 x i8], [202 x i8]* @.str.27, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end137:                                    ; preds = %assert_end135
  %282 = getelementptr inbounds i64, i64* %default_function.compute.shape23, i64 2, !dbg !18
  %283 = load i64, i64* %282, align 8, !dbg !18, !tbaa !174
  %284 = trunc i64 %283 to i32, !dbg !18
  %285 = icmp eq i32 %284, 2, !dbg !18
  br i1 %285, label %assert_end139, label %assert_fail138, !dbg !18, !prof !19

assert_fail138:                                   ; preds = %assert_end137
  %286 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %286(i8* getelementptr inbounds ([200 x i8], [200 x i8]* @.str.28, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end139:                                    ; preds = %assert_end137
  %287 = icmp eq i64* %default_function.compute.strides24, null, !dbg !18
  br i1 %287, label %if_end141, label %if_then140, !dbg !18, !prof !62

if_then140:                                       ; preds = %assert_end139
  %288 = load i64, i64* %default_function.compute.strides24, align 8, !dbg !18, !tbaa !177
  %289 = trunc i64 %288 to i32, !dbg !18
  %290 = icmp eq i32 %289, 20, !dbg !18
  %291 = getelementptr inbounds i64, i64* %default_function.compute.strides24, i64 1, !dbg !18
  %292 = load i64, i64* %291, align 8, !dbg !18, !tbaa !187
  %293 = trunc i64 %292 to i32, !dbg !18
  %294 = icmp eq i32 %293, 2, !dbg !18
  %295 = getelementptr inbounds i64, i64* %default_function.compute.strides24, i64 2, !dbg !18
  %296 = load i64, i64* %295, align 8, !dbg !18, !tbaa !189
  %297 = trunc i64 %296 to i32, !dbg !18
  %298 = icmp eq i32 %297, 1, !dbg !18
  %299 = and i1 %294, %298, !dbg !18
  %300 = and i1 %290, %299, !dbg !18
  br i1 %300, label %if_end141, label %assert_fail142, !dbg !18, !prof !19

if_end141:                                        ; preds = %assert_end139, %if_then140
  %301 = getelementptr inbounds %1, %1* %compute3184, i64 0, i32 6, !dbg !18
  %302 = load i64, i64* %301, align 8, !dbg !18
  %303 = icmp eq i64 %302, 0, !dbg !18
  br i1 %303, label %assert_end145, label %assert_fail144, !dbg !18, !prof !19

assert_fail142:                                   ; preds = %if_then140
  %304 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %304(i8* getelementptr inbounds ([260 x i8], [260 x i8]* @.str.29, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail144:                                   ; preds = %if_end141
  %305 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %305(i8* getelementptr inbounds ([205 x i8], [205 x i8]* @.str.30, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end145:                                    ; preds = %if_end141
  %306 = getelementptr inbounds %1, %1* %compute3184, i64 0, i32 1, i32 0, !dbg !18
  %307 = load i32, i32* %306, align 4, !dbg !18
  %308 = icmp eq i32 %307, 1, !dbg !18
  br i1 %308, label %assert_end147, label %assert_fail146, !dbg !18, !prof !19

assert_fail146:                                   ; preds = %assert_end145
  %309 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %309(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.31, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end147:                                    ; preds = %assert_end145
  %310 = getelementptr inbounds %1, %1* %compute3184, i64 0, i32 1, i32 1, !dbg !18
  %311 = load i32, i32* %310, align 4, !dbg !18
  %312 = icmp eq i32 %dev_id, %311, !dbg !18
  br i1 %312, label %assert_end149, label %assert_fail148, !dbg !18, !prof !19

assert_fail148:                                   ; preds = %assert_end147
  %313 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %313(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.32, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end149:                                    ; preds = %assert_end147
  %314 = getelementptr inbounds %1, %1* %compute4185, i64 0, i32 2, !dbg !18
  %315 = load i32, i32* %314, align 4, !dbg !18
  %316 = icmp eq i32 %315, 3, !dbg !18
  br i1 %316, label %assert_end153, label %assert_fail150, !dbg !18, !prof !19

assert_fail150:                                   ; preds = %assert_end149
  %317 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %317(i8* getelementptr inbounds ([113 x i8], [113 x i8]* @.str.24, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end153:                                    ; preds = %assert_end149
  %318 = getelementptr inbounds %1, %1* %compute4185, i64 0, i32 3, i32 2, !dbg !18
  %319 = load i16, i16* %318, align 2, !dbg !18
  %320 = icmp eq i16 %319, 1, !dbg !18
  %321 = getelementptr inbounds %1, %1* %compute4185, i64 0, i32 3, i32 1, !dbg !18
  %322 = load i8, i8* %321, align 1, !dbg !18
  %323 = icmp eq i8 %322, 32, !dbg !18
  %324 = getelementptr inbounds %1, %1* %compute4185, i64 0, i32 3, i32 0, !dbg !18
  %325 = load i8, i8* %324, align 1, !dbg !18
  %326 = icmp eq i8 %325, 2, !dbg !18
  %327 = and i1 %323, %326, !dbg !18
  %328 = and i1 %320, %327, !dbg !18
  br i1 %328, label %assert_end155, label %assert_fail154, !dbg !18, !prof !19

assert_fail154:                                   ; preds = %assert_end153
  %329 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %329(i8* getelementptr inbounds ([247 x i8], [247 x i8]* @.str.25, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end155:                                    ; preds = %assert_end153
  %330 = load i64, i64* %default_function.compute.shape30, align 8, !dbg !18, !tbaa !192
  %331 = trunc i64 %330 to i32, !dbg !18
  %332 = icmp eq i32 %331, 16, !dbg !18
  br i1 %332, label %assert_end157, label %assert_fail156, !dbg !18, !prof !19

assert_fail156:                                   ; preds = %assert_end155
  %333 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %333(i8* getelementptr inbounds ([202 x i8], [202 x i8]* @.str.26, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end157:                                    ; preds = %assert_end155
  %334 = getelementptr inbounds i64, i64* %default_function.compute.shape30, i64 1, !dbg !18
  %335 = load i64, i64* %334, align 8, !dbg !18, !tbaa !202
  %336 = trunc i64 %335 to i32, !dbg !18
  %337 = icmp eq i32 %336, 10, !dbg !18
  br i1 %337, label %assert_end159, label %assert_fail158, !dbg !18, !prof !19

assert_fail158:                                   ; preds = %assert_end157
  %338 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %338(i8* getelementptr inbounds ([202 x i8], [202 x i8]* @.str.27, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end159:                                    ; preds = %assert_end157
  %339 = getelementptr inbounds i64, i64* %default_function.compute.shape30, i64 2, !dbg !18
  %340 = load i64, i64* %339, align 8, !dbg !18, !tbaa !204
  %341 = trunc i64 %340 to i32, !dbg !18
  %342 = icmp eq i32 %341, 2, !dbg !18
  br i1 %342, label %assert_end161, label %assert_fail160, !dbg !18, !prof !19

assert_fail160:                                   ; preds = %assert_end159
  %343 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %343(i8* getelementptr inbounds ([200 x i8], [200 x i8]* @.str.28, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end161:                                    ; preds = %assert_end159
  %344 = icmp eq i64* %default_function.compute.strides31, null, !dbg !18
  br i1 %344, label %if_end163, label %if_then162, !dbg !18, !prof !62

if_then162:                                       ; preds = %assert_end161
  %345 = load i64, i64* %default_function.compute.strides31, align 8, !dbg !18, !tbaa !207
  %346 = trunc i64 %345 to i32, !dbg !18
  %347 = icmp eq i32 %346, 20, !dbg !18
  %348 = getelementptr inbounds i64, i64* %default_function.compute.strides31, i64 1, !dbg !18
  %349 = load i64, i64* %348, align 8, !dbg !18, !tbaa !217
  %350 = trunc i64 %349 to i32, !dbg !18
  %351 = icmp eq i32 %350, 2, !dbg !18
  %352 = getelementptr inbounds i64, i64* %default_function.compute.strides31, i64 2, !dbg !18
  %353 = load i64, i64* %352, align 8, !dbg !18, !tbaa !219
  %354 = trunc i64 %353 to i32, !dbg !18
  %355 = icmp eq i32 %354, 1, !dbg !18
  %356 = and i1 %351, %355, !dbg !18
  %357 = and i1 %347, %356, !dbg !18
  br i1 %357, label %if_end163, label %assert_fail164, !dbg !18, !prof !19

if_end163:                                        ; preds = %assert_end161, %if_then162
  %358 = getelementptr inbounds %1, %1* %compute4185, i64 0, i32 6, !dbg !18
  %359 = load i64, i64* %358, align 8, !dbg !18
  %360 = icmp eq i64 %359, 0, !dbg !18
  br i1 %360, label %assert_end167, label %assert_fail166, !dbg !18, !prof !19

assert_fail164:                                   ; preds = %if_then162
  %361 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %361(i8* getelementptr inbounds ([260 x i8], [260 x i8]* @.str.29, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail166:                                   ; preds = %if_end163
  %362 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %362(i8* getelementptr inbounds ([205 x i8], [205 x i8]* @.str.30, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end167:                                    ; preds = %if_end163
  %363 = getelementptr inbounds %1, %1* %compute4185, i64 0, i32 1, i32 0, !dbg !18
  %364 = load i32, i32* %363, align 4, !dbg !18
  %365 = icmp eq i32 %364, 1, !dbg !18
  br i1 %365, label %assert_end169, label %assert_fail168, !dbg !18, !prof !19

assert_fail168:                                   ; preds = %assert_end167
  %366 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %366(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.31, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end169:                                    ; preds = %assert_end167
  %367 = getelementptr inbounds %1, %1* %compute4185, i64 0, i32 1, i32 1, !dbg !18
  %368 = load i32, i32* %367, align 4, !dbg !18
  %369 = icmp eq i32 %dev_id, %368, !dbg !18
  br i1 %369, label %assert_end171, label %assert_fail170, !dbg !18, !prof !19

assert_fail170:                                   ; preds = %assert_end169
  %370 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %370(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.32, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end171:                                    ; preds = %assert_end169
  %371 = call fastcc i32 @default_function_compute_(i8* nonnull %stack_value, float* %T_batch_matmul_NN_void_ptr189, i32* nonnull %stack_tcode179.sub, float* %compute_void_ptr188, float* %compute_void_ptr18190, float* %compute_void_ptr25191, float* %ph_0_void_ptr186, float* %ph_4_void_ptr187), !dbg !18
  ret i32 %371, !dbg !18
}

; Function Attrs: nounwind willreturn
declare void @llvm.assume(i1) #1

; Function Attrs: noinline
define internal fastcc i32 @default_function_compute_(i8* noalias %0, float* noalias align 64 %1, i32* noalias %2, float* noalias align 64 %3, float* noalias align 64 %4, float* noalias align 64 %5, float* noalias align 64 %6, float* noalias align 64 %7) unnamed_addr #2 {
entry:
  %8 = alloca i8*, align 8
  %9 = bitcast i8* %0 to %0*
  %10 = bitcast i8* %0 to float**
  store float* %1, float** %10, align 8
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to float**
  store float* %3, float** %12, align 8
  %13 = getelementptr inbounds i8, i8* %0, i64 16
  %14 = bitcast i8* %13 to float**
  store float* %4, float** %14, align 8
  %15 = getelementptr inbounds i8, i8* %0, i64 24
  %16 = bitcast i8* %15 to float**
  store float* %5, float** %16, align 8
  %17 = bitcast i32* %2 to <4 x i32>*
  store <4 x i32> <i32 3, i32 3, i32 3, i32 3>, <4 x i32>* %17, align 4, !tbaa !222
  %18 = getelementptr inbounds i8, i8* %0, i64 32
  %19 = bitcast i8* %18 to float**
  store float* %6, float** %19, align 8
  %20 = getelementptr inbounds i32, i32* %2, i64 4
  store i32 3, i32* %20, align 4, !tbaa !231
  %21 = getelementptr inbounds i8, i8* %0, i64 40
  %22 = bitcast i8* %21 to float**
  store float* %7, float** %22, align 8
  %23 = getelementptr inbounds i32, i32* %2, i64 5
  store i32 3, i32* %23, align 4, !tbaa !235
  %24 = getelementptr inbounds i8, i8* %0, i64 48
  %25 = bitcast i8* %24 to %0*
  %26 = getelementptr inbounds i32, i32* %2, i64 6
  %27 = load i32 (i8*, %0*, i32*, i32, %0*, i32*)*, i32 (i8*, %0*, i32*, i32, %0*, i32*)** @__TVMFuncCall, align 8, !tbaa !20
  %28 = load i8*, i8** @.tvm_func.default_function_kernel, align 8
  %29 = icmp eq i8* %28, null
  br i1 %29, label %handle_init, label %handle_init_end, !prof !62

handle_init:                                      ; preds = %entry
  %30 = load i8*, i8** @__tvm_module_ctx, align 8, !tbaa !20
  %31 = load i32 (i8*, i8*, i8**)*, i32 (i8*, i8*, i8**)** @__TVMBackendGetFuncFromEnv, align 8, !tbaa !20
  %32 = call i32 %31(i8* %30, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.42, i64 0, i64 0), i8** nonnull %8)
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %call_end, label %call_fail, !prof !19

handle_init_end:                                  ; preds = %entry, %call_end
  %34 = phi i8* [ %28, %entry ], [ %37, %call_end ]
  %35 = call i32 %27(i8* %34, %0* %9, i32* nonnull %2, i32 6, %0* nonnull %25, i32* nonnull %26)
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %call_end2, label %call_fail, !prof !19

call_fail:                                        ; preds = %call_end2, %handle_init_end, %handle_init
  %merge = phi i32 [ %32, %handle_init ], [ %35, %handle_init_end ], [ 0, %call_end2 ]
  ret i32 %merge

call_end:                                         ; preds = %handle_init
  %37 = load i8*, i8** %8, align 8
  store i8* %37, i8** @.tvm_func.default_function_kernel, align 8
  br label %handle_init_end

call_end2:                                        ; preds = %handle_init_end
  %38 = bitcast i8* %24 to i64*
  %39 = load i64, i64* %38, align 8
  %kernel_error_code = trunc i64 %39 to i32
  %40 = icmp eq i32 %kernel_error_code, 0
  br i1 %40, label %call_fail, label %assert_fail, !prof !19

assert_fail:                                      ; preds = %call_end2
  %41 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !20
  call void %41(i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.43, i64 0, i64 0))
  ret i32 -1
}

; Function Attrs: nounwind readnone
define weak dso_local i16 @__truncsfhf2(float %a0) local_unnamed_addr #3 section ".text.tvm.fp16.conv" {
b0:
  %v0 = bitcast float %a0 to i32
  %v1 = and i32 %v0, 2147483647
  %v2 = add nsw i32 %v1, -947912704
  %v3 = add nsw i32 %v1, -1199570944
  %v4 = icmp ult i32 %v2, %v3
  br i1 %v4, label %b1, label %b5

b1:                                               ; preds = %b0
  %v5 = lshr i32 %v0, 13
  %v6 = and i32 %v5, 65535
  %v7 = add nuw nsw i32 %v6, -114688
  %v8 = and i32 %v0, 8191
  %v9 = icmp ugt i32 %v8, 4096
  br i1 %v9, label %b2, label %b3

b2:                                               ; preds = %b1
  %v10 = add nuw nsw i32 %v6, -114687
  br label %b13

b3:                                               ; preds = %b1
  %v11 = icmp eq i32 %v8, 4096
  br i1 %v11, label %b4, label %b13

b4:                                               ; preds = %b3
  %v12 = and i32 %v7, 65535
  %v13 = and i32 %v5, 1
  %v14 = add nuw nsw i32 %v12, %v13
  br label %b13

b5:                                               ; preds = %b0
  %v15 = icmp ugt i32 %v1, 2139095040
  br i1 %v15, label %b6, label %b7

b6:                                               ; preds = %b5
  %v16 = lshr i32 %v0, 13
  %v17 = and i32 %v16, 511
  %v18 = or i32 %v17, 32256
  br label %b13

b7:                                               ; preds = %b5
  %v19 = icmp ugt i32 %v1, 1199570943
  br i1 %v19, label %b13, label %b8

b8:                                               ; preds = %b7
  %v20 = icmp ult i32 %v1, 754974720
  br i1 %v20, label %b13, label %b9

b9:                                               ; preds = %b8
  %v21 = lshr i32 %v1, 23
  %v22 = sub nsw i32 113, %v21
  %v23 = and i32 %v0, 8388607
  %v24 = or i32 %v23, 8388608
  %v25 = add nsw i32 %v21, -81
  %v26 = shl i32 %v24, %v25
  %v27 = icmp ne i32 %v26, 0
  %v28 = lshr i32 %v24, %v22
  %v29 = zext i1 %v27 to i32
  %v30 = lshr i32 %v28, 13
  %v31 = and i32 %v28, 8191
  %v32 = or i32 %v31, %v29
  %v33 = icmp ugt i32 %v32, 4096
  br i1 %v33, label %b10, label %b11

b10:                                              ; preds = %b9
  %v34 = add nuw nsw i32 %v30, 1
  br label %b13

b11:                                              ; preds = %b9
  %v35 = icmp eq i32 %v32, 4096
  br i1 %v35, label %b12, label %b13

b12:                                              ; preds = %b11
  %v36 = and i32 %v30, 1
  %v37 = add nuw nsw i32 %v36, %v30
  br label %b13

b13:                                              ; preds = %b12, %b11, %b10, %b8, %b7, %b6, %b4, %b3, %b2
  %v38 = phi i32 [ %v18, %b6 ], [ %v10, %b2 ], [ %v14, %b4 ], [ %v7, %b3 ], [ 31744, %b7 ], [ 0, %b8 ], [ %v34, %b10 ], [ %v37, %b12 ], [ %v30, %b11 ]
  %v39 = lshr i32 %v0, 16
  %v40 = and i32 %v39, 32768
  %v41 = or i32 %v38, %v40
  %vlast = trunc i32 %v41 to i16
  ret i16 %vlast
}

; Function Attrs: nounwind readnone
define weak dso_local float @__extendhfsf2(i16 %a0) local_unnamed_addr #3 section ".text.tvm.fp16.conv" {
b0:
  %v1 = and i16 %a0, 32767
  %v2 = zext i16 %v1 to i32
  %v3 = add nsw i16 %v1, -1024
  %v4 = icmp ult i16 %v3, 30720
  br i1 %v4, label %b1, label %b2

b1:                                               ; preds = %b0
  %v5 = shl nuw nsw i32 %v2, 13
  %v6 = add nuw nsw i32 %v5, 939524096
  br label %b6

b2:                                               ; preds = %b0
  %v7 = icmp ugt i16 %v1, 31743
  br i1 %v7, label %b3, label %b4

b3:                                               ; preds = %b2
  %v8 = shl nuw nsw i32 %v2, 13
  %v9 = or i32 %v8, 2139095040
  br label %b6

b4:                                               ; preds = %b2
  %v10 = icmp eq i16 %v1, 0
  br i1 %v10, label %b6, label %b5

b5:                                               ; preds = %b4
  %v11 = icmp ult i16 %v1, 256
  %v12 = lshr i32 %v2, 8
  %v13 = select i1 %v11, i32 %v2, i32 %v12
  %v14 = select i1 %v11, i32 32, i32 24
  %v15 = icmp ult i32 %v13, 16
  %v16 = lshr i32 %v13, 4
  %v17 = add nsw i32 %v14, -4
  %v18 = select i1 %v15, i32 %v13, i32 %v16
  %v19 = select i1 %v15, i32 %v14, i32 %v17
  %v20 = icmp ult i32 %v18, 4
  %v21 = lshr i32 %v18, 2
  %v22 = add nsw i32 %v19, -2
  %v23 = select i1 %v20, i32 %v18, i32 %v21
  %v24 = select i1 %v20, i32 %v19, i32 %v22
  %v25 = icmp ult i32 %v23, 2
  %v26 = sub nsw i32 0, %v23
  %v27 = select i1 %v25, i32 %v26, i32 -2
  %v28 = add nsw i32 %v27, %v24
  %v29 = add nsw i32 %v28, -8
  %v30 = shl i32 %v2, %v29
  %v31 = xor i32 %v30, 8388608
  %v32 = shl i32 %v28, 23
  %v33 = sub i32 1124073472, %v32
  %v34 = or i32 %v31, %v33
  br label %b6

b6:                                               ; preds = %b5, %b4, %b3, %b1
  %v35 = phi i32 [ %v6, %b1 ], [ %v9, %b3 ], [ %v34, %b5 ], [ 0, %b4 ]
  %v36 = and i16 %a0, -32768
  %v37 = zext i16 %v36 to i32
  %v38 = shl nuw i32 %v37, 16
  %v39 = or i32 %v35, %v38
  %v40 = bitcast i32 %v39 to float
  ret float %v40
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.value(metadata, metadata, metadata) #4

attributes #0 = { "target-cpu"="generic" }
attributes #1 = { nounwind willreturn }
attributes #2 = { noinline "target-cpu"="generic" }
attributes #3 = { nounwind readnone "target-cpu"="generic" "target-features" }
attributes #4 = { nounwind readnone speculatable willreturn }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "TVM", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2)
!1 = !DIFile(filename: "main.tir", directory: ".")
!2 = !{}
!3 = !{i32 2, !"tvm_target", !"llvm -mtriple=x86_64-pc-linux-gnu"}
!4 = !{i32 4, !"Debug Info Version", i32 3}
!5 = distinct !DISubprogram(name: "main.tir", scope: !1, file: !1, type: !6, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !11)
!6 = !DISubroutineType(types: !7)
!7 = !{!8, !9, !10, !8, !9, !10, !9}
!8 = !DIBasicType(name: "int32", size: 32, encoding: DW_ATE_signed)
!9 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null)
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8)
!11 = !{!12, !13, !14, !15, !16, !17}
!12 = !DILocalVariable(name: "arg1", arg: 1, scope: !5, file: !1, type: !9)
!13 = !DILocalVariable(name: "arg2", arg: 2, scope: !5, file: !1, type: !10)
!14 = !DILocalVariable(name: "arg3", arg: 3, scope: !5, file: !1, type: !8)
!15 = !DILocalVariable(name: "arg4", arg: 4, scope: !5, file: !1, type: !9)
!16 = !DILocalVariable(name: "arg5", arg: 5, scope: !5, file: !1, type: !10)
!17 = !DILocalVariable(name: "arg6", arg: 6, scope: !5, file: !1, type: !9)
!18 = !DILocation(line: 0, scope: !5)
!19 = !{!"branch_weights", i32 1048576, i32 1}
!20 = !{!21, !21, i64 0}
!21 = !{!"ctx_ptr", !22, i64 0}
!22 = !{!"tvm-tbaa"}
!23 = !{!24, !24, i64 0}
!24 = !{!"0x3733200.w4.b0", !25, i64 0}
!25 = !{!"0x3733200.w8.b0", !26, i64 0}
!26 = !{!"0x3733200.w16.b0", !27, i64 0}
!27 = !{!"0x3733200.w32.b0", !28, i64 0}
!28 = !{!"0x3733200.w64.b0", !29, i64 0}
!29 = !{!"0x3733200.w128.b0", !30, i64 0}
!30 = !{!"0x3733200.w256.b0", !31, i64 0}
!31 = !{!"0x3733200.w512.b0", !32, i64 0}
!32 = !{!"0x3733200.w1024.b0", !33, i64 0}
!33 = !{!"0x3733200", !22, i64 0}
!34 = !{!35, !35, i64 0}
!35 = !{!"0x3733200.w4.b4", !25, i64 0}
!36 = !{!37, !37, i64 0}
!37 = !{!"0x3733200.w4.b8", !38, i64 0}
!38 = !{!"0x3733200.w8.b8", !26, i64 0}
!39 = !{!40, !40, i64 0}
!40 = !{!"0x3733200.w4.b12", !38, i64 0}
!41 = !{!42, !42, i64 0}
!42 = !{!"0x3733200.w4.b16", !43, i64 0}
!43 = !{!"0x3733200.w8.b16", !44, i64 0}
!44 = !{!"0x3733200.w16.b16", !27, i64 0}
!45 = !{!46, !46, i64 0}
!46 = !{!"0x3733200.w4.b20", !43, i64 0}
!47 = !{!48, !48, i64 0}
!48 = !{!"0x36f9e10.w8.b0", !49, i64 0}
!49 = !{!"0x36f9e10.w16.b0", !50, i64 0}
!50 = !{!"0x36f9e10.w32.b0", !51, i64 0}
!51 = !{!"0x36f9e10.w64.b0", !52, i64 0}
!52 = !{!"0x36f9e10.w128.b0", !53, i64 0}
!53 = !{!"0x36f9e10.w256.b0", !54, i64 0}
!54 = !{!"0x36f9e10.w512.b0", !55, i64 0}
!55 = !{!"0x36f9e10.w1024.b0", !56, i64 0}
!56 = !{!"0x36f9e10", !22, i64 0}
!57 = !{!58, !58, i64 0}
!58 = !{!"0x36f9e10.w8.b8", !49, i64 0}
!59 = !{!60, !60, i64 0}
!60 = !{!"0x36f9e10.w8.b16", !61, i64 0}
!61 = !{!"0x36f9e10.w16.b16", !50, i64 0}
!62 = !{!"branch_weights", i32 1, i32 1048576}
!63 = !{!64, !64, i64 0}
!64 = !{!"0x3760540.w8.b0", !65, i64 0}
!65 = !{!"0x3760540.w16.b0", !66, i64 0}
!66 = !{!"0x3760540.w32.b0", !67, i64 0}
!67 = !{!"0x3760540.w64.b0", !68, i64 0}
!68 = !{!"0x3760540.w128.b0", !69, i64 0}
!69 = !{!"0x3760540.w256.b0", !70, i64 0}
!70 = !{!"0x3760540.w512.b0", !71, i64 0}
!71 = !{!"0x3760540.w1024.b0", !72, i64 0}
!72 = !{!"0x3760540", !22, i64 0}
!73 = !{!74, !74, i64 0}
!74 = !{!"0x3760540.w8.b8", !65, i64 0}
!75 = !{!76, !76, i64 0}
!76 = !{!"0x3760540.w8.b16", !77, i64 0}
!77 = !{!"0x3760540.w16.b16", !66, i64 0}
!78 = !{!79, !79, i64 0}
!79 = !{!"0x3380610.w8.b0", !80, i64 0}
!80 = !{!"0x3380610.w16.b0", !81, i64 0}
!81 = !{!"0x3380610.w32.b0", !82, i64 0}
!82 = !{!"0x3380610.w64.b0", !83, i64 0}
!83 = !{!"0x3380610.w128.b0", !84, i64 0}
!84 = !{!"0x3380610.w256.b0", !85, i64 0}
!85 = !{!"0x3380610.w512.b0", !86, i64 0}
!86 = !{!"0x3380610.w1024.b0", !87, i64 0}
!87 = !{!"0x3380610", !22, i64 0}
!88 = !{!89, !89, i64 0}
!89 = !{!"0x3380610.w8.b8", !80, i64 0}
!90 = !{!91, !91, i64 0}
!91 = !{!"0x3380610.w8.b16", !92, i64 0}
!92 = !{!"0x3380610.w16.b16", !81, i64 0}
!93 = !{!94, !94, i64 0}
!94 = !{!"0x3b63200.w8.b0", !95, i64 0}
!95 = !{!"0x3b63200.w16.b0", !96, i64 0}
!96 = !{!"0x3b63200.w32.b0", !97, i64 0}
!97 = !{!"0x3b63200.w64.b0", !98, i64 0}
!98 = !{!"0x3b63200.w128.b0", !99, i64 0}
!99 = !{!"0x3b63200.w256.b0", !100, i64 0}
!100 = !{!"0x3b63200.w512.b0", !101, i64 0}
!101 = !{!"0x3b63200.w1024.b0", !102, i64 0}
!102 = !{!"0x3b63200", !22, i64 0}
!103 = !{!104, !104, i64 0}
!104 = !{!"0x3b63200.w8.b8", !95, i64 0}
!105 = !{!106, !106, i64 0}
!106 = !{!"0x477fbd0.w8.b0", !107, i64 0}
!107 = !{!"0x477fbd0.w16.b0", !108, i64 0}
!108 = !{!"0x477fbd0.w32.b0", !109, i64 0}
!109 = !{!"0x477fbd0.w64.b0", !110, i64 0}
!110 = !{!"0x477fbd0.w128.b0", !111, i64 0}
!111 = !{!"0x477fbd0.w256.b0", !112, i64 0}
!112 = !{!"0x477fbd0.w512.b0", !113, i64 0}
!113 = !{!"0x477fbd0.w1024.b0", !114, i64 0}
!114 = !{!"0x477fbd0", !22, i64 0}
!115 = !{!116, !116, i64 0}
!116 = !{!"0x477fbd0.w8.b8", !107, i64 0}
!117 = !{!118, !118, i64 0}
!118 = !{!"0x477fbd0.w8.b16", !119, i64 0}
!119 = !{!"0x477fbd0.w16.b16", !108, i64 0}
!120 = !{!121, !121, i64 0}
!121 = !{!"0x4676c00.w8.b0", !122, i64 0}
!122 = !{!"0x4676c00.w16.b0", !123, i64 0}
!123 = !{!"0x4676c00.w32.b0", !124, i64 0}
!124 = !{!"0x4676c00.w64.b0", !125, i64 0}
!125 = !{!"0x4676c00.w128.b0", !126, i64 0}
!126 = !{!"0x4676c00.w256.b0", !127, i64 0}
!127 = !{!"0x4676c00.w512.b0", !128, i64 0}
!128 = !{!"0x4676c00.w1024.b0", !129, i64 0}
!129 = !{!"0x4676c00", !22, i64 0}
!130 = !{!131, !131, i64 0}
!131 = !{!"0x4676c00.w8.b8", !122, i64 0}
!132 = !{!133, !133, i64 0}
!133 = !{!"0x4676c00.w8.b16", !134, i64 0}
!134 = !{!"0x4676c00.w16.b16", !123, i64 0}
!135 = !{!136, !136, i64 0}
!136 = !{!"0x4666040.w8.b0", !137, i64 0}
!137 = !{!"0x4666040.w16.b0", !138, i64 0}
!138 = !{!"0x4666040.w32.b0", !139, i64 0}
!139 = !{!"0x4666040.w64.b0", !140, i64 0}
!140 = !{!"0x4666040.w128.b0", !141, i64 0}
!141 = !{!"0x4666040.w256.b0", !142, i64 0}
!142 = !{!"0x4666040.w512.b0", !143, i64 0}
!143 = !{!"0x4666040.w1024.b0", !144, i64 0}
!144 = !{!"0x4666040", !22, i64 0}
!145 = !{!146, !146, i64 0}
!146 = !{!"0x4666040.w8.b8", !137, i64 0}
!147 = !{!148, !148, i64 0}
!148 = !{!"0x4666040.w8.b16", !149, i64 0}
!149 = !{!"0x4666040.w16.b16", !138, i64 0}
!150 = !{!151, !151, i64 0}
!151 = !{!"0x40c2b10.w8.b0", !152, i64 0}
!152 = !{!"0x40c2b10.w16.b0", !153, i64 0}
!153 = !{!"0x40c2b10.w32.b0", !154, i64 0}
!154 = !{!"0x40c2b10.w64.b0", !155, i64 0}
!155 = !{!"0x40c2b10.w128.b0", !156, i64 0}
!156 = !{!"0x40c2b10.w256.b0", !157, i64 0}
!157 = !{!"0x40c2b10.w512.b0", !158, i64 0}
!158 = !{!"0x40c2b10.w1024.b0", !159, i64 0}
!159 = !{!"0x40c2b10", !22, i64 0}
!160 = !{!161, !161, i64 0}
!161 = !{!"0x40c2b10.w8.b8", !152, i64 0}
!162 = !{!163, !163, i64 0}
!163 = !{!"0x40e0310.w8.b0", !164, i64 0}
!164 = !{!"0x40e0310.w16.b0", !165, i64 0}
!165 = !{!"0x40e0310.w32.b0", !166, i64 0}
!166 = !{!"0x40e0310.w64.b0", !167, i64 0}
!167 = !{!"0x40e0310.w128.b0", !168, i64 0}
!168 = !{!"0x40e0310.w256.b0", !169, i64 0}
!169 = !{!"0x40e0310.w512.b0", !170, i64 0}
!170 = !{!"0x40e0310.w1024.b0", !171, i64 0}
!171 = !{!"0x40e0310", !22, i64 0}
!172 = !{!173, !173, i64 0}
!173 = !{!"0x40e0310.w8.b8", !164, i64 0}
!174 = !{!175, !175, i64 0}
!175 = !{!"0x40e0310.w8.b16", !176, i64 0}
!176 = !{!"0x40e0310.w16.b16", !165, i64 0}
!177 = !{!178, !178, i64 0}
!178 = !{!"0x479cc50.w8.b0", !179, i64 0}
!179 = !{!"0x479cc50.w16.b0", !180, i64 0}
!180 = !{!"0x479cc50.w32.b0", !181, i64 0}
!181 = !{!"0x479cc50.w64.b0", !182, i64 0}
!182 = !{!"0x479cc50.w128.b0", !183, i64 0}
!183 = !{!"0x479cc50.w256.b0", !184, i64 0}
!184 = !{!"0x479cc50.w512.b0", !185, i64 0}
!185 = !{!"0x479cc50.w1024.b0", !186, i64 0}
!186 = !{!"0x479cc50", !22, i64 0}
!187 = !{!188, !188, i64 0}
!188 = !{!"0x479cc50.w8.b8", !179, i64 0}
!189 = !{!190, !190, i64 0}
!190 = !{!"0x479cc50.w8.b16", !191, i64 0}
!191 = !{!"0x479cc50.w16.b16", !180, i64 0}
!192 = !{!193, !193, i64 0}
!193 = !{!"0x46739a0.w8.b0", !194, i64 0}
!194 = !{!"0x46739a0.w16.b0", !195, i64 0}
!195 = !{!"0x46739a0.w32.b0", !196, i64 0}
!196 = !{!"0x46739a0.w64.b0", !197, i64 0}
!197 = !{!"0x46739a0.w128.b0", !198, i64 0}
!198 = !{!"0x46739a0.w256.b0", !199, i64 0}
!199 = !{!"0x46739a0.w512.b0", !200, i64 0}
!200 = !{!"0x46739a0.w1024.b0", !201, i64 0}
!201 = !{!"0x46739a0", !22, i64 0}
!202 = !{!203, !203, i64 0}
!203 = !{!"0x46739a0.w8.b8", !194, i64 0}
!204 = !{!205, !205, i64 0}
!205 = !{!"0x46739a0.w8.b16", !206, i64 0}
!206 = !{!"0x46739a0.w16.b16", !195, i64 0}
!207 = !{!208, !208, i64 0}
!208 = !{!"0x4704260.w8.b0", !209, i64 0}
!209 = !{!"0x4704260.w16.b0", !210, i64 0}
!210 = !{!"0x4704260.w32.b0", !211, i64 0}
!211 = !{!"0x4704260.w64.b0", !212, i64 0}
!212 = !{!"0x4704260.w128.b0", !213, i64 0}
!213 = !{!"0x4704260.w256.b0", !214, i64 0}
!214 = !{!"0x4704260.w512.b0", !215, i64 0}
!215 = !{!"0x4704260.w1024.b0", !216, i64 0}
!216 = !{!"0x4704260", !22, i64 0}
!217 = !{!218, !218, i64 0}
!218 = !{!"0x4704260.w8.b8", !209, i64 0}
!219 = !{!220, !220, i64 0}
!220 = !{!"0x4704260.w8.b16", !221, i64 0}
!221 = !{!"0x4704260.w16.b16", !210, i64 0}
!222 = !{!223, !223, i64 0}
!223 = !{!"0x40c7e60.w16.b0", !224, i64 0}
!224 = !{!"0x40c7e60.w32.b0", !225, i64 0}
!225 = !{!"0x40c7e60.w64.b0", !226, i64 0}
!226 = !{!"0x40c7e60.w128.b0", !227, i64 0}
!227 = !{!"0x40c7e60.w256.b0", !228, i64 0}
!228 = !{!"0x40c7e60.w512.b0", !229, i64 0}
!229 = !{!"0x40c7e60.w1024.b0", !230, i64 0}
!230 = !{!"0x40c7e60", !22, i64 0}
!231 = !{!232, !232, i64 0}
!232 = !{!"0x40c7e60.w4.b16", !233, i64 0}
!233 = !{!"0x40c7e60.w8.b16", !234, i64 0}
!234 = !{!"0x40c7e60.w16.b16", !224, i64 0}
!235 = !{!236, !236, i64 0}
!236 = !{!"0x40c7e60.w4.b20", !233, i64 0}
