; ModuleID = 'TVMMod'
source_filename = "TVMMod"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%0 = type { double }
%1 = type { i8*, %2, i32, %3, i64*, i64*, i64 }
%2 = type { i32, i32 }
%3 = type { i8, i8, i16 }

@__tvm_module_ctx = linkonce dllexport local_unnamed_addr global i8* null, align 8
@__TVMFuncCall = linkonce dllexport local_unnamed_addr global i32 (i8*, %0*, i32*, i32, %0*, i32*)* null, align 8
@__TVMBackendGetFuncFromEnv = linkonce dllexport local_unnamed_addr global i32 (i8*, i8*, i8**)* null, align 8
@__TVMAPISetLastError = linkonce dllexport local_unnamed_addr global void (i8*)* null, align 8
@.str = private constant [67 x i8] c"Assert fail: num_args == 8, default_function: num_args should be 8\00", align 1
@.str.1 = private constant [130 x i8] c"Assert fail: ph_0_code == 3 or ph_0_code == 13 or ph_0_code == 7 or ph_0_code == 4, default_function: Expect arg[0] to be pointer\00", align 1
@.str.2 = private constant [130 x i8] c"Assert fail: ph_3_code == 3 or ph_3_code == 13 or ph_3_code == 7 or ph_3_code == 4, default_function: Expect arg[1] to be pointer\00", align 1
@.str.3 = private constant [130 x i8] c"Assert fail: ph_6_code == 3 or ph_6_code == 13 or ph_6_code == 7 or ph_6_code == 4, default_function: Expect arg[2] to be pointer\00", align 1
@.str.4 = private constant [142 x i8] c"Assert fail: compute_code == 3 or compute_code == 13 or compute_code == 7 or compute_code == 4, default_function: Expect arg[3] to be pointer\00", align 1
@.str.5 = private constant [142 x i8] c"Assert fail: compute_code == 3 or compute_code == 13 or compute_code == 7 or compute_code == 4, default_function: Expect arg[4] to be pointer\00", align 1
@.str.6 = private constant [142 x i8] c"Assert fail: compute_code == 3 or compute_code == 13 or compute_code == 7 or compute_code == 4, default_function: Expect arg[5] to be pointer\00", align 1
@.str.7 = private constant [146 x i8] c"Assert fail: T_divide_code == 3 or T_divide_code == 13 or T_divide_code == 7 or T_divide_code == 4, default_function: Expect arg[6] to be pointer\00", align 1
@.str.8 = private constant [154 x i8] c"Assert fail: T_subtract_code == 3 or T_subtract_code == 13 or T_subtract_code == 7 or T_subtract_code == 4, default_function: Expect arg[7] to be pointer\00", align 1
@.str.9 = private constant [107 x i8] c"Assert fail: 3 == T.tvm_struct_get(ph_0, 0, 4, \22int32\22), default_function.ph_0.ndim is expected to equal 3\00", align 1
@.str.10 = private constant [235 x i8] c"Assert fail: T.tvm_struct_get(ph_0, 0, 5, \22uint8\22) == T.uint8(2) and T.tvm_struct_get(ph_0, 0, 6, \22uint8\22) == T.uint8(32) and T.tvm_struct_get(ph_0, 0, 7, \22uint16\22) == T.uint16(1), default_function.ph_0.dtype is expected to be float32\00", align 1
@.str.11 = private constant [193 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_0_shape[0]) == 13, Argument default_function.ph_0.shape[0] has an unsatisfied constraint: 13 == T.Cast(\22int32\22, default_function_ph_0_shape[0])\00", align 1
@.str.12 = private constant [193 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_0_shape[1]) == 16, Argument default_function.ph_0.shape[1] has an unsatisfied constraint: 16 == T.Cast(\22int32\22, default_function_ph_0_shape[1])\00", align 1
@.str.13 = private constant [191 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_0_shape[2]) == 1, Argument default_function.ph_0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\22int32\22, default_function_ph_0_shape[2])\00", align 1
@.str.14 = private constant [189 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_ph_0_strides[1]) and 16 == T.Cast(\22int32\22, default_function_ph_0_strides[0]), default_function.ph_0.strides: expected to be compact array\00", align 1
@.str.15 = private constant [196 x i8] c"Assert fail: T.uint64(0) == T.tvm_struct_get(ph_0, 0, 8, \22uint64\22), Argument default_function.ph_0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(ph_0, 0, 8, \22uint64\22)\00", align 1
@.str.16 = private constant [176 x i8] c"Assert fail: T.tvm_struct_get(ph_0, 0, 10, \22int32\22) == 1, Argument default_function.ph_0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(ph_0, 0, 10, \22int32\22)\00", align 1
@.str.17 = private constant [107 x i8] c"Assert fail: 3 == T.tvm_struct_get(ph_3, 0, 4, \22int32\22), default_function.ph_3.ndim is expected to equal 3\00", align 1
@.str.18 = private constant [235 x i8] c"Assert fail: T.tvm_struct_get(ph_3, 0, 5, \22uint8\22) == T.uint8(2) and T.tvm_struct_get(ph_3, 0, 6, \22uint8\22) == T.uint8(32) and T.tvm_struct_get(ph_3, 0, 7, \22uint16\22) == T.uint16(1), default_function.ph_3.dtype is expected to be float32\00", align 1
@.str.19 = private constant [193 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_3_shape[0]) == 13, Argument default_function.ph_3.shape[0] has an unsatisfied constraint: 13 == T.Cast(\22int32\22, default_function_ph_3_shape[0])\00", align 1
@.str.20 = private constant [193 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_3_shape[1]) == 16, Argument default_function.ph_3.shape[1] has an unsatisfied constraint: 16 == T.Cast(\22int32\22, default_function_ph_3_shape[1])\00", align 1
@.str.21 = private constant [191 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_3_shape[2]) == 1, Argument default_function.ph_3.shape[2] has an unsatisfied constraint: 1 == T.Cast(\22int32\22, default_function_ph_3_shape[2])\00", align 1
@.str.22 = private constant [189 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_ph_3_strides[1]) and 16 == T.Cast(\22int32\22, default_function_ph_3_strides[0]), default_function.ph_3.strides: expected to be compact array\00", align 1
@.str.23 = private constant [196 x i8] c"Assert fail: T.uint64(0) == T.tvm_struct_get(ph_3, 0, 8, \22uint64\22), Argument default_function.ph_3.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(ph_3, 0, 8, \22uint64\22)\00", align 1
@.str.24 = private constant [176 x i8] c"Assert fail: T.tvm_struct_get(ph_3, 0, 10, \22int32\22) == 1, Argument default_function.ph_3.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(ph_3, 0, 10, \22int32\22)\00", align 1
@.str.25 = private constant [182 x i8] c"Assert fail: dev_id == T.tvm_struct_get(ph_3, 0, 9, \22int32\22), Argument default_function.ph_3.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(ph_3, 0, 9, \22int32\22)\00", align 1
@.str.26 = private constant [107 x i8] c"Assert fail: 3 == T.tvm_struct_get(ph_6, 0, 4, \22int32\22), default_function.ph_6.ndim is expected to equal 3\00", align 1
@.str.27 = private constant [235 x i8] c"Assert fail: T.tvm_struct_get(ph_6, 0, 5, \22uint8\22) == T.uint8(2) and T.tvm_struct_get(ph_6, 0, 6, \22uint8\22) == T.uint8(32) and T.tvm_struct_get(ph_6, 0, 7, \22uint16\22) == T.uint16(1), default_function.ph_6.dtype is expected to be float32\00", align 1
@.str.28 = private constant [193 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_6_shape[0]) == 13, Argument default_function.ph_6.shape[0] has an unsatisfied constraint: 13 == T.Cast(\22int32\22, default_function_ph_6_shape[0])\00", align 1
@.str.29 = private constant [191 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_6_shape[1]) == 1, Argument default_function.ph_6.shape[1] has an unsatisfied constraint: 1 == T.Cast(\22int32\22, default_function_ph_6_shape[1])\00", align 1
@.str.30 = private constant [191 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_6_shape[2]) == 5, Argument default_function.ph_6.shape[2] has an unsatisfied constraint: 5 == T.Cast(\22int32\22, default_function_ph_6_shape[2])\00", align 1
@.str.31 = private constant [188 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_ph_6_strides[2]) and 5 == T.Cast(\22int32\22, default_function_ph_6_strides[0]), default_function.ph_6.strides: expected to be compact array\00", align 1
@.str.32 = private constant [196 x i8] c"Assert fail: T.uint64(0) == T.tvm_struct_get(ph_6, 0, 8, \22uint64\22), Argument default_function.ph_6.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(ph_6, 0, 8, \22uint64\22)\00", align 1
@.str.33 = private constant [176 x i8] c"Assert fail: T.tvm_struct_get(ph_6, 0, 10, \22int32\22) == 1, Argument default_function.ph_6.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(ph_6, 0, 10, \22int32\22)\00", align 1
@.str.34 = private constant [182 x i8] c"Assert fail: dev_id == T.tvm_struct_get(ph_6, 0, 9, \22int32\22), Argument default_function.ph_6.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(ph_6, 0, 9, \22int32\22)\00", align 1
@.str.35 = private constant [113 x i8] c"Assert fail: 3 == T.tvm_struct_get(compute, 0, 4, \22int32\22), default_function.compute.ndim is expected to equal 3\00", align 1
@.str.36 = private constant [247 x i8] c"Assert fail: T.tvm_struct_get(compute, 0, 5, \22uint8\22) == T.uint8(2) and T.tvm_struct_get(compute, 0, 6, \22uint8\22) == T.uint8(32) and T.tvm_struct_get(compute, 0, 7, \22uint16\22) == T.uint16(1), default_function.compute.dtype is expected to be float32\00", align 1
@.str.37 = private constant [202 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_compute_shape[0]) == 13, Argument default_function.compute.shape[0] has an unsatisfied constraint: 13 == T.Cast(\22int32\22, default_function_compute_shape[0])\00", align 1
@.str.38 = private constant [202 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_compute_shape[1]) == 16, Argument default_function.compute.shape[1] has an unsatisfied constraint: 16 == T.Cast(\22int32\22, default_function_compute_shape[1])\00", align 1
@.str.39 = private constant [200 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_compute_shape[2]) == 1, Argument default_function.compute.shape[2] has an unsatisfied constraint: 1 == T.Cast(\22int32\22, default_function_compute_shape[2])\00", align 1
@.str.40 = private constant [198 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_compute_strides[1]) and 16 == T.Cast(\22int32\22, default_function_compute_strides[0]), default_function.compute.strides: expected to be compact array\00", align 1
@.str.41 = private constant [205 x i8] c"Assert fail: T.uint64(0) == T.tvm_struct_get(compute, 0, 8, \22uint64\22), Argument default_function.compute.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(compute, 0, 8, \22uint64\22)\00", align 1
@.str.42 = private constant [185 x i8] c"Assert fail: T.tvm_struct_get(compute, 0, 10, \22int32\22) == 1, Argument default_function.compute.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(compute, 0, 10, \22int32\22)\00", align 1
@.str.43 = private constant [191 x i8] c"Assert fail: dev_id == T.tvm_struct_get(compute, 0, 9, \22int32\22), Argument default_function.compute.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(compute, 0, 9, \22int32\22)\00", align 1
@.str.44 = private constant [200 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_compute_shape[2]) == 5, Argument default_function.compute.shape[2] has an unsatisfied constraint: 5 == T.Cast(\22int32\22, default_function_compute_shape[2])\00", align 1
@.str.45 = private constant [260 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_compute_strides[2]) and 5 == T.Cast(\22int32\22, default_function_compute_strides[1]) and 80 == T.Cast(\22int32\22, default_function_compute_strides[0]), default_function.compute.strides: expected to be compact array\00", align 1
@.str.46 = private constant [115 x i8] c"Assert fail: 3 == T.tvm_struct_get(T_divide, 0, 4, \22int32\22), default_function.T_divide.ndim is expected to equal 3\00", align 1
@.str.47 = private constant [251 x i8] c"Assert fail: T.tvm_struct_get(T_divide, 0, 5, \22uint8\22) == T.uint8(2) and T.tvm_struct_get(T_divide, 0, 6, \22uint8\22) == T.uint8(32) and T.tvm_struct_get(T_divide, 0, 7, \22uint16\22) == T.uint16(1), default_function.T_divide.dtype is expected to be float32\00", align 1
@.str.48 = private constant [205 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_T_divide_shape[0]) == 13, Argument default_function.T_divide.shape[0] has an unsatisfied constraint: 13 == T.Cast(\22int32\22, default_function_T_divide_shape[0])\00", align 1
@.str.49 = private constant [205 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_T_divide_shape[1]) == 16, Argument default_function.T_divide.shape[1] has an unsatisfied constraint: 16 == T.Cast(\22int32\22, default_function_T_divide_shape[1])\00", align 1
@.str.50 = private constant [203 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_T_divide_shape[2]) == 1, Argument default_function.T_divide.shape[2] has an unsatisfied constraint: 1 == T.Cast(\22int32\22, default_function_T_divide_shape[2])\00", align 1
@.str.51 = private constant [201 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_T_divide_strides[1]) and 16 == T.Cast(\22int32\22, default_function_T_divide_strides[0]), default_function.T_divide.strides: expected to be compact array\00", align 1
@.str.52 = private constant [208 x i8] c"Assert fail: T.uint64(0) == T.tvm_struct_get(T_divide, 0, 8, \22uint64\22), Argument default_function.T_divide.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_divide, 0, 8, \22uint64\22)\00", align 1
@.str.53 = private constant [188 x i8] c"Assert fail: T.tvm_struct_get(T_divide, 0, 10, \22int32\22) == 1, Argument default_function.T_divide.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_divide, 0, 10, \22int32\22)\00", align 1
@.str.54 = private constant [194 x i8] c"Assert fail: dev_id == T.tvm_struct_get(T_divide, 0, 9, \22int32\22), Argument default_function.T_divide.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_divide, 0, 9, \22int32\22)\00", align 1
@.str.55 = private constant [119 x i8] c"Assert fail: 3 == T.tvm_struct_get(T_subtract, 0, 4, \22int32\22), default_function.T_subtract.ndim is expected to equal 3\00", align 1
@.str.56 = private constant [259 x i8] c"Assert fail: T.tvm_struct_get(T_subtract, 0, 5, \22uint8\22) == T.uint8(2) and T.tvm_struct_get(T_subtract, 0, 6, \22uint8\22) == T.uint8(32) and T.tvm_struct_get(T_subtract, 0, 7, \22uint16\22) == T.uint16(1), default_function.T_subtract.dtype is expected to be float32\00", align 1
@.str.57 = private constant [211 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_T_subtract_shape[0]) == 13, Argument default_function.T_subtract.shape[0] has an unsatisfied constraint: 13 == T.Cast(\22int32\22, default_function_T_subtract_shape[0])\00", align 1
@.str.58 = private constant [211 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_T_subtract_shape[1]) == 16, Argument default_function.T_subtract.shape[1] has an unsatisfied constraint: 16 == T.Cast(\22int32\22, default_function_T_subtract_shape[1])\00", align 1
@.str.59 = private constant [209 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_T_subtract_shape[2]) == 1, Argument default_function.T_subtract.shape[2] has an unsatisfied constraint: 1 == T.Cast(\22int32\22, default_function_T_subtract_shape[2])\00", align 1
@.str.60 = private constant [207 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_T_subtract_strides[1]) and 16 == T.Cast(\22int32\22, default_function_T_subtract_strides[0]), default_function.T_subtract.strides: expected to be compact array\00", align 1
@.str.61 = private constant [214 x i8] c"Assert fail: T.uint64(0) == T.tvm_struct_get(T_subtract, 0, 8, \22uint64\22), Argument default_function.T_subtract.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_subtract, 0, 8, \22uint64\22)\00", align 1
@.str.62 = private constant [194 x i8] c"Assert fail: T.tvm_struct_get(T_subtract, 0, 10, \22int32\22) == 1, Argument default_function.T_subtract.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_subtract, 0, 10, \22int32\22)\00", align 1
@.str.63 = private constant [200 x i8] c"Assert fail: dev_id == T.tvm_struct_get(T_subtract, 0, 9, \22int32\22), Argument default_function.T_subtract.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_subtract, 0, 9, \22int32\22)\00", align 1
@.tvm_func.default_function_kernel = internal unnamed_addr global i8* null, align 8
@.str.64 = private constant [24 x i8] c"default_function_kernel\00", align 1
@.str.65 = private constant [68 x i8] c"Assert fail: kernel_error_code == 0, Error executing compute kernel\00", align 1
@__tvm_main__ = weak dllexport local_unnamed_addr constant [17 x i8] c"default_function\00", align 1
@llvm.global_ctors = appending global [0 x { i32, void ()*, i8* }] zeroinitializer

define dllexport i32 @default_function(i8* noalias nocapture readonly %args, i32* noalias nocapture readonly %arg_type_ids, i32 %num_args, i8* noalias nocapture readnone %out_ret_value, i32* noalias nocapture readnone %out_ret_tcode, i8* noalias nocapture readnone %resource_handle) local_unnamed_addr #0 !dbg !5 {
entry:
  call void @llvm.dbg.value(metadata i8* %args, metadata !12, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i32* %arg_type_ids, metadata !13, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i32 %num_args, metadata !14, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i8* %out_ret_value, metadata !15, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i32* %out_ret_tcode, metadata !16, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i8* %resource_handle, metadata !17, metadata !DIExpression()), !dbg !18
  %stack_value_void_ptr236 = alloca [9 x %0], align 8, !dbg !18
  %stack_tcode237 = alloca [9 x i32], align 4, !dbg !18
  %stack_tcode237.sub = getelementptr inbounds [9 x i32], [9 x i32]* %stack_tcode237, i64 0, i64 0
  %stack_value = bitcast [9 x %0]* %stack_value_void_ptr236 to i8*, !dbg !18
  %0 = icmp eq i32 %num_args, 8, !dbg !18
  br i1 %0, label %assert_end, label %assert_fail, !dbg !18, !prof !19

assert_fail:                                      ; preds = %entry
  %1 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %1(i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end:                                       ; preds = %entry
  %ph_0.code = load i32, i32* %arg_type_ids, align 4, !dbg !18, !tbaa !23
  %2 = getelementptr inbounds i32, i32* %arg_type_ids, i64 1, !dbg !18
  %ph_3.code = load i32, i32* %2, align 4, !dbg !18, !tbaa !34
  %3 = getelementptr inbounds i32, i32* %arg_type_ids, i64 2, !dbg !18
  %ph_6.code = load i32, i32* %3, align 4, !dbg !18, !tbaa !36
  %4 = getelementptr inbounds i32, i32* %arg_type_ids, i64 3, !dbg !18
  %compute.code = load i32, i32* %4, align 4, !dbg !18, !tbaa !39
  %5 = getelementptr inbounds i32, i32* %arg_type_ids, i64 4, !dbg !18
  %compute.code1 = load i32, i32* %5, align 4, !dbg !18, !tbaa !41
  %6 = getelementptr inbounds i32, i32* %arg_type_ids, i64 5, !dbg !18
  %compute.code2 = load i32, i32* %6, align 4, !dbg !18, !tbaa !45
  %7 = getelementptr inbounds i32, i32* %arg_type_ids, i64 6, !dbg !18
  %T_divide.code = load i32, i32* %7, align 4, !dbg !18, !tbaa !47
  %8 = getelementptr inbounds i32, i32* %arg_type_ids, i64 7, !dbg !18
  %T_subtract.code = load i32, i32* %8, align 4, !dbg !18, !tbaa !50
  %9 = bitcast i8* %args to %1**, !dbg !18
  %ph_0238 = load %1*, %1** %9, align 8, !dbg !18
  %10 = getelementptr inbounds i8, i8* %args, i64 8, !dbg !18
  %11 = bitcast i8* %10 to %1**, !dbg !18
  %ph_3239 = load %1*, %1** %11, align 8, !dbg !18
  %12 = getelementptr inbounds i8, i8* %args, i64 16, !dbg !18
  %13 = bitcast i8* %12 to %1**, !dbg !18
  %ph_6240 = load %1*, %1** %13, align 8, !dbg !18
  %14 = getelementptr inbounds i8, i8* %args, i64 24, !dbg !18
  %15 = bitcast i8* %14 to %1**, !dbg !18
  %compute241 = load %1*, %1** %15, align 8, !dbg !18
  %16 = getelementptr inbounds i8, i8* %args, i64 32, !dbg !18
  %17 = bitcast i8* %16 to %1**, !dbg !18
  %compute3242 = load %1*, %1** %17, align 8, !dbg !18
  %18 = getelementptr inbounds i8, i8* %args, i64 40, !dbg !18
  %19 = bitcast i8* %18 to %1**, !dbg !18
  %compute4243 = load %1*, %1** %19, align 8, !dbg !18
  %20 = getelementptr inbounds i8, i8* %args, i64 48, !dbg !18
  %21 = bitcast i8* %20 to %1**, !dbg !18
  %T_divide244 = load %1*, %1** %21, align 8, !dbg !18
  %22 = getelementptr inbounds i8, i8* %args, i64 56, !dbg !18
  %23 = bitcast i8* %22 to %1**, !dbg !18
  %T_subtract245 = load %1*, %1** %23, align 8, !dbg !18
  %24 = bitcast %1* %ph_0238 to float**, !dbg !18
  %ph_0_void_ptr246 = load float*, float** %24, align 8, !dbg !18
  %ptrint = ptrtoint float* %ph_0_void_ptr246 to i64, !dbg !18
  %maskedptr = and i64 %ptrint, 63, !dbg !18
  %maskcond = icmp eq i64 %maskedptr, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond), !dbg !18
  %25 = getelementptr inbounds %1, %1* %ph_0238, i64 0, i32 4, !dbg !18
  %default_function.ph_0.shape = load i64*, i64** %25, align 8, !dbg !18
  %26 = getelementptr inbounds %1, %1* %ph_0238, i64 0, i32 5, !dbg !18
  %default_function.ph_0.strides = load i64*, i64** %26, align 8, !dbg !18
  %27 = getelementptr inbounds %1, %1* %ph_0238, i64 0, i32 1, i32 1, !dbg !18
  %dev_id = load i32, i32* %27, align 4, !dbg !18
  %28 = bitcast %1* %ph_3239 to float**, !dbg !18
  %ph_3_void_ptr247 = load float*, float** %28, align 8, !dbg !18
  %ptrint7 = ptrtoint float* %ph_3_void_ptr247 to i64, !dbg !18
  %maskedptr8 = and i64 %ptrint7, 63, !dbg !18
  %maskcond9 = icmp eq i64 %maskedptr8, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond9), !dbg !18
  %29 = getelementptr inbounds %1, %1* %ph_3239, i64 0, i32 4, !dbg !18
  %default_function.ph_3.shape = load i64*, i64** %29, align 8, !dbg !18
  %30 = getelementptr inbounds %1, %1* %ph_3239, i64 0, i32 5, !dbg !18
  %default_function.ph_3.strides = load i64*, i64** %30, align 8, !dbg !18
  %31 = bitcast %1* %ph_6240 to float**, !dbg !18
  %ph_6_void_ptr248 = load float*, float** %31, align 8, !dbg !18
  %ptrint11 = ptrtoint float* %ph_6_void_ptr248 to i64, !dbg !18
  %maskedptr12 = and i64 %ptrint11, 63, !dbg !18
  %maskcond13 = icmp eq i64 %maskedptr12, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond13), !dbg !18
  %32 = getelementptr inbounds %1, %1* %ph_6240, i64 0, i32 4, !dbg !18
  %default_function.ph_6.shape = load i64*, i64** %32, align 8, !dbg !18
  %33 = getelementptr inbounds %1, %1* %ph_6240, i64 0, i32 5, !dbg !18
  %default_function.ph_6.strides = load i64*, i64** %33, align 8, !dbg !18
  %34 = bitcast %1* %compute241 to float**, !dbg !18
  %compute_void_ptr249 = load float*, float** %34, align 8, !dbg !18
  %ptrint15 = ptrtoint float* %compute_void_ptr249 to i64, !dbg !18
  %maskedptr16 = and i64 %ptrint15, 63, !dbg !18
  %maskcond17 = icmp eq i64 %maskedptr16, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond17), !dbg !18
  %35 = getelementptr inbounds %1, %1* %compute241, i64 0, i32 4, !dbg !18
  %default_function.compute.shape = load i64*, i64** %35, align 8, !dbg !18
  %36 = getelementptr inbounds %1, %1* %compute241, i64 0, i32 5, !dbg !18
  %default_function.compute.strides = load i64*, i64** %36, align 8, !dbg !18
  %37 = bitcast %1* %compute3242 to float**, !dbg !18
  %compute_void_ptr18250 = load float*, float** %37, align 8, !dbg !18
  %ptrint20 = ptrtoint float* %compute_void_ptr18250 to i64, !dbg !18
  %maskedptr21 = and i64 %ptrint20, 63, !dbg !18
  %maskcond22 = icmp eq i64 %maskedptr21, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond22), !dbg !18
  %38 = getelementptr inbounds %1, %1* %compute3242, i64 0, i32 4, !dbg !18
  %default_function.compute.shape23 = load i64*, i64** %38, align 8, !dbg !18
  %39 = getelementptr inbounds %1, %1* %compute3242, i64 0, i32 5, !dbg !18
  %default_function.compute.strides24 = load i64*, i64** %39, align 8, !dbg !18
  %40 = bitcast %1* %compute4243 to float**, !dbg !18
  %compute_void_ptr25251 = load float*, float** %40, align 8, !dbg !18
  %ptrint27 = ptrtoint float* %compute_void_ptr25251 to i64, !dbg !18
  %maskedptr28 = and i64 %ptrint27, 63, !dbg !18
  %maskcond29 = icmp eq i64 %maskedptr28, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond29), !dbg !18
  %41 = getelementptr inbounds %1, %1* %compute4243, i64 0, i32 4, !dbg !18
  %default_function.compute.shape30 = load i64*, i64** %41, align 8, !dbg !18
  %42 = getelementptr inbounds %1, %1* %compute4243, i64 0, i32 5, !dbg !18
  %default_function.compute.strides31 = load i64*, i64** %42, align 8, !dbg !18
  %43 = bitcast %1* %T_divide244 to float**, !dbg !18
  %T_divide_void_ptr252 = load float*, float** %43, align 8, !dbg !18
  %ptrint33 = ptrtoint float* %T_divide_void_ptr252 to i64, !dbg !18
  %maskedptr34 = and i64 %ptrint33, 63, !dbg !18
  %maskcond35 = icmp eq i64 %maskedptr34, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond35), !dbg !18
  %44 = getelementptr inbounds %1, %1* %T_divide244, i64 0, i32 4, !dbg !18
  %default_function.T_divide.shape = load i64*, i64** %44, align 8, !dbg !18
  %45 = getelementptr inbounds %1, %1* %T_divide244, i64 0, i32 5, !dbg !18
  %default_function.T_divide.strides = load i64*, i64** %45, align 8, !dbg !18
  %46 = bitcast %1* %T_subtract245 to float**, !dbg !18
  %T_subtract_void_ptr253 = load float*, float** %46, align 8, !dbg !18
  %ptrint37 = ptrtoint float* %T_subtract_void_ptr253 to i64, !dbg !18
  %maskedptr38 = and i64 %ptrint37, 63, !dbg !18
  %maskcond39 = icmp eq i64 %maskedptr38, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond39), !dbg !18
  %47 = getelementptr inbounds %1, %1* %T_subtract245, i64 0, i32 4, !dbg !18
  %default_function.T_subtract.shape = load i64*, i64** %47, align 8, !dbg !18
  %48 = getelementptr inbounds %1, %1* %T_subtract245, i64 0, i32 5, !dbg !18
  %default_function.T_subtract.strides = load i64*, i64** %48, align 8, !dbg !18
  switch i32 %ph_0.code, label %assert_fail40 [
    i32 13, label %assert_end41
    i32 7, label %assert_end41
    i32 4, label %assert_end41
    i32 3, label %assert_end41
  ], !dbg !18

assert_fail40:                                    ; preds = %assert_end
  %49 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %49(i8* getelementptr inbounds ([130 x i8], [130 x i8]* @.str.1, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end41:                                     ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  switch i32 %ph_3.code, label %assert_fail42 [
    i32 13, label %assert_end43
    i32 7, label %assert_end43
    i32 4, label %assert_end43
    i32 3, label %assert_end43
  ], !dbg !18

assert_fail42:                                    ; preds = %assert_end41
  %50 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %50(i8* getelementptr inbounds ([130 x i8], [130 x i8]* @.str.2, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end43:                                     ; preds = %assert_end41, %assert_end41, %assert_end41, %assert_end41
  switch i32 %ph_6.code, label %assert_fail44 [
    i32 13, label %assert_end45
    i32 7, label %assert_end45
    i32 4, label %assert_end45
    i32 3, label %assert_end45
  ], !dbg !18

assert_fail44:                                    ; preds = %assert_end43
  %51 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %51(i8* getelementptr inbounds ([130 x i8], [130 x i8]* @.str.3, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end45:                                     ; preds = %assert_end43, %assert_end43, %assert_end43, %assert_end43
  switch i32 %compute.code, label %assert_fail46 [
    i32 13, label %assert_end47
    i32 7, label %assert_end47
    i32 4, label %assert_end47
    i32 3, label %assert_end47
  ], !dbg !18

assert_fail46:                                    ; preds = %assert_end45
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %52(i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.4, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end47:                                     ; preds = %assert_end45, %assert_end45, %assert_end45, %assert_end45
  switch i32 %compute.code1, label %assert_fail48 [
    i32 13, label %assert_end49
    i32 7, label %assert_end49
    i32 4, label %assert_end49
    i32 3, label %assert_end49
  ], !dbg !18

assert_fail48:                                    ; preds = %assert_end47
  %53 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %53(i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.5, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end49:                                     ; preds = %assert_end47, %assert_end47, %assert_end47, %assert_end47
  switch i32 %compute.code2, label %assert_fail50 [
    i32 13, label %assert_end51
    i32 7, label %assert_end51
    i32 4, label %assert_end51
    i32 3, label %assert_end51
  ], !dbg !18

assert_fail50:                                    ; preds = %assert_end49
  %54 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %54(i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.6, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end51:                                     ; preds = %assert_end49, %assert_end49, %assert_end49, %assert_end49
  switch i32 %T_divide.code, label %assert_fail52 [
    i32 13, label %assert_end53
    i32 7, label %assert_end53
    i32 4, label %assert_end53
    i32 3, label %assert_end53
  ], !dbg !18

assert_fail52:                                    ; preds = %assert_end51
  %55 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %55(i8* getelementptr inbounds ([146 x i8], [146 x i8]* @.str.7, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end53:                                     ; preds = %assert_end51, %assert_end51, %assert_end51, %assert_end51
  switch i32 %T_subtract.code, label %assert_fail54 [
    i32 13, label %assert_end55
    i32 7, label %assert_end55
    i32 4, label %assert_end55
    i32 3, label %assert_end55
  ], !dbg !18

assert_fail54:                                    ; preds = %assert_end53
  %56 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %56(i8* getelementptr inbounds ([154 x i8], [154 x i8]* @.str.8, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end55:                                     ; preds = %assert_end53, %assert_end53, %assert_end53, %assert_end53
  %57 = getelementptr inbounds %1, %1* %ph_0238, i64 0, i32 2, !dbg !18
  %58 = load i32, i32* %57, align 4, !dbg !18
  %59 = icmp eq i32 %58, 3, !dbg !18
  br i1 %59, label %assert_end59, label %assert_fail56, !dbg !18, !prof !19

assert_fail56:                                    ; preds = %assert_end55
  %60 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %60(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.9, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end59:                                     ; preds = %assert_end55
  %61 = getelementptr inbounds %1, %1* %ph_0238, i64 0, i32 3, i32 2, !dbg !18
  %62 = load i16, i16* %61, align 2, !dbg !18
  %63 = icmp eq i16 %62, 1, !dbg !18
  %64 = getelementptr inbounds %1, %1* %ph_0238, i64 0, i32 3, i32 1, !dbg !18
  %65 = load i8, i8* %64, align 1, !dbg !18
  %66 = icmp eq i8 %65, 32, !dbg !18
  %67 = getelementptr inbounds %1, %1* %ph_0238, i64 0, i32 3, i32 0, !dbg !18
  %68 = load i8, i8* %67, align 1, !dbg !18
  %69 = icmp eq i8 %68, 2, !dbg !18
  %70 = and i1 %66, %69, !dbg !18
  %71 = and i1 %63, %70, !dbg !18
  br i1 %71, label %assert_end61, label %assert_fail60, !dbg !18, !prof !19

assert_fail60:                                    ; preds = %assert_end59
  %72 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %72(i8* getelementptr inbounds ([235 x i8], [235 x i8]* @.str.10, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end61:                                     ; preds = %assert_end59
  %73 = load i64, i64* %default_function.ph_0.shape, align 8, !dbg !18, !tbaa !52
  %74 = trunc i64 %73 to i32, !dbg !18
  %75 = icmp eq i32 %74, 13, !dbg !18
  br i1 %75, label %assert_end63, label %assert_fail62, !dbg !18, !prof !19

assert_fail62:                                    ; preds = %assert_end61
  %76 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %76(i8* getelementptr inbounds ([193 x i8], [193 x i8]* @.str.11, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end63:                                     ; preds = %assert_end61
  %77 = getelementptr inbounds i64, i64* %default_function.ph_0.shape, i64 1, !dbg !18
  %78 = load i64, i64* %77, align 8, !dbg !18, !tbaa !62
  %79 = trunc i64 %78 to i32, !dbg !18
  %80 = icmp eq i32 %79, 16, !dbg !18
  br i1 %80, label %assert_end65, label %assert_fail64, !dbg !18, !prof !19

assert_fail64:                                    ; preds = %assert_end63
  %81 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %81(i8* getelementptr inbounds ([193 x i8], [193 x i8]* @.str.12, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end65:                                     ; preds = %assert_end63
  %82 = getelementptr inbounds i64, i64* %default_function.ph_0.shape, i64 2, !dbg !18
  %83 = load i64, i64* %82, align 8, !dbg !18, !tbaa !64
  %84 = trunc i64 %83 to i32, !dbg !18
  %85 = icmp eq i32 %84, 1, !dbg !18
  br i1 %85, label %assert_end67, label %assert_fail66, !dbg !18, !prof !19

assert_fail66:                                    ; preds = %assert_end65
  %86 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %86(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.13, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end67:                                     ; preds = %assert_end65
  %87 = icmp eq i64* %default_function.ph_0.strides, null, !dbg !18
  br i1 %87, label %if_end, label %if_then, !dbg !18, !prof !67

if_then:                                          ; preds = %assert_end67
  %88 = load i64, i64* %default_function.ph_0.strides, align 8, !dbg !18, !tbaa !68
  %89 = trunc i64 %88 to i32, !dbg !18
  %90 = icmp eq i32 %89, 16, !dbg !18
  %91 = getelementptr inbounds i64, i64* %default_function.ph_0.strides, i64 1, !dbg !18
  %92 = load i64, i64* %91, align 8, !dbg !18, !tbaa !78
  %93 = trunc i64 %92 to i32, !dbg !18
  %94 = icmp eq i32 %93, 1, !dbg !18
  %95 = and i1 %90, %94, !dbg !18
  br i1 %95, label %if_end, label %assert_fail68, !dbg !18, !prof !19

if_end:                                           ; preds = %assert_end67, %if_then
  %96 = getelementptr inbounds %1, %1* %ph_0238, i64 0, i32 6, !dbg !18
  %97 = load i64, i64* %96, align 8, !dbg !18
  %98 = icmp eq i64 %97, 0, !dbg !18
  br i1 %98, label %assert_end71, label %assert_fail70, !dbg !18, !prof !19

assert_fail68:                                    ; preds = %if_then
  %99 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %99(i8* getelementptr inbounds ([189 x i8], [189 x i8]* @.str.14, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail70:                                    ; preds = %if_end
  %100 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %100(i8* getelementptr inbounds ([196 x i8], [196 x i8]* @.str.15, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end71:                                     ; preds = %if_end
  %101 = getelementptr inbounds %1, %1* %ph_0238, i64 0, i32 1, i32 0, !dbg !18
  %102 = load i32, i32* %101, align 4, !dbg !18
  %103 = icmp eq i32 %102, 1, !dbg !18
  br i1 %103, label %assert_end73, label %assert_fail72, !dbg !18, !prof !19

assert_fail72:                                    ; preds = %assert_end71
  %104 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %104(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.16, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end73:                                     ; preds = %assert_end71
  %105 = getelementptr inbounds %1, %1* %ph_3239, i64 0, i32 2, !dbg !18
  %106 = load i32, i32* %105, align 4, !dbg !18
  %107 = icmp eq i32 %106, 3, !dbg !18
  br i1 %107, label %assert_end77, label %assert_fail74, !dbg !18, !prof !19

assert_fail74:                                    ; preds = %assert_end73
  %108 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %108(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.17, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end77:                                     ; preds = %assert_end73
  %109 = getelementptr inbounds %1, %1* %ph_3239, i64 0, i32 3, i32 2, !dbg !18
  %110 = load i16, i16* %109, align 2, !dbg !18
  %111 = icmp eq i16 %110, 1, !dbg !18
  %112 = getelementptr inbounds %1, %1* %ph_3239, i64 0, i32 3, i32 1, !dbg !18
  %113 = load i8, i8* %112, align 1, !dbg !18
  %114 = icmp eq i8 %113, 32, !dbg !18
  %115 = getelementptr inbounds %1, %1* %ph_3239, i64 0, i32 3, i32 0, !dbg !18
  %116 = load i8, i8* %115, align 1, !dbg !18
  %117 = icmp eq i8 %116, 2, !dbg !18
  %118 = and i1 %114, %117, !dbg !18
  %119 = and i1 %111, %118, !dbg !18
  br i1 %119, label %assert_end79, label %assert_fail78, !dbg !18, !prof !19

assert_fail78:                                    ; preds = %assert_end77
  %120 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %120(i8* getelementptr inbounds ([235 x i8], [235 x i8]* @.str.18, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end79:                                     ; preds = %assert_end77
  %121 = load i64, i64* %default_function.ph_3.shape, align 8, !dbg !18, !tbaa !80
  %122 = trunc i64 %121 to i32, !dbg !18
  %123 = icmp eq i32 %122, 13, !dbg !18
  br i1 %123, label %assert_end81, label %assert_fail80, !dbg !18, !prof !19

assert_fail80:                                    ; preds = %assert_end79
  %124 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %124(i8* getelementptr inbounds ([193 x i8], [193 x i8]* @.str.19, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end81:                                     ; preds = %assert_end79
  %125 = getelementptr inbounds i64, i64* %default_function.ph_3.shape, i64 1, !dbg !18
  %126 = load i64, i64* %125, align 8, !dbg !18, !tbaa !90
  %127 = trunc i64 %126 to i32, !dbg !18
  %128 = icmp eq i32 %127, 16, !dbg !18
  br i1 %128, label %assert_end83, label %assert_fail82, !dbg !18, !prof !19

assert_fail82:                                    ; preds = %assert_end81
  %129 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %129(i8* getelementptr inbounds ([193 x i8], [193 x i8]* @.str.20, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end83:                                     ; preds = %assert_end81
  %130 = getelementptr inbounds i64, i64* %default_function.ph_3.shape, i64 2, !dbg !18
  %131 = load i64, i64* %130, align 8, !dbg !18, !tbaa !92
  %132 = trunc i64 %131 to i32, !dbg !18
  %133 = icmp eq i32 %132, 1, !dbg !18
  br i1 %133, label %assert_end85, label %assert_fail84, !dbg !18, !prof !19

assert_fail84:                                    ; preds = %assert_end83
  %134 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %134(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.21, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end85:                                     ; preds = %assert_end83
  %135 = icmp eq i64* %default_function.ph_3.strides, null, !dbg !18
  br i1 %135, label %if_end87, label %if_then86, !dbg !18, !prof !67

if_then86:                                        ; preds = %assert_end85
  %136 = load i64, i64* %default_function.ph_3.strides, align 8, !dbg !18, !tbaa !95
  %137 = trunc i64 %136 to i32, !dbg !18
  %138 = icmp eq i32 %137, 16, !dbg !18
  %139 = getelementptr inbounds i64, i64* %default_function.ph_3.strides, i64 1, !dbg !18
  %140 = load i64, i64* %139, align 8, !dbg !18, !tbaa !105
  %141 = trunc i64 %140 to i32, !dbg !18
  %142 = icmp eq i32 %141, 1, !dbg !18
  %143 = and i1 %138, %142, !dbg !18
  br i1 %143, label %if_end87, label %assert_fail88, !dbg !18, !prof !19

if_end87:                                         ; preds = %assert_end85, %if_then86
  %144 = getelementptr inbounds %1, %1* %ph_3239, i64 0, i32 6, !dbg !18
  %145 = load i64, i64* %144, align 8, !dbg !18
  %146 = icmp eq i64 %145, 0, !dbg !18
  br i1 %146, label %assert_end91, label %assert_fail90, !dbg !18, !prof !19

assert_fail88:                                    ; preds = %if_then86
  %147 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %147(i8* getelementptr inbounds ([189 x i8], [189 x i8]* @.str.22, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail90:                                    ; preds = %if_end87
  %148 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %148(i8* getelementptr inbounds ([196 x i8], [196 x i8]* @.str.23, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end91:                                     ; preds = %if_end87
  %149 = getelementptr inbounds %1, %1* %ph_3239, i64 0, i32 1, i32 0, !dbg !18
  %150 = load i32, i32* %149, align 4, !dbg !18
  %151 = icmp eq i32 %150, 1, !dbg !18
  br i1 %151, label %assert_end93, label %assert_fail92, !dbg !18, !prof !19

assert_fail92:                                    ; preds = %assert_end91
  %152 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %152(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.24, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end93:                                     ; preds = %assert_end91
  %153 = getelementptr inbounds %1, %1* %ph_3239, i64 0, i32 1, i32 1, !dbg !18
  %154 = load i32, i32* %153, align 4, !dbg !18
  %155 = icmp eq i32 %dev_id, %154, !dbg !18
  br i1 %155, label %assert_end95, label %assert_fail94, !dbg !18, !prof !19

assert_fail94:                                    ; preds = %assert_end93
  %156 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %156(i8* getelementptr inbounds ([182 x i8], [182 x i8]* @.str.25, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end95:                                     ; preds = %assert_end93
  %157 = getelementptr inbounds %1, %1* %ph_6240, i64 0, i32 2, !dbg !18
  %158 = load i32, i32* %157, align 4, !dbg !18
  %159 = icmp eq i32 %158, 3, !dbg !18
  br i1 %159, label %assert_end99, label %assert_fail96, !dbg !18, !prof !19

assert_fail96:                                    ; preds = %assert_end95
  %160 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %160(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.26, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end99:                                     ; preds = %assert_end95
  %161 = getelementptr inbounds %1, %1* %ph_6240, i64 0, i32 3, i32 2, !dbg !18
  %162 = load i16, i16* %161, align 2, !dbg !18
  %163 = icmp eq i16 %162, 1, !dbg !18
  %164 = getelementptr inbounds %1, %1* %ph_6240, i64 0, i32 3, i32 1, !dbg !18
  %165 = load i8, i8* %164, align 1, !dbg !18
  %166 = icmp eq i8 %165, 32, !dbg !18
  %167 = getelementptr inbounds %1, %1* %ph_6240, i64 0, i32 3, i32 0, !dbg !18
  %168 = load i8, i8* %167, align 1, !dbg !18
  %169 = icmp eq i8 %168, 2, !dbg !18
  %170 = and i1 %166, %169, !dbg !18
  %171 = and i1 %163, %170, !dbg !18
  br i1 %171, label %assert_end101, label %assert_fail100, !dbg !18, !prof !19

assert_fail100:                                   ; preds = %assert_end99
  %172 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %172(i8* getelementptr inbounds ([235 x i8], [235 x i8]* @.str.27, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end101:                                    ; preds = %assert_end99
  %173 = load i64, i64* %default_function.ph_6.shape, align 8, !dbg !18, !tbaa !107
  %174 = trunc i64 %173 to i32, !dbg !18
  %175 = icmp eq i32 %174, 13, !dbg !18
  br i1 %175, label %assert_end103, label %assert_fail102, !dbg !18, !prof !19

assert_fail102:                                   ; preds = %assert_end101
  %176 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %176(i8* getelementptr inbounds ([193 x i8], [193 x i8]* @.str.28, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end103:                                    ; preds = %assert_end101
  %177 = getelementptr inbounds i64, i64* %default_function.ph_6.shape, i64 1, !dbg !18
  %178 = load i64, i64* %177, align 8, !dbg !18, !tbaa !117
  %179 = trunc i64 %178 to i32, !dbg !18
  %180 = icmp eq i32 %179, 1, !dbg !18
  br i1 %180, label %assert_end105, label %assert_fail104, !dbg !18, !prof !19

assert_fail104:                                   ; preds = %assert_end103
  %181 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %181(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.29, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end105:                                    ; preds = %assert_end103
  %182 = getelementptr inbounds i64, i64* %default_function.ph_6.shape, i64 2, !dbg !18
  %183 = load i64, i64* %182, align 8, !dbg !18, !tbaa !119
  %184 = trunc i64 %183 to i32, !dbg !18
  %185 = icmp eq i32 %184, 5, !dbg !18
  br i1 %185, label %assert_end107, label %assert_fail106, !dbg !18, !prof !19

assert_fail106:                                   ; preds = %assert_end105
  %186 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %186(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.30, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end107:                                    ; preds = %assert_end105
  %187 = icmp eq i64* %default_function.ph_6.strides, null, !dbg !18
  br i1 %187, label %if_end109, label %if_then108, !dbg !18, !prof !67

if_then108:                                       ; preds = %assert_end107
  %188 = load i64, i64* %default_function.ph_6.strides, align 8, !dbg !18, !tbaa !122
  %189 = trunc i64 %188 to i32, !dbg !18
  %190 = icmp eq i32 %189, 5, !dbg !18
  %191 = getelementptr inbounds i64, i64* %default_function.ph_6.strides, i64 2, !dbg !18
  %192 = load i64, i64* %191, align 8, !dbg !18, !tbaa !132
  %193 = trunc i64 %192 to i32, !dbg !18
  %194 = icmp eq i32 %193, 1, !dbg !18
  %195 = and i1 %190, %194, !dbg !18
  br i1 %195, label %if_end109, label %assert_fail110, !dbg !18, !prof !19

if_end109:                                        ; preds = %assert_end107, %if_then108
  %196 = getelementptr inbounds %1, %1* %ph_6240, i64 0, i32 6, !dbg !18
  %197 = load i64, i64* %196, align 8, !dbg !18
  %198 = icmp eq i64 %197, 0, !dbg !18
  br i1 %198, label %assert_end113, label %assert_fail112, !dbg !18, !prof !19

assert_fail110:                                   ; preds = %if_then108
  %199 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %199(i8* getelementptr inbounds ([188 x i8], [188 x i8]* @.str.31, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail112:                                   ; preds = %if_end109
  %200 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %200(i8* getelementptr inbounds ([196 x i8], [196 x i8]* @.str.32, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end113:                                    ; preds = %if_end109
  %201 = getelementptr inbounds %1, %1* %ph_6240, i64 0, i32 1, i32 0, !dbg !18
  %202 = load i32, i32* %201, align 4, !dbg !18
  %203 = icmp eq i32 %202, 1, !dbg !18
  br i1 %203, label %assert_end115, label %assert_fail114, !dbg !18, !prof !19

assert_fail114:                                   ; preds = %assert_end113
  %204 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %204(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.33, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end115:                                    ; preds = %assert_end113
  %205 = getelementptr inbounds %1, %1* %ph_6240, i64 0, i32 1, i32 1, !dbg !18
  %206 = load i32, i32* %205, align 4, !dbg !18
  %207 = icmp eq i32 %dev_id, %206, !dbg !18
  br i1 %207, label %assert_end117, label %assert_fail116, !dbg !18, !prof !19

assert_fail116:                                   ; preds = %assert_end115
  %208 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %208(i8* getelementptr inbounds ([182 x i8], [182 x i8]* @.str.34, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end117:                                    ; preds = %assert_end115
  %209 = getelementptr inbounds %1, %1* %compute241, i64 0, i32 2, !dbg !18
  %210 = load i32, i32* %209, align 4, !dbg !18
  %211 = icmp eq i32 %210, 3, !dbg !18
  br i1 %211, label %assert_end121, label %assert_fail118, !dbg !18, !prof !19

assert_fail118:                                   ; preds = %assert_end117
  %212 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %212(i8* getelementptr inbounds ([113 x i8], [113 x i8]* @.str.35, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end121:                                    ; preds = %assert_end117
  %213 = getelementptr inbounds %1, %1* %compute241, i64 0, i32 3, i32 2, !dbg !18
  %214 = load i16, i16* %213, align 2, !dbg !18
  %215 = icmp eq i16 %214, 1, !dbg !18
  %216 = getelementptr inbounds %1, %1* %compute241, i64 0, i32 3, i32 1, !dbg !18
  %217 = load i8, i8* %216, align 1, !dbg !18
  %218 = icmp eq i8 %217, 32, !dbg !18
  %219 = getelementptr inbounds %1, %1* %compute241, i64 0, i32 3, i32 0, !dbg !18
  %220 = load i8, i8* %219, align 1, !dbg !18
  %221 = icmp eq i8 %220, 2, !dbg !18
  %222 = and i1 %218, %221, !dbg !18
  %223 = and i1 %215, %222, !dbg !18
  br i1 %223, label %assert_end123, label %assert_fail122, !dbg !18, !prof !19

assert_fail122:                                   ; preds = %assert_end121
  %224 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %224(i8* getelementptr inbounds ([247 x i8], [247 x i8]* @.str.36, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end123:                                    ; preds = %assert_end121
  %225 = load i64, i64* %default_function.compute.shape, align 8, !dbg !18, !tbaa !135
  %226 = trunc i64 %225 to i32, !dbg !18
  %227 = icmp eq i32 %226, 13, !dbg !18
  br i1 %227, label %assert_end125, label %assert_fail124, !dbg !18, !prof !19

assert_fail124:                                   ; preds = %assert_end123
  %228 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %228(i8* getelementptr inbounds ([202 x i8], [202 x i8]* @.str.37, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end125:                                    ; preds = %assert_end123
  %229 = getelementptr inbounds i64, i64* %default_function.compute.shape, i64 1, !dbg !18
  %230 = load i64, i64* %229, align 8, !dbg !18, !tbaa !145
  %231 = trunc i64 %230 to i32, !dbg !18
  %232 = icmp eq i32 %231, 16, !dbg !18
  br i1 %232, label %assert_end127, label %assert_fail126, !dbg !18, !prof !19

assert_fail126:                                   ; preds = %assert_end125
  %233 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %233(i8* getelementptr inbounds ([202 x i8], [202 x i8]* @.str.38, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end127:                                    ; preds = %assert_end125
  %234 = getelementptr inbounds i64, i64* %default_function.compute.shape, i64 2, !dbg !18
  %235 = load i64, i64* %234, align 8, !dbg !18, !tbaa !147
  %236 = trunc i64 %235 to i32, !dbg !18
  %237 = icmp eq i32 %236, 1, !dbg !18
  br i1 %237, label %assert_end129, label %assert_fail128, !dbg !18, !prof !19

assert_fail128:                                   ; preds = %assert_end127
  %238 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %238(i8* getelementptr inbounds ([200 x i8], [200 x i8]* @.str.39, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end129:                                    ; preds = %assert_end127
  %239 = icmp eq i64* %default_function.compute.strides, null, !dbg !18
  br i1 %239, label %if_end131, label %if_then130, !dbg !18, !prof !67

if_then130:                                       ; preds = %assert_end129
  %240 = load i64, i64* %default_function.compute.strides, align 8, !dbg !18, !tbaa !150
  %241 = trunc i64 %240 to i32, !dbg !18
  %242 = icmp eq i32 %241, 16, !dbg !18
  %243 = getelementptr inbounds i64, i64* %default_function.compute.strides, i64 1, !dbg !18
  %244 = load i64, i64* %243, align 8, !dbg !18, !tbaa !160
  %245 = trunc i64 %244 to i32, !dbg !18
  %246 = icmp eq i32 %245, 1, !dbg !18
  %247 = and i1 %242, %246, !dbg !18
  br i1 %247, label %if_end131, label %assert_fail132, !dbg !18, !prof !19

if_end131:                                        ; preds = %assert_end129, %if_then130
  %248 = getelementptr inbounds %1, %1* %compute241, i64 0, i32 6, !dbg !18
  %249 = load i64, i64* %248, align 8, !dbg !18
  %250 = icmp eq i64 %249, 0, !dbg !18
  br i1 %250, label %assert_end135, label %assert_fail134, !dbg !18, !prof !19

assert_fail132:                                   ; preds = %if_then130
  %251 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %251(i8* getelementptr inbounds ([198 x i8], [198 x i8]* @.str.40, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail134:                                   ; preds = %if_end131
  %252 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %252(i8* getelementptr inbounds ([205 x i8], [205 x i8]* @.str.41, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end135:                                    ; preds = %if_end131
  %253 = getelementptr inbounds %1, %1* %compute241, i64 0, i32 1, i32 0, !dbg !18
  %254 = load i32, i32* %253, align 4, !dbg !18
  %255 = icmp eq i32 %254, 1, !dbg !18
  br i1 %255, label %assert_end137, label %assert_fail136, !dbg !18, !prof !19

assert_fail136:                                   ; preds = %assert_end135
  %256 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %256(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.42, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end137:                                    ; preds = %assert_end135
  %257 = getelementptr inbounds %1, %1* %compute241, i64 0, i32 1, i32 1, !dbg !18
  %258 = load i32, i32* %257, align 4, !dbg !18
  %259 = icmp eq i32 %dev_id, %258, !dbg !18
  br i1 %259, label %assert_end139, label %assert_fail138, !dbg !18, !prof !19

assert_fail138:                                   ; preds = %assert_end137
  %260 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %260(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.43, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end139:                                    ; preds = %assert_end137
  %261 = getelementptr inbounds %1, %1* %compute3242, i64 0, i32 2, !dbg !18
  %262 = load i32, i32* %261, align 4, !dbg !18
  %263 = icmp eq i32 %262, 3, !dbg !18
  br i1 %263, label %assert_end143, label %assert_fail140, !dbg !18, !prof !19

assert_fail140:                                   ; preds = %assert_end139
  %264 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %264(i8* getelementptr inbounds ([113 x i8], [113 x i8]* @.str.35, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end143:                                    ; preds = %assert_end139
  %265 = getelementptr inbounds %1, %1* %compute3242, i64 0, i32 3, i32 2, !dbg !18
  %266 = load i16, i16* %265, align 2, !dbg !18
  %267 = icmp eq i16 %266, 1, !dbg !18
  %268 = getelementptr inbounds %1, %1* %compute3242, i64 0, i32 3, i32 1, !dbg !18
  %269 = load i8, i8* %268, align 1, !dbg !18
  %270 = icmp eq i8 %269, 32, !dbg !18
  %271 = getelementptr inbounds %1, %1* %compute3242, i64 0, i32 3, i32 0, !dbg !18
  %272 = load i8, i8* %271, align 1, !dbg !18
  %273 = icmp eq i8 %272, 2, !dbg !18
  %274 = and i1 %270, %273, !dbg !18
  %275 = and i1 %267, %274, !dbg !18
  br i1 %275, label %assert_end145, label %assert_fail144, !dbg !18, !prof !19

assert_fail144:                                   ; preds = %assert_end143
  %276 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %276(i8* getelementptr inbounds ([247 x i8], [247 x i8]* @.str.36, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end145:                                    ; preds = %assert_end143
  %277 = load i64, i64* %default_function.compute.shape23, align 8, !dbg !18, !tbaa !162
  %278 = trunc i64 %277 to i32, !dbg !18
  %279 = icmp eq i32 %278, 13, !dbg !18
  br i1 %279, label %assert_end147, label %assert_fail146, !dbg !18, !prof !19

assert_fail146:                                   ; preds = %assert_end145
  %280 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %280(i8* getelementptr inbounds ([202 x i8], [202 x i8]* @.str.37, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end147:                                    ; preds = %assert_end145
  %281 = getelementptr inbounds i64, i64* %default_function.compute.shape23, i64 1, !dbg !18
  %282 = load i64, i64* %281, align 8, !dbg !18, !tbaa !172
  %283 = trunc i64 %282 to i32, !dbg !18
  %284 = icmp eq i32 %283, 16, !dbg !18
  br i1 %284, label %assert_end149, label %assert_fail148, !dbg !18, !prof !19

assert_fail148:                                   ; preds = %assert_end147
  %285 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %285(i8* getelementptr inbounds ([202 x i8], [202 x i8]* @.str.38, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end149:                                    ; preds = %assert_end147
  %286 = getelementptr inbounds i64, i64* %default_function.compute.shape23, i64 2, !dbg !18
  %287 = load i64, i64* %286, align 8, !dbg !18, !tbaa !174
  %288 = trunc i64 %287 to i32, !dbg !18
  %289 = icmp eq i32 %288, 5, !dbg !18
  br i1 %289, label %assert_end151, label %assert_fail150, !dbg !18, !prof !19

assert_fail150:                                   ; preds = %assert_end149
  %290 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %290(i8* getelementptr inbounds ([200 x i8], [200 x i8]* @.str.44, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end151:                                    ; preds = %assert_end149
  %291 = icmp eq i64* %default_function.compute.strides24, null, !dbg !18
  br i1 %291, label %if_end153, label %if_then152, !dbg !18, !prof !67

if_then152:                                       ; preds = %assert_end151
  %292 = load i64, i64* %default_function.compute.strides24, align 8, !dbg !18, !tbaa !177
  %293 = trunc i64 %292 to i32, !dbg !18
  %294 = icmp eq i32 %293, 80, !dbg !18
  %295 = getelementptr inbounds i64, i64* %default_function.compute.strides24, i64 1, !dbg !18
  %296 = load i64, i64* %295, align 8, !dbg !18, !tbaa !187
  %297 = trunc i64 %296 to i32, !dbg !18
  %298 = icmp eq i32 %297, 5, !dbg !18
  %299 = getelementptr inbounds i64, i64* %default_function.compute.strides24, i64 2, !dbg !18
  %300 = load i64, i64* %299, align 8, !dbg !18, !tbaa !189
  %301 = trunc i64 %300 to i32, !dbg !18
  %302 = icmp eq i32 %301, 1, !dbg !18
  %303 = and i1 %298, %302, !dbg !18
  %304 = and i1 %294, %303, !dbg !18
  br i1 %304, label %if_end153, label %assert_fail154, !dbg !18, !prof !19

if_end153:                                        ; preds = %assert_end151, %if_then152
  %305 = getelementptr inbounds %1, %1* %compute3242, i64 0, i32 6, !dbg !18
  %306 = load i64, i64* %305, align 8, !dbg !18
  %307 = icmp eq i64 %306, 0, !dbg !18
  br i1 %307, label %assert_end157, label %assert_fail156, !dbg !18, !prof !19

assert_fail154:                                   ; preds = %if_then152
  %308 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %308(i8* getelementptr inbounds ([260 x i8], [260 x i8]* @.str.45, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail156:                                   ; preds = %if_end153
  %309 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %309(i8* getelementptr inbounds ([205 x i8], [205 x i8]* @.str.41, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end157:                                    ; preds = %if_end153
  %310 = getelementptr inbounds %1, %1* %compute3242, i64 0, i32 1, i32 0, !dbg !18
  %311 = load i32, i32* %310, align 4, !dbg !18
  %312 = icmp eq i32 %311, 1, !dbg !18
  br i1 %312, label %assert_end159, label %assert_fail158, !dbg !18, !prof !19

assert_fail158:                                   ; preds = %assert_end157
  %313 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %313(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.42, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end159:                                    ; preds = %assert_end157
  %314 = getelementptr inbounds %1, %1* %compute3242, i64 0, i32 1, i32 1, !dbg !18
  %315 = load i32, i32* %314, align 4, !dbg !18
  %316 = icmp eq i32 %dev_id, %315, !dbg !18
  br i1 %316, label %assert_end161, label %assert_fail160, !dbg !18, !prof !19

assert_fail160:                                   ; preds = %assert_end159
  %317 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %317(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.43, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end161:                                    ; preds = %assert_end159
  %318 = getelementptr inbounds %1, %1* %compute4243, i64 0, i32 2, !dbg !18
  %319 = load i32, i32* %318, align 4, !dbg !18
  %320 = icmp eq i32 %319, 3, !dbg !18
  br i1 %320, label %assert_end165, label %assert_fail162, !dbg !18, !prof !19

assert_fail162:                                   ; preds = %assert_end161
  %321 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %321(i8* getelementptr inbounds ([113 x i8], [113 x i8]* @.str.35, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end165:                                    ; preds = %assert_end161
  %322 = getelementptr inbounds %1, %1* %compute4243, i64 0, i32 3, i32 2, !dbg !18
  %323 = load i16, i16* %322, align 2, !dbg !18
  %324 = icmp eq i16 %323, 1, !dbg !18
  %325 = getelementptr inbounds %1, %1* %compute4243, i64 0, i32 3, i32 1, !dbg !18
  %326 = load i8, i8* %325, align 1, !dbg !18
  %327 = icmp eq i8 %326, 32, !dbg !18
  %328 = getelementptr inbounds %1, %1* %compute4243, i64 0, i32 3, i32 0, !dbg !18
  %329 = load i8, i8* %328, align 1, !dbg !18
  %330 = icmp eq i8 %329, 2, !dbg !18
  %331 = and i1 %327, %330, !dbg !18
  %332 = and i1 %324, %331, !dbg !18
  br i1 %332, label %assert_end167, label %assert_fail166, !dbg !18, !prof !19

assert_fail166:                                   ; preds = %assert_end165
  %333 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %333(i8* getelementptr inbounds ([247 x i8], [247 x i8]* @.str.36, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end167:                                    ; preds = %assert_end165
  %334 = load i64, i64* %default_function.compute.shape30, align 8, !dbg !18, !tbaa !192
  %335 = trunc i64 %334 to i32, !dbg !18
  %336 = icmp eq i32 %335, 13, !dbg !18
  br i1 %336, label %assert_end169, label %assert_fail168, !dbg !18, !prof !19

assert_fail168:                                   ; preds = %assert_end167
  %337 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %337(i8* getelementptr inbounds ([202 x i8], [202 x i8]* @.str.37, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end169:                                    ; preds = %assert_end167
  %338 = getelementptr inbounds i64, i64* %default_function.compute.shape30, i64 1, !dbg !18
  %339 = load i64, i64* %338, align 8, !dbg !18, !tbaa !202
  %340 = trunc i64 %339 to i32, !dbg !18
  %341 = icmp eq i32 %340, 16, !dbg !18
  br i1 %341, label %assert_end171, label %assert_fail170, !dbg !18, !prof !19

assert_fail170:                                   ; preds = %assert_end169
  %342 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %342(i8* getelementptr inbounds ([202 x i8], [202 x i8]* @.str.38, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end171:                                    ; preds = %assert_end169
  %343 = getelementptr inbounds i64, i64* %default_function.compute.shape30, i64 2, !dbg !18
  %344 = load i64, i64* %343, align 8, !dbg !18, !tbaa !204
  %345 = trunc i64 %344 to i32, !dbg !18
  %346 = icmp eq i32 %345, 1, !dbg !18
  br i1 %346, label %assert_end173, label %assert_fail172, !dbg !18, !prof !19

assert_fail172:                                   ; preds = %assert_end171
  %347 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %347(i8* getelementptr inbounds ([200 x i8], [200 x i8]* @.str.39, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end173:                                    ; preds = %assert_end171
  %348 = icmp eq i64* %default_function.compute.strides31, null, !dbg !18
  br i1 %348, label %if_end175, label %if_then174, !dbg !18, !prof !67

if_then174:                                       ; preds = %assert_end173
  %349 = load i64, i64* %default_function.compute.strides31, align 8, !dbg !18, !tbaa !207
  %350 = trunc i64 %349 to i32, !dbg !18
  %351 = icmp eq i32 %350, 16, !dbg !18
  %352 = getelementptr inbounds i64, i64* %default_function.compute.strides31, i64 1, !dbg !18
  %353 = load i64, i64* %352, align 8, !dbg !18, !tbaa !217
  %354 = trunc i64 %353 to i32, !dbg !18
  %355 = icmp eq i32 %354, 1, !dbg !18
  %356 = and i1 %351, %355, !dbg !18
  br i1 %356, label %if_end175, label %assert_fail176, !dbg !18, !prof !19

if_end175:                                        ; preds = %assert_end173, %if_then174
  %357 = getelementptr inbounds %1, %1* %compute4243, i64 0, i32 6, !dbg !18
  %358 = load i64, i64* %357, align 8, !dbg !18
  %359 = icmp eq i64 %358, 0, !dbg !18
  br i1 %359, label %assert_end179, label %assert_fail178, !dbg !18, !prof !19

assert_fail176:                                   ; preds = %if_then174
  %360 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %360(i8* getelementptr inbounds ([198 x i8], [198 x i8]* @.str.40, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail178:                                   ; preds = %if_end175
  %361 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %361(i8* getelementptr inbounds ([205 x i8], [205 x i8]* @.str.41, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end179:                                    ; preds = %if_end175
  %362 = getelementptr inbounds %1, %1* %compute4243, i64 0, i32 1, i32 0, !dbg !18
  %363 = load i32, i32* %362, align 4, !dbg !18
  %364 = icmp eq i32 %363, 1, !dbg !18
  br i1 %364, label %assert_end181, label %assert_fail180, !dbg !18, !prof !19

assert_fail180:                                   ; preds = %assert_end179
  %365 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %365(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.42, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end181:                                    ; preds = %assert_end179
  %366 = getelementptr inbounds %1, %1* %compute4243, i64 0, i32 1, i32 1, !dbg !18
  %367 = load i32, i32* %366, align 4, !dbg !18
  %368 = icmp eq i32 %dev_id, %367, !dbg !18
  br i1 %368, label %assert_end183, label %assert_fail182, !dbg !18, !prof !19

assert_fail182:                                   ; preds = %assert_end181
  %369 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %369(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.43, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end183:                                    ; preds = %assert_end181
  %370 = getelementptr inbounds %1, %1* %T_divide244, i64 0, i32 2, !dbg !18
  %371 = load i32, i32* %370, align 4, !dbg !18
  %372 = icmp eq i32 %371, 3, !dbg !18
  br i1 %372, label %assert_end187, label %assert_fail184, !dbg !18, !prof !19

assert_fail184:                                   ; preds = %assert_end183
  %373 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %373(i8* getelementptr inbounds ([115 x i8], [115 x i8]* @.str.46, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end187:                                    ; preds = %assert_end183
  %374 = getelementptr inbounds %1, %1* %T_divide244, i64 0, i32 3, i32 2, !dbg !18
  %375 = load i16, i16* %374, align 2, !dbg !18
  %376 = icmp eq i16 %375, 1, !dbg !18
  %377 = getelementptr inbounds %1, %1* %T_divide244, i64 0, i32 3, i32 1, !dbg !18
  %378 = load i8, i8* %377, align 1, !dbg !18
  %379 = icmp eq i8 %378, 32, !dbg !18
  %380 = getelementptr inbounds %1, %1* %T_divide244, i64 0, i32 3, i32 0, !dbg !18
  %381 = load i8, i8* %380, align 1, !dbg !18
  %382 = icmp eq i8 %381, 2, !dbg !18
  %383 = and i1 %379, %382, !dbg !18
  %384 = and i1 %376, %383, !dbg !18
  br i1 %384, label %assert_end189, label %assert_fail188, !dbg !18, !prof !19

assert_fail188:                                   ; preds = %assert_end187
  %385 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %385(i8* getelementptr inbounds ([251 x i8], [251 x i8]* @.str.47, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end189:                                    ; preds = %assert_end187
  %386 = load i64, i64* %default_function.T_divide.shape, align 8, !dbg !18, !tbaa !219
  %387 = trunc i64 %386 to i32, !dbg !18
  %388 = icmp eq i32 %387, 13, !dbg !18
  br i1 %388, label %assert_end191, label %assert_fail190, !dbg !18, !prof !19

assert_fail190:                                   ; preds = %assert_end189
  %389 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %389(i8* getelementptr inbounds ([205 x i8], [205 x i8]* @.str.48, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end191:                                    ; preds = %assert_end189
  %390 = getelementptr inbounds i64, i64* %default_function.T_divide.shape, i64 1, !dbg !18
  %391 = load i64, i64* %390, align 8, !dbg !18, !tbaa !229
  %392 = trunc i64 %391 to i32, !dbg !18
  %393 = icmp eq i32 %392, 16, !dbg !18
  br i1 %393, label %assert_end193, label %assert_fail192, !dbg !18, !prof !19

assert_fail192:                                   ; preds = %assert_end191
  %394 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %394(i8* getelementptr inbounds ([205 x i8], [205 x i8]* @.str.49, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end193:                                    ; preds = %assert_end191
  %395 = getelementptr inbounds i64, i64* %default_function.T_divide.shape, i64 2, !dbg !18
  %396 = load i64, i64* %395, align 8, !dbg !18, !tbaa !231
  %397 = trunc i64 %396 to i32, !dbg !18
  %398 = icmp eq i32 %397, 1, !dbg !18
  br i1 %398, label %assert_end195, label %assert_fail194, !dbg !18, !prof !19

assert_fail194:                                   ; preds = %assert_end193
  %399 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %399(i8* getelementptr inbounds ([203 x i8], [203 x i8]* @.str.50, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end195:                                    ; preds = %assert_end193
  %400 = icmp eq i64* %default_function.T_divide.strides, null, !dbg !18
  br i1 %400, label %if_end197, label %if_then196, !dbg !18, !prof !67

if_then196:                                       ; preds = %assert_end195
  %401 = load i64, i64* %default_function.T_divide.strides, align 8, !dbg !18, !tbaa !234
  %402 = trunc i64 %401 to i32, !dbg !18
  %403 = icmp eq i32 %402, 16, !dbg !18
  %404 = getelementptr inbounds i64, i64* %default_function.T_divide.strides, i64 1, !dbg !18
  %405 = load i64, i64* %404, align 8, !dbg !18, !tbaa !244
  %406 = trunc i64 %405 to i32, !dbg !18
  %407 = icmp eq i32 %406, 1, !dbg !18
  %408 = and i1 %403, %407, !dbg !18
  br i1 %408, label %if_end197, label %assert_fail198, !dbg !18, !prof !19

if_end197:                                        ; preds = %assert_end195, %if_then196
  %409 = getelementptr inbounds %1, %1* %T_divide244, i64 0, i32 6, !dbg !18
  %410 = load i64, i64* %409, align 8, !dbg !18
  %411 = icmp eq i64 %410, 0, !dbg !18
  br i1 %411, label %assert_end201, label %assert_fail200, !dbg !18, !prof !19

assert_fail198:                                   ; preds = %if_then196
  %412 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %412(i8* getelementptr inbounds ([201 x i8], [201 x i8]* @.str.51, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail200:                                   ; preds = %if_end197
  %413 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %413(i8* getelementptr inbounds ([208 x i8], [208 x i8]* @.str.52, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end201:                                    ; preds = %if_end197
  %414 = getelementptr inbounds %1, %1* %T_divide244, i64 0, i32 1, i32 0, !dbg !18
  %415 = load i32, i32* %414, align 4, !dbg !18
  %416 = icmp eq i32 %415, 1, !dbg !18
  br i1 %416, label %assert_end203, label %assert_fail202, !dbg !18, !prof !19

assert_fail202:                                   ; preds = %assert_end201
  %417 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %417(i8* getelementptr inbounds ([188 x i8], [188 x i8]* @.str.53, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end203:                                    ; preds = %assert_end201
  %418 = getelementptr inbounds %1, %1* %T_divide244, i64 0, i32 1, i32 1, !dbg !18
  %419 = load i32, i32* %418, align 4, !dbg !18
  %420 = icmp eq i32 %dev_id, %419, !dbg !18
  br i1 %420, label %assert_end205, label %assert_fail204, !dbg !18, !prof !19

assert_fail204:                                   ; preds = %assert_end203
  %421 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %421(i8* getelementptr inbounds ([194 x i8], [194 x i8]* @.str.54, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end205:                                    ; preds = %assert_end203
  %422 = getelementptr inbounds %1, %1* %T_subtract245, i64 0, i32 2, !dbg !18
  %423 = load i32, i32* %422, align 4, !dbg !18
  %424 = icmp eq i32 %423, 3, !dbg !18
  br i1 %424, label %assert_end209, label %assert_fail206, !dbg !18, !prof !19

assert_fail206:                                   ; preds = %assert_end205
  %425 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %425(i8* getelementptr inbounds ([119 x i8], [119 x i8]* @.str.55, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end209:                                    ; preds = %assert_end205
  %426 = getelementptr inbounds %1, %1* %T_subtract245, i64 0, i32 3, i32 2, !dbg !18
  %427 = load i16, i16* %426, align 2, !dbg !18
  %428 = icmp eq i16 %427, 1, !dbg !18
  %429 = getelementptr inbounds %1, %1* %T_subtract245, i64 0, i32 3, i32 1, !dbg !18
  %430 = load i8, i8* %429, align 1, !dbg !18
  %431 = icmp eq i8 %430, 32, !dbg !18
  %432 = getelementptr inbounds %1, %1* %T_subtract245, i64 0, i32 3, i32 0, !dbg !18
  %433 = load i8, i8* %432, align 1, !dbg !18
  %434 = icmp eq i8 %433, 2, !dbg !18
  %435 = and i1 %431, %434, !dbg !18
  %436 = and i1 %428, %435, !dbg !18
  br i1 %436, label %assert_end211, label %assert_fail210, !dbg !18, !prof !19

assert_fail210:                                   ; preds = %assert_end209
  %437 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %437(i8* getelementptr inbounds ([259 x i8], [259 x i8]* @.str.56, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end211:                                    ; preds = %assert_end209
  %438 = load i64, i64* %default_function.T_subtract.shape, align 8, !dbg !18, !tbaa !246
  %439 = trunc i64 %438 to i32, !dbg !18
  %440 = icmp eq i32 %439, 13, !dbg !18
  br i1 %440, label %assert_end213, label %assert_fail212, !dbg !18, !prof !19

assert_fail212:                                   ; preds = %assert_end211
  %441 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %441(i8* getelementptr inbounds ([211 x i8], [211 x i8]* @.str.57, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end213:                                    ; preds = %assert_end211
  %442 = getelementptr inbounds i64, i64* %default_function.T_subtract.shape, i64 1, !dbg !18
  %443 = load i64, i64* %442, align 8, !dbg !18, !tbaa !256
  %444 = trunc i64 %443 to i32, !dbg !18
  %445 = icmp eq i32 %444, 16, !dbg !18
  br i1 %445, label %assert_end215, label %assert_fail214, !dbg !18, !prof !19

assert_fail214:                                   ; preds = %assert_end213
  %446 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %446(i8* getelementptr inbounds ([211 x i8], [211 x i8]* @.str.58, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end215:                                    ; preds = %assert_end213
  %447 = getelementptr inbounds i64, i64* %default_function.T_subtract.shape, i64 2, !dbg !18
  %448 = load i64, i64* %447, align 8, !dbg !18, !tbaa !258
  %449 = trunc i64 %448 to i32, !dbg !18
  %450 = icmp eq i32 %449, 1, !dbg !18
  br i1 %450, label %assert_end217, label %assert_fail216, !dbg !18, !prof !19

assert_fail216:                                   ; preds = %assert_end215
  %451 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %451(i8* getelementptr inbounds ([209 x i8], [209 x i8]* @.str.59, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end217:                                    ; preds = %assert_end215
  %452 = icmp eq i64* %default_function.T_subtract.strides, null, !dbg !18
  br i1 %452, label %if_end219, label %if_then218, !dbg !18, !prof !67

if_then218:                                       ; preds = %assert_end217
  %453 = load i64, i64* %default_function.T_subtract.strides, align 8, !dbg !18, !tbaa !261
  %454 = trunc i64 %453 to i32, !dbg !18
  %455 = icmp eq i32 %454, 16, !dbg !18
  %456 = getelementptr inbounds i64, i64* %default_function.T_subtract.strides, i64 1, !dbg !18
  %457 = load i64, i64* %456, align 8, !dbg !18, !tbaa !271
  %458 = trunc i64 %457 to i32, !dbg !18
  %459 = icmp eq i32 %458, 1, !dbg !18
  %460 = and i1 %455, %459, !dbg !18
  br i1 %460, label %if_end219, label %assert_fail220, !dbg !18, !prof !19

if_end219:                                        ; preds = %assert_end217, %if_then218
  %461 = getelementptr inbounds %1, %1* %T_subtract245, i64 0, i32 6, !dbg !18
  %462 = load i64, i64* %461, align 8, !dbg !18
  %463 = icmp eq i64 %462, 0, !dbg !18
  br i1 %463, label %assert_end223, label %assert_fail222, !dbg !18, !prof !19

assert_fail220:                                   ; preds = %if_then218
  %464 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %464(i8* getelementptr inbounds ([207 x i8], [207 x i8]* @.str.60, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail222:                                   ; preds = %if_end219
  %465 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %465(i8* getelementptr inbounds ([214 x i8], [214 x i8]* @.str.61, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end223:                                    ; preds = %if_end219
  %466 = getelementptr inbounds %1, %1* %T_subtract245, i64 0, i32 1, i32 0, !dbg !18
  %467 = load i32, i32* %466, align 4, !dbg !18
  %468 = icmp eq i32 %467, 1, !dbg !18
  br i1 %468, label %assert_end225, label %assert_fail224, !dbg !18, !prof !19

assert_fail224:                                   ; preds = %assert_end223
  %469 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %469(i8* getelementptr inbounds ([194 x i8], [194 x i8]* @.str.62, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end225:                                    ; preds = %assert_end223
  %470 = getelementptr inbounds %1, %1* %T_subtract245, i64 0, i32 1, i32 1, !dbg !18
  %471 = load i32, i32* %470, align 4, !dbg !18
  %472 = icmp eq i32 %dev_id, %471, !dbg !18
  br i1 %472, label %assert_end227, label %assert_fail226, !dbg !18, !prof !19

assert_fail226:                                   ; preds = %assert_end225
  %473 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %473(i8* getelementptr inbounds ([200 x i8], [200 x i8]* @.str.63, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end227:                                    ; preds = %assert_end225
  %474 = call fastcc i32 @default_function_compute_(i8* nonnull %stack_value, float* %T_divide_void_ptr252, i32* nonnull %stack_tcode237.sub, float* %T_subtract_void_ptr253, float* %compute_void_ptr249, float* %compute_void_ptr18250, float* %compute_void_ptr25251, float* %ph_0_void_ptr246, float* %ph_3_void_ptr247, float* %ph_6_void_ptr248), !dbg !18
  ret i32 %474, !dbg !18
}

; Function Attrs: nounwind willreturn
declare void @llvm.assume(i1) #1

; Function Attrs: noinline
define internal fastcc i32 @default_function_compute_(i8* noalias %0, float* noalias align 64 %1, i32* noalias %2, float* noalias align 64 %3, float* noalias align 64 %4, float* noalias align 64 %5, float* noalias align 64 %6, float* noalias align 64 %7, float* noalias align 64 %8, float* noalias align 64 %9) unnamed_addr #2 {
entry:
  %10 = alloca i8*, align 8
  %11 = bitcast i8* %0 to %0*
  %12 = bitcast i8* %0 to float**
  store float* %1, float** %12, align 8
  %13 = getelementptr inbounds i8, i8* %0, i64 8
  %14 = bitcast i8* %13 to float**
  store float* %3, float** %14, align 8
  %15 = getelementptr inbounds i8, i8* %0, i64 16
  %16 = bitcast i8* %15 to float**
  store float* %4, float** %16, align 8
  %17 = getelementptr inbounds i8, i8* %0, i64 24
  %18 = bitcast i8* %17 to float**
  store float* %5, float** %18, align 8
  %19 = bitcast i32* %2 to <4 x i32>*
  store <4 x i32> <i32 3, i32 3, i32 3, i32 3>, <4 x i32>* %19, align 4, !tbaa !273
  %20 = getelementptr inbounds i8, i8* %0, i64 32
  %21 = bitcast i8* %20 to float**
  store float* %6, float** %21, align 8
  %22 = getelementptr inbounds i32, i32* %2, i64 4
  %23 = getelementptr inbounds i8, i8* %0, i64 40
  %24 = bitcast i8* %23 to float**
  store float* %7, float** %24, align 8
  %25 = getelementptr inbounds i8, i8* %0, i64 48
  %26 = bitcast i8* %25 to float**
  store float* %8, float** %26, align 8
  %27 = getelementptr inbounds i8, i8* %0, i64 56
  %28 = bitcast i8* %27 to float**
  store float* %9, float** %28, align 8
  %29 = bitcast i32* %22 to <4 x i32>*
  store <4 x i32> <i32 3, i32 3, i32 3, i32 3>, <4 x i32>* %29, align 4, !tbaa !282
  %30 = getelementptr inbounds i8, i8* %0, i64 64
  %31 = bitcast i8* %30 to %0*
  %32 = getelementptr inbounds i32, i32* %2, i64 8
  %33 = load i32 (i8*, %0*, i32*, i32, %0*, i32*)*, i32 (i8*, %0*, i32*, i32, %0*, i32*)** @__TVMFuncCall, align 8, !tbaa !20
  %34 = load i8*, i8** @.tvm_func.default_function_kernel, align 8
  %35 = icmp eq i8* %34, null
  br i1 %35, label %handle_init, label %handle_init_end, !prof !67

handle_init:                                      ; preds = %entry
  %36 = load i8*, i8** @__tvm_module_ctx, align 8, !tbaa !20
  %37 = load i32 (i8*, i8*, i8**)*, i32 (i8*, i8*, i8**)** @__TVMBackendGetFuncFromEnv, align 8, !tbaa !20
  %38 = call i32 %37(i8* %36, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.64, i64 0, i64 0), i8** nonnull %10)
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %call_end, label %call_fail, !prof !19

handle_init_end:                                  ; preds = %entry, %call_end
  %40 = phi i8* [ %34, %entry ], [ %43, %call_end ]
  %41 = call i32 %33(i8* %40, %0* %11, i32* nonnull %2, i32 8, %0* nonnull %31, i32* nonnull %32)
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %call_end2, label %call_fail, !prof !19

call_fail:                                        ; preds = %call_end2, %handle_init_end, %handle_init
  %merge = phi i32 [ %38, %handle_init ], [ %41, %handle_init_end ], [ 0, %call_end2 ]
  ret i32 %merge

call_end:                                         ; preds = %handle_init
  %43 = load i8*, i8** %10, align 8
  store i8* %43, i8** @.tvm_func.default_function_kernel, align 8
  br label %handle_init_end

call_end2:                                        ; preds = %handle_init_end
  %44 = bitcast i8* %30 to i64*
  %45 = load i64, i64* %44, align 8
  %kernel_error_code = trunc i64 %45 to i32
  %46 = icmp eq i32 %kernel_error_code, 0
  br i1 %46, label %call_fail, label %assert_fail, !prof !19

assert_fail:                                      ; preds = %call_end2
  %47 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !20
  call void %47(i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.65, i64 0, i64 0))
  ret i32 -1
}

; Function Attrs: nounwind readnone
define weak dso_local i16 @__truncsfhf2(float %a0) local_unnamed_addr #3 section ".text.tvm.fp16.conv" {
b0:
  %v0 = bitcast float %a0 to i32
  %v1 = and i32 %v0, 2147483647
  %v2 = add nsw i32 %v1, -947912704
  %v3 = add nsw i32 %v1, -1199570944
  %v4 = icmp ult i32 %v2, %v3
  br i1 %v4, label %b1, label %b5

b1:                                               ; preds = %b0
  %v5 = lshr i32 %v0, 13
  %v6 = and i32 %v5, 65535
  %v7 = add nuw nsw i32 %v6, -114688
  %v8 = and i32 %v0, 8191
  %v9 = icmp ugt i32 %v8, 4096
  br i1 %v9, label %b2, label %b3

b2:                                               ; preds = %b1
  %v10 = add nuw nsw i32 %v6, -114687
  br label %b13

b3:                                               ; preds = %b1
  %v11 = icmp eq i32 %v8, 4096
  br i1 %v11, label %b4, label %b13

b4:                                               ; preds = %b3
  %v12 = and i32 %v7, 65535
  %v13 = and i32 %v5, 1
  %v14 = add nuw nsw i32 %v12, %v13
  br label %b13

b5:                                               ; preds = %b0
  %v15 = icmp ugt i32 %v1, 2139095040
  br i1 %v15, label %b6, label %b7

b6:                                               ; preds = %b5
  %v16 = lshr i32 %v0, 13
  %v17 = and i32 %v16, 511
  %v18 = or i32 %v17, 32256
  br label %b13

b7:                                               ; preds = %b5
  %v19 = icmp ugt i32 %v1, 1199570943
  br i1 %v19, label %b13, label %b8

b8:                                               ; preds = %b7
  %v20 = icmp ult i32 %v1, 754974720
  br i1 %v20, label %b13, label %b9

b9:                                               ; preds = %b8
  %v21 = lshr i32 %v1, 23
  %v22 = sub nsw i32 113, %v21
  %v23 = and i32 %v0, 8388607
  %v24 = or i32 %v23, 8388608
  %v25 = add nsw i32 %v21, -81
  %v26 = shl i32 %v24, %v25
  %v27 = icmp ne i32 %v26, 0
  %v28 = lshr i32 %v24, %v22
  %v29 = zext i1 %v27 to i32
  %v30 = lshr i32 %v28, 13
  %v31 = and i32 %v28, 8191
  %v32 = or i32 %v31, %v29
  %v33 = icmp ugt i32 %v32, 4096
  br i1 %v33, label %b10, label %b11

b10:                                              ; preds = %b9
  %v34 = add nuw nsw i32 %v30, 1
  br label %b13

b11:                                              ; preds = %b9
  %v35 = icmp eq i32 %v32, 4096
  br i1 %v35, label %b12, label %b13

b12:                                              ; preds = %b11
  %v36 = and i32 %v30, 1
  %v37 = add nuw nsw i32 %v36, %v30
  br label %b13

b13:                                              ; preds = %b12, %b11, %b10, %b8, %b7, %b6, %b4, %b3, %b2
  %v38 = phi i32 [ %v18, %b6 ], [ %v10, %b2 ], [ %v14, %b4 ], [ %v7, %b3 ], [ 31744, %b7 ], [ 0, %b8 ], [ %v34, %b10 ], [ %v37, %b12 ], [ %v30, %b11 ]
  %v39 = lshr i32 %v0, 16
  %v40 = and i32 %v39, 32768
  %v41 = or i32 %v38, %v40
  %vlast = trunc i32 %v41 to i16
  ret i16 %vlast
}

; Function Attrs: nounwind readnone
define weak dso_local float @__extendhfsf2(i16 %a0) local_unnamed_addr #3 section ".text.tvm.fp16.conv" {
b0:
  %v1 = and i16 %a0, 32767
  %v2 = zext i16 %v1 to i32
  %v3 = add nsw i16 %v1, -1024
  %v4 = icmp ult i16 %v3, 30720
  br i1 %v4, label %b1, label %b2

b1:                                               ; preds = %b0
  %v5 = shl nuw nsw i32 %v2, 13
  %v6 = add nuw nsw i32 %v5, 939524096
  br label %b6

b2:                                               ; preds = %b0
  %v7 = icmp ugt i16 %v1, 31743
  br i1 %v7, label %b3, label %b4

b3:                                               ; preds = %b2
  %v8 = shl nuw nsw i32 %v2, 13
  %v9 = or i32 %v8, 2139095040
  br label %b6

b4:                                               ; preds = %b2
  %v10 = icmp eq i16 %v1, 0
  br i1 %v10, label %b6, label %b5

b5:                                               ; preds = %b4
  %v11 = icmp ult i16 %v1, 256
  %v12 = lshr i32 %v2, 8
  %v13 = select i1 %v11, i32 %v2, i32 %v12
  %v14 = select i1 %v11, i32 32, i32 24
  %v15 = icmp ult i32 %v13, 16
  %v16 = lshr i32 %v13, 4
  %v17 = add nsw i32 %v14, -4
  %v18 = select i1 %v15, i32 %v13, i32 %v16
  %v19 = select i1 %v15, i32 %v14, i32 %v17
  %v20 = icmp ult i32 %v18, 4
  %v21 = lshr i32 %v18, 2
  %v22 = add nsw i32 %v19, -2
  %v23 = select i1 %v20, i32 %v18, i32 %v21
  %v24 = select i1 %v20, i32 %v19, i32 %v22
  %v25 = icmp ult i32 %v23, 2
  %v26 = sub nsw i32 0, %v23
  %v27 = select i1 %v25, i32 %v26, i32 -2
  %v28 = add nsw i32 %v27, %v24
  %v29 = add nsw i32 %v28, -8
  %v30 = shl i32 %v2, %v29
  %v31 = xor i32 %v30, 8388608
  %v32 = shl i32 %v28, 23
  %v33 = sub i32 1124073472, %v32
  %v34 = or i32 %v31, %v33
  br label %b6

b6:                                               ; preds = %b5, %b4, %b3, %b1
  %v35 = phi i32 [ %v6, %b1 ], [ %v9, %b3 ], [ %v34, %b5 ], [ 0, %b4 ]
  %v36 = and i16 %a0, -32768
  %v37 = zext i16 %v36 to i32
  %v38 = shl nuw i32 %v37, 16
  %v39 = or i32 %v35, %v38
  %v40 = bitcast i32 %v39 to float
  ret float %v40
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.value(metadata, metadata, metadata) #4

attributes #0 = { "target-cpu"="generic" }
attributes #1 = { nounwind willreturn }
attributes #2 = { noinline "target-cpu"="generic" }
attributes #3 = { nounwind readnone "target-cpu"="generic" "target-features" }
attributes #4 = { nounwind readnone speculatable willreturn }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "TVM", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2)
!1 = !DIFile(filename: "main.tir", directory: ".")
!2 = !{}
!3 = !{i32 2, !"tvm_target", !"llvm -mtriple=x86_64-pc-linux-gnu"}
!4 = !{i32 4, !"Debug Info Version", i32 3}
!5 = distinct !DISubprogram(name: "main.tir", scope: !1, file: !1, type: !6, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !11)
!6 = !DISubroutineType(types: !7)
!7 = !{!8, !9, !10, !8, !9, !10, !9}
!8 = !DIBasicType(name: "int32", size: 32, encoding: DW_ATE_signed)
!9 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null)
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8)
!11 = !{!12, !13, !14, !15, !16, !17}
!12 = !DILocalVariable(name: "arg1", arg: 1, scope: !5, file: !1, type: !9)
!13 = !DILocalVariable(name: "arg2", arg: 2, scope: !5, file: !1, type: !10)
!14 = !DILocalVariable(name: "arg3", arg: 3, scope: !5, file: !1, type: !8)
!15 = !DILocalVariable(name: "arg4", arg: 4, scope: !5, file: !1, type: !9)
!16 = !DILocalVariable(name: "arg5", arg: 5, scope: !5, file: !1, type: !10)
!17 = !DILocalVariable(name: "arg6", arg: 6, scope: !5, file: !1, type: !9)
!18 = !DILocation(line: 0, scope: !5)
!19 = !{!"branch_weights", i32 1048576, i32 1}
!20 = !{!21, !21, i64 0}
!21 = !{!"ctx_ptr", !22, i64 0}
!22 = !{!"tvm-tbaa"}
!23 = !{!24, !24, i64 0}
!24 = !{!"0x34c49d0.w4.b0", !25, i64 0}
!25 = !{!"0x34c49d0.w8.b0", !26, i64 0}
!26 = !{!"0x34c49d0.w16.b0", !27, i64 0}
!27 = !{!"0x34c49d0.w32.b0", !28, i64 0}
!28 = !{!"0x34c49d0.w64.b0", !29, i64 0}
!29 = !{!"0x34c49d0.w128.b0", !30, i64 0}
!30 = !{!"0x34c49d0.w256.b0", !31, i64 0}
!31 = !{!"0x34c49d0.w512.b0", !32, i64 0}
!32 = !{!"0x34c49d0.w1024.b0", !33, i64 0}
!33 = !{!"0x34c49d0", !22, i64 0}
!34 = !{!35, !35, i64 0}
!35 = !{!"0x34c49d0.w4.b4", !25, i64 0}
!36 = !{!37, !37, i64 0}
!37 = !{!"0x34c49d0.w4.b8", !38, i64 0}
!38 = !{!"0x34c49d0.w8.b8", !26, i64 0}
!39 = !{!40, !40, i64 0}
!40 = !{!"0x34c49d0.w4.b12", !38, i64 0}
!41 = !{!42, !42, i64 0}
!42 = !{!"0x34c49d0.w4.b16", !43, i64 0}
!43 = !{!"0x34c49d0.w8.b16", !44, i64 0}
!44 = !{!"0x34c49d0.w16.b16", !27, i64 0}
!45 = !{!46, !46, i64 0}
!46 = !{!"0x34c49d0.w4.b20", !43, i64 0}
!47 = !{!48, !48, i64 0}
!48 = !{!"0x34c49d0.w4.b24", !49, i64 0}
!49 = !{!"0x34c49d0.w8.b24", !44, i64 0}
!50 = !{!51, !51, i64 0}
!51 = !{!"0x34c49d0.w4.b28", !49, i64 0}
!52 = !{!53, !53, i64 0}
!53 = !{!"0x37e0350.w8.b0", !54, i64 0}
!54 = !{!"0x37e0350.w16.b0", !55, i64 0}
!55 = !{!"0x37e0350.w32.b0", !56, i64 0}
!56 = !{!"0x37e0350.w64.b0", !57, i64 0}
!57 = !{!"0x37e0350.w128.b0", !58, i64 0}
!58 = !{!"0x37e0350.w256.b0", !59, i64 0}
!59 = !{!"0x37e0350.w512.b0", !60, i64 0}
!60 = !{!"0x37e0350.w1024.b0", !61, i64 0}
!61 = !{!"0x37e0350", !22, i64 0}
!62 = !{!63, !63, i64 0}
!63 = !{!"0x37e0350.w8.b8", !54, i64 0}
!64 = !{!65, !65, i64 0}
!65 = !{!"0x37e0350.w8.b16", !66, i64 0}
!66 = !{!"0x37e0350.w16.b16", !55, i64 0}
!67 = !{!"branch_weights", i32 1, i32 1048576}
!68 = !{!69, !69, i64 0}
!69 = !{!"0x4881540.w8.b0", !70, i64 0}
!70 = !{!"0x4881540.w16.b0", !71, i64 0}
!71 = !{!"0x4881540.w32.b0", !72, i64 0}
!72 = !{!"0x4881540.w64.b0", !73, i64 0}
!73 = !{!"0x4881540.w128.b0", !74, i64 0}
!74 = !{!"0x4881540.w256.b0", !75, i64 0}
!75 = !{!"0x4881540.w512.b0", !76, i64 0}
!76 = !{!"0x4881540.w1024.b0", !77, i64 0}
!77 = !{!"0x4881540", !22, i64 0}
!78 = !{!79, !79, i64 0}
!79 = !{!"0x4881540.w8.b8", !70, i64 0}
!80 = !{!81, !81, i64 0}
!81 = !{!"0x48d0860.w8.b0", !82, i64 0}
!82 = !{!"0x48d0860.w16.b0", !83, i64 0}
!83 = !{!"0x48d0860.w32.b0", !84, i64 0}
!84 = !{!"0x48d0860.w64.b0", !85, i64 0}
!85 = !{!"0x48d0860.w128.b0", !86, i64 0}
!86 = !{!"0x48d0860.w256.b0", !87, i64 0}
!87 = !{!"0x48d0860.w512.b0", !88, i64 0}
!88 = !{!"0x48d0860.w1024.b0", !89, i64 0}
!89 = !{!"0x48d0860", !22, i64 0}
!90 = !{!91, !91, i64 0}
!91 = !{!"0x48d0860.w8.b8", !82, i64 0}
!92 = !{!93, !93, i64 0}
!93 = !{!"0x48d0860.w8.b16", !94, i64 0}
!94 = !{!"0x48d0860.w16.b16", !83, i64 0}
!95 = !{!96, !96, i64 0}
!96 = !{!"0x3787360.w8.b0", !97, i64 0}
!97 = !{!"0x3787360.w16.b0", !98, i64 0}
!98 = !{!"0x3787360.w32.b0", !99, i64 0}
!99 = !{!"0x3787360.w64.b0", !100, i64 0}
!100 = !{!"0x3787360.w128.b0", !101, i64 0}
!101 = !{!"0x3787360.w256.b0", !102, i64 0}
!102 = !{!"0x3787360.w512.b0", !103, i64 0}
!103 = !{!"0x3787360.w1024.b0", !104, i64 0}
!104 = !{!"0x3787360", !22, i64 0}
!105 = !{!106, !106, i64 0}
!106 = !{!"0x3787360.w8.b8", !97, i64 0}
!107 = !{!108, !108, i64 0}
!108 = !{!"0x36a7710.w8.b0", !109, i64 0}
!109 = !{!"0x36a7710.w16.b0", !110, i64 0}
!110 = !{!"0x36a7710.w32.b0", !111, i64 0}
!111 = !{!"0x36a7710.w64.b0", !112, i64 0}
!112 = !{!"0x36a7710.w128.b0", !113, i64 0}
!113 = !{!"0x36a7710.w256.b0", !114, i64 0}
!114 = !{!"0x36a7710.w512.b0", !115, i64 0}
!115 = !{!"0x36a7710.w1024.b0", !116, i64 0}
!116 = !{!"0x36a7710", !22, i64 0}
!117 = !{!118, !118, i64 0}
!118 = !{!"0x36a7710.w8.b8", !109, i64 0}
!119 = !{!120, !120, i64 0}
!120 = !{!"0x36a7710.w8.b16", !121, i64 0}
!121 = !{!"0x36a7710.w16.b16", !110, i64 0}
!122 = !{!123, !123, i64 0}
!123 = !{!"0x36b2610.w8.b0", !124, i64 0}
!124 = !{!"0x36b2610.w16.b0", !125, i64 0}
!125 = !{!"0x36b2610.w32.b0", !126, i64 0}
!126 = !{!"0x36b2610.w64.b0", !127, i64 0}
!127 = !{!"0x36b2610.w128.b0", !128, i64 0}
!128 = !{!"0x36b2610.w256.b0", !129, i64 0}
!129 = !{!"0x36b2610.w512.b0", !130, i64 0}
!130 = !{!"0x36b2610.w1024.b0", !131, i64 0}
!131 = !{!"0x36b2610", !22, i64 0}
!132 = !{!133, !133, i64 0}
!133 = !{!"0x36b2610.w8.b16", !134, i64 0}
!134 = !{!"0x36b2610.w16.b16", !125, i64 0}
!135 = !{!136, !136, i64 0}
!136 = !{!"0x2e3b2d0.w8.b0", !137, i64 0}
!137 = !{!"0x2e3b2d0.w16.b0", !138, i64 0}
!138 = !{!"0x2e3b2d0.w32.b0", !139, i64 0}
!139 = !{!"0x2e3b2d0.w64.b0", !140, i64 0}
!140 = !{!"0x2e3b2d0.w128.b0", !141, i64 0}
!141 = !{!"0x2e3b2d0.w256.b0", !142, i64 0}
!142 = !{!"0x2e3b2d0.w512.b0", !143, i64 0}
!143 = !{!"0x2e3b2d0.w1024.b0", !144, i64 0}
!144 = !{!"0x2e3b2d0", !22, i64 0}
!145 = !{!146, !146, i64 0}
!146 = !{!"0x2e3b2d0.w8.b8", !137, i64 0}
!147 = !{!148, !148, i64 0}
!148 = !{!"0x2e3b2d0.w8.b16", !149, i64 0}
!149 = !{!"0x2e3b2d0.w16.b16", !138, i64 0}
!150 = !{!151, !151, i64 0}
!151 = !{!"0x2e3bba0.w8.b0", !152, i64 0}
!152 = !{!"0x2e3bba0.w16.b0", !153, i64 0}
!153 = !{!"0x2e3bba0.w32.b0", !154, i64 0}
!154 = !{!"0x2e3bba0.w64.b0", !155, i64 0}
!155 = !{!"0x2e3bba0.w128.b0", !156, i64 0}
!156 = !{!"0x2e3bba0.w256.b0", !157, i64 0}
!157 = !{!"0x2e3bba0.w512.b0", !158, i64 0}
!158 = !{!"0x2e3bba0.w1024.b0", !159, i64 0}
!159 = !{!"0x2e3bba0", !22, i64 0}
!160 = !{!161, !161, i64 0}
!161 = !{!"0x2e3bba0.w8.b8", !152, i64 0}
!162 = !{!163, !163, i64 0}
!163 = !{!"0x34bf470.w8.b0", !164, i64 0}
!164 = !{!"0x34bf470.w16.b0", !165, i64 0}
!165 = !{!"0x34bf470.w32.b0", !166, i64 0}
!166 = !{!"0x34bf470.w64.b0", !167, i64 0}
!167 = !{!"0x34bf470.w128.b0", !168, i64 0}
!168 = !{!"0x34bf470.w256.b0", !169, i64 0}
!169 = !{!"0x34bf470.w512.b0", !170, i64 0}
!170 = !{!"0x34bf470.w1024.b0", !171, i64 0}
!171 = !{!"0x34bf470", !22, i64 0}
!172 = !{!173, !173, i64 0}
!173 = !{!"0x34bf470.w8.b8", !164, i64 0}
!174 = !{!175, !175, i64 0}
!175 = !{!"0x34bf470.w8.b16", !176, i64 0}
!176 = !{!"0x34bf470.w16.b16", !165, i64 0}
!177 = !{!178, !178, i64 0}
!178 = !{!"0x34c00b0.w8.b0", !179, i64 0}
!179 = !{!"0x34c00b0.w16.b0", !180, i64 0}
!180 = !{!"0x34c00b0.w32.b0", !181, i64 0}
!181 = !{!"0x34c00b0.w64.b0", !182, i64 0}
!182 = !{!"0x34c00b0.w128.b0", !183, i64 0}
!183 = !{!"0x34c00b0.w256.b0", !184, i64 0}
!184 = !{!"0x34c00b0.w512.b0", !185, i64 0}
!185 = !{!"0x34c00b0.w1024.b0", !186, i64 0}
!186 = !{!"0x34c00b0", !22, i64 0}
!187 = !{!188, !188, i64 0}
!188 = !{!"0x34c00b0.w8.b8", !179, i64 0}
!189 = !{!190, !190, i64 0}
!190 = !{!"0x34c00b0.w8.b16", !191, i64 0}
!191 = !{!"0x34c00b0.w16.b16", !180, i64 0}
!192 = !{!193, !193, i64 0}
!193 = !{!"0x379f430.w8.b0", !194, i64 0}
!194 = !{!"0x379f430.w16.b0", !195, i64 0}
!195 = !{!"0x379f430.w32.b0", !196, i64 0}
!196 = !{!"0x379f430.w64.b0", !197, i64 0}
!197 = !{!"0x379f430.w128.b0", !198, i64 0}
!198 = !{!"0x379f430.w256.b0", !199, i64 0}
!199 = !{!"0x379f430.w512.b0", !200, i64 0}
!200 = !{!"0x379f430.w1024.b0", !201, i64 0}
!201 = !{!"0x379f430", !22, i64 0}
!202 = !{!203, !203, i64 0}
!203 = !{!"0x379f430.w8.b8", !194, i64 0}
!204 = !{!205, !205, i64 0}
!205 = !{!"0x379f430.w8.b16", !206, i64 0}
!206 = !{!"0x379f430.w16.b16", !195, i64 0}
!207 = !{!208, !208, i64 0}
!208 = !{!"0x37a0130.w8.b0", !209, i64 0}
!209 = !{!"0x37a0130.w16.b0", !210, i64 0}
!210 = !{!"0x37a0130.w32.b0", !211, i64 0}
!211 = !{!"0x37a0130.w64.b0", !212, i64 0}
!212 = !{!"0x37a0130.w128.b0", !213, i64 0}
!213 = !{!"0x37a0130.w256.b0", !214, i64 0}
!214 = !{!"0x37a0130.w512.b0", !215, i64 0}
!215 = !{!"0x37a0130.w1024.b0", !216, i64 0}
!216 = !{!"0x37a0130", !22, i64 0}
!217 = !{!218, !218, i64 0}
!218 = !{!"0x37a0130.w8.b8", !209, i64 0}
!219 = !{!220, !220, i64 0}
!220 = !{!"0x4816b20.w8.b0", !221, i64 0}
!221 = !{!"0x4816b20.w16.b0", !222, i64 0}
!222 = !{!"0x4816b20.w32.b0", !223, i64 0}
!223 = !{!"0x4816b20.w64.b0", !224, i64 0}
!224 = !{!"0x4816b20.w128.b0", !225, i64 0}
!225 = !{!"0x4816b20.w256.b0", !226, i64 0}
!226 = !{!"0x4816b20.w512.b0", !227, i64 0}
!227 = !{!"0x4816b20.w1024.b0", !228, i64 0}
!228 = !{!"0x4816b20", !22, i64 0}
!229 = !{!230, !230, i64 0}
!230 = !{!"0x4816b20.w8.b8", !221, i64 0}
!231 = !{!232, !232, i64 0}
!232 = !{!"0x4816b20.w8.b16", !233, i64 0}
!233 = !{!"0x4816b20.w16.b16", !222, i64 0}
!234 = !{!235, !235, i64 0}
!235 = !{!"0x48177d0.w8.b0", !236, i64 0}
!236 = !{!"0x48177d0.w16.b0", !237, i64 0}
!237 = !{!"0x48177d0.w32.b0", !238, i64 0}
!238 = !{!"0x48177d0.w64.b0", !239, i64 0}
!239 = !{!"0x48177d0.w128.b0", !240, i64 0}
!240 = !{!"0x48177d0.w256.b0", !241, i64 0}
!241 = !{!"0x48177d0.w512.b0", !242, i64 0}
!242 = !{!"0x48177d0.w1024.b0", !243, i64 0}
!243 = !{!"0x48177d0", !22, i64 0}
!244 = !{!245, !245, i64 0}
!245 = !{!"0x48177d0.w8.b8", !236, i64 0}
!246 = !{!247, !247, i64 0}
!247 = !{!"0x36c9dc0.w8.b0", !248, i64 0}
!248 = !{!"0x36c9dc0.w16.b0", !249, i64 0}
!249 = !{!"0x36c9dc0.w32.b0", !250, i64 0}
!250 = !{!"0x36c9dc0.w64.b0", !251, i64 0}
!251 = !{!"0x36c9dc0.w128.b0", !252, i64 0}
!252 = !{!"0x36c9dc0.w256.b0", !253, i64 0}
!253 = !{!"0x36c9dc0.w512.b0", !254, i64 0}
!254 = !{!"0x36c9dc0.w1024.b0", !255, i64 0}
!255 = !{!"0x36c9dc0", !22, i64 0}
!256 = !{!257, !257, i64 0}
!257 = !{!"0x36c9dc0.w8.b8", !248, i64 0}
!258 = !{!259, !259, i64 0}
!259 = !{!"0x36c9dc0.w8.b16", !260, i64 0}
!260 = !{!"0x36c9dc0.w16.b16", !249, i64 0}
!261 = !{!262, !262, i64 0}
!262 = !{!"0x485aac0.w8.b0", !263, i64 0}
!263 = !{!"0x485aac0.w16.b0", !264, i64 0}
!264 = !{!"0x485aac0.w32.b0", !265, i64 0}
!265 = !{!"0x485aac0.w64.b0", !266, i64 0}
!266 = !{!"0x485aac0.w128.b0", !267, i64 0}
!267 = !{!"0x485aac0.w256.b0", !268, i64 0}
!268 = !{!"0x485aac0.w512.b0", !269, i64 0}
!269 = !{!"0x485aac0.w1024.b0", !270, i64 0}
!270 = !{!"0x485aac0", !22, i64 0}
!271 = !{!272, !272, i64 0}
!272 = !{!"0x485aac0.w8.b8", !263, i64 0}
!273 = !{!274, !274, i64 0}
!274 = !{!"0x36bd120.w16.b0", !275, i64 0}
!275 = !{!"0x36bd120.w32.b0", !276, i64 0}
!276 = !{!"0x36bd120.w64.b0", !277, i64 0}
!277 = !{!"0x36bd120.w128.b0", !278, i64 0}
!278 = !{!"0x36bd120.w256.b0", !279, i64 0}
!279 = !{!"0x36bd120.w512.b0", !280, i64 0}
!280 = !{!"0x36bd120.w1024.b0", !281, i64 0}
!281 = !{!"0x36bd120", !22, i64 0}
!282 = !{!283, !283, i64 0}
!283 = !{!"0x36bd120.w16.b16", !275, i64 0}
