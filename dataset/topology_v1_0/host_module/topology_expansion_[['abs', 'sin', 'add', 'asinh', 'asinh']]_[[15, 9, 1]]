; ModuleID = 'TVMMod'
source_filename = "TVMMod"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%0 = type { double }
%1 = type { i8*, %2, i32, %3, i64*, i64*, i64 }
%2 = type { i32, i32 }
%3 = type { i8, i8, i16 }

@__tvm_module_ctx = linkonce dllexport local_unnamed_addr global i8* null, align 8
@__TVMFuncCall = linkonce dllexport local_unnamed_addr global i32 (i8*, %0*, i32*, i32, %0*, i32*)* null, align 8
@__TVMBackendGetFuncFromEnv = linkonce dllexport local_unnamed_addr global i32 (i8*, i8*, i8**)* null, align 8
@__TVMAPISetLastError = linkonce dllexport local_unnamed_addr global void (i8*)* null, align 8
@.str = private constant [67 x i8] c"Assert fail: num_args == 5, default_function: num_args should be 5\00", align 1
@.str.1 = private constant [130 x i8] c"Assert fail: ph_0_code == 3 or ph_0_code == 13 or ph_0_code == 7 or ph_0_code == 4, default_function: Expect arg[0] to be pointer\00", align 1
@.str.2 = private constant [142 x i8] c"Assert fail: compute_code == 3 or compute_code == 13 or compute_code == 7 or compute_code == 4, default_function: Expect arg[1] to be pointer\00", align 1
@.str.3 = private constant [134 x i8] c"Assert fail: T_add_code == 3 or T_add_code == 13 or T_add_code == 7 or T_add_code == 4, default_function: Expect arg[2] to be pointer\00", align 1
@.str.4 = private constant [142 x i8] c"Assert fail: compute_code == 3 or compute_code == 13 or compute_code == 7 or compute_code == 4, default_function: Expect arg[3] to be pointer\00", align 1
@.str.5 = private constant [142 x i8] c"Assert fail: compute_code == 3 or compute_code == 13 or compute_code == 7 or compute_code == 4, default_function: Expect arg[4] to be pointer\00", align 1
@.str.6 = private constant [107 x i8] c"Assert fail: 3 == T.tvm_struct_get(ph_0, 0, 4, \22int32\22), default_function.ph_0.ndim is expected to equal 3\00", align 1
@.str.7 = private constant [235 x i8] c"Assert fail: T.tvm_struct_get(ph_0, 0, 5, \22uint8\22) == T.uint8(2) and T.tvm_struct_get(ph_0, 0, 6, \22uint8\22) == T.uint8(32) and T.tvm_struct_get(ph_0, 0, 7, \22uint16\22) == T.uint16(1), default_function.ph_0.dtype is expected to be float32\00", align 1
@.str.8 = private constant [193 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_0_shape[0]) == 15, Argument default_function.ph_0.shape[0] has an unsatisfied constraint: 15 == T.Cast(\22int32\22, default_function_ph_0_shape[0])\00", align 1
@.str.9 = private constant [191 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_0_shape[1]) == 9, Argument default_function.ph_0.shape[1] has an unsatisfied constraint: 9 == T.Cast(\22int32\22, default_function_ph_0_shape[1])\00", align 1
@.str.10 = private constant [191 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_0_shape[2]) == 1, Argument default_function.ph_0.shape[2] has an unsatisfied constraint: 1 == T.Cast(\22int32\22, default_function_ph_0_shape[2])\00", align 1
@.str.11 = private constant [188 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_ph_0_strides[1]) and 9 == T.Cast(\22int32\22, default_function_ph_0_strides[0]), default_function.ph_0.strides: expected to be compact array\00", align 1
@.str.12 = private constant [196 x i8] c"Assert fail: T.uint64(0) == T.tvm_struct_get(ph_0, 0, 8, \22uint64\22), Argument default_function.ph_0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(ph_0, 0, 8, \22uint64\22)\00", align 1
@.str.13 = private constant [176 x i8] c"Assert fail: T.tvm_struct_get(ph_0, 0, 10, \22int32\22) == 1, Argument default_function.ph_0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(ph_0, 0, 10, \22int32\22)\00", align 1
@.str.14 = private constant [113 x i8] c"Assert fail: 3 == T.tvm_struct_get(compute, 0, 4, \22int32\22), default_function.compute.ndim is expected to equal 3\00", align 1
@.str.15 = private constant [247 x i8] c"Assert fail: T.tvm_struct_get(compute, 0, 5, \22uint8\22) == T.uint8(2) and T.tvm_struct_get(compute, 0, 6, \22uint8\22) == T.uint8(32) and T.tvm_struct_get(compute, 0, 7, \22uint16\22) == T.uint16(1), default_function.compute.dtype is expected to be float32\00", align 1
@.str.16 = private constant [202 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_compute_shape[0]) == 15, Argument default_function.compute.shape[0] has an unsatisfied constraint: 15 == T.Cast(\22int32\22, default_function_compute_shape[0])\00", align 1
@.str.17 = private constant [200 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_compute_shape[1]) == 9, Argument default_function.compute.shape[1] has an unsatisfied constraint: 9 == T.Cast(\22int32\22, default_function_compute_shape[1])\00", align 1
@.str.18 = private constant [200 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_compute_shape[2]) == 1, Argument default_function.compute.shape[2] has an unsatisfied constraint: 1 == T.Cast(\22int32\22, default_function_compute_shape[2])\00", align 1
@.str.19 = private constant [197 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_compute_strides[1]) and 9 == T.Cast(\22int32\22, default_function_compute_strides[0]), default_function.compute.strides: expected to be compact array\00", align 1
@.str.20 = private constant [205 x i8] c"Assert fail: T.uint64(0) == T.tvm_struct_get(compute, 0, 8, \22uint64\22), Argument default_function.compute.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(compute, 0, 8, \22uint64\22)\00", align 1
@.str.21 = private constant [185 x i8] c"Assert fail: T.tvm_struct_get(compute, 0, 10, \22int32\22) == 1, Argument default_function.compute.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(compute, 0, 10, \22int32\22)\00", align 1
@.str.22 = private constant [191 x i8] c"Assert fail: dev_id == T.tvm_struct_get(compute, 0, 9, \22int32\22), Argument default_function.compute.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(compute, 0, 9, \22int32\22)\00", align 1
@.str.23 = private constant [109 x i8] c"Assert fail: 3 == T.tvm_struct_get(T_add, 0, 4, \22int32\22), default_function.T_add.ndim is expected to equal 3\00", align 1
@.str.24 = private constant [239 x i8] c"Assert fail: T.tvm_struct_get(T_add, 0, 5, \22uint8\22) == T.uint8(2) and T.tvm_struct_get(T_add, 0, 6, \22uint8\22) == T.uint8(32) and T.tvm_struct_get(T_add, 0, 7, \22uint16\22) == T.uint16(1), default_function.T_add.dtype is expected to be float32\00", align 1
@.str.25 = private constant [196 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_T_add_shape[0]) == 15, Argument default_function.T_add.shape[0] has an unsatisfied constraint: 15 == T.Cast(\22int32\22, default_function_T_add_shape[0])\00", align 1
@.str.26 = private constant [194 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_T_add_shape[1]) == 9, Argument default_function.T_add.shape[1] has an unsatisfied constraint: 9 == T.Cast(\22int32\22, default_function_T_add_shape[1])\00", align 1
@.str.27 = private constant [194 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_T_add_shape[2]) == 1, Argument default_function.T_add.shape[2] has an unsatisfied constraint: 1 == T.Cast(\22int32\22, default_function_T_add_shape[2])\00", align 1
@.str.28 = private constant [191 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_T_add_strides[1]) and 9 == T.Cast(\22int32\22, default_function_T_add_strides[0]), default_function.T_add.strides: expected to be compact array\00", align 1
@.str.29 = private constant [199 x i8] c"Assert fail: T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, \22uint64\22), Argument default_function.T_add.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, \22uint64\22)\00", align 1
@.str.30 = private constant [179 x i8] c"Assert fail: T.tvm_struct_get(T_add, 0, 10, \22int32\22) == 1, Argument default_function.T_add.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_add, 0, 10, \22int32\22)\00", align 1
@.str.31 = private constant [185 x i8] c"Assert fail: dev_id == T.tvm_struct_get(T_add, 0, 9, \22int32\22), Argument default_function.T_add.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_add, 0, 9, \22int32\22)\00", align 1
@.tvm_func.default_function_kernel = internal unnamed_addr global i8* null, align 8
@.str.32 = private constant [24 x i8] c"default_function_kernel\00", align 1
@.str.33 = private constant [68 x i8] c"Assert fail: kernel_error_code == 0, Error executing compute kernel\00", align 1
@__tvm_main__ = weak dllexport local_unnamed_addr constant [17 x i8] c"default_function\00", align 1
@llvm.global_ctors = appending global [0 x { i32, void ()*, i8* }] zeroinitializer

define dllexport i32 @default_function(i8* noalias nocapture readonly %args, i32* noalias nocapture readonly %arg_type_ids, i32 %num_args, i8* noalias nocapture readnone %out_ret_value, i32* noalias nocapture readnone %out_ret_tcode, i8* noalias nocapture readnone %resource_handle) local_unnamed_addr #0 !dbg !5 {
entry:
  call void @llvm.dbg.value(metadata i8* %args, metadata !12, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i32* %arg_type_ids, metadata !13, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i32 %num_args, metadata !14, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i8* %out_ret_value, metadata !15, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i32* %out_ret_tcode, metadata !16, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i8* %resource_handle, metadata !17, metadata !DIExpression()), !dbg !18
  %stack_value_void_ptr149 = alloca [6 x %0], align 8, !dbg !18
  %stack_tcode150 = alloca [6 x i32], align 4, !dbg !18
  %stack_tcode150.sub = getelementptr inbounds [6 x i32], [6 x i32]* %stack_tcode150, i64 0, i64 0
  %stack_value = bitcast [6 x %0]* %stack_value_void_ptr149 to i8*, !dbg !18
  %0 = icmp eq i32 %num_args, 5, !dbg !18
  br i1 %0, label %assert_end, label %assert_fail, !dbg !18, !prof !19

assert_fail:                                      ; preds = %entry
  %1 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %1(i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end:                                       ; preds = %entry
  %ph_0.code = load i32, i32* %arg_type_ids, align 4, !dbg !18, !tbaa !23
  %2 = getelementptr inbounds i32, i32* %arg_type_ids, i64 1, !dbg !18
  %compute.code = load i32, i32* %2, align 4, !dbg !18, !tbaa !34
  %3 = getelementptr inbounds i32, i32* %arg_type_ids, i64 2, !dbg !18
  %T_add.code = load i32, i32* %3, align 4, !dbg !18, !tbaa !36
  %4 = getelementptr inbounds i32, i32* %arg_type_ids, i64 3, !dbg !18
  %compute.code1 = load i32, i32* %4, align 4, !dbg !18, !tbaa !39
  %5 = getelementptr inbounds i32, i32* %arg_type_ids, i64 4, !dbg !18
  %compute.code2 = load i32, i32* %5, align 4, !dbg !18, !tbaa !41
  %6 = bitcast i8* %args to %1**, !dbg !18
  %ph_0151 = load %1*, %1** %6, align 8, !dbg !18
  %7 = getelementptr inbounds i8, i8* %args, i64 8, !dbg !18
  %8 = bitcast i8* %7 to %1**, !dbg !18
  %compute152 = load %1*, %1** %8, align 8, !dbg !18
  %9 = getelementptr inbounds i8, i8* %args, i64 16, !dbg !18
  %10 = bitcast i8* %9 to %1**, !dbg !18
  %T_add153 = load %1*, %1** %10, align 8, !dbg !18
  %11 = getelementptr inbounds i8, i8* %args, i64 24, !dbg !18
  %12 = bitcast i8* %11 to %1**, !dbg !18
  %compute3154 = load %1*, %1** %12, align 8, !dbg !18
  %13 = getelementptr inbounds i8, i8* %args, i64 32, !dbg !18
  %14 = bitcast i8* %13 to %1**, !dbg !18
  %compute4155 = load %1*, %1** %14, align 8, !dbg !18
  %15 = bitcast %1* %ph_0151 to float**, !dbg !18
  %ph_0_void_ptr156 = load float*, float** %15, align 8, !dbg !18
  %ptrint = ptrtoint float* %ph_0_void_ptr156 to i64, !dbg !18
  %maskedptr = and i64 %ptrint, 63, !dbg !18
  %maskcond = icmp eq i64 %maskedptr, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond), !dbg !18
  %16 = getelementptr inbounds %1, %1* %ph_0151, i64 0, i32 4, !dbg !18
  %default_function.ph_0.shape = load i64*, i64** %16, align 8, !dbg !18
  %17 = getelementptr inbounds %1, %1* %ph_0151, i64 0, i32 5, !dbg !18
  %default_function.ph_0.strides = load i64*, i64** %17, align 8, !dbg !18
  %18 = getelementptr inbounds %1, %1* %ph_0151, i64 0, i32 1, i32 1, !dbg !18
  %dev_id = load i32, i32* %18, align 4, !dbg !18
  %19 = bitcast %1* %compute152 to float**, !dbg !18
  %compute_void_ptr157 = load float*, float** %19, align 8, !dbg !18
  %ptrint7 = ptrtoint float* %compute_void_ptr157 to i64, !dbg !18
  %maskedptr8 = and i64 %ptrint7, 63, !dbg !18
  %maskcond9 = icmp eq i64 %maskedptr8, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond9), !dbg !18
  %20 = getelementptr inbounds %1, %1* %compute152, i64 0, i32 4, !dbg !18
  %default_function.compute.shape = load i64*, i64** %20, align 8, !dbg !18
  %21 = getelementptr inbounds %1, %1* %compute152, i64 0, i32 5, !dbg !18
  %default_function.compute.strides = load i64*, i64** %21, align 8, !dbg !18
  %22 = bitcast %1* %T_add153 to float**, !dbg !18
  %T_add_void_ptr158 = load float*, float** %22, align 8, !dbg !18
  %ptrint11 = ptrtoint float* %T_add_void_ptr158 to i64, !dbg !18
  %maskedptr12 = and i64 %ptrint11, 63, !dbg !18
  %maskcond13 = icmp eq i64 %maskedptr12, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond13), !dbg !18
  %23 = getelementptr inbounds %1, %1* %T_add153, i64 0, i32 4, !dbg !18
  %default_function.T_add.shape = load i64*, i64** %23, align 8, !dbg !18
  %24 = getelementptr inbounds %1, %1* %T_add153, i64 0, i32 5, !dbg !18
  %default_function.T_add.strides = load i64*, i64** %24, align 8, !dbg !18
  %25 = bitcast %1* %compute3154 to float**, !dbg !18
  %compute_void_ptr14159 = load float*, float** %25, align 8, !dbg !18
  %ptrint16 = ptrtoint float* %compute_void_ptr14159 to i64, !dbg !18
  %maskedptr17 = and i64 %ptrint16, 63, !dbg !18
  %maskcond18 = icmp eq i64 %maskedptr17, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond18), !dbg !18
  %26 = getelementptr inbounds %1, %1* %compute3154, i64 0, i32 4, !dbg !18
  %default_function.compute.shape19 = load i64*, i64** %26, align 8, !dbg !18
  %27 = getelementptr inbounds %1, %1* %compute3154, i64 0, i32 5, !dbg !18
  %default_function.compute.strides20 = load i64*, i64** %27, align 8, !dbg !18
  %28 = bitcast %1* %compute4155 to float**, !dbg !18
  %compute_void_ptr21160 = load float*, float** %28, align 8, !dbg !18
  %ptrint23 = ptrtoint float* %compute_void_ptr21160 to i64, !dbg !18
  %maskedptr24 = and i64 %ptrint23, 63, !dbg !18
  %maskcond25 = icmp eq i64 %maskedptr24, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond25), !dbg !18
  %29 = getelementptr inbounds %1, %1* %compute4155, i64 0, i32 4, !dbg !18
  %default_function.compute.shape26 = load i64*, i64** %29, align 8, !dbg !18
  %30 = getelementptr inbounds %1, %1* %compute4155, i64 0, i32 5, !dbg !18
  %default_function.compute.strides27 = load i64*, i64** %30, align 8, !dbg !18
  switch i32 %ph_0.code, label %assert_fail28 [
    i32 13, label %assert_end29
    i32 7, label %assert_end29
    i32 4, label %assert_end29
    i32 3, label %assert_end29
  ], !dbg !18

assert_fail28:                                    ; preds = %assert_end
  %31 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %31(i8* getelementptr inbounds ([130 x i8], [130 x i8]* @.str.1, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end29:                                     ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  switch i32 %compute.code, label %assert_fail30 [
    i32 13, label %assert_end31
    i32 7, label %assert_end31
    i32 4, label %assert_end31
    i32 3, label %assert_end31
  ], !dbg !18

assert_fail30:                                    ; preds = %assert_end29
  %32 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %32(i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.2, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end31:                                     ; preds = %assert_end29, %assert_end29, %assert_end29, %assert_end29
  switch i32 %T_add.code, label %assert_fail32 [
    i32 13, label %assert_end33
    i32 7, label %assert_end33
    i32 4, label %assert_end33
    i32 3, label %assert_end33
  ], !dbg !18

assert_fail32:                                    ; preds = %assert_end31
  %33 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %33(i8* getelementptr inbounds ([134 x i8], [134 x i8]* @.str.3, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end33:                                     ; preds = %assert_end31, %assert_end31, %assert_end31, %assert_end31
  switch i32 %compute.code1, label %assert_fail34 [
    i32 13, label %assert_end35
    i32 7, label %assert_end35
    i32 4, label %assert_end35
    i32 3, label %assert_end35
  ], !dbg !18

assert_fail34:                                    ; preds = %assert_end33
  %34 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %34(i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.4, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end35:                                     ; preds = %assert_end33, %assert_end33, %assert_end33, %assert_end33
  switch i32 %compute.code2, label %assert_fail36 [
    i32 13, label %assert_end37
    i32 7, label %assert_end37
    i32 4, label %assert_end37
    i32 3, label %assert_end37
  ], !dbg !18

assert_fail36:                                    ; preds = %assert_end35
  %35 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %35(i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.5, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end37:                                     ; preds = %assert_end35, %assert_end35, %assert_end35, %assert_end35
  %36 = getelementptr inbounds %1, %1* %ph_0151, i64 0, i32 2, !dbg !18
  %37 = load i32, i32* %36, align 4, !dbg !18
  %38 = icmp eq i32 %37, 3, !dbg !18
  br i1 %38, label %assert_end41, label %assert_fail38, !dbg !18, !prof !19

assert_fail38:                                    ; preds = %assert_end37
  %39 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %39(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.6, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end41:                                     ; preds = %assert_end37
  %40 = getelementptr inbounds %1, %1* %ph_0151, i64 0, i32 3, i32 2, !dbg !18
  %41 = load i16, i16* %40, align 2, !dbg !18
  %42 = icmp eq i16 %41, 1, !dbg !18
  %43 = getelementptr inbounds %1, %1* %ph_0151, i64 0, i32 3, i32 1, !dbg !18
  %44 = load i8, i8* %43, align 1, !dbg !18
  %45 = icmp eq i8 %44, 32, !dbg !18
  %46 = getelementptr inbounds %1, %1* %ph_0151, i64 0, i32 3, i32 0, !dbg !18
  %47 = load i8, i8* %46, align 1, !dbg !18
  %48 = icmp eq i8 %47, 2, !dbg !18
  %49 = and i1 %45, %48, !dbg !18
  %50 = and i1 %42, %49, !dbg !18
  br i1 %50, label %assert_end43, label %assert_fail42, !dbg !18, !prof !19

assert_fail42:                                    ; preds = %assert_end41
  %51 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %51(i8* getelementptr inbounds ([235 x i8], [235 x i8]* @.str.7, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end43:                                     ; preds = %assert_end41
  %52 = load i64, i64* %default_function.ph_0.shape, align 8, !dbg !18, !tbaa !45
  %53 = trunc i64 %52 to i32, !dbg !18
  %54 = icmp eq i32 %53, 15, !dbg !18
  br i1 %54, label %assert_end45, label %assert_fail44, !dbg !18, !prof !19

assert_fail44:                                    ; preds = %assert_end43
  %55 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %55(i8* getelementptr inbounds ([193 x i8], [193 x i8]* @.str.8, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end45:                                     ; preds = %assert_end43
  %56 = getelementptr inbounds i64, i64* %default_function.ph_0.shape, i64 1, !dbg !18
  %57 = load i64, i64* %56, align 8, !dbg !18, !tbaa !55
  %58 = trunc i64 %57 to i32, !dbg !18
  %59 = icmp eq i32 %58, 9, !dbg !18
  br i1 %59, label %assert_end47, label %assert_fail46, !dbg !18, !prof !19

assert_fail46:                                    ; preds = %assert_end45
  %60 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %60(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.9, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end47:                                     ; preds = %assert_end45
  %61 = getelementptr inbounds i64, i64* %default_function.ph_0.shape, i64 2, !dbg !18
  %62 = load i64, i64* %61, align 8, !dbg !18, !tbaa !57
  %63 = trunc i64 %62 to i32, !dbg !18
  %64 = icmp eq i32 %63, 1, !dbg !18
  br i1 %64, label %assert_end49, label %assert_fail48, !dbg !18, !prof !19

assert_fail48:                                    ; preds = %assert_end47
  %65 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %65(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.10, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end49:                                     ; preds = %assert_end47
  %66 = icmp eq i64* %default_function.ph_0.strides, null, !dbg !18
  br i1 %66, label %if_end, label %if_then, !dbg !18, !prof !60

if_then:                                          ; preds = %assert_end49
  %67 = load i64, i64* %default_function.ph_0.strides, align 8, !dbg !18, !tbaa !61
  %68 = trunc i64 %67 to i32, !dbg !18
  %69 = icmp eq i32 %68, 9, !dbg !18
  %70 = getelementptr inbounds i64, i64* %default_function.ph_0.strides, i64 1, !dbg !18
  %71 = load i64, i64* %70, align 8, !dbg !18, !tbaa !71
  %72 = trunc i64 %71 to i32, !dbg !18
  %73 = icmp eq i32 %72, 1, !dbg !18
  %74 = and i1 %69, %73, !dbg !18
  br i1 %74, label %if_end, label %assert_fail50, !dbg !18, !prof !19

if_end:                                           ; preds = %assert_end49, %if_then
  %75 = getelementptr inbounds %1, %1* %ph_0151, i64 0, i32 6, !dbg !18
  %76 = load i64, i64* %75, align 8, !dbg !18
  %77 = icmp eq i64 %76, 0, !dbg !18
  br i1 %77, label %assert_end53, label %assert_fail52, !dbg !18, !prof !19

assert_fail50:                                    ; preds = %if_then
  %78 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %78(i8* getelementptr inbounds ([188 x i8], [188 x i8]* @.str.11, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail52:                                    ; preds = %if_end
  %79 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %79(i8* getelementptr inbounds ([196 x i8], [196 x i8]* @.str.12, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end53:                                     ; preds = %if_end
  %80 = getelementptr inbounds %1, %1* %ph_0151, i64 0, i32 1, i32 0, !dbg !18
  %81 = load i32, i32* %80, align 4, !dbg !18
  %82 = icmp eq i32 %81, 1, !dbg !18
  br i1 %82, label %assert_end55, label %assert_fail54, !dbg !18, !prof !19

assert_fail54:                                    ; preds = %assert_end53
  %83 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %83(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.13, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end55:                                     ; preds = %assert_end53
  %84 = getelementptr inbounds %1, %1* %compute152, i64 0, i32 2, !dbg !18
  %85 = load i32, i32* %84, align 4, !dbg !18
  %86 = icmp eq i32 %85, 3, !dbg !18
  br i1 %86, label %assert_end59, label %assert_fail56, !dbg !18, !prof !19

assert_fail56:                                    ; preds = %assert_end55
  %87 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %87(i8* getelementptr inbounds ([113 x i8], [113 x i8]* @.str.14, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end59:                                     ; preds = %assert_end55
  %88 = getelementptr inbounds %1, %1* %compute152, i64 0, i32 3, i32 2, !dbg !18
  %89 = load i16, i16* %88, align 2, !dbg !18
  %90 = icmp eq i16 %89, 1, !dbg !18
  %91 = getelementptr inbounds %1, %1* %compute152, i64 0, i32 3, i32 1, !dbg !18
  %92 = load i8, i8* %91, align 1, !dbg !18
  %93 = icmp eq i8 %92, 32, !dbg !18
  %94 = getelementptr inbounds %1, %1* %compute152, i64 0, i32 3, i32 0, !dbg !18
  %95 = load i8, i8* %94, align 1, !dbg !18
  %96 = icmp eq i8 %95, 2, !dbg !18
  %97 = and i1 %93, %96, !dbg !18
  %98 = and i1 %90, %97, !dbg !18
  br i1 %98, label %assert_end61, label %assert_fail60, !dbg !18, !prof !19

assert_fail60:                                    ; preds = %assert_end59
  %99 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %99(i8* getelementptr inbounds ([247 x i8], [247 x i8]* @.str.15, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end61:                                     ; preds = %assert_end59
  %100 = load i64, i64* %default_function.compute.shape, align 8, !dbg !18, !tbaa !73
  %101 = trunc i64 %100 to i32, !dbg !18
  %102 = icmp eq i32 %101, 15, !dbg !18
  br i1 %102, label %assert_end63, label %assert_fail62, !dbg !18, !prof !19

assert_fail62:                                    ; preds = %assert_end61
  %103 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %103(i8* getelementptr inbounds ([202 x i8], [202 x i8]* @.str.16, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end63:                                     ; preds = %assert_end61
  %104 = getelementptr inbounds i64, i64* %default_function.compute.shape, i64 1, !dbg !18
  %105 = load i64, i64* %104, align 8, !dbg !18, !tbaa !83
  %106 = trunc i64 %105 to i32, !dbg !18
  %107 = icmp eq i32 %106, 9, !dbg !18
  br i1 %107, label %assert_end65, label %assert_fail64, !dbg !18, !prof !19

assert_fail64:                                    ; preds = %assert_end63
  %108 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %108(i8* getelementptr inbounds ([200 x i8], [200 x i8]* @.str.17, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end65:                                     ; preds = %assert_end63
  %109 = getelementptr inbounds i64, i64* %default_function.compute.shape, i64 2, !dbg !18
  %110 = load i64, i64* %109, align 8, !dbg !18, !tbaa !85
  %111 = trunc i64 %110 to i32, !dbg !18
  %112 = icmp eq i32 %111, 1, !dbg !18
  br i1 %112, label %assert_end67, label %assert_fail66, !dbg !18, !prof !19

assert_fail66:                                    ; preds = %assert_end65
  %113 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %113(i8* getelementptr inbounds ([200 x i8], [200 x i8]* @.str.18, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end67:                                     ; preds = %assert_end65
  %114 = icmp eq i64* %default_function.compute.strides, null, !dbg !18
  br i1 %114, label %if_end69, label %if_then68, !dbg !18, !prof !60

if_then68:                                        ; preds = %assert_end67
  %115 = load i64, i64* %default_function.compute.strides, align 8, !dbg !18, !tbaa !88
  %116 = trunc i64 %115 to i32, !dbg !18
  %117 = icmp eq i32 %116, 9, !dbg !18
  %118 = getelementptr inbounds i64, i64* %default_function.compute.strides, i64 1, !dbg !18
  %119 = load i64, i64* %118, align 8, !dbg !18, !tbaa !98
  %120 = trunc i64 %119 to i32, !dbg !18
  %121 = icmp eq i32 %120, 1, !dbg !18
  %122 = and i1 %117, %121, !dbg !18
  br i1 %122, label %if_end69, label %assert_fail70, !dbg !18, !prof !19

if_end69:                                         ; preds = %assert_end67, %if_then68
  %123 = getelementptr inbounds %1, %1* %compute152, i64 0, i32 6, !dbg !18
  %124 = load i64, i64* %123, align 8, !dbg !18
  %125 = icmp eq i64 %124, 0, !dbg !18
  br i1 %125, label %assert_end73, label %assert_fail72, !dbg !18, !prof !19

assert_fail70:                                    ; preds = %if_then68
  %126 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %126(i8* getelementptr inbounds ([197 x i8], [197 x i8]* @.str.19, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail72:                                    ; preds = %if_end69
  %127 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %127(i8* getelementptr inbounds ([205 x i8], [205 x i8]* @.str.20, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end73:                                     ; preds = %if_end69
  %128 = getelementptr inbounds %1, %1* %compute152, i64 0, i32 1, i32 0, !dbg !18
  %129 = load i32, i32* %128, align 4, !dbg !18
  %130 = icmp eq i32 %129, 1, !dbg !18
  br i1 %130, label %assert_end75, label %assert_fail74, !dbg !18, !prof !19

assert_fail74:                                    ; preds = %assert_end73
  %131 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %131(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.21, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end75:                                     ; preds = %assert_end73
  %132 = getelementptr inbounds %1, %1* %compute152, i64 0, i32 1, i32 1, !dbg !18
  %133 = load i32, i32* %132, align 4, !dbg !18
  %134 = icmp eq i32 %dev_id, %133, !dbg !18
  br i1 %134, label %assert_end77, label %assert_fail76, !dbg !18, !prof !19

assert_fail76:                                    ; preds = %assert_end75
  %135 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %135(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.22, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end77:                                     ; preds = %assert_end75
  %136 = getelementptr inbounds %1, %1* %T_add153, i64 0, i32 2, !dbg !18
  %137 = load i32, i32* %136, align 4, !dbg !18
  %138 = icmp eq i32 %137, 3, !dbg !18
  br i1 %138, label %assert_end81, label %assert_fail78, !dbg !18, !prof !19

assert_fail78:                                    ; preds = %assert_end77
  %139 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %139(i8* getelementptr inbounds ([109 x i8], [109 x i8]* @.str.23, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end81:                                     ; preds = %assert_end77
  %140 = getelementptr inbounds %1, %1* %T_add153, i64 0, i32 3, i32 2, !dbg !18
  %141 = load i16, i16* %140, align 2, !dbg !18
  %142 = icmp eq i16 %141, 1, !dbg !18
  %143 = getelementptr inbounds %1, %1* %T_add153, i64 0, i32 3, i32 1, !dbg !18
  %144 = load i8, i8* %143, align 1, !dbg !18
  %145 = icmp eq i8 %144, 32, !dbg !18
  %146 = getelementptr inbounds %1, %1* %T_add153, i64 0, i32 3, i32 0, !dbg !18
  %147 = load i8, i8* %146, align 1, !dbg !18
  %148 = icmp eq i8 %147, 2, !dbg !18
  %149 = and i1 %145, %148, !dbg !18
  %150 = and i1 %142, %149, !dbg !18
  br i1 %150, label %assert_end83, label %assert_fail82, !dbg !18, !prof !19

assert_fail82:                                    ; preds = %assert_end81
  %151 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %151(i8* getelementptr inbounds ([239 x i8], [239 x i8]* @.str.24, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end83:                                     ; preds = %assert_end81
  %152 = load i64, i64* %default_function.T_add.shape, align 8, !dbg !18, !tbaa !100
  %153 = trunc i64 %152 to i32, !dbg !18
  %154 = icmp eq i32 %153, 15, !dbg !18
  br i1 %154, label %assert_end85, label %assert_fail84, !dbg !18, !prof !19

assert_fail84:                                    ; preds = %assert_end83
  %155 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %155(i8* getelementptr inbounds ([196 x i8], [196 x i8]* @.str.25, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end85:                                     ; preds = %assert_end83
  %156 = getelementptr inbounds i64, i64* %default_function.T_add.shape, i64 1, !dbg !18
  %157 = load i64, i64* %156, align 8, !dbg !18, !tbaa !110
  %158 = trunc i64 %157 to i32, !dbg !18
  %159 = icmp eq i32 %158, 9, !dbg !18
  br i1 %159, label %assert_end87, label %assert_fail86, !dbg !18, !prof !19

assert_fail86:                                    ; preds = %assert_end85
  %160 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %160(i8* getelementptr inbounds ([194 x i8], [194 x i8]* @.str.26, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end87:                                     ; preds = %assert_end85
  %161 = getelementptr inbounds i64, i64* %default_function.T_add.shape, i64 2, !dbg !18
  %162 = load i64, i64* %161, align 8, !dbg !18, !tbaa !112
  %163 = trunc i64 %162 to i32, !dbg !18
  %164 = icmp eq i32 %163, 1, !dbg !18
  br i1 %164, label %assert_end89, label %assert_fail88, !dbg !18, !prof !19

assert_fail88:                                    ; preds = %assert_end87
  %165 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %165(i8* getelementptr inbounds ([194 x i8], [194 x i8]* @.str.27, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end89:                                     ; preds = %assert_end87
  %166 = icmp eq i64* %default_function.T_add.strides, null, !dbg !18
  br i1 %166, label %if_end91, label %if_then90, !dbg !18, !prof !60

if_then90:                                        ; preds = %assert_end89
  %167 = load i64, i64* %default_function.T_add.strides, align 8, !dbg !18, !tbaa !115
  %168 = trunc i64 %167 to i32, !dbg !18
  %169 = icmp eq i32 %168, 9, !dbg !18
  %170 = getelementptr inbounds i64, i64* %default_function.T_add.strides, i64 1, !dbg !18
  %171 = load i64, i64* %170, align 8, !dbg !18, !tbaa !125
  %172 = trunc i64 %171 to i32, !dbg !18
  %173 = icmp eq i32 %172, 1, !dbg !18
  %174 = and i1 %169, %173, !dbg !18
  br i1 %174, label %if_end91, label %assert_fail92, !dbg !18, !prof !19

if_end91:                                         ; preds = %assert_end89, %if_then90
  %175 = getelementptr inbounds %1, %1* %T_add153, i64 0, i32 6, !dbg !18
  %176 = load i64, i64* %175, align 8, !dbg !18
  %177 = icmp eq i64 %176, 0, !dbg !18
  br i1 %177, label %assert_end95, label %assert_fail94, !dbg !18, !prof !19

assert_fail92:                                    ; preds = %if_then90
  %178 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %178(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.28, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail94:                                    ; preds = %if_end91
  %179 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %179(i8* getelementptr inbounds ([199 x i8], [199 x i8]* @.str.29, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end95:                                     ; preds = %if_end91
  %180 = getelementptr inbounds %1, %1* %T_add153, i64 0, i32 1, i32 0, !dbg !18
  %181 = load i32, i32* %180, align 4, !dbg !18
  %182 = icmp eq i32 %181, 1, !dbg !18
  br i1 %182, label %assert_end97, label %assert_fail96, !dbg !18, !prof !19

assert_fail96:                                    ; preds = %assert_end95
  %183 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %183(i8* getelementptr inbounds ([179 x i8], [179 x i8]* @.str.30, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end97:                                     ; preds = %assert_end95
  %184 = getelementptr inbounds %1, %1* %T_add153, i64 0, i32 1, i32 1, !dbg !18
  %185 = load i32, i32* %184, align 4, !dbg !18
  %186 = icmp eq i32 %dev_id, %185, !dbg !18
  br i1 %186, label %assert_end99, label %assert_fail98, !dbg !18, !prof !19

assert_fail98:                                    ; preds = %assert_end97
  %187 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %187(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.31, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end99:                                     ; preds = %assert_end97
  %188 = getelementptr inbounds %1, %1* %compute3154, i64 0, i32 2, !dbg !18
  %189 = load i32, i32* %188, align 4, !dbg !18
  %190 = icmp eq i32 %189, 3, !dbg !18
  br i1 %190, label %assert_end103, label %assert_fail100, !dbg !18, !prof !19

assert_fail100:                                   ; preds = %assert_end99
  %191 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %191(i8* getelementptr inbounds ([113 x i8], [113 x i8]* @.str.14, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end103:                                    ; preds = %assert_end99
  %192 = getelementptr inbounds %1, %1* %compute3154, i64 0, i32 3, i32 2, !dbg !18
  %193 = load i16, i16* %192, align 2, !dbg !18
  %194 = icmp eq i16 %193, 1, !dbg !18
  %195 = getelementptr inbounds %1, %1* %compute3154, i64 0, i32 3, i32 1, !dbg !18
  %196 = load i8, i8* %195, align 1, !dbg !18
  %197 = icmp eq i8 %196, 32, !dbg !18
  %198 = getelementptr inbounds %1, %1* %compute3154, i64 0, i32 3, i32 0, !dbg !18
  %199 = load i8, i8* %198, align 1, !dbg !18
  %200 = icmp eq i8 %199, 2, !dbg !18
  %201 = and i1 %197, %200, !dbg !18
  %202 = and i1 %194, %201, !dbg !18
  br i1 %202, label %assert_end105, label %assert_fail104, !dbg !18, !prof !19

assert_fail104:                                   ; preds = %assert_end103
  %203 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %203(i8* getelementptr inbounds ([247 x i8], [247 x i8]* @.str.15, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end105:                                    ; preds = %assert_end103
  %204 = load i64, i64* %default_function.compute.shape19, align 8, !dbg !18, !tbaa !127
  %205 = trunc i64 %204 to i32, !dbg !18
  %206 = icmp eq i32 %205, 15, !dbg !18
  br i1 %206, label %assert_end107, label %assert_fail106, !dbg !18, !prof !19

assert_fail106:                                   ; preds = %assert_end105
  %207 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %207(i8* getelementptr inbounds ([202 x i8], [202 x i8]* @.str.16, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end107:                                    ; preds = %assert_end105
  %208 = getelementptr inbounds i64, i64* %default_function.compute.shape19, i64 1, !dbg !18
  %209 = load i64, i64* %208, align 8, !dbg !18, !tbaa !137
  %210 = trunc i64 %209 to i32, !dbg !18
  %211 = icmp eq i32 %210, 9, !dbg !18
  br i1 %211, label %assert_end109, label %assert_fail108, !dbg !18, !prof !19

assert_fail108:                                   ; preds = %assert_end107
  %212 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %212(i8* getelementptr inbounds ([200 x i8], [200 x i8]* @.str.17, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end109:                                    ; preds = %assert_end107
  %213 = getelementptr inbounds i64, i64* %default_function.compute.shape19, i64 2, !dbg !18
  %214 = load i64, i64* %213, align 8, !dbg !18, !tbaa !139
  %215 = trunc i64 %214 to i32, !dbg !18
  %216 = icmp eq i32 %215, 1, !dbg !18
  br i1 %216, label %assert_end111, label %assert_fail110, !dbg !18, !prof !19

assert_fail110:                                   ; preds = %assert_end109
  %217 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %217(i8* getelementptr inbounds ([200 x i8], [200 x i8]* @.str.18, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end111:                                    ; preds = %assert_end109
  %218 = icmp eq i64* %default_function.compute.strides20, null, !dbg !18
  br i1 %218, label %if_end113, label %if_then112, !dbg !18, !prof !60

if_then112:                                       ; preds = %assert_end111
  %219 = load i64, i64* %default_function.compute.strides20, align 8, !dbg !18, !tbaa !142
  %220 = trunc i64 %219 to i32, !dbg !18
  %221 = icmp eq i32 %220, 9, !dbg !18
  %222 = getelementptr inbounds i64, i64* %default_function.compute.strides20, i64 1, !dbg !18
  %223 = load i64, i64* %222, align 8, !dbg !18, !tbaa !152
  %224 = trunc i64 %223 to i32, !dbg !18
  %225 = icmp eq i32 %224, 1, !dbg !18
  %226 = and i1 %221, %225, !dbg !18
  br i1 %226, label %if_end113, label %assert_fail114, !dbg !18, !prof !19

if_end113:                                        ; preds = %assert_end111, %if_then112
  %227 = getelementptr inbounds %1, %1* %compute3154, i64 0, i32 6, !dbg !18
  %228 = load i64, i64* %227, align 8, !dbg !18
  %229 = icmp eq i64 %228, 0, !dbg !18
  br i1 %229, label %assert_end117, label %assert_fail116, !dbg !18, !prof !19

assert_fail114:                                   ; preds = %if_then112
  %230 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %230(i8* getelementptr inbounds ([197 x i8], [197 x i8]* @.str.19, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail116:                                   ; preds = %if_end113
  %231 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %231(i8* getelementptr inbounds ([205 x i8], [205 x i8]* @.str.20, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end117:                                    ; preds = %if_end113
  %232 = getelementptr inbounds %1, %1* %compute3154, i64 0, i32 1, i32 0, !dbg !18
  %233 = load i32, i32* %232, align 4, !dbg !18
  %234 = icmp eq i32 %233, 1, !dbg !18
  br i1 %234, label %assert_end119, label %assert_fail118, !dbg !18, !prof !19

assert_fail118:                                   ; preds = %assert_end117
  %235 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %235(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.21, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end119:                                    ; preds = %assert_end117
  %236 = getelementptr inbounds %1, %1* %compute3154, i64 0, i32 1, i32 1, !dbg !18
  %237 = load i32, i32* %236, align 4, !dbg !18
  %238 = icmp eq i32 %dev_id, %237, !dbg !18
  br i1 %238, label %assert_end121, label %assert_fail120, !dbg !18, !prof !19

assert_fail120:                                   ; preds = %assert_end119
  %239 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %239(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.22, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end121:                                    ; preds = %assert_end119
  %240 = getelementptr inbounds %1, %1* %compute4155, i64 0, i32 2, !dbg !18
  %241 = load i32, i32* %240, align 4, !dbg !18
  %242 = icmp eq i32 %241, 3, !dbg !18
  br i1 %242, label %assert_end125, label %assert_fail122, !dbg !18, !prof !19

assert_fail122:                                   ; preds = %assert_end121
  %243 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %243(i8* getelementptr inbounds ([113 x i8], [113 x i8]* @.str.14, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end125:                                    ; preds = %assert_end121
  %244 = getelementptr inbounds %1, %1* %compute4155, i64 0, i32 3, i32 2, !dbg !18
  %245 = load i16, i16* %244, align 2, !dbg !18
  %246 = icmp eq i16 %245, 1, !dbg !18
  %247 = getelementptr inbounds %1, %1* %compute4155, i64 0, i32 3, i32 1, !dbg !18
  %248 = load i8, i8* %247, align 1, !dbg !18
  %249 = icmp eq i8 %248, 32, !dbg !18
  %250 = getelementptr inbounds %1, %1* %compute4155, i64 0, i32 3, i32 0, !dbg !18
  %251 = load i8, i8* %250, align 1, !dbg !18
  %252 = icmp eq i8 %251, 2, !dbg !18
  %253 = and i1 %249, %252, !dbg !18
  %254 = and i1 %246, %253, !dbg !18
  br i1 %254, label %assert_end127, label %assert_fail126, !dbg !18, !prof !19

assert_fail126:                                   ; preds = %assert_end125
  %255 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %255(i8* getelementptr inbounds ([247 x i8], [247 x i8]* @.str.15, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end127:                                    ; preds = %assert_end125
  %256 = load i64, i64* %default_function.compute.shape26, align 8, !dbg !18, !tbaa !154
  %257 = trunc i64 %256 to i32, !dbg !18
  %258 = icmp eq i32 %257, 15, !dbg !18
  br i1 %258, label %assert_end129, label %assert_fail128, !dbg !18, !prof !19

assert_fail128:                                   ; preds = %assert_end127
  %259 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %259(i8* getelementptr inbounds ([202 x i8], [202 x i8]* @.str.16, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end129:                                    ; preds = %assert_end127
  %260 = getelementptr inbounds i64, i64* %default_function.compute.shape26, i64 1, !dbg !18
  %261 = load i64, i64* %260, align 8, !dbg !18, !tbaa !164
  %262 = trunc i64 %261 to i32, !dbg !18
  %263 = icmp eq i32 %262, 9, !dbg !18
  br i1 %263, label %assert_end131, label %assert_fail130, !dbg !18, !prof !19

assert_fail130:                                   ; preds = %assert_end129
  %264 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %264(i8* getelementptr inbounds ([200 x i8], [200 x i8]* @.str.17, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end131:                                    ; preds = %assert_end129
  %265 = getelementptr inbounds i64, i64* %default_function.compute.shape26, i64 2, !dbg !18
  %266 = load i64, i64* %265, align 8, !dbg !18, !tbaa !166
  %267 = trunc i64 %266 to i32, !dbg !18
  %268 = icmp eq i32 %267, 1, !dbg !18
  br i1 %268, label %assert_end133, label %assert_fail132, !dbg !18, !prof !19

assert_fail132:                                   ; preds = %assert_end131
  %269 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %269(i8* getelementptr inbounds ([200 x i8], [200 x i8]* @.str.18, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end133:                                    ; preds = %assert_end131
  %270 = icmp eq i64* %default_function.compute.strides27, null, !dbg !18
  br i1 %270, label %if_end135, label %if_then134, !dbg !18, !prof !60

if_then134:                                       ; preds = %assert_end133
  %271 = load i64, i64* %default_function.compute.strides27, align 8, !dbg !18, !tbaa !169
  %272 = trunc i64 %271 to i32, !dbg !18
  %273 = icmp eq i32 %272, 9, !dbg !18
  %274 = getelementptr inbounds i64, i64* %default_function.compute.strides27, i64 1, !dbg !18
  %275 = load i64, i64* %274, align 8, !dbg !18, !tbaa !179
  %276 = trunc i64 %275 to i32, !dbg !18
  %277 = icmp eq i32 %276, 1, !dbg !18
  %278 = and i1 %273, %277, !dbg !18
  br i1 %278, label %if_end135, label %assert_fail136, !dbg !18, !prof !19

if_end135:                                        ; preds = %assert_end133, %if_then134
  %279 = getelementptr inbounds %1, %1* %compute4155, i64 0, i32 6, !dbg !18
  %280 = load i64, i64* %279, align 8, !dbg !18
  %281 = icmp eq i64 %280, 0, !dbg !18
  br i1 %281, label %assert_end139, label %assert_fail138, !dbg !18, !prof !19

assert_fail136:                                   ; preds = %if_then134
  %282 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %282(i8* getelementptr inbounds ([197 x i8], [197 x i8]* @.str.19, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail138:                                   ; preds = %if_end135
  %283 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %283(i8* getelementptr inbounds ([205 x i8], [205 x i8]* @.str.20, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end139:                                    ; preds = %if_end135
  %284 = getelementptr inbounds %1, %1* %compute4155, i64 0, i32 1, i32 0, !dbg !18
  %285 = load i32, i32* %284, align 4, !dbg !18
  %286 = icmp eq i32 %285, 1, !dbg !18
  br i1 %286, label %assert_end141, label %assert_fail140, !dbg !18, !prof !19

assert_fail140:                                   ; preds = %assert_end139
  %287 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %287(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.21, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end141:                                    ; preds = %assert_end139
  %288 = getelementptr inbounds %1, %1* %compute4155, i64 0, i32 1, i32 1, !dbg !18
  %289 = load i32, i32* %288, align 4, !dbg !18
  %290 = icmp eq i32 %dev_id, %289, !dbg !18
  br i1 %290, label %assert_end143, label %assert_fail142, !dbg !18, !prof !19

assert_fail142:                                   ; preds = %assert_end141
  %291 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %291(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.22, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end143:                                    ; preds = %assert_end141
  %292 = call fastcc i32 @default_function_compute_(i8* nonnull %stack_value, float* %T_add_void_ptr158, i32* nonnull %stack_tcode150.sub, float* %compute_void_ptr157, float* %compute_void_ptr14159, float* %compute_void_ptr21160, float* %ph_0_void_ptr156), !dbg !18
  ret i32 %292, !dbg !18
}

; Function Attrs: nounwind willreturn
declare void @llvm.assume(i1) #1

; Function Attrs: noinline
define internal fastcc i32 @default_function_compute_(i8* noalias %0, float* noalias align 64 %1, i32* noalias %2, float* noalias align 64 %3, float* noalias align 64 %4, float* noalias align 64 %5, float* noalias align 64 %6) unnamed_addr #2 {
entry:
  %7 = alloca i8*, align 8
  %8 = bitcast i8* %0 to %0*
  %9 = bitcast i8* %0 to float**
  store float* %1, float** %9, align 8
  %10 = getelementptr inbounds i8, i8* %0, i64 8
  %11 = bitcast i8* %10 to float**
  store float* %3, float** %11, align 8
  %12 = getelementptr inbounds i8, i8* %0, i64 16
  %13 = bitcast i8* %12 to float**
  store float* %4, float** %13, align 8
  %14 = getelementptr inbounds i8, i8* %0, i64 24
  %15 = bitcast i8* %14 to float**
  store float* %5, float** %15, align 8
  %16 = bitcast i32* %2 to <4 x i32>*
  store <4 x i32> <i32 3, i32 3, i32 3, i32 3>, <4 x i32>* %16, align 4, !tbaa !181
  %17 = getelementptr inbounds i8, i8* %0, i64 32
  %18 = bitcast i8* %17 to float**
  store float* %6, float** %18, align 8
  %19 = getelementptr inbounds i32, i32* %2, i64 4
  store i32 3, i32* %19, align 4, !tbaa !190
  %20 = getelementptr inbounds i8, i8* %0, i64 40
  %21 = bitcast i8* %20 to %0*
  %22 = getelementptr inbounds i32, i32* %2, i64 5
  %23 = load i32 (i8*, %0*, i32*, i32, %0*, i32*)*, i32 (i8*, %0*, i32*, i32, %0*, i32*)** @__TVMFuncCall, align 8, !tbaa !20
  %24 = load i8*, i8** @.tvm_func.default_function_kernel, align 8
  %25 = icmp eq i8* %24, null
  br i1 %25, label %handle_init, label %handle_init_end, !prof !60

handle_init:                                      ; preds = %entry
  %26 = load i8*, i8** @__tvm_module_ctx, align 8, !tbaa !20
  %27 = load i32 (i8*, i8*, i8**)*, i32 (i8*, i8*, i8**)** @__TVMBackendGetFuncFromEnv, align 8, !tbaa !20
  %28 = call i32 %27(i8* %26, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.32, i64 0, i64 0), i8** nonnull %7)
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %call_end, label %call_fail, !prof !19

handle_init_end:                                  ; preds = %entry, %call_end
  %30 = phi i8* [ %24, %entry ], [ %33, %call_end ]
  %31 = call i32 %23(i8* %30, %0* %8, i32* nonnull %2, i32 5, %0* nonnull %21, i32* nonnull %22)
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %call_end2, label %call_fail, !prof !19

call_fail:                                        ; preds = %call_end2, %handle_init_end, %handle_init
  %merge = phi i32 [ %28, %handle_init ], [ %31, %handle_init_end ], [ 0, %call_end2 ]
  ret i32 %merge

call_end:                                         ; preds = %handle_init
  %33 = load i8*, i8** %7, align 8
  store i8* %33, i8** @.tvm_func.default_function_kernel, align 8
  br label %handle_init_end

call_end2:                                        ; preds = %handle_init_end
  %34 = bitcast i8* %20 to i64*
  %35 = load i64, i64* %34, align 8
  %kernel_error_code = trunc i64 %35 to i32
  %36 = icmp eq i32 %kernel_error_code, 0
  br i1 %36, label %call_fail, label %assert_fail, !prof !19

assert_fail:                                      ; preds = %call_end2
  %37 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !20
  call void %37(i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.33, i64 0, i64 0))
  ret i32 -1
}

; Function Attrs: nounwind readnone
define weak dso_local i16 @__truncsfhf2(float %a0) local_unnamed_addr #3 section ".text.tvm.fp16.conv" {
b0:
  %v0 = bitcast float %a0 to i32
  %v1 = and i32 %v0, 2147483647
  %v2 = add nsw i32 %v1, -947912704
  %v3 = add nsw i32 %v1, -1199570944
  %v4 = icmp ult i32 %v2, %v3
  br i1 %v4, label %b1, label %b5

b1:                                               ; preds = %b0
  %v5 = lshr i32 %v0, 13
  %v6 = and i32 %v5, 65535
  %v7 = add nuw nsw i32 %v6, -114688
  %v8 = and i32 %v0, 8191
  %v9 = icmp ugt i32 %v8, 4096
  br i1 %v9, label %b2, label %b3

b2:                                               ; preds = %b1
  %v10 = add nuw nsw i32 %v6, -114687
  br label %b13

b3:                                               ; preds = %b1
  %v11 = icmp eq i32 %v8, 4096
  br i1 %v11, label %b4, label %b13

b4:                                               ; preds = %b3
  %v12 = and i32 %v7, 65535
  %v13 = and i32 %v5, 1
  %v14 = add nuw nsw i32 %v12, %v13
  br label %b13

b5:                                               ; preds = %b0
  %v15 = icmp ugt i32 %v1, 2139095040
  br i1 %v15, label %b6, label %b7

b6:                                               ; preds = %b5
  %v16 = lshr i32 %v0, 13
  %v17 = and i32 %v16, 511
  %v18 = or i32 %v17, 32256
  br label %b13

b7:                                               ; preds = %b5
  %v19 = icmp ugt i32 %v1, 1199570943
  br i1 %v19, label %b13, label %b8

b8:                                               ; preds = %b7
  %v20 = icmp ult i32 %v1, 754974720
  br i1 %v20, label %b13, label %b9

b9:                                               ; preds = %b8
  %v21 = lshr i32 %v1, 23
  %v22 = sub nsw i32 113, %v21
  %v23 = and i32 %v0, 8388607
  %v24 = or i32 %v23, 8388608
  %v25 = add nsw i32 %v21, -81
  %v26 = shl i32 %v24, %v25
  %v27 = icmp ne i32 %v26, 0
  %v28 = lshr i32 %v24, %v22
  %v29 = zext i1 %v27 to i32
  %v30 = lshr i32 %v28, 13
  %v31 = and i32 %v28, 8191
  %v32 = or i32 %v31, %v29
  %v33 = icmp ugt i32 %v32, 4096
  br i1 %v33, label %b10, label %b11

b10:                                              ; preds = %b9
  %v34 = add nuw nsw i32 %v30, 1
  br label %b13

b11:                                              ; preds = %b9
  %v35 = icmp eq i32 %v32, 4096
  br i1 %v35, label %b12, label %b13

b12:                                              ; preds = %b11
  %v36 = and i32 %v30, 1
  %v37 = add nuw nsw i32 %v36, %v30
  br label %b13

b13:                                              ; preds = %b12, %b11, %b10, %b8, %b7, %b6, %b4, %b3, %b2
  %v38 = phi i32 [ %v18, %b6 ], [ %v10, %b2 ], [ %v14, %b4 ], [ %v7, %b3 ], [ 31744, %b7 ], [ 0, %b8 ], [ %v34, %b10 ], [ %v37, %b12 ], [ %v30, %b11 ]
  %v39 = lshr i32 %v0, 16
  %v40 = and i32 %v39, 32768
  %v41 = or i32 %v38, %v40
  %vlast = trunc i32 %v41 to i16
  ret i16 %vlast
}

; Function Attrs: nounwind readnone
define weak dso_local float @__extendhfsf2(i16 %a0) local_unnamed_addr #3 section ".text.tvm.fp16.conv" {
b0:
  %v1 = and i16 %a0, 32767
  %v2 = zext i16 %v1 to i32
  %v3 = add nsw i16 %v1, -1024
  %v4 = icmp ult i16 %v3, 30720
  br i1 %v4, label %b1, label %b2

b1:                                               ; preds = %b0
  %v5 = shl nuw nsw i32 %v2, 13
  %v6 = add nuw nsw i32 %v5, 939524096
  br label %b6

b2:                                               ; preds = %b0
  %v7 = icmp ugt i16 %v1, 31743
  br i1 %v7, label %b3, label %b4

b3:                                               ; preds = %b2
  %v8 = shl nuw nsw i32 %v2, 13
  %v9 = or i32 %v8, 2139095040
  br label %b6

b4:                                               ; preds = %b2
  %v10 = icmp eq i16 %v1, 0
  br i1 %v10, label %b6, label %b5

b5:                                               ; preds = %b4
  %v11 = icmp ult i16 %v1, 256
  %v12 = lshr i32 %v2, 8
  %v13 = select i1 %v11, i32 %v2, i32 %v12
  %v14 = select i1 %v11, i32 32, i32 24
  %v15 = icmp ult i32 %v13, 16
  %v16 = lshr i32 %v13, 4
  %v17 = add nsw i32 %v14, -4
  %v18 = select i1 %v15, i32 %v13, i32 %v16
  %v19 = select i1 %v15, i32 %v14, i32 %v17
  %v20 = icmp ult i32 %v18, 4
  %v21 = lshr i32 %v18, 2
  %v22 = add nsw i32 %v19, -2
  %v23 = select i1 %v20, i32 %v18, i32 %v21
  %v24 = select i1 %v20, i32 %v19, i32 %v22
  %v25 = icmp ult i32 %v23, 2
  %v26 = sub nsw i32 0, %v23
  %v27 = select i1 %v25, i32 %v26, i32 -2
  %v28 = add nsw i32 %v27, %v24
  %v29 = add nsw i32 %v28, -8
  %v30 = shl i32 %v2, %v29
  %v31 = xor i32 %v30, 8388608
  %v32 = shl i32 %v28, 23
  %v33 = sub i32 1124073472, %v32
  %v34 = or i32 %v31, %v33
  br label %b6

b6:                                               ; preds = %b5, %b4, %b3, %b1
  %v35 = phi i32 [ %v6, %b1 ], [ %v9, %b3 ], [ %v34, %b5 ], [ 0, %b4 ]
  %v36 = and i16 %a0, -32768
  %v37 = zext i16 %v36 to i32
  %v38 = shl nuw i32 %v37, 16
  %v39 = or i32 %v35, %v38
  %v40 = bitcast i32 %v39 to float
  ret float %v40
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.value(metadata, metadata, metadata) #4

attributes #0 = { "target-cpu"="generic" }
attributes #1 = { nounwind willreturn }
attributes #2 = { noinline "target-cpu"="generic" }
attributes #3 = { nounwind readnone "target-cpu"="generic" "target-features" }
attributes #4 = { nounwind readnone speculatable willreturn }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "TVM", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2)
!1 = !DIFile(filename: "main.tir", directory: ".")
!2 = !{}
!3 = !{i32 2, !"tvm_target", !"llvm -mtriple=x86_64-pc-linux-gnu"}
!4 = !{i32 4, !"Debug Info Version", i32 3}
!5 = distinct !DISubprogram(name: "main.tir", scope: !1, file: !1, type: !6, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !11)
!6 = !DISubroutineType(types: !7)
!7 = !{!8, !9, !10, !8, !9, !10, !9}
!8 = !DIBasicType(name: "int32", size: 32, encoding: DW_ATE_signed)
!9 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null)
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8)
!11 = !{!12, !13, !14, !15, !16, !17}
!12 = !DILocalVariable(name: "arg1", arg: 1, scope: !5, file: !1, type: !9)
!13 = !DILocalVariable(name: "arg2", arg: 2, scope: !5, file: !1, type: !10)
!14 = !DILocalVariable(name: "arg3", arg: 3, scope: !5, file: !1, type: !8)
!15 = !DILocalVariable(name: "arg4", arg: 4, scope: !5, file: !1, type: !9)
!16 = !DILocalVariable(name: "arg5", arg: 5, scope: !5, file: !1, type: !10)
!17 = !DILocalVariable(name: "arg6", arg: 6, scope: !5, file: !1, type: !9)
!18 = !DILocation(line: 0, scope: !5)
!19 = !{!"branch_weights", i32 1048576, i32 1}
!20 = !{!21, !21, i64 0}
!21 = !{!"ctx_ptr", !22, i64 0}
!22 = !{!"tvm-tbaa"}
!23 = !{!24, !24, i64 0}
!24 = !{!"0x467ae10.w4.b0", !25, i64 0}
!25 = !{!"0x467ae10.w8.b0", !26, i64 0}
!26 = !{!"0x467ae10.w16.b0", !27, i64 0}
!27 = !{!"0x467ae10.w32.b0", !28, i64 0}
!28 = !{!"0x467ae10.w64.b0", !29, i64 0}
!29 = !{!"0x467ae10.w128.b0", !30, i64 0}
!30 = !{!"0x467ae10.w256.b0", !31, i64 0}
!31 = !{!"0x467ae10.w512.b0", !32, i64 0}
!32 = !{!"0x467ae10.w1024.b0", !33, i64 0}
!33 = !{!"0x467ae10", !22, i64 0}
!34 = !{!35, !35, i64 0}
!35 = !{!"0x467ae10.w4.b4", !25, i64 0}
!36 = !{!37, !37, i64 0}
!37 = !{!"0x467ae10.w4.b8", !38, i64 0}
!38 = !{!"0x467ae10.w8.b8", !26, i64 0}
!39 = !{!40, !40, i64 0}
!40 = !{!"0x467ae10.w4.b12", !38, i64 0}
!41 = !{!42, !42, i64 0}
!42 = !{!"0x467ae10.w4.b16", !43, i64 0}
!43 = !{!"0x467ae10.w8.b16", !44, i64 0}
!44 = !{!"0x467ae10.w16.b16", !27, i64 0}
!45 = !{!46, !46, i64 0}
!46 = !{!"0x465e6c0.w8.b0", !47, i64 0}
!47 = !{!"0x465e6c0.w16.b0", !48, i64 0}
!48 = !{!"0x465e6c0.w32.b0", !49, i64 0}
!49 = !{!"0x465e6c0.w64.b0", !50, i64 0}
!50 = !{!"0x465e6c0.w128.b0", !51, i64 0}
!51 = !{!"0x465e6c0.w256.b0", !52, i64 0}
!52 = !{!"0x465e6c0.w512.b0", !53, i64 0}
!53 = !{!"0x465e6c0.w1024.b0", !54, i64 0}
!54 = !{!"0x465e6c0", !22, i64 0}
!55 = !{!56, !56, i64 0}
!56 = !{!"0x465e6c0.w8.b8", !47, i64 0}
!57 = !{!58, !58, i64 0}
!58 = !{!"0x465e6c0.w8.b16", !59, i64 0}
!59 = !{!"0x465e6c0.w16.b16", !48, i64 0}
!60 = !{!"branch_weights", i32 1, i32 1048576}
!61 = !{!62, !62, i64 0}
!62 = !{!"0x463d5b0.w8.b0", !63, i64 0}
!63 = !{!"0x463d5b0.w16.b0", !64, i64 0}
!64 = !{!"0x463d5b0.w32.b0", !65, i64 0}
!65 = !{!"0x463d5b0.w64.b0", !66, i64 0}
!66 = !{!"0x463d5b0.w128.b0", !67, i64 0}
!67 = !{!"0x463d5b0.w256.b0", !68, i64 0}
!68 = !{!"0x463d5b0.w512.b0", !69, i64 0}
!69 = !{!"0x463d5b0.w1024.b0", !70, i64 0}
!70 = !{!"0x463d5b0", !22, i64 0}
!71 = !{!72, !72, i64 0}
!72 = !{!"0x463d5b0.w8.b8", !63, i64 0}
!73 = !{!74, !74, i64 0}
!74 = !{!"0x3f1c630.w8.b0", !75, i64 0}
!75 = !{!"0x3f1c630.w16.b0", !76, i64 0}
!76 = !{!"0x3f1c630.w32.b0", !77, i64 0}
!77 = !{!"0x3f1c630.w64.b0", !78, i64 0}
!78 = !{!"0x3f1c630.w128.b0", !79, i64 0}
!79 = !{!"0x3f1c630.w256.b0", !80, i64 0}
!80 = !{!"0x3f1c630.w512.b0", !81, i64 0}
!81 = !{!"0x3f1c630.w1024.b0", !82, i64 0}
!82 = !{!"0x3f1c630", !22, i64 0}
!83 = !{!84, !84, i64 0}
!84 = !{!"0x3f1c630.w8.b8", !75, i64 0}
!85 = !{!86, !86, i64 0}
!86 = !{!"0x3f1c630.w8.b16", !87, i64 0}
!87 = !{!"0x3f1c630.w16.b16", !76, i64 0}
!88 = !{!89, !89, i64 0}
!89 = !{!"0x44107c0.w8.b0", !90, i64 0}
!90 = !{!"0x44107c0.w16.b0", !91, i64 0}
!91 = !{!"0x44107c0.w32.b0", !92, i64 0}
!92 = !{!"0x44107c0.w64.b0", !93, i64 0}
!93 = !{!"0x44107c0.w128.b0", !94, i64 0}
!94 = !{!"0x44107c0.w256.b0", !95, i64 0}
!95 = !{!"0x44107c0.w512.b0", !96, i64 0}
!96 = !{!"0x44107c0.w1024.b0", !97, i64 0}
!97 = !{!"0x44107c0", !22, i64 0}
!98 = !{!99, !99, i64 0}
!99 = !{!"0x44107c0.w8.b8", !90, i64 0}
!100 = !{!101, !101, i64 0}
!101 = !{!"0x402e1e0.w8.b0", !102, i64 0}
!102 = !{!"0x402e1e0.w16.b0", !103, i64 0}
!103 = !{!"0x402e1e0.w32.b0", !104, i64 0}
!104 = !{!"0x402e1e0.w64.b0", !105, i64 0}
!105 = !{!"0x402e1e0.w128.b0", !106, i64 0}
!106 = !{!"0x402e1e0.w256.b0", !107, i64 0}
!107 = !{!"0x402e1e0.w512.b0", !108, i64 0}
!108 = !{!"0x402e1e0.w1024.b0", !109, i64 0}
!109 = !{!"0x402e1e0", !22, i64 0}
!110 = !{!111, !111, i64 0}
!111 = !{!"0x402e1e0.w8.b8", !102, i64 0}
!112 = !{!113, !113, i64 0}
!113 = !{!"0x402e1e0.w8.b16", !114, i64 0}
!114 = !{!"0x402e1e0.w16.b16", !103, i64 0}
!115 = !{!116, !116, i64 0}
!116 = !{!"0x4479490.w8.b0", !117, i64 0}
!117 = !{!"0x4479490.w16.b0", !118, i64 0}
!118 = !{!"0x4479490.w32.b0", !119, i64 0}
!119 = !{!"0x4479490.w64.b0", !120, i64 0}
!120 = !{!"0x4479490.w128.b0", !121, i64 0}
!121 = !{!"0x4479490.w256.b0", !122, i64 0}
!122 = !{!"0x4479490.w512.b0", !123, i64 0}
!123 = !{!"0x4479490.w1024.b0", !124, i64 0}
!124 = !{!"0x4479490", !22, i64 0}
!125 = !{!126, !126, i64 0}
!126 = !{!"0x4479490.w8.b8", !117, i64 0}
!127 = !{!128, !128, i64 0}
!128 = !{!"0x45eab10.w8.b0", !129, i64 0}
!129 = !{!"0x45eab10.w16.b0", !130, i64 0}
!130 = !{!"0x45eab10.w32.b0", !131, i64 0}
!131 = !{!"0x45eab10.w64.b0", !132, i64 0}
!132 = !{!"0x45eab10.w128.b0", !133, i64 0}
!133 = !{!"0x45eab10.w256.b0", !134, i64 0}
!134 = !{!"0x45eab10.w512.b0", !135, i64 0}
!135 = !{!"0x45eab10.w1024.b0", !136, i64 0}
!136 = !{!"0x45eab10", !22, i64 0}
!137 = !{!138, !138, i64 0}
!138 = !{!"0x45eab10.w8.b8", !129, i64 0}
!139 = !{!140, !140, i64 0}
!140 = !{!"0x45eab10.w8.b16", !141, i64 0}
!141 = !{!"0x45eab10.w16.b16", !130, i64 0}
!142 = !{!143, !143, i64 0}
!143 = !{!"0x456f010.w8.b0", !144, i64 0}
!144 = !{!"0x456f010.w16.b0", !145, i64 0}
!145 = !{!"0x456f010.w32.b0", !146, i64 0}
!146 = !{!"0x456f010.w64.b0", !147, i64 0}
!147 = !{!"0x456f010.w128.b0", !148, i64 0}
!148 = !{!"0x456f010.w256.b0", !149, i64 0}
!149 = !{!"0x456f010.w512.b0", !150, i64 0}
!150 = !{!"0x456f010.w1024.b0", !151, i64 0}
!151 = !{!"0x456f010", !22, i64 0}
!152 = !{!153, !153, i64 0}
!153 = !{!"0x456f010.w8.b8", !144, i64 0}
!154 = !{!155, !155, i64 0}
!155 = !{!"0x406cb20.w8.b0", !156, i64 0}
!156 = !{!"0x406cb20.w16.b0", !157, i64 0}
!157 = !{!"0x406cb20.w32.b0", !158, i64 0}
!158 = !{!"0x406cb20.w64.b0", !159, i64 0}
!159 = !{!"0x406cb20.w128.b0", !160, i64 0}
!160 = !{!"0x406cb20.w256.b0", !161, i64 0}
!161 = !{!"0x406cb20.w512.b0", !162, i64 0}
!162 = !{!"0x406cb20.w1024.b0", !163, i64 0}
!163 = !{!"0x406cb20", !22, i64 0}
!164 = !{!165, !165, i64 0}
!165 = !{!"0x406cb20.w8.b8", !156, i64 0}
!166 = !{!167, !167, i64 0}
!167 = !{!"0x406cb20.w8.b16", !168, i64 0}
!168 = !{!"0x406cb20.w16.b16", !157, i64 0}
!169 = !{!170, !170, i64 0}
!170 = !{!"0x4b10b80.w8.b0", !171, i64 0}
!171 = !{!"0x4b10b80.w16.b0", !172, i64 0}
!172 = !{!"0x4b10b80.w32.b0", !173, i64 0}
!173 = !{!"0x4b10b80.w64.b0", !174, i64 0}
!174 = !{!"0x4b10b80.w128.b0", !175, i64 0}
!175 = !{!"0x4b10b80.w256.b0", !176, i64 0}
!176 = !{!"0x4b10b80.w512.b0", !177, i64 0}
!177 = !{!"0x4b10b80.w1024.b0", !178, i64 0}
!178 = !{!"0x4b10b80", !22, i64 0}
!179 = !{!180, !180, i64 0}
!180 = !{!"0x4b10b80.w8.b8", !171, i64 0}
!181 = !{!182, !182, i64 0}
!182 = !{!"0x42a0d00.w16.b0", !183, i64 0}
!183 = !{!"0x42a0d00.w32.b0", !184, i64 0}
!184 = !{!"0x42a0d00.w64.b0", !185, i64 0}
!185 = !{!"0x42a0d00.w128.b0", !186, i64 0}
!186 = !{!"0x42a0d00.w256.b0", !187, i64 0}
!187 = !{!"0x42a0d00.w512.b0", !188, i64 0}
!188 = !{!"0x42a0d00.w1024.b0", !189, i64 0}
!189 = !{!"0x42a0d00", !22, i64 0}
!190 = !{!191, !191, i64 0}
!191 = !{!"0x42a0d00.w4.b16", !192, i64 0}
!192 = !{!"0x42a0d00.w8.b16", !193, i64 0}
!193 = !{!"0x42a0d00.w16.b16", !183, i64 0}
