# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(data: T.Buffer((17, 16, 20), "float32"), pool_max: T.Buffer((17, 16, 10), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        for ax0 in T.parallel(17):
            pad_temp = T.allocate([21], "float32", "global")
            for ax1 in range(16):
                pad_temp_1 = T.Buffer((21,), data=pad_temp)
                for ax2 in range(21):
                    data_1 = T.Buffer((5440,), data=data.data)
                    pad_temp_1[ax2] = T.if_then_else(1 <= ax2, data_1[ax0 * 320 + ax1 * 20 + ax2 - 1], T.float32(-3.4028234663852886e+38))
                for ax2 in range(10):
                    pool_max_1 = T.Buffer((2720,), data=pool_max.data)
                    pool_max_1[ax0 * 160 + ax1 * 10 + ax2] = T.float32(-3.4028234663852886e+38)
                    for rv0 in range(3):
                        cse_var_1: T.int32 = ax0 * 160 + ax1 * 10 + ax2
                        pool_max_1[cse_var_1] = T.max(pool_max_1[cse_var_1], pad_temp_1[ax2 * 2 + rv0])