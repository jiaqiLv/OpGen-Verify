# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(data: T.Buffer((12, 16, 13, 4), "float32"), Scale: T.Buffer((16,), "float32"), Shift: T.Buffer((16,), "float32"), ScaleShift: T.Buffer((12, 16, 13, 4), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        for b_outer_outer_outer_c_outer_outer_outer_fused_i_outer_outer_outer_fused_j_outer_outer_outer_fused_b_outer_outer_inner_fused_c_outer_outer_inner_fused in T.parallel(416):
            for j_outer_outer_inner, b_outer_inner, b_inner in T.grid(2, 3, 4):
                cse_var_4: T.int32 = b_outer_outer_outer_c_outer_outer_outer_fused_i_outer_outer_outer_fused_j_outer_outer_outer_fused_b_outer_outer_inner_fused_c_outer_outer_inner_fused // 208
                cse_var_3: T.int32 = b_outer_outer_outer_c_outer_outer_outer_fused_i_outer_outer_outer_fused_j_outer_outer_outer_fused_b_outer_outer_inner_fused_c_outer_outer_inner_fused % 8
                cse_var_2: T.int32 = cse_var_4 * 8 + cse_var_3
                cse_var_1: T.int32 = b_outer_inner * 3328 + b_inner * 832 + cse_var_4 * 416 + cse_var_3 * 52 + b_outer_outer_outer_c_outer_outer_outer_fused_i_outer_outer_outer_fused_j_outer_outer_outer_fused_b_outer_outer_inner_fused_c_outer_outer_inner_fused % 208 // 8 * 2 + j_outer_outer_inner
                ScaleShift_1 = T.Buffer((9984,), data=ScaleShift.data)
                data_1 = T.Buffer((9984,), data=data.data)
                ScaleShift_1[cse_var_1] = data_1[cse_var_1] * Scale[cse_var_2] + Shift[cse_var_2]