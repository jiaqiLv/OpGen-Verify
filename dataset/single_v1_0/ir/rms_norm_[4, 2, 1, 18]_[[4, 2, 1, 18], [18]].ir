# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(data: T.Buffer((4, 2, 1, 18), "float32"), weight: T.Buffer((18,), "float32"), T_cast: T.Buffer((4, 2, 1, 18), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        for ax0_ax1_fused_ax2_fused in T.parallel(8):
            T_multiply_red = T.allocate([18], "float32", "global")
            T_multiply_red_1 = T.Buffer((18,), data=T_multiply_red)
            data_1 = T.Buffer((144,), data=data.data)
            for ax2 in range(18):
                T_multiply_red_1[ax2] = T.float32(0)
                for k1 in range(2):
                    cse_var_1: T.int32 = ax0_ax1_fused_ax2_fused // 2 * 36 + k1 * 18 + ax2
                    T_multiply_red_1[ax2] = T_multiply_red_1[ax2] + data_1[cse_var_1] * data_1[cse_var_1]
            for ax3 in range(18):
                cse_var_2: T.int32 = ax0_ax1_fused_ax2_fused * 18 + ax3
                T_cast_1 = T.Buffer((144,), data=T_cast.data)
                T_cast_1[cse_var_2] = data_1[cse_var_2] * weight[ax0_ax1_fused_ax2_fused % 2] * T.rsqrt(T_multiply_red_1[ax3] * T.float32(0.5) + T.float32(1.0000000000000001e-05))