# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(data: T.Buffer((12, 18, 1, 20), "float32"), T_strided_slice: T.Buffer((3, 36, 2, 20), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        for ax0_ax1_fused_ax2_fused in T.parallel(216):
            T_reshape = T.allocate([20], "float32", "global")
            cse_var_1 = T.int32()
            if T.Let(T.likely(0 <= cse_var_1 // 2 - cse_var_1 // 4 * 2), where={cse_var_1: ax0_ax1_fused_ax2_fused % 72}):
                T_reshape_1 = T.Buffer((20,), data=T_reshape)
                data_1 = T.Buffer((4320,), data=data.data)
                for ax5 in range(20):
                    T_reshape_1[ax5] = data_1[ax0_ax1_fused_ax2_fused % 4 * 1080 + ax0_ax1_fused_ax2_fused // 4 * 20 + ax5]
            for ax3 in range(20):
                T_strided_slice_1 = T.Buffer((4320,), data=T_strided_slice.data)
                T_reshape_1 = T.Buffer((20,), data=T_reshape)
                T_strided_slice_1[ax0_ax1_fused_ax2_fused * 20 + ax3] = T_reshape_1[ax3]