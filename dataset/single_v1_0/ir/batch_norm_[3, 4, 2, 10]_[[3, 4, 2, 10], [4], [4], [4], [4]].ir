# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(data: T.Buffer((3, 4, 2, 10), "float32"), gamma: T.Buffer((4,), "float32"), beta: T.Buffer((4,), "float32"), moving_mean: T.Buffer((4,), "float32"), moving_var: T.Buffer((4,), "float32"), T_divide: T.Buffer((3, 4, 2, 10), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        for ax0_ax1_fused in T.parallel(12):
            T_reshape = T.allocate([1], "float32", "global")
            T_reshape_1 = T.allocate([1], "float32", "global")
            T_reshape_2 = T.Buffer((1,), data=T_reshape, align=4)
            T_reshape_2[0] = moving_var[ax0_ax1_fused % 4]
            for ax2 in range(2):
                T_reshape_3 = T.Buffer((1,), data=T_reshape_1, align=4)
                T_reshape_3[0] = moving_mean[ax0_ax1_fused % 4]
                for ax3 in range(10):
                    cse_var_1: T.int32 = ax0_ax1_fused * 20 + ax2 * 10 + ax3
                    T_divide_1 = T.Buffer((240,), data=T_divide.data)
                    data_1 = T.Buffer((240,), data=data.data)
                    T_divide_1[cse_var_1] = (data_1[cse_var_1] - T_reshape_3[0]) / T.sqrt(T_reshape_2[0] + T.float32(1.0000000000000001e-05))