# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(data: T.Buffer((12, 10, 13, 9), "float32"), T_divide: T.Buffer((12, 10, 13, 9), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        for ax0_ax1_fused_ax2_fused in T.parallel(1560):
            tensor = T.allocate([1], "float32", "global")
            for ax3 in range(9):
                cse_var_1: T.int32 = ax0_ax1_fused_ax2_fused * 9 + ax3
                tensor_1 = T.Buffer((1,), data=tensor, align=4)
                tensor_1[0] = T.float32(0)
                data_1 = T.Buffer((14040,), data=data.data)
                tensor_1[0] = tensor_1[0] + data_1[cse_var_1] * data_1[cse_var_1]
                T_divide_1 = T.Buffer((14040,), data=T_divide.data)
                T_divide_1[cse_var_1] = data_1[cse_var_1] / T.pow(T.float32(2) + T.float32(9.9999997473787516e-05) * tensor_1[0], T.float32(0.75))