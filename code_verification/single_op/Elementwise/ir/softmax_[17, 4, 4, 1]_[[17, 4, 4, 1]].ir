# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(data: T.Buffer((17, 4, 4, 1), "float32"), T_softmax_norm: T.Buffer((17, 4, 4, 1), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        for i0 in T.parallel(17):
            T_softmax_maxelem = T.allocate([4], "float32", "global")
            T_softmax_expsum = T.allocate([4], "float32", "global")
            for i1 in range(4):
                T_softmax_maxelem_1 = T.Buffer((4,), data=T_softmax_maxelem, align=16)
                data_1 = T.Buffer((272,), data=data.data)
                for i2 in range(4):
                    T_softmax_maxelem_1[i2] = T.float32(-3.4028234663852886e+38)
                    T_softmax_maxelem_1[i2] = T.max(T_softmax_maxelem_1[i2], data_1[i0 * 16 + i1 * 4 + i2])
                T_softmax_maxelem_2 = T.Buffer((4,), data=T_softmax_maxelem, align=16)
                for i2 in range(4):
                    T_softmax_maxelem_2[i2] = T.exp(data_1[i0 * 16 + i1 * 4 + i2] - T_softmax_maxelem_1[i2])
                T_softmax_expsum_1 = T.Buffer((4,), data=T_softmax_expsum, align=16)
                for i2 in range(4):
                    T_softmax_expsum_1[i2] = T.float32(0)
                    T_softmax_expsum_1[i2] = T_softmax_expsum_1[i2] + T_softmax_maxelem_2[i2]
                for i2 in range(4):
                    T_softmax_norm_1 = T.Buffer((272,), data=T_softmax_norm.data)
                    T_softmax_norm_1[i0 * 16 + i1 * 4 + i2] = T_softmax_maxelem_2[i2] / T_softmax_expsum_1[i2]