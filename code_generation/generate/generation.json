[
    {
        "op_name": "topology_expansion",
        "c_code": "void default_function_kernel(float* compute_10, float* compute_12, float* compute_14, float* compute_6, float* ph_0, float* ph_3) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 3496; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 98; ++i2) {\n      compute_6[((i0_i1_fused * 98) + i2)] = acoshf(ph_0[((i0_i1_fused * 98) + i2)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 342608; ++i0_i1_fused_i2_fused) {\n    compute_10[i0_i1_fused_i2_fused] = acoshf(cosf(ph_0[i0_i1_fused_i2_fused]));\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_1 = 0; i0_i1_fused_1 < 3496; ++i0_i1_fused_1) {\n    for (int32_t i2_1 = 0; i2_1 < 98; ++i2_1) {\n      compute_12[((i0_i1_fused_1 * 98) + i2_1)] = ceilf(cosf(ph_0[((i0_i1_fused_1 * 98) + i2_1)]));\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 342608; ++i0_i1_fused_i2_fused_1) {\n    compute_14[i0_i1_fused_i2_fused_1] = fabsf((ph_0[i0_i1_fused_i2_fused_1] - ph_3[i0_i1_fused_i2_fused_1]));\n  }\n}\n\n",
        "cuda_code": "extern \"C\" __global__ void __launch_bounds__(32) default_function_kernel(float* __restrict__ compute_6, float* __restrict__ ph_0) {\n  if (((((int)blockIdx.x) * 16) + (((int)threadIdx.x) >> 1)) < 114985) {\n    compute_6[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))] = acoshf(ph_0[((((int)blockIdx.x) * 32) + ((int)threadIdx.x))]);\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(64) default_function_kernel_1(float* __restrict__ compute_10, float* __restrict__ ph_0) {\n  if (((((int)blockIdx.x) * 32) + (((int)threadIdx.x) >> 1)) < 114985) {\n    compute_10[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))] = acoshf(__cosf(ph_0[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))]));\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(64) default_function_kernel_3(float* __restrict__ compute_14, float* __restrict__ ph_0, float* __restrict__ ph_3) {\n  if (((((int)blockIdx.x) * 32) + (((int)threadIdx.x) >> 1)) < 114985) {\n    compute_14[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))] = fabsf((ph_0[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))] - ph_3[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))]));\n  }\n}\n\nextern \"C\" __global__ void __launch_bounds__(64) default_function_kernel_2(float* __restrict__ compute_12, float* __restrict__ ph_0) {\n  if (((((int)blockIdx.x) * 32) + (((int)threadIdx.x) >> 1)) < 114985) {\n    compute_12[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))] = ceilf(__cosf(ph_0[((((int)blockIdx.x) * 64) + ((int)threadIdx.x))]));\n  }\n}\n\n",
        "ir_code": "# from tvm.script import ir as I\n# from tvm.script import tir as T\n\n@I.ir_module\nclass Module:\n    @T.prim_func\n    def main(ph_0: T.Buffer((76, 46, 98), \"float32\"), ph_3: T.Buffer((76, 46, 98), \"float32\"), compute_6: T.Buffer((76, 46, 98), \"float32\"), compute_10: T.Buffer((76, 46, 98), \"float32\"), compute_12: T.Buffer((76, 46, 98), \"float32\"), compute_14: T.Buffer((76, 46, 98), \"float32\")):\n        T.func_attr({\"from_legacy_te_schedule\": T.bool(True), \"tir.noalias\": T.bool(True)})\n        ph_0_1 = T.Buffer((342608,), data=ph_0.data)\n        for i0_i1_fused in T.parallel(3496):\n            for i2 in range(98):\n                cse_var_1: T.int32 = i0_i1_fused * 98 + i2\n                compute_6_1 = T.Buffer((342608,), data=compute_6.data)\n                compute_6_1[cse_var_1] = T.acosh(ph_0_1[cse_var_1])\n        for i0_i1_fused_i2_fused in T.parallel(342608):\n            compute_10_1 = T.Buffer((342608,), data=compute_10.data)\n            compute_10_1[i0_i1_fused_i2_fused] = T.acosh(T.cos(ph_0_1[i0_i1_fused_i2_fused]))\n        for i0_i1_fused in T.parallel(3496):\n            for i2 in range(98):\n                cse_var_2: T.int32 = i0_i1_fused * 98 + i2\n                compute_12_1 = T.Buffer((342608,), data=compute_12.data)\n                compute_12_1[cse_var_2] = T.ceil(T.cos(ph_0_1[cse_var_2]))\n        for i0_i1_fused_i2_fused in T.parallel(342608):\n            compute_14_1 = T.Buffer((342608,), data=compute_14.data)\n            ph_3_1 = T.Buffer((342608,), data=ph_3.data)\n            compute_14_1[i0_i1_fused_i2_fused] = T.fabs(ph_0_1[i0_i1_fused_i2_fused] - ph_3_1[i0_i1_fused_i2_fused])",
        "op_args": [
            [
                "subtract",
                "acosh",
                "cos",
                "acosh",
                "ceil",
                "abs"
            ]
        ],
        "input_shape": [[76, 46, 98], [76, 46, 98]],
        "output_shape": [[76, 46, 98], [76, 46, 98], [76, 46, 98], [76, 46, 98]],
        "input_name": [
            "ph_0",
            "ph_3"
        ],
        "output_name": [
            "compute_6",
            "compute_10",
            "compute_12",
            "compute_14"
        ],
        "deepseek_c": "void default_function_kernel(float* compute_20, float* compute_12, float* compute_14, float* compute_6, float* ph_0, float* ph_3) {\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused = 0; i0_i1_fused < 3496; ++i0_i1_fused) {\n    for (int32_t i2 = 0; i2 < 98; ++i2) {\n      compute_6[((i0_i1_fused * 98) + i2)] = acoshf(ph_0[((i0_i1_fused * 98) + i2)]);\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 342608; ++i0_i1_fused_i2_fused) {\n    compute_20[i0_i1_fused_i2_fused] = acoshf(cosf(ph_0[i0_i1_fused_i2_fused]));\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_1 = 0; i0_i1_fused_1 < 3496; ++i0_i1_fused_1) {\n    for (int32_t i2_1 = 0; i2_1 < 98; ++i2_1) {\n      compute_12[((i0_i1_fused_1 * 98) + i2_1)] = ceilf(cosf(ph_0[((i0_i1_fused_1 * 98) + i2_1)]));\n    }\n  }\n  #pragma omp parallel for\n  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 342608; ++i0_i1_fused_i2_fused_1) {\n    compute_14[i0_i1_fused_i2_fused_1] = fabsf((ph_0[i0_i1_fused_i2_fused_1] - ph_3[i0_i1_fused_i2_fused_1]));\n  }\n}\n\n"
    }
]