; ModuleID = 'TVMMod'
source_filename = "TVMMod"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%0 = type { double }
%1 = type { i8*, %2, i32, %3, i64*, i64*, i64 }
%2 = type { i32, i32 }
%3 = type { i8, i8, i16 }

@__tvm_module_ctx = linkonce dllexport local_unnamed_addr global i8* null, align 8
@__TVMFuncCall = linkonce dllexport local_unnamed_addr global i32 (i8*, %0*, i32*, i32, %0*, i32*)* null, align 8
@__TVMBackendGetFuncFromEnv = linkonce dllexport local_unnamed_addr global i32 (i8*, i8*, i8**)* null, align 8
@__TVMAPISetLastError = linkonce dllexport local_unnamed_addr global void (i8*)* null, align 8
@.str = private constant [67 x i8] c"Assert fail: num_args == 4, default_function: num_args should be 4\00", align 1
@.str.1 = private constant [130 x i8] c"Assert fail: ph_0_code == 3 or ph_0_code == 13 or ph_0_code == 7 or ph_0_code == 4, default_function: Expect arg[0] to be pointer\00", align 1
@.str.2 = private constant [142 x i8] c"Assert fail: compute_code == 3 or compute_code == 13 or compute_code == 7 or compute_code == 4, default_function: Expect arg[1] to be pointer\00", align 1
@.str.3 = private constant [154 x i8] c"Assert fail: T_multiply_code == 3 or T_multiply_code == 13 or T_multiply_code == 7 or T_multiply_code == 4, default_function: Expect arg[2] to be pointer\00", align 1
@.str.4 = private constant [142 x i8] c"Assert fail: compute_code == 3 or compute_code == 13 or compute_code == 7 or compute_code == 4, default_function: Expect arg[3] to be pointer\00", align 1
@.str.5 = private constant [107 x i8] c"Assert fail: 3 == T.tvm_struct_get(ph_0, 0, 4, \22int32\22), default_function.ph_0.ndim is expected to equal 3\00", align 1
@.str.6 = private constant [235 x i8] c"Assert fail: T.tvm_struct_get(ph_0, 0, 5, \22uint8\22) == T.uint8(2) and T.tvm_struct_get(ph_0, 0, 6, \22uint8\22) == T.uint8(32) and T.tvm_struct_get(ph_0, 0, 7, \22uint16\22) == T.uint16(1), default_function.ph_0.dtype is expected to be float32\00", align 1
@.str.7 = private constant [191 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_0_shape[0]) == 1, Argument default_function.ph_0.shape[0] has an unsatisfied constraint: 1 == T.Cast(\22int32\22, default_function_ph_0_shape[0])\00", align 1
@.str.8 = private constant [193 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_0_shape[1]) == 13, Argument default_function.ph_0.shape[1] has an unsatisfied constraint: 13 == T.Cast(\22int32\22, default_function_ph_0_shape[1])\00", align 1
@.str.9 = private constant [191 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_0_shape[2]) == 4, Argument default_function.ph_0.shape[2] has an unsatisfied constraint: 4 == T.Cast(\22int32\22, default_function_ph_0_shape[2])\00", align 1
@.str.10 = private constant [188 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_ph_0_strides[2]) and 4 == T.Cast(\22int32\22, default_function_ph_0_strides[1]), default_function.ph_0.strides: expected to be compact array\00", align 1
@.str.11 = private constant [196 x i8] c"Assert fail: T.uint64(0) == T.tvm_struct_get(ph_0, 0, 8, \22uint64\22), Argument default_function.ph_0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(ph_0, 0, 8, \22uint64\22)\00", align 1
@.str.12 = private constant [176 x i8] c"Assert fail: T.tvm_struct_get(ph_0, 0, 10, \22int32\22) == 1, Argument default_function.ph_0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(ph_0, 0, 10, \22int32\22)\00", align 1
@.str.13 = private constant [113 x i8] c"Assert fail: 3 == T.tvm_struct_get(compute, 0, 4, \22int32\22), default_function.compute.ndim is expected to equal 3\00", align 1
@.str.14 = private constant [247 x i8] c"Assert fail: T.tvm_struct_get(compute, 0, 5, \22uint8\22) == T.uint8(2) and T.tvm_struct_get(compute, 0, 6, \22uint8\22) == T.uint8(32) and T.tvm_struct_get(compute, 0, 7, \22uint16\22) == T.uint16(1), default_function.compute.dtype is expected to be float32\00", align 1
@.str.15 = private constant [200 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_compute_shape[0]) == 1, Argument default_function.compute.shape[0] has an unsatisfied constraint: 1 == T.Cast(\22int32\22, default_function_compute_shape[0])\00", align 1
@.str.16 = private constant [202 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_compute_shape[1]) == 13, Argument default_function.compute.shape[1] has an unsatisfied constraint: 13 == T.Cast(\22int32\22, default_function_compute_shape[1])\00", align 1
@.str.17 = private constant [200 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_compute_shape[2]) == 4, Argument default_function.compute.shape[2] has an unsatisfied constraint: 4 == T.Cast(\22int32\22, default_function_compute_shape[2])\00", align 1
@.str.18 = private constant [197 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_compute_strides[2]) and 4 == T.Cast(\22int32\22, default_function_compute_strides[1]), default_function.compute.strides: expected to be compact array\00", align 1
@.str.19 = private constant [205 x i8] c"Assert fail: T.uint64(0) == T.tvm_struct_get(compute, 0, 8, \22uint64\22), Argument default_function.compute.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(compute, 0, 8, \22uint64\22)\00", align 1
@.str.20 = private constant [185 x i8] c"Assert fail: T.tvm_struct_get(compute, 0, 10, \22int32\22) == 1, Argument default_function.compute.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(compute, 0, 10, \22int32\22)\00", align 1
@.str.21 = private constant [191 x i8] c"Assert fail: dev_id == T.tvm_struct_get(compute, 0, 9, \22int32\22), Argument default_function.compute.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(compute, 0, 9, \22int32\22)\00", align 1
@.str.22 = private constant [119 x i8] c"Assert fail: 3 == T.tvm_struct_get(T_multiply, 0, 4, \22int32\22), default_function.T_multiply.ndim is expected to equal 3\00", align 1
@.str.23 = private constant [259 x i8] c"Assert fail: T.tvm_struct_get(T_multiply, 0, 5, \22uint8\22) == T.uint8(2) and T.tvm_struct_get(T_multiply, 0, 6, \22uint8\22) == T.uint8(32) and T.tvm_struct_get(T_multiply, 0, 7, \22uint16\22) == T.uint16(1), default_function.T_multiply.dtype is expected to be float32\00", align 1
@.str.24 = private constant [209 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_T_multiply_shape[0]) == 1, Argument default_function.T_multiply.shape[0] has an unsatisfied constraint: 1 == T.Cast(\22int32\22, default_function_T_multiply_shape[0])\00", align 1
@.str.25 = private constant [211 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_T_multiply_shape[1]) == 13, Argument default_function.T_multiply.shape[1] has an unsatisfied constraint: 13 == T.Cast(\22int32\22, default_function_T_multiply_shape[1])\00", align 1
@.str.26 = private constant [209 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_T_multiply_shape[2]) == 4, Argument default_function.T_multiply.shape[2] has an unsatisfied constraint: 4 == T.Cast(\22int32\22, default_function_T_multiply_shape[2])\00", align 1
@.str.27 = private constant [206 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_T_multiply_strides[2]) and 4 == T.Cast(\22int32\22, default_function_T_multiply_strides[1]), default_function.T_multiply.strides: expected to be compact array\00", align 1
@.str.28 = private constant [214 x i8] c"Assert fail: T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, \22uint64\22), Argument default_function.T_multiply.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, \22uint64\22)\00", align 1
@.str.29 = private constant [194 x i8] c"Assert fail: T.tvm_struct_get(T_multiply, 0, 10, \22int32\22) == 1, Argument default_function.T_multiply.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_multiply, 0, 10, \22int32\22)\00", align 1
@.str.30 = private constant [200 x i8] c"Assert fail: dev_id == T.tvm_struct_get(T_multiply, 0, 9, \22int32\22), Argument default_function.T_multiply.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_multiply, 0, 9, \22int32\22)\00", align 1
@.tvm_func.default_function_kernel = internal unnamed_addr global i8* null, align 8
@.str.31 = private constant [24 x i8] c"default_function_kernel\00", align 1
@.str.32 = private constant [68 x i8] c"Assert fail: kernel_error_code == 0, Error executing compute kernel\00", align 1
@__tvm_main__ = weak dllexport local_unnamed_addr constant [17 x i8] c"default_function\00", align 1
@llvm.global_ctors = appending global [0 x { i32, void ()*, i8* }] zeroinitializer

define dllexport i32 @default_function(i8* noalias nocapture readonly %args, i32* noalias nocapture readonly %arg_type_ids, i32 %num_args, i8* noalias nocapture readnone %out_ret_value, i32* noalias nocapture readnone %out_ret_tcode, i8* noalias nocapture readnone %resource_handle) local_unnamed_addr #0 !dbg !5 {
entry:
  call void @llvm.dbg.value(metadata i8* %args, metadata !12, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i32* %arg_type_ids, metadata !13, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i32 %num_args, metadata !14, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i8* %out_ret_value, metadata !15, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i32* %out_ret_tcode, metadata !16, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i8* %resource_handle, metadata !17, metadata !DIExpression()), !dbg !18
  %stack_value_void_ptr115 = alloca [5 x %0], align 8, !dbg !18
  %stack_tcode116 = alloca [5 x i32], align 4, !dbg !18
  %stack_tcode116.sub = getelementptr inbounds [5 x i32], [5 x i32]* %stack_tcode116, i64 0, i64 0
  %stack_value = bitcast [5 x %0]* %stack_value_void_ptr115 to i8*, !dbg !18
  %0 = icmp eq i32 %num_args, 4, !dbg !18
  br i1 %0, label %assert_end, label %assert_fail, !dbg !18, !prof !19

assert_fail:                                      ; preds = %entry
  %1 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %1(i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end:                                       ; preds = %entry
  %ph_0.code = load i32, i32* %arg_type_ids, align 4, !dbg !18, !tbaa !23
  %2 = getelementptr inbounds i32, i32* %arg_type_ids, i64 1, !dbg !18
  %compute.code = load i32, i32* %2, align 4, !dbg !18, !tbaa !34
  %3 = getelementptr inbounds i32, i32* %arg_type_ids, i64 2, !dbg !18
  %T_multiply.code = load i32, i32* %3, align 4, !dbg !18, !tbaa !36
  %4 = getelementptr inbounds i32, i32* %arg_type_ids, i64 3, !dbg !18
  %compute.code1 = load i32, i32* %4, align 4, !dbg !18, !tbaa !39
  %5 = bitcast i8* %args to %1**, !dbg !18
  %ph_0117 = load %1*, %1** %5, align 8, !dbg !18
  %6 = getelementptr inbounds i8, i8* %args, i64 8, !dbg !18
  %7 = bitcast i8* %6 to %1**, !dbg !18
  %compute118 = load %1*, %1** %7, align 8, !dbg !18
  %8 = getelementptr inbounds i8, i8* %args, i64 16, !dbg !18
  %9 = bitcast i8* %8 to %1**, !dbg !18
  %T_multiply119 = load %1*, %1** %9, align 8, !dbg !18
  %10 = getelementptr inbounds i8, i8* %args, i64 24, !dbg !18
  %11 = bitcast i8* %10 to %1**, !dbg !18
  %compute2120 = load %1*, %1** %11, align 8, !dbg !18
  %12 = bitcast %1* %ph_0117 to float**, !dbg !18
  %ph_0_void_ptr121 = load float*, float** %12, align 8, !dbg !18
  %ptrint = ptrtoint float* %ph_0_void_ptr121 to i64, !dbg !18
  %maskedptr = and i64 %ptrint, 63, !dbg !18
  %maskcond = icmp eq i64 %maskedptr, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond), !dbg !18
  %13 = getelementptr inbounds %1, %1* %ph_0117, i64 0, i32 4, !dbg !18
  %default_function.ph_0.shape = load i64*, i64** %13, align 8, !dbg !18
  %14 = getelementptr inbounds %1, %1* %ph_0117, i64 0, i32 5, !dbg !18
  %default_function.ph_0.strides = load i64*, i64** %14, align 8, !dbg !18
  %15 = getelementptr inbounds %1, %1* %ph_0117, i64 0, i32 1, i32 1, !dbg !18
  %dev_id = load i32, i32* %15, align 4, !dbg !18
  %16 = bitcast %1* %compute118 to float**, !dbg !18
  %compute_void_ptr122 = load float*, float** %16, align 8, !dbg !18
  %ptrint5 = ptrtoint float* %compute_void_ptr122 to i64, !dbg !18
  %maskedptr6 = and i64 %ptrint5, 63, !dbg !18
  %maskcond7 = icmp eq i64 %maskedptr6, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond7), !dbg !18
  %17 = getelementptr inbounds %1, %1* %compute118, i64 0, i32 4, !dbg !18
  %default_function.compute.shape = load i64*, i64** %17, align 8, !dbg !18
  %18 = getelementptr inbounds %1, %1* %compute118, i64 0, i32 5, !dbg !18
  %default_function.compute.strides = load i64*, i64** %18, align 8, !dbg !18
  %19 = bitcast %1* %T_multiply119 to float**, !dbg !18
  %T_multiply_void_ptr123 = load float*, float** %19, align 8, !dbg !18
  %ptrint9 = ptrtoint float* %T_multiply_void_ptr123 to i64, !dbg !18
  %maskedptr10 = and i64 %ptrint9, 63, !dbg !18
  %maskcond11 = icmp eq i64 %maskedptr10, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond11), !dbg !18
  %20 = getelementptr inbounds %1, %1* %T_multiply119, i64 0, i32 4, !dbg !18
  %default_function.T_multiply.shape = load i64*, i64** %20, align 8, !dbg !18
  %21 = getelementptr inbounds %1, %1* %T_multiply119, i64 0, i32 5, !dbg !18
  %default_function.T_multiply.strides = load i64*, i64** %21, align 8, !dbg !18
  %22 = bitcast %1* %compute2120 to float**, !dbg !18
  %compute_void_ptr12124 = load float*, float** %22, align 8, !dbg !18
  %ptrint14 = ptrtoint float* %compute_void_ptr12124 to i64, !dbg !18
  %maskedptr15 = and i64 %ptrint14, 63, !dbg !18
  %maskcond16 = icmp eq i64 %maskedptr15, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond16), !dbg !18
  %23 = getelementptr inbounds %1, %1* %compute2120, i64 0, i32 4, !dbg !18
  %default_function.compute.shape17 = load i64*, i64** %23, align 8, !dbg !18
  %24 = getelementptr inbounds %1, %1* %compute2120, i64 0, i32 5, !dbg !18
  %default_function.compute.strides18 = load i64*, i64** %24, align 8, !dbg !18
  switch i32 %ph_0.code, label %assert_fail19 [
    i32 13, label %assert_end20
    i32 7, label %assert_end20
    i32 4, label %assert_end20
    i32 3, label %assert_end20
  ], !dbg !18

assert_fail19:                                    ; preds = %assert_end
  %25 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %25(i8* getelementptr inbounds ([130 x i8], [130 x i8]* @.str.1, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end20:                                     ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  switch i32 %compute.code, label %assert_fail21 [
    i32 13, label %assert_end22
    i32 7, label %assert_end22
    i32 4, label %assert_end22
    i32 3, label %assert_end22
  ], !dbg !18

assert_fail21:                                    ; preds = %assert_end20
  %26 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %26(i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.2, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end22:                                     ; preds = %assert_end20, %assert_end20, %assert_end20, %assert_end20
  switch i32 %T_multiply.code, label %assert_fail23 [
    i32 13, label %assert_end24
    i32 7, label %assert_end24
    i32 4, label %assert_end24
    i32 3, label %assert_end24
  ], !dbg !18

assert_fail23:                                    ; preds = %assert_end22
  %27 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %27(i8* getelementptr inbounds ([154 x i8], [154 x i8]* @.str.3, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end24:                                     ; preds = %assert_end22, %assert_end22, %assert_end22, %assert_end22
  switch i32 %compute.code1, label %assert_fail25 [
    i32 13, label %assert_end26
    i32 7, label %assert_end26
    i32 4, label %assert_end26
    i32 3, label %assert_end26
  ], !dbg !18

assert_fail25:                                    ; preds = %assert_end24
  %28 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %28(i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.4, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end26:                                     ; preds = %assert_end24, %assert_end24, %assert_end24, %assert_end24
  %29 = getelementptr inbounds %1, %1* %ph_0117, i64 0, i32 2, !dbg !18
  %30 = load i32, i32* %29, align 4, !dbg !18
  %31 = icmp eq i32 %30, 3, !dbg !18
  br i1 %31, label %assert_end30, label %assert_fail27, !dbg !18, !prof !19

assert_fail27:                                    ; preds = %assert_end26
  %32 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %32(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.5, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end30:                                     ; preds = %assert_end26
  %33 = getelementptr inbounds %1, %1* %ph_0117, i64 0, i32 3, i32 2, !dbg !18
  %34 = load i16, i16* %33, align 2, !dbg !18
  %35 = icmp eq i16 %34, 1, !dbg !18
  %36 = getelementptr inbounds %1, %1* %ph_0117, i64 0, i32 3, i32 1, !dbg !18
  %37 = load i8, i8* %36, align 1, !dbg !18
  %38 = icmp eq i8 %37, 32, !dbg !18
  %39 = getelementptr inbounds %1, %1* %ph_0117, i64 0, i32 3, i32 0, !dbg !18
  %40 = load i8, i8* %39, align 1, !dbg !18
  %41 = icmp eq i8 %40, 2, !dbg !18
  %42 = and i1 %38, %41, !dbg !18
  %43 = and i1 %35, %42, !dbg !18
  br i1 %43, label %assert_end32, label %assert_fail31, !dbg !18, !prof !19

assert_fail31:                                    ; preds = %assert_end30
  %44 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %44(i8* getelementptr inbounds ([235 x i8], [235 x i8]* @.str.6, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end32:                                     ; preds = %assert_end30
  %45 = load i64, i64* %default_function.ph_0.shape, align 8, !dbg !18, !tbaa !41
  %46 = trunc i64 %45 to i32, !dbg !18
  %47 = icmp eq i32 %46, 1, !dbg !18
  br i1 %47, label %assert_end34, label %assert_fail33, !dbg !18, !prof !19

assert_fail33:                                    ; preds = %assert_end32
  %48 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %48(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.7, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end34:                                     ; preds = %assert_end32
  %49 = getelementptr inbounds i64, i64* %default_function.ph_0.shape, i64 1, !dbg !18
  %50 = load i64, i64* %49, align 8, !dbg !18, !tbaa !51
  %51 = trunc i64 %50 to i32, !dbg !18
  %52 = icmp eq i32 %51, 13, !dbg !18
  br i1 %52, label %assert_end36, label %assert_fail35, !dbg !18, !prof !19

assert_fail35:                                    ; preds = %assert_end34
  %53 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %53(i8* getelementptr inbounds ([193 x i8], [193 x i8]* @.str.8, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end36:                                     ; preds = %assert_end34
  %54 = getelementptr inbounds i64, i64* %default_function.ph_0.shape, i64 2, !dbg !18
  %55 = load i64, i64* %54, align 8, !dbg !18, !tbaa !53
  %56 = trunc i64 %55 to i32, !dbg !18
  %57 = icmp eq i32 %56, 4, !dbg !18
  br i1 %57, label %assert_end38, label %assert_fail37, !dbg !18, !prof !19

assert_fail37:                                    ; preds = %assert_end36
  %58 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %58(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.9, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end38:                                     ; preds = %assert_end36
  %59 = icmp eq i64* %default_function.ph_0.strides, null, !dbg !18
  br i1 %59, label %if_end, label %if_then, !dbg !18, !prof !56

if_then:                                          ; preds = %assert_end38
  %60 = getelementptr inbounds i64, i64* %default_function.ph_0.strides, i64 1, !dbg !18
  %61 = load i64, i64* %60, align 8, !dbg !18, !tbaa !57
  %62 = trunc i64 %61 to i32, !dbg !18
  %63 = icmp eq i32 %62, 4, !dbg !18
  %64 = getelementptr inbounds i64, i64* %default_function.ph_0.strides, i64 2, !dbg !18
  %65 = load i64, i64* %64, align 8, !dbg !18, !tbaa !67
  %66 = trunc i64 %65 to i32, !dbg !18
  %67 = icmp eq i32 %66, 1, !dbg !18
  %68 = and i1 %63, %67, !dbg !18
  br i1 %68, label %if_end, label %assert_fail39, !dbg !18, !prof !19

if_end:                                           ; preds = %assert_end38, %if_then
  %69 = getelementptr inbounds %1, %1* %ph_0117, i64 0, i32 6, !dbg !18
  %70 = load i64, i64* %69, align 8, !dbg !18
  %71 = icmp eq i64 %70, 0, !dbg !18
  br i1 %71, label %assert_end42, label %assert_fail41, !dbg !18, !prof !19

assert_fail39:                                    ; preds = %if_then
  %72 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %72(i8* getelementptr inbounds ([188 x i8], [188 x i8]* @.str.10, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail41:                                    ; preds = %if_end
  %73 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %73(i8* getelementptr inbounds ([196 x i8], [196 x i8]* @.str.11, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end42:                                     ; preds = %if_end
  %74 = getelementptr inbounds %1, %1* %ph_0117, i64 0, i32 1, i32 0, !dbg !18
  %75 = load i32, i32* %74, align 4, !dbg !18
  %76 = icmp eq i32 %75, 1, !dbg !18
  br i1 %76, label %assert_end44, label %assert_fail43, !dbg !18, !prof !19

assert_fail43:                                    ; preds = %assert_end42
  %77 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %77(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.12, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end44:                                     ; preds = %assert_end42
  %78 = getelementptr inbounds %1, %1* %compute118, i64 0, i32 2, !dbg !18
  %79 = load i32, i32* %78, align 4, !dbg !18
  %80 = icmp eq i32 %79, 3, !dbg !18
  br i1 %80, label %assert_end48, label %assert_fail45, !dbg !18, !prof !19

assert_fail45:                                    ; preds = %assert_end44
  %81 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %81(i8* getelementptr inbounds ([113 x i8], [113 x i8]* @.str.13, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end48:                                     ; preds = %assert_end44
  %82 = getelementptr inbounds %1, %1* %compute118, i64 0, i32 3, i32 2, !dbg !18
  %83 = load i16, i16* %82, align 2, !dbg !18
  %84 = icmp eq i16 %83, 1, !dbg !18
  %85 = getelementptr inbounds %1, %1* %compute118, i64 0, i32 3, i32 1, !dbg !18
  %86 = load i8, i8* %85, align 1, !dbg !18
  %87 = icmp eq i8 %86, 32, !dbg !18
  %88 = getelementptr inbounds %1, %1* %compute118, i64 0, i32 3, i32 0, !dbg !18
  %89 = load i8, i8* %88, align 1, !dbg !18
  %90 = icmp eq i8 %89, 2, !dbg !18
  %91 = and i1 %87, %90, !dbg !18
  %92 = and i1 %84, %91, !dbg !18
  br i1 %92, label %assert_end50, label %assert_fail49, !dbg !18, !prof !19

assert_fail49:                                    ; preds = %assert_end48
  %93 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %93(i8* getelementptr inbounds ([247 x i8], [247 x i8]* @.str.14, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end50:                                     ; preds = %assert_end48
  %94 = load i64, i64* %default_function.compute.shape, align 8, !dbg !18, !tbaa !70
  %95 = trunc i64 %94 to i32, !dbg !18
  %96 = icmp eq i32 %95, 1, !dbg !18
  br i1 %96, label %assert_end52, label %assert_fail51, !dbg !18, !prof !19

assert_fail51:                                    ; preds = %assert_end50
  %97 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %97(i8* getelementptr inbounds ([200 x i8], [200 x i8]* @.str.15, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end52:                                     ; preds = %assert_end50
  %98 = getelementptr inbounds i64, i64* %default_function.compute.shape, i64 1, !dbg !18
  %99 = load i64, i64* %98, align 8, !dbg !18, !tbaa !80
  %100 = trunc i64 %99 to i32, !dbg !18
  %101 = icmp eq i32 %100, 13, !dbg !18
  br i1 %101, label %assert_end54, label %assert_fail53, !dbg !18, !prof !19

assert_fail53:                                    ; preds = %assert_end52
  %102 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %102(i8* getelementptr inbounds ([202 x i8], [202 x i8]* @.str.16, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end54:                                     ; preds = %assert_end52
  %103 = getelementptr inbounds i64, i64* %default_function.compute.shape, i64 2, !dbg !18
  %104 = load i64, i64* %103, align 8, !dbg !18, !tbaa !82
  %105 = trunc i64 %104 to i32, !dbg !18
  %106 = icmp eq i32 %105, 4, !dbg !18
  br i1 %106, label %assert_end56, label %assert_fail55, !dbg !18, !prof !19

assert_fail55:                                    ; preds = %assert_end54
  %107 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %107(i8* getelementptr inbounds ([200 x i8], [200 x i8]* @.str.17, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end56:                                     ; preds = %assert_end54
  %108 = icmp eq i64* %default_function.compute.strides, null, !dbg !18
  br i1 %108, label %if_end58, label %if_then57, !dbg !18, !prof !56

if_then57:                                        ; preds = %assert_end56
  %109 = getelementptr inbounds i64, i64* %default_function.compute.strides, i64 1, !dbg !18
  %110 = load i64, i64* %109, align 8, !dbg !18, !tbaa !85
  %111 = trunc i64 %110 to i32, !dbg !18
  %112 = icmp eq i32 %111, 4, !dbg !18
  %113 = getelementptr inbounds i64, i64* %default_function.compute.strides, i64 2, !dbg !18
  %114 = load i64, i64* %113, align 8, !dbg !18, !tbaa !95
  %115 = trunc i64 %114 to i32, !dbg !18
  %116 = icmp eq i32 %115, 1, !dbg !18
  %117 = and i1 %112, %116, !dbg !18
  br i1 %117, label %if_end58, label %assert_fail59, !dbg !18, !prof !19

if_end58:                                         ; preds = %assert_end56, %if_then57
  %118 = getelementptr inbounds %1, %1* %compute118, i64 0, i32 6, !dbg !18
  %119 = load i64, i64* %118, align 8, !dbg !18
  %120 = icmp eq i64 %119, 0, !dbg !18
  br i1 %120, label %assert_end62, label %assert_fail61, !dbg !18, !prof !19

assert_fail59:                                    ; preds = %if_then57
  %121 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %121(i8* getelementptr inbounds ([197 x i8], [197 x i8]* @.str.18, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail61:                                    ; preds = %if_end58
  %122 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %122(i8* getelementptr inbounds ([205 x i8], [205 x i8]* @.str.19, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end62:                                     ; preds = %if_end58
  %123 = getelementptr inbounds %1, %1* %compute118, i64 0, i32 1, i32 0, !dbg !18
  %124 = load i32, i32* %123, align 4, !dbg !18
  %125 = icmp eq i32 %124, 1, !dbg !18
  br i1 %125, label %assert_end64, label %assert_fail63, !dbg !18, !prof !19

assert_fail63:                                    ; preds = %assert_end62
  %126 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %126(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.20, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end64:                                     ; preds = %assert_end62
  %127 = getelementptr inbounds %1, %1* %compute118, i64 0, i32 1, i32 1, !dbg !18
  %128 = load i32, i32* %127, align 4, !dbg !18
  %129 = icmp eq i32 %dev_id, %128, !dbg !18
  br i1 %129, label %assert_end66, label %assert_fail65, !dbg !18, !prof !19

assert_fail65:                                    ; preds = %assert_end64
  %130 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %130(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.21, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end66:                                     ; preds = %assert_end64
  %131 = getelementptr inbounds %1, %1* %T_multiply119, i64 0, i32 2, !dbg !18
  %132 = load i32, i32* %131, align 4, !dbg !18
  %133 = icmp eq i32 %132, 3, !dbg !18
  br i1 %133, label %assert_end70, label %assert_fail67, !dbg !18, !prof !19

assert_fail67:                                    ; preds = %assert_end66
  %134 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %134(i8* getelementptr inbounds ([119 x i8], [119 x i8]* @.str.22, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end70:                                     ; preds = %assert_end66
  %135 = getelementptr inbounds %1, %1* %T_multiply119, i64 0, i32 3, i32 2, !dbg !18
  %136 = load i16, i16* %135, align 2, !dbg !18
  %137 = icmp eq i16 %136, 1, !dbg !18
  %138 = getelementptr inbounds %1, %1* %T_multiply119, i64 0, i32 3, i32 1, !dbg !18
  %139 = load i8, i8* %138, align 1, !dbg !18
  %140 = icmp eq i8 %139, 32, !dbg !18
  %141 = getelementptr inbounds %1, %1* %T_multiply119, i64 0, i32 3, i32 0, !dbg !18
  %142 = load i8, i8* %141, align 1, !dbg !18
  %143 = icmp eq i8 %142, 2, !dbg !18
  %144 = and i1 %140, %143, !dbg !18
  %145 = and i1 %137, %144, !dbg !18
  br i1 %145, label %assert_end72, label %assert_fail71, !dbg !18, !prof !19

assert_fail71:                                    ; preds = %assert_end70
  %146 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %146(i8* getelementptr inbounds ([259 x i8], [259 x i8]* @.str.23, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end72:                                     ; preds = %assert_end70
  %147 = load i64, i64* %default_function.T_multiply.shape, align 8, !dbg !18, !tbaa !98
  %148 = trunc i64 %147 to i32, !dbg !18
  %149 = icmp eq i32 %148, 1, !dbg !18
  br i1 %149, label %assert_end74, label %assert_fail73, !dbg !18, !prof !19

assert_fail73:                                    ; preds = %assert_end72
  %150 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %150(i8* getelementptr inbounds ([209 x i8], [209 x i8]* @.str.24, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end74:                                     ; preds = %assert_end72
  %151 = getelementptr inbounds i64, i64* %default_function.T_multiply.shape, i64 1, !dbg !18
  %152 = load i64, i64* %151, align 8, !dbg !18, !tbaa !108
  %153 = trunc i64 %152 to i32, !dbg !18
  %154 = icmp eq i32 %153, 13, !dbg !18
  br i1 %154, label %assert_end76, label %assert_fail75, !dbg !18, !prof !19

assert_fail75:                                    ; preds = %assert_end74
  %155 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %155(i8* getelementptr inbounds ([211 x i8], [211 x i8]* @.str.25, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end76:                                     ; preds = %assert_end74
  %156 = getelementptr inbounds i64, i64* %default_function.T_multiply.shape, i64 2, !dbg !18
  %157 = load i64, i64* %156, align 8, !dbg !18, !tbaa !110
  %158 = trunc i64 %157 to i32, !dbg !18
  %159 = icmp eq i32 %158, 4, !dbg !18
  br i1 %159, label %assert_end78, label %assert_fail77, !dbg !18, !prof !19

assert_fail77:                                    ; preds = %assert_end76
  %160 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %160(i8* getelementptr inbounds ([209 x i8], [209 x i8]* @.str.26, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end78:                                     ; preds = %assert_end76
  %161 = icmp eq i64* %default_function.T_multiply.strides, null, !dbg !18
  br i1 %161, label %if_end80, label %if_then79, !dbg !18, !prof !56

if_then79:                                        ; preds = %assert_end78
  %162 = getelementptr inbounds i64, i64* %default_function.T_multiply.strides, i64 1, !dbg !18
  %163 = load i64, i64* %162, align 8, !dbg !18, !tbaa !113
  %164 = trunc i64 %163 to i32, !dbg !18
  %165 = icmp eq i32 %164, 4, !dbg !18
  %166 = getelementptr inbounds i64, i64* %default_function.T_multiply.strides, i64 2, !dbg !18
  %167 = load i64, i64* %166, align 8, !dbg !18, !tbaa !123
  %168 = trunc i64 %167 to i32, !dbg !18
  %169 = icmp eq i32 %168, 1, !dbg !18
  %170 = and i1 %165, %169, !dbg !18
  br i1 %170, label %if_end80, label %assert_fail81, !dbg !18, !prof !19

if_end80:                                         ; preds = %assert_end78, %if_then79
  %171 = getelementptr inbounds %1, %1* %T_multiply119, i64 0, i32 6, !dbg !18
  %172 = load i64, i64* %171, align 8, !dbg !18
  %173 = icmp eq i64 %172, 0, !dbg !18
  br i1 %173, label %assert_end84, label %assert_fail83, !dbg !18, !prof !19

assert_fail81:                                    ; preds = %if_then79
  %174 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %174(i8* getelementptr inbounds ([206 x i8], [206 x i8]* @.str.27, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail83:                                    ; preds = %if_end80
  %175 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %175(i8* getelementptr inbounds ([214 x i8], [214 x i8]* @.str.28, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end84:                                     ; preds = %if_end80
  %176 = getelementptr inbounds %1, %1* %T_multiply119, i64 0, i32 1, i32 0, !dbg !18
  %177 = load i32, i32* %176, align 4, !dbg !18
  %178 = icmp eq i32 %177, 1, !dbg !18
  br i1 %178, label %assert_end86, label %assert_fail85, !dbg !18, !prof !19

assert_fail85:                                    ; preds = %assert_end84
  %179 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %179(i8* getelementptr inbounds ([194 x i8], [194 x i8]* @.str.29, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end86:                                     ; preds = %assert_end84
  %180 = getelementptr inbounds %1, %1* %T_multiply119, i64 0, i32 1, i32 1, !dbg !18
  %181 = load i32, i32* %180, align 4, !dbg !18
  %182 = icmp eq i32 %dev_id, %181, !dbg !18
  br i1 %182, label %assert_end88, label %assert_fail87, !dbg !18, !prof !19

assert_fail87:                                    ; preds = %assert_end86
  %183 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %183(i8* getelementptr inbounds ([200 x i8], [200 x i8]* @.str.30, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end88:                                     ; preds = %assert_end86
  %184 = getelementptr inbounds %1, %1* %compute2120, i64 0, i32 2, !dbg !18
  %185 = load i32, i32* %184, align 4, !dbg !18
  %186 = icmp eq i32 %185, 3, !dbg !18
  br i1 %186, label %assert_end92, label %assert_fail89, !dbg !18, !prof !19

assert_fail89:                                    ; preds = %assert_end88
  %187 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %187(i8* getelementptr inbounds ([113 x i8], [113 x i8]* @.str.13, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end92:                                     ; preds = %assert_end88
  %188 = getelementptr inbounds %1, %1* %compute2120, i64 0, i32 3, i32 2, !dbg !18
  %189 = load i16, i16* %188, align 2, !dbg !18
  %190 = icmp eq i16 %189, 1, !dbg !18
  %191 = getelementptr inbounds %1, %1* %compute2120, i64 0, i32 3, i32 1, !dbg !18
  %192 = load i8, i8* %191, align 1, !dbg !18
  %193 = icmp eq i8 %192, 32, !dbg !18
  %194 = getelementptr inbounds %1, %1* %compute2120, i64 0, i32 3, i32 0, !dbg !18
  %195 = load i8, i8* %194, align 1, !dbg !18
  %196 = icmp eq i8 %195, 2, !dbg !18
  %197 = and i1 %193, %196, !dbg !18
  %198 = and i1 %190, %197, !dbg !18
  br i1 %198, label %assert_end94, label %assert_fail93, !dbg !18, !prof !19

assert_fail93:                                    ; preds = %assert_end92
  %199 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %199(i8* getelementptr inbounds ([247 x i8], [247 x i8]* @.str.14, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end94:                                     ; preds = %assert_end92
  %200 = load i64, i64* %default_function.compute.shape17, align 8, !dbg !18, !tbaa !126
  %201 = trunc i64 %200 to i32, !dbg !18
  %202 = icmp eq i32 %201, 1, !dbg !18
  br i1 %202, label %assert_end96, label %assert_fail95, !dbg !18, !prof !19

assert_fail95:                                    ; preds = %assert_end94
  %203 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %203(i8* getelementptr inbounds ([200 x i8], [200 x i8]* @.str.15, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end96:                                     ; preds = %assert_end94
  %204 = getelementptr inbounds i64, i64* %default_function.compute.shape17, i64 1, !dbg !18
  %205 = load i64, i64* %204, align 8, !dbg !18, !tbaa !136
  %206 = trunc i64 %205 to i32, !dbg !18
  %207 = icmp eq i32 %206, 13, !dbg !18
  br i1 %207, label %assert_end98, label %assert_fail97, !dbg !18, !prof !19

assert_fail97:                                    ; preds = %assert_end96
  %208 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %208(i8* getelementptr inbounds ([202 x i8], [202 x i8]* @.str.16, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end98:                                     ; preds = %assert_end96
  %209 = getelementptr inbounds i64, i64* %default_function.compute.shape17, i64 2, !dbg !18
  %210 = load i64, i64* %209, align 8, !dbg !18, !tbaa !138
  %211 = trunc i64 %210 to i32, !dbg !18
  %212 = icmp eq i32 %211, 4, !dbg !18
  br i1 %212, label %assert_end100, label %assert_fail99, !dbg !18, !prof !19

assert_fail99:                                    ; preds = %assert_end98
  %213 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %213(i8* getelementptr inbounds ([200 x i8], [200 x i8]* @.str.17, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end100:                                    ; preds = %assert_end98
  %214 = icmp eq i64* %default_function.compute.strides18, null, !dbg !18
  br i1 %214, label %if_end102, label %if_then101, !dbg !18, !prof !56

if_then101:                                       ; preds = %assert_end100
  %215 = getelementptr inbounds i64, i64* %default_function.compute.strides18, i64 1, !dbg !18
  %216 = load i64, i64* %215, align 8, !dbg !18, !tbaa !141
  %217 = trunc i64 %216 to i32, !dbg !18
  %218 = icmp eq i32 %217, 4, !dbg !18
  %219 = getelementptr inbounds i64, i64* %default_function.compute.strides18, i64 2, !dbg !18
  %220 = load i64, i64* %219, align 8, !dbg !18, !tbaa !151
  %221 = trunc i64 %220 to i32, !dbg !18
  %222 = icmp eq i32 %221, 1, !dbg !18
  %223 = and i1 %218, %222, !dbg !18
  br i1 %223, label %if_end102, label %assert_fail103, !dbg !18, !prof !19

if_end102:                                        ; preds = %assert_end100, %if_then101
  %224 = getelementptr inbounds %1, %1* %compute2120, i64 0, i32 6, !dbg !18
  %225 = load i64, i64* %224, align 8, !dbg !18
  %226 = icmp eq i64 %225, 0, !dbg !18
  br i1 %226, label %assert_end106, label %assert_fail105, !dbg !18, !prof !19

assert_fail103:                                   ; preds = %if_then101
  %227 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %227(i8* getelementptr inbounds ([197 x i8], [197 x i8]* @.str.18, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail105:                                   ; preds = %if_end102
  %228 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %228(i8* getelementptr inbounds ([205 x i8], [205 x i8]* @.str.19, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end106:                                    ; preds = %if_end102
  %229 = getelementptr inbounds %1, %1* %compute2120, i64 0, i32 1, i32 0, !dbg !18
  %230 = load i32, i32* %229, align 4, !dbg !18
  %231 = icmp eq i32 %230, 1, !dbg !18
  br i1 %231, label %assert_end108, label %assert_fail107, !dbg !18, !prof !19

assert_fail107:                                   ; preds = %assert_end106
  %232 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %232(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.20, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end108:                                    ; preds = %assert_end106
  %233 = getelementptr inbounds %1, %1* %compute2120, i64 0, i32 1, i32 1, !dbg !18
  %234 = load i32, i32* %233, align 4, !dbg !18
  %235 = icmp eq i32 %dev_id, %234, !dbg !18
  br i1 %235, label %assert_end110, label %assert_fail109, !dbg !18, !prof !19

assert_fail109:                                   ; preds = %assert_end108
  %236 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %236(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.21, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end110:                                    ; preds = %assert_end108
  %237 = call fastcc i32 @default_function_compute_(i8* nonnull %stack_value, float* %T_multiply_void_ptr123, i32* nonnull %stack_tcode116.sub, float* %compute_void_ptr122, float* %compute_void_ptr12124, float* %ph_0_void_ptr121), !dbg !18
  ret i32 %237, !dbg !18
}

; Function Attrs: nounwind willreturn
declare void @llvm.assume(i1) #1

; Function Attrs: noinline
define internal fastcc i32 @default_function_compute_(i8* noalias %0, float* noalias align 64 %1, i32* noalias %2, float* noalias align 64 %3, float* noalias align 64 %4, float* noalias align 64 %5) unnamed_addr #2 {
entry:
  %6 = alloca i8*, align 8
  %7 = bitcast i8* %0 to %0*
  %8 = bitcast i8* %0 to float**
  store float* %1, float** %8, align 8
  %9 = getelementptr inbounds i8, i8* %0, i64 8
  %10 = bitcast i8* %9 to float**
  store float* %3, float** %10, align 8
  %11 = getelementptr inbounds i8, i8* %0, i64 16
  %12 = bitcast i8* %11 to float**
  store float* %4, float** %12, align 8
  %13 = getelementptr inbounds i8, i8* %0, i64 24
  %14 = bitcast i8* %13 to float**
  store float* %5, float** %14, align 8
  %15 = bitcast i32* %2 to <4 x i32>*
  store <4 x i32> <i32 3, i32 3, i32 3, i32 3>, <4 x i32>* %15, align 4, !tbaa !154
  %16 = getelementptr inbounds i8, i8* %0, i64 32
  %17 = bitcast i8* %16 to %0*
  %18 = getelementptr inbounds i32, i32* %2, i64 4
  %19 = load i32 (i8*, %0*, i32*, i32, %0*, i32*)*, i32 (i8*, %0*, i32*, i32, %0*, i32*)** @__TVMFuncCall, align 8, !tbaa !20
  %20 = load i8*, i8** @.tvm_func.default_function_kernel, align 8
  %21 = icmp eq i8* %20, null
  br i1 %21, label %handle_init, label %handle_init_end, !prof !56

handle_init:                                      ; preds = %entry
  %22 = load i8*, i8** @__tvm_module_ctx, align 8, !tbaa !20
  %23 = load i32 (i8*, i8*, i8**)*, i32 (i8*, i8*, i8**)** @__TVMBackendGetFuncFromEnv, align 8, !tbaa !20
  %24 = call i32 %23(i8* %22, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.31, i64 0, i64 0), i8** nonnull %6)
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %call_end, label %call_fail, !prof !19

handle_init_end:                                  ; preds = %entry, %call_end
  %26 = phi i8* [ %20, %entry ], [ %29, %call_end ]
  %27 = call i32 %19(i8* %26, %0* %7, i32* nonnull %2, i32 4, %0* nonnull %17, i32* nonnull %18)
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %call_end2, label %call_fail, !prof !19

call_fail:                                        ; preds = %call_end2, %handle_init_end, %handle_init
  %merge = phi i32 [ %24, %handle_init ], [ %27, %handle_init_end ], [ 0, %call_end2 ]
  ret i32 %merge

call_end:                                         ; preds = %handle_init
  %29 = load i8*, i8** %6, align 8
  store i8* %29, i8** @.tvm_func.default_function_kernel, align 8
  br label %handle_init_end

call_end2:                                        ; preds = %handle_init_end
  %30 = bitcast i8* %16 to i64*
  %31 = load i64, i64* %30, align 8
  %kernel_error_code = trunc i64 %31 to i32
  %32 = icmp eq i32 %kernel_error_code, 0
  br i1 %32, label %call_fail, label %assert_fail, !prof !19

assert_fail:                                      ; preds = %call_end2
  %33 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !20
  call void %33(i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.32, i64 0, i64 0))
  ret i32 -1
}

; Function Attrs: nounwind readnone
define weak dso_local i16 @__truncsfhf2(float %a0) local_unnamed_addr #3 section ".text.tvm.fp16.conv" {
b0:
  %v0 = bitcast float %a0 to i32
  %v1 = and i32 %v0, 2147483647
  %v2 = add nsw i32 %v1, -947912704
  %v3 = add nsw i32 %v1, -1199570944
  %v4 = icmp ult i32 %v2, %v3
  br i1 %v4, label %b1, label %b5

b1:                                               ; preds = %b0
  %v5 = lshr i32 %v0, 13
  %v6 = and i32 %v5, 65535
  %v7 = add nuw nsw i32 %v6, -114688
  %v8 = and i32 %v0, 8191
  %v9 = icmp ugt i32 %v8, 4096
  br i1 %v9, label %b2, label %b3

b2:                                               ; preds = %b1
  %v10 = add nuw nsw i32 %v6, -114687
  br label %b13

b3:                                               ; preds = %b1
  %v11 = icmp eq i32 %v8, 4096
  br i1 %v11, label %b4, label %b13

b4:                                               ; preds = %b3
  %v12 = and i32 %v7, 65535
  %v13 = and i32 %v5, 1
  %v14 = add nuw nsw i32 %v12, %v13
  br label %b13

b5:                                               ; preds = %b0
  %v15 = icmp ugt i32 %v1, 2139095040
  br i1 %v15, label %b6, label %b7

b6:                                               ; preds = %b5
  %v16 = lshr i32 %v0, 13
  %v17 = and i32 %v16, 511
  %v18 = or i32 %v17, 32256
  br label %b13

b7:                                               ; preds = %b5
  %v19 = icmp ugt i32 %v1, 1199570943
  br i1 %v19, label %b13, label %b8

b8:                                               ; preds = %b7
  %v20 = icmp ult i32 %v1, 754974720
  br i1 %v20, label %b13, label %b9

b9:                                               ; preds = %b8
  %v21 = lshr i32 %v1, 23
  %v22 = sub nsw i32 113, %v21
  %v23 = and i32 %v0, 8388607
  %v24 = or i32 %v23, 8388608
  %v25 = add nsw i32 %v21, -81
  %v26 = shl i32 %v24, %v25
  %v27 = icmp ne i32 %v26, 0
  %v28 = lshr i32 %v24, %v22
  %v29 = zext i1 %v27 to i32
  %v30 = lshr i32 %v28, 13
  %v31 = and i32 %v28, 8191
  %v32 = or i32 %v31, %v29
  %v33 = icmp ugt i32 %v32, 4096
  br i1 %v33, label %b10, label %b11

b10:                                              ; preds = %b9
  %v34 = add nuw nsw i32 %v30, 1
  br label %b13

b11:                                              ; preds = %b9
  %v35 = icmp eq i32 %v32, 4096
  br i1 %v35, label %b12, label %b13

b12:                                              ; preds = %b11
  %v36 = and i32 %v30, 1
  %v37 = add nuw nsw i32 %v36, %v30
  br label %b13

b13:                                              ; preds = %b12, %b11, %b10, %b8, %b7, %b6, %b4, %b3, %b2
  %v38 = phi i32 [ %v18, %b6 ], [ %v10, %b2 ], [ %v14, %b4 ], [ %v7, %b3 ], [ 31744, %b7 ], [ 0, %b8 ], [ %v34, %b10 ], [ %v37, %b12 ], [ %v30, %b11 ]
  %v39 = lshr i32 %v0, 16
  %v40 = and i32 %v39, 32768
  %v41 = or i32 %v38, %v40
  %vlast = trunc i32 %v41 to i16
  ret i16 %vlast
}

; Function Attrs: nounwind readnone
define weak dso_local float @__extendhfsf2(i16 %a0) local_unnamed_addr #3 section ".text.tvm.fp16.conv" {
b0:
  %v1 = and i16 %a0, 32767
  %v2 = zext i16 %v1 to i32
  %v3 = add nsw i16 %v1, -1024
  %v4 = icmp ult i16 %v3, 30720
  br i1 %v4, label %b1, label %b2

b1:                                               ; preds = %b0
  %v5 = shl nuw nsw i32 %v2, 13
  %v6 = add nuw nsw i32 %v5, 939524096
  br label %b6

b2:                                               ; preds = %b0
  %v7 = icmp ugt i16 %v1, 31743
  br i1 %v7, label %b3, label %b4

b3:                                               ; preds = %b2
  %v8 = shl nuw nsw i32 %v2, 13
  %v9 = or i32 %v8, 2139095040
  br label %b6

b4:                                               ; preds = %b2
  %v10 = icmp eq i16 %v1, 0
  br i1 %v10, label %b6, label %b5

b5:                                               ; preds = %b4
  %v11 = icmp ult i16 %v1, 256
  %v12 = lshr i32 %v2, 8
  %v13 = select i1 %v11, i32 %v2, i32 %v12
  %v14 = select i1 %v11, i32 32, i32 24
  %v15 = icmp ult i32 %v13, 16
  %v16 = lshr i32 %v13, 4
  %v17 = add nsw i32 %v14, -4
  %v18 = select i1 %v15, i32 %v13, i32 %v16
  %v19 = select i1 %v15, i32 %v14, i32 %v17
  %v20 = icmp ult i32 %v18, 4
  %v21 = lshr i32 %v18, 2
  %v22 = add nsw i32 %v19, -2
  %v23 = select i1 %v20, i32 %v18, i32 %v21
  %v24 = select i1 %v20, i32 %v19, i32 %v22
  %v25 = icmp ult i32 %v23, 2
  %v26 = sub nsw i32 0, %v23
  %v27 = select i1 %v25, i32 %v26, i32 -2
  %v28 = add nsw i32 %v27, %v24
  %v29 = add nsw i32 %v28, -8
  %v30 = shl i32 %v2, %v29
  %v31 = xor i32 %v30, 8388608
  %v32 = shl i32 %v28, 23
  %v33 = sub i32 1124073472, %v32
  %v34 = or i32 %v31, %v33
  br label %b6

b6:                                               ; preds = %b5, %b4, %b3, %b1
  %v35 = phi i32 [ %v6, %b1 ], [ %v9, %b3 ], [ %v34, %b5 ], [ 0, %b4 ]
  %v36 = and i16 %a0, -32768
  %v37 = zext i16 %v36 to i32
  %v38 = shl nuw i32 %v37, 16
  %v39 = or i32 %v35, %v38
  %v40 = bitcast i32 %v39 to float
  ret float %v40
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.value(metadata, metadata, metadata) #4

attributes #0 = { "target-cpu"="generic" }
attributes #1 = { nounwind willreturn }
attributes #2 = { noinline "target-cpu"="generic" }
attributes #3 = { nounwind readnone "target-cpu"="generic" "target-features" }
attributes #4 = { nounwind readnone speculatable willreturn }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "TVM", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2)
!1 = !DIFile(filename: "main.tir", directory: ".")
!2 = !{}
!3 = !{i32 2, !"tvm_target", !"llvm -mtriple=x86_64-pc-linux-gnu"}
!4 = !{i32 4, !"Debug Info Version", i32 3}
!5 = distinct !DISubprogram(name: "main.tir", scope: !1, file: !1, type: !6, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !11)
!6 = !DISubroutineType(types: !7)
!7 = !{!8, !9, !10, !8, !9, !10, !9}
!8 = !DIBasicType(name: "int32", size: 32, encoding: DW_ATE_signed)
!9 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null)
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8)
!11 = !{!12, !13, !14, !15, !16, !17}
!12 = !DILocalVariable(name: "arg1", arg: 1, scope: !5, file: !1, type: !9)
!13 = !DILocalVariable(name: "arg2", arg: 2, scope: !5, file: !1, type: !10)
!14 = !DILocalVariable(name: "arg3", arg: 3, scope: !5, file: !1, type: !8)
!15 = !DILocalVariable(name: "arg4", arg: 4, scope: !5, file: !1, type: !9)
!16 = !DILocalVariable(name: "arg5", arg: 5, scope: !5, file: !1, type: !10)
!17 = !DILocalVariable(name: "arg6", arg: 6, scope: !5, file: !1, type: !9)
!18 = !DILocation(line: 0, scope: !5)
!19 = !{!"branch_weights", i32 1048576, i32 1}
!20 = !{!21, !21, i64 0}
!21 = !{!"ctx_ptr", !22, i64 0}
!22 = !{!"tvm-tbaa"}
!23 = !{!24, !24, i64 0}
!24 = !{!"0x3051680.w4.b0", !25, i64 0}
!25 = !{!"0x3051680.w8.b0", !26, i64 0}
!26 = !{!"0x3051680.w16.b0", !27, i64 0}
!27 = !{!"0x3051680.w32.b0", !28, i64 0}
!28 = !{!"0x3051680.w64.b0", !29, i64 0}
!29 = !{!"0x3051680.w128.b0", !30, i64 0}
!30 = !{!"0x3051680.w256.b0", !31, i64 0}
!31 = !{!"0x3051680.w512.b0", !32, i64 0}
!32 = !{!"0x3051680.w1024.b0", !33, i64 0}
!33 = !{!"0x3051680", !22, i64 0}
!34 = !{!35, !35, i64 0}
!35 = !{!"0x3051680.w4.b4", !25, i64 0}
!36 = !{!37, !37, i64 0}
!37 = !{!"0x3051680.w4.b8", !38, i64 0}
!38 = !{!"0x3051680.w8.b8", !26, i64 0}
!39 = !{!40, !40, i64 0}
!40 = !{!"0x3051680.w4.b12", !38, i64 0}
!41 = !{!42, !42, i64 0}
!42 = !{!"0x2621fb0.w8.b0", !43, i64 0}
!43 = !{!"0x2621fb0.w16.b0", !44, i64 0}
!44 = !{!"0x2621fb0.w32.b0", !45, i64 0}
!45 = !{!"0x2621fb0.w64.b0", !46, i64 0}
!46 = !{!"0x2621fb0.w128.b0", !47, i64 0}
!47 = !{!"0x2621fb0.w256.b0", !48, i64 0}
!48 = !{!"0x2621fb0.w512.b0", !49, i64 0}
!49 = !{!"0x2621fb0.w1024.b0", !50, i64 0}
!50 = !{!"0x2621fb0", !22, i64 0}
!51 = !{!52, !52, i64 0}
!52 = !{!"0x2621fb0.w8.b8", !43, i64 0}
!53 = !{!54, !54, i64 0}
!54 = !{!"0x2621fb0.w8.b16", !55, i64 0}
!55 = !{!"0x2621fb0.w16.b16", !44, i64 0}
!56 = !{!"branch_weights", i32 1, i32 1048576}
!57 = !{!58, !58, i64 0}
!58 = !{!"0x2efb610.w8.b8", !59, i64 0}
!59 = !{!"0x2efb610.w16.b0", !60, i64 0}
!60 = !{!"0x2efb610.w32.b0", !61, i64 0}
!61 = !{!"0x2efb610.w64.b0", !62, i64 0}
!62 = !{!"0x2efb610.w128.b0", !63, i64 0}
!63 = !{!"0x2efb610.w256.b0", !64, i64 0}
!64 = !{!"0x2efb610.w512.b0", !65, i64 0}
!65 = !{!"0x2efb610.w1024.b0", !66, i64 0}
!66 = !{!"0x2efb610", !22, i64 0}
!67 = !{!68, !68, i64 0}
!68 = !{!"0x2efb610.w8.b16", !69, i64 0}
!69 = !{!"0x2efb610.w16.b16", !60, i64 0}
!70 = !{!71, !71, i64 0}
!71 = !{!"0x30565c0.w8.b0", !72, i64 0}
!72 = !{!"0x30565c0.w16.b0", !73, i64 0}
!73 = !{!"0x30565c0.w32.b0", !74, i64 0}
!74 = !{!"0x30565c0.w64.b0", !75, i64 0}
!75 = !{!"0x30565c0.w128.b0", !76, i64 0}
!76 = !{!"0x30565c0.w256.b0", !77, i64 0}
!77 = !{!"0x30565c0.w512.b0", !78, i64 0}
!78 = !{!"0x30565c0.w1024.b0", !79, i64 0}
!79 = !{!"0x30565c0", !22, i64 0}
!80 = !{!81, !81, i64 0}
!81 = !{!"0x30565c0.w8.b8", !72, i64 0}
!82 = !{!83, !83, i64 0}
!83 = !{!"0x30565c0.w8.b16", !84, i64 0}
!84 = !{!"0x30565c0.w16.b16", !73, i64 0}
!85 = !{!86, !86, i64 0}
!86 = !{!"0x27a28d0.w8.b8", !87, i64 0}
!87 = !{!"0x27a28d0.w16.b0", !88, i64 0}
!88 = !{!"0x27a28d0.w32.b0", !89, i64 0}
!89 = !{!"0x27a28d0.w64.b0", !90, i64 0}
!90 = !{!"0x27a28d0.w128.b0", !91, i64 0}
!91 = !{!"0x27a28d0.w256.b0", !92, i64 0}
!92 = !{!"0x27a28d0.w512.b0", !93, i64 0}
!93 = !{!"0x27a28d0.w1024.b0", !94, i64 0}
!94 = !{!"0x27a28d0", !22, i64 0}
!95 = !{!96, !96, i64 0}
!96 = !{!"0x27a28d0.w8.b16", !97, i64 0}
!97 = !{!"0x27a28d0.w16.b16", !88, i64 0}
!98 = !{!99, !99, i64 0}
!99 = !{!"0x274b0f0.w8.b0", !100, i64 0}
!100 = !{!"0x274b0f0.w16.b0", !101, i64 0}
!101 = !{!"0x274b0f0.w32.b0", !102, i64 0}
!102 = !{!"0x274b0f0.w64.b0", !103, i64 0}
!103 = !{!"0x274b0f0.w128.b0", !104, i64 0}
!104 = !{!"0x274b0f0.w256.b0", !105, i64 0}
!105 = !{!"0x274b0f0.w512.b0", !106, i64 0}
!106 = !{!"0x274b0f0.w1024.b0", !107, i64 0}
!107 = !{!"0x274b0f0", !22, i64 0}
!108 = !{!109, !109, i64 0}
!109 = !{!"0x274b0f0.w8.b8", !100, i64 0}
!110 = !{!111, !111, i64 0}
!111 = !{!"0x274b0f0.w8.b16", !112, i64 0}
!112 = !{!"0x274b0f0.w16.b16", !101, i64 0}
!113 = !{!114, !114, i64 0}
!114 = !{!"0x26d4560.w8.b8", !115, i64 0}
!115 = !{!"0x26d4560.w16.b0", !116, i64 0}
!116 = !{!"0x26d4560.w32.b0", !117, i64 0}
!117 = !{!"0x26d4560.w64.b0", !118, i64 0}
!118 = !{!"0x26d4560.w128.b0", !119, i64 0}
!119 = !{!"0x26d4560.w256.b0", !120, i64 0}
!120 = !{!"0x26d4560.w512.b0", !121, i64 0}
!121 = !{!"0x26d4560.w1024.b0", !122, i64 0}
!122 = !{!"0x26d4560", !22, i64 0}
!123 = !{!124, !124, i64 0}
!124 = !{!"0x26d4560.w8.b16", !125, i64 0}
!125 = !{!"0x26d4560.w16.b16", !116, i64 0}
!126 = !{!127, !127, i64 0}
!127 = !{!"0x2640d50.w8.b0", !128, i64 0}
!128 = !{!"0x2640d50.w16.b0", !129, i64 0}
!129 = !{!"0x2640d50.w32.b0", !130, i64 0}
!130 = !{!"0x2640d50.w64.b0", !131, i64 0}
!131 = !{!"0x2640d50.w128.b0", !132, i64 0}
!132 = !{!"0x2640d50.w256.b0", !133, i64 0}
!133 = !{!"0x2640d50.w512.b0", !134, i64 0}
!134 = !{!"0x2640d50.w1024.b0", !135, i64 0}
!135 = !{!"0x2640d50", !22, i64 0}
!136 = !{!137, !137, i64 0}
!137 = !{!"0x2640d50.w8.b8", !128, i64 0}
!138 = !{!139, !139, i64 0}
!139 = !{!"0x2640d50.w8.b16", !140, i64 0}
!140 = !{!"0x2640d50.w16.b16", !129, i64 0}
!141 = !{!142, !142, i64 0}
!142 = !{!"0x2cc33e0.w8.b8", !143, i64 0}
!143 = !{!"0x2cc33e0.w16.b0", !144, i64 0}
!144 = !{!"0x2cc33e0.w32.b0", !145, i64 0}
!145 = !{!"0x2cc33e0.w64.b0", !146, i64 0}
!146 = !{!"0x2cc33e0.w128.b0", !147, i64 0}
!147 = !{!"0x2cc33e0.w256.b0", !148, i64 0}
!148 = !{!"0x2cc33e0.w512.b0", !149, i64 0}
!149 = !{!"0x2cc33e0.w1024.b0", !150, i64 0}
!150 = !{!"0x2cc33e0", !22, i64 0}
!151 = !{!152, !152, i64 0}
!152 = !{!"0x2cc33e0.w8.b16", !153, i64 0}
!153 = !{!"0x2cc33e0.w16.b16", !144, i64 0}
!154 = !{!155, !155, i64 0}
!155 = !{!"0x2a226f0.w16.b0", !156, i64 0}
!156 = !{!"0x2a226f0.w32.b0", !157, i64 0}
!157 = !{!"0x2a226f0.w64.b0", !158, i64 0}
!158 = !{!"0x2a226f0.w128.b0", !159, i64 0}
!159 = !{!"0x2a226f0.w256.b0", !160, i64 0}
!160 = !{!"0x2a226f0.w512.b0", !161, i64 0}
!161 = !{!"0x2a226f0.w1024.b0", !162, i64 0}
!162 = !{!"0x2a226f0", !22, i64 0}
