; ModuleID = 'TVMMod'
source_filename = "TVMMod"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%0 = type { double }
%1 = type { i8*, %2, i32, %3, i64*, i64*, i64 }
%2 = type { i32, i32 }
%3 = type { i8, i8, i16 }

@__tvm_module_ctx = linkonce dllexport local_unnamed_addr global i8* null, align 8
@__TVMFuncCall = linkonce dllexport local_unnamed_addr global i32 (i8*, %0*, i32*, i32, %0*, i32*)* null, align 8
@__TVMBackendGetFuncFromEnv = linkonce dllexport local_unnamed_addr global i32 (i8*, i8*, i8**)* null, align 8
@__TVMAPISetLastError = linkonce dllexport local_unnamed_addr global void (i8*)* null, align 8
@.str = private constant [67 x i8] c"Assert fail: num_args == 6, default_function: num_args should be 6\00", align 1
@.str.1 = private constant [130 x i8] c"Assert fail: ph_0_code == 3 or ph_0_code == 13 or ph_0_code == 7 or ph_0_code == 4, default_function: Expect arg[0] to be pointer\00", align 1
@.str.2 = private constant [142 x i8] c"Assert fail: compute_code == 3 or compute_code == 13 or compute_code == 7 or compute_code == 4, default_function: Expect arg[1] to be pointer\00", align 1
@.str.3 = private constant [142 x i8] c"Assert fail: compute_code == 3 or compute_code == 13 or compute_code == 7 or compute_code == 4, default_function: Expect arg[2] to be pointer\00", align 1
@.str.4 = private constant [142 x i8] c"Assert fail: compute_code == 3 or compute_code == 13 or compute_code == 7 or compute_code == 4, default_function: Expect arg[3] to be pointer\00", align 1
@.str.5 = private constant [142 x i8] c"Assert fail: compute_code == 3 or compute_code == 13 or compute_code == 7 or compute_code == 4, default_function: Expect arg[4] to be pointer\00", align 1
@.str.6 = private constant [154 x i8] c"Assert fail: T_subtract_code == 3 or T_subtract_code == 13 or T_subtract_code == 7 or T_subtract_code == 4, default_function: Expect arg[5] to be pointer\00", align 1
@.str.7 = private constant [107 x i8] c"Assert fail: 3 == T.tvm_struct_get(ph_0, 0, 4, \22int32\22), default_function.ph_0.ndim is expected to equal 3\00", align 1
@.str.8 = private constant [235 x i8] c"Assert fail: T.tvm_struct_get(ph_0, 0, 5, \22uint8\22) == T.uint8(2) and T.tvm_struct_get(ph_0, 0, 6, \22uint8\22) == T.uint8(32) and T.tvm_struct_get(ph_0, 0, 7, \22uint16\22) == T.uint16(1), default_function.ph_0.dtype is expected to be float32\00", align 1
@.str.9 = private constant [193 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_0_shape[0]) == 11, Argument default_function.ph_0.shape[0] has an unsatisfied constraint: 11 == T.Cast(\22int32\22, default_function_ph_0_shape[0])\00", align 1
@.str.10 = private constant [191 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_0_shape[1]) == 1, Argument default_function.ph_0.shape[1] has an unsatisfied constraint: 1 == T.Cast(\22int32\22, default_function_ph_0_shape[1])\00", align 1
@.str.11 = private constant [193 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_0_shape[2]) == 18, Argument default_function.ph_0.shape[2] has an unsatisfied constraint: 18 == T.Cast(\22int32\22, default_function_ph_0_shape[2])\00", align 1
@.str.12 = private constant [189 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_ph_0_strides[2]) and 18 == T.Cast(\22int32\22, default_function_ph_0_strides[0]), default_function.ph_0.strides: expected to be compact array\00", align 1
@.str.13 = private constant [196 x i8] c"Assert fail: T.uint64(0) == T.tvm_struct_get(ph_0, 0, 8, \22uint64\22), Argument default_function.ph_0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(ph_0, 0, 8, \22uint64\22)\00", align 1
@.str.14 = private constant [176 x i8] c"Assert fail: T.tvm_struct_get(ph_0, 0, 10, \22int32\22) == 1, Argument default_function.ph_0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(ph_0, 0, 10, \22int32\22)\00", align 1
@.str.15 = private constant [113 x i8] c"Assert fail: 3 == T.tvm_struct_get(compute, 0, 4, \22int32\22), default_function.compute.ndim is expected to equal 3\00", align 1
@.str.16 = private constant [247 x i8] c"Assert fail: T.tvm_struct_get(compute, 0, 5, \22uint8\22) == T.uint8(2) and T.tvm_struct_get(compute, 0, 6, \22uint8\22) == T.uint8(32) and T.tvm_struct_get(compute, 0, 7, \22uint16\22) == T.uint16(1), default_function.compute.dtype is expected to be float32\00", align 1
@.str.17 = private constant [202 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_compute_shape[0]) == 11, Argument default_function.compute.shape[0] has an unsatisfied constraint: 11 == T.Cast(\22int32\22, default_function_compute_shape[0])\00", align 1
@.str.18 = private constant [200 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_compute_shape[1]) == 1, Argument default_function.compute.shape[1] has an unsatisfied constraint: 1 == T.Cast(\22int32\22, default_function_compute_shape[1])\00", align 1
@.str.19 = private constant [202 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_compute_shape[2]) == 18, Argument default_function.compute.shape[2] has an unsatisfied constraint: 18 == T.Cast(\22int32\22, default_function_compute_shape[2])\00", align 1
@.str.20 = private constant [198 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_compute_strides[2]) and 18 == T.Cast(\22int32\22, default_function_compute_strides[0]), default_function.compute.strides: expected to be compact array\00", align 1
@.str.21 = private constant [205 x i8] c"Assert fail: T.uint64(0) == T.tvm_struct_get(compute, 0, 8, \22uint64\22), Argument default_function.compute.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(compute, 0, 8, \22uint64\22)\00", align 1
@.str.22 = private constant [185 x i8] c"Assert fail: T.tvm_struct_get(compute, 0, 10, \22int32\22) == 1, Argument default_function.compute.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(compute, 0, 10, \22int32\22)\00", align 1
@.str.23 = private constant [191 x i8] c"Assert fail: dev_id == T.tvm_struct_get(compute, 0, 9, \22int32\22), Argument default_function.compute.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(compute, 0, 9, \22int32\22)\00", align 1
@.str.24 = private constant [119 x i8] c"Assert fail: 3 == T.tvm_struct_get(T_subtract, 0, 4, \22int32\22), default_function.T_subtract.ndim is expected to equal 3\00", align 1
@.str.25 = private constant [259 x i8] c"Assert fail: T.tvm_struct_get(T_subtract, 0, 5, \22uint8\22) == T.uint8(2) and T.tvm_struct_get(T_subtract, 0, 6, \22uint8\22) == T.uint8(32) and T.tvm_struct_get(T_subtract, 0, 7, \22uint16\22) == T.uint16(1), default_function.T_subtract.dtype is expected to be float32\00", align 1
@.str.26 = private constant [211 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_T_subtract_shape[0]) == 11, Argument default_function.T_subtract.shape[0] has an unsatisfied constraint: 11 == T.Cast(\22int32\22, default_function_T_subtract_shape[0])\00", align 1
@.str.27 = private constant [209 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_T_subtract_shape[1]) == 1, Argument default_function.T_subtract.shape[1] has an unsatisfied constraint: 1 == T.Cast(\22int32\22, default_function_T_subtract_shape[1])\00", align 1
@.str.28 = private constant [211 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_T_subtract_shape[2]) == 18, Argument default_function.T_subtract.shape[2] has an unsatisfied constraint: 18 == T.Cast(\22int32\22, default_function_T_subtract_shape[2])\00", align 1
@.str.29 = private constant [207 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_T_subtract_strides[2]) and 18 == T.Cast(\22int32\22, default_function_T_subtract_strides[0]), default_function.T_subtract.strides: expected to be compact array\00", align 1
@.str.30 = private constant [214 x i8] c"Assert fail: T.uint64(0) == T.tvm_struct_get(T_subtract, 0, 8, \22uint64\22), Argument default_function.T_subtract.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_subtract, 0, 8, \22uint64\22)\00", align 1
@.str.31 = private constant [194 x i8] c"Assert fail: T.tvm_struct_get(T_subtract, 0, 10, \22int32\22) == 1, Argument default_function.T_subtract.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_subtract, 0, 10, \22int32\22)\00", align 1
@.str.32 = private constant [200 x i8] c"Assert fail: dev_id == T.tvm_struct_get(T_subtract, 0, 9, \22int32\22), Argument default_function.T_subtract.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_subtract, 0, 9, \22int32\22)\00", align 1
@.tvm_func.default_function_kernel = internal unnamed_addr global i8* null, align 8
@.str.33 = private constant [24 x i8] c"default_function_kernel\00", align 1
@.str.34 = private constant [68 x i8] c"Assert fail: kernel_error_code == 0, Error executing compute kernel\00", align 1
@__tvm_main__ = weak dllexport local_unnamed_addr constant [17 x i8] c"default_function\00", align 1
@llvm.global_ctors = appending global [0 x { i32, void ()*, i8* }] zeroinitializer

define dllexport i32 @default_function(i8* noalias nocapture readonly %args, i32* noalias nocapture readonly %arg_type_ids, i32 %num_args, i8* noalias nocapture readnone %out_ret_value, i32* noalias nocapture readnone %out_ret_tcode, i8* noalias nocapture readnone %resource_handle) local_unnamed_addr #0 !dbg !5 {
entry:
  call void @llvm.dbg.value(metadata i8* %args, metadata !12, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i32* %arg_type_ids, metadata !13, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i32 %num_args, metadata !14, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i8* %out_ret_value, metadata !15, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i32* %out_ret_tcode, metadata !16, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i8* %resource_handle, metadata !17, metadata !DIExpression()), !dbg !18
  %stack_value_void_ptr183 = alloca [7 x %0], align 8, !dbg !18
  %stack_tcode184 = alloca [7 x i32], align 4, !dbg !18
  %stack_tcode184.sub = getelementptr inbounds [7 x i32], [7 x i32]* %stack_tcode184, i64 0, i64 0
  %stack_value = bitcast [7 x %0]* %stack_value_void_ptr183 to i8*, !dbg !18
  %0 = icmp eq i32 %num_args, 6, !dbg !18
  br i1 %0, label %assert_end, label %assert_fail, !dbg !18, !prof !19

assert_fail:                                      ; preds = %entry
  %1 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %1(i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end:                                       ; preds = %entry
  %ph_0.code = load i32, i32* %arg_type_ids, align 4, !dbg !18, !tbaa !23
  %2 = getelementptr inbounds i32, i32* %arg_type_ids, i64 1, !dbg !18
  %compute.code = load i32, i32* %2, align 4, !dbg !18, !tbaa !34
  %3 = getelementptr inbounds i32, i32* %arg_type_ids, i64 2, !dbg !18
  %compute.code1 = load i32, i32* %3, align 4, !dbg !18, !tbaa !36
  %4 = getelementptr inbounds i32, i32* %arg_type_ids, i64 3, !dbg !18
  %compute.code2 = load i32, i32* %4, align 4, !dbg !18, !tbaa !39
  %5 = getelementptr inbounds i32, i32* %arg_type_ids, i64 4, !dbg !18
  %compute.code3 = load i32, i32* %5, align 4, !dbg !18, !tbaa !41
  %6 = getelementptr inbounds i32, i32* %arg_type_ids, i64 5, !dbg !18
  %T_subtract.code = load i32, i32* %6, align 4, !dbg !18, !tbaa !45
  %7 = bitcast i8* %args to %1**, !dbg !18
  %ph_0185 = load %1*, %1** %7, align 8, !dbg !18
  %8 = getelementptr inbounds i8, i8* %args, i64 8, !dbg !18
  %9 = bitcast i8* %8 to %1**, !dbg !18
  %compute186 = load %1*, %1** %9, align 8, !dbg !18
  %10 = getelementptr inbounds i8, i8* %args, i64 16, !dbg !18
  %11 = bitcast i8* %10 to %1**, !dbg !18
  %compute4187 = load %1*, %1** %11, align 8, !dbg !18
  %12 = getelementptr inbounds i8, i8* %args, i64 24, !dbg !18
  %13 = bitcast i8* %12 to %1**, !dbg !18
  %compute5188 = load %1*, %1** %13, align 8, !dbg !18
  %14 = getelementptr inbounds i8, i8* %args, i64 32, !dbg !18
  %15 = bitcast i8* %14 to %1**, !dbg !18
  %compute6189 = load %1*, %1** %15, align 8, !dbg !18
  %16 = getelementptr inbounds i8, i8* %args, i64 40, !dbg !18
  %17 = bitcast i8* %16 to %1**, !dbg !18
  %T_subtract190 = load %1*, %1** %17, align 8, !dbg !18
  %18 = bitcast %1* %ph_0185 to float**, !dbg !18
  %ph_0_void_ptr191 = load float*, float** %18, align 8, !dbg !18
  %ptrint = ptrtoint float* %ph_0_void_ptr191 to i64, !dbg !18
  %maskedptr = and i64 %ptrint, 63, !dbg !18
  %maskcond = icmp eq i64 %maskedptr, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond), !dbg !18
  %19 = getelementptr inbounds %1, %1* %ph_0185, i64 0, i32 4, !dbg !18
  %default_function.ph_0.shape = load i64*, i64** %19, align 8, !dbg !18
  %20 = getelementptr inbounds %1, %1* %ph_0185, i64 0, i32 5, !dbg !18
  %default_function.ph_0.strides = load i64*, i64** %20, align 8, !dbg !18
  %21 = getelementptr inbounds %1, %1* %ph_0185, i64 0, i32 1, i32 1, !dbg !18
  %dev_id = load i32, i32* %21, align 4, !dbg !18
  %22 = bitcast %1* %compute186 to float**, !dbg !18
  %compute_void_ptr192 = load float*, float** %22, align 8, !dbg !18
  %ptrint9 = ptrtoint float* %compute_void_ptr192 to i64, !dbg !18
  %maskedptr10 = and i64 %ptrint9, 63, !dbg !18
  %maskcond11 = icmp eq i64 %maskedptr10, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond11), !dbg !18
  %23 = getelementptr inbounds %1, %1* %compute186, i64 0, i32 4, !dbg !18
  %default_function.compute.shape = load i64*, i64** %23, align 8, !dbg !18
  %24 = getelementptr inbounds %1, %1* %compute186, i64 0, i32 5, !dbg !18
  %default_function.compute.strides = load i64*, i64** %24, align 8, !dbg !18
  %25 = bitcast %1* %compute4187 to float**, !dbg !18
  %compute_void_ptr12193 = load float*, float** %25, align 8, !dbg !18
  %ptrint14 = ptrtoint float* %compute_void_ptr12193 to i64, !dbg !18
  %maskedptr15 = and i64 %ptrint14, 63, !dbg !18
  %maskcond16 = icmp eq i64 %maskedptr15, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond16), !dbg !18
  %26 = getelementptr inbounds %1, %1* %compute4187, i64 0, i32 4, !dbg !18
  %default_function.compute.shape17 = load i64*, i64** %26, align 8, !dbg !18
  %27 = getelementptr inbounds %1, %1* %compute4187, i64 0, i32 5, !dbg !18
  %default_function.compute.strides18 = load i64*, i64** %27, align 8, !dbg !18
  %28 = bitcast %1* %compute5188 to float**, !dbg !18
  %compute_void_ptr19194 = load float*, float** %28, align 8, !dbg !18
  %ptrint21 = ptrtoint float* %compute_void_ptr19194 to i64, !dbg !18
  %maskedptr22 = and i64 %ptrint21, 63, !dbg !18
  %maskcond23 = icmp eq i64 %maskedptr22, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond23), !dbg !18
  %29 = getelementptr inbounds %1, %1* %compute5188, i64 0, i32 4, !dbg !18
  %default_function.compute.shape24 = load i64*, i64** %29, align 8, !dbg !18
  %30 = getelementptr inbounds %1, %1* %compute5188, i64 0, i32 5, !dbg !18
  %default_function.compute.strides25 = load i64*, i64** %30, align 8, !dbg !18
  %31 = bitcast %1* %compute6189 to float**, !dbg !18
  %compute_void_ptr26195 = load float*, float** %31, align 8, !dbg !18
  %ptrint28 = ptrtoint float* %compute_void_ptr26195 to i64, !dbg !18
  %maskedptr29 = and i64 %ptrint28, 63, !dbg !18
  %maskcond30 = icmp eq i64 %maskedptr29, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond30), !dbg !18
  %32 = getelementptr inbounds %1, %1* %compute6189, i64 0, i32 4, !dbg !18
  %default_function.compute.shape31 = load i64*, i64** %32, align 8, !dbg !18
  %33 = getelementptr inbounds %1, %1* %compute6189, i64 0, i32 5, !dbg !18
  %default_function.compute.strides32 = load i64*, i64** %33, align 8, !dbg !18
  %34 = bitcast %1* %T_subtract190 to float**, !dbg !18
  %T_subtract_void_ptr196 = load float*, float** %34, align 8, !dbg !18
  %ptrint34 = ptrtoint float* %T_subtract_void_ptr196 to i64, !dbg !18
  %maskedptr35 = and i64 %ptrint34, 63, !dbg !18
  %maskcond36 = icmp eq i64 %maskedptr35, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond36), !dbg !18
  %35 = getelementptr inbounds %1, %1* %T_subtract190, i64 0, i32 4, !dbg !18
  %default_function.T_subtract.shape = load i64*, i64** %35, align 8, !dbg !18
  %36 = getelementptr inbounds %1, %1* %T_subtract190, i64 0, i32 5, !dbg !18
  %default_function.T_subtract.strides = load i64*, i64** %36, align 8, !dbg !18
  switch i32 %ph_0.code, label %assert_fail37 [
    i32 13, label %assert_end38
    i32 7, label %assert_end38
    i32 4, label %assert_end38
    i32 3, label %assert_end38
  ], !dbg !18

assert_fail37:                                    ; preds = %assert_end
  %37 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %37(i8* getelementptr inbounds ([130 x i8], [130 x i8]* @.str.1, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end38:                                     ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  switch i32 %compute.code, label %assert_fail39 [
    i32 13, label %assert_end40
    i32 7, label %assert_end40
    i32 4, label %assert_end40
    i32 3, label %assert_end40
  ], !dbg !18

assert_fail39:                                    ; preds = %assert_end38
  %38 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %38(i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.2, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end40:                                     ; preds = %assert_end38, %assert_end38, %assert_end38, %assert_end38
  switch i32 %compute.code1, label %assert_fail41 [
    i32 13, label %assert_end42
    i32 7, label %assert_end42
    i32 4, label %assert_end42
    i32 3, label %assert_end42
  ], !dbg !18

assert_fail41:                                    ; preds = %assert_end40
  %39 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %39(i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.3, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end42:                                     ; preds = %assert_end40, %assert_end40, %assert_end40, %assert_end40
  switch i32 %compute.code2, label %assert_fail43 [
    i32 13, label %assert_end44
    i32 7, label %assert_end44
    i32 4, label %assert_end44
    i32 3, label %assert_end44
  ], !dbg !18

assert_fail43:                                    ; preds = %assert_end42
  %40 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %40(i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.4, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end44:                                     ; preds = %assert_end42, %assert_end42, %assert_end42, %assert_end42
  switch i32 %compute.code3, label %assert_fail45 [
    i32 13, label %assert_end46
    i32 7, label %assert_end46
    i32 4, label %assert_end46
    i32 3, label %assert_end46
  ], !dbg !18

assert_fail45:                                    ; preds = %assert_end44
  %41 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %41(i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.5, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end46:                                     ; preds = %assert_end44, %assert_end44, %assert_end44, %assert_end44
  switch i32 %T_subtract.code, label %assert_fail47 [
    i32 13, label %assert_end48
    i32 7, label %assert_end48
    i32 4, label %assert_end48
    i32 3, label %assert_end48
  ], !dbg !18

assert_fail47:                                    ; preds = %assert_end46
  %42 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %42(i8* getelementptr inbounds ([154 x i8], [154 x i8]* @.str.6, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end48:                                     ; preds = %assert_end46, %assert_end46, %assert_end46, %assert_end46
  %43 = getelementptr inbounds %1, %1* %ph_0185, i64 0, i32 2, !dbg !18
  %44 = load i32, i32* %43, align 4, !dbg !18
  %45 = icmp eq i32 %44, 3, !dbg !18
  br i1 %45, label %assert_end52, label %assert_fail49, !dbg !18, !prof !19

assert_fail49:                                    ; preds = %assert_end48
  %46 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %46(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.7, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end52:                                     ; preds = %assert_end48
  %47 = getelementptr inbounds %1, %1* %ph_0185, i64 0, i32 3, i32 2, !dbg !18
  %48 = load i16, i16* %47, align 2, !dbg !18
  %49 = icmp eq i16 %48, 1, !dbg !18
  %50 = getelementptr inbounds %1, %1* %ph_0185, i64 0, i32 3, i32 1, !dbg !18
  %51 = load i8, i8* %50, align 1, !dbg !18
  %52 = icmp eq i8 %51, 32, !dbg !18
  %53 = getelementptr inbounds %1, %1* %ph_0185, i64 0, i32 3, i32 0, !dbg !18
  %54 = load i8, i8* %53, align 1, !dbg !18
  %55 = icmp eq i8 %54, 2, !dbg !18
  %56 = and i1 %52, %55, !dbg !18
  %57 = and i1 %49, %56, !dbg !18
  br i1 %57, label %assert_end54, label %assert_fail53, !dbg !18, !prof !19

assert_fail53:                                    ; preds = %assert_end52
  %58 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %58(i8* getelementptr inbounds ([235 x i8], [235 x i8]* @.str.8, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end54:                                     ; preds = %assert_end52
  %59 = load i64, i64* %default_function.ph_0.shape, align 8, !dbg !18, !tbaa !47
  %60 = trunc i64 %59 to i32, !dbg !18
  %61 = icmp eq i32 %60, 11, !dbg !18
  br i1 %61, label %assert_end56, label %assert_fail55, !dbg !18, !prof !19

assert_fail55:                                    ; preds = %assert_end54
  %62 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %62(i8* getelementptr inbounds ([193 x i8], [193 x i8]* @.str.9, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end56:                                     ; preds = %assert_end54
  %63 = getelementptr inbounds i64, i64* %default_function.ph_0.shape, i64 1, !dbg !18
  %64 = load i64, i64* %63, align 8, !dbg !18, !tbaa !57
  %65 = trunc i64 %64 to i32, !dbg !18
  %66 = icmp eq i32 %65, 1, !dbg !18
  br i1 %66, label %assert_end58, label %assert_fail57, !dbg !18, !prof !19

assert_fail57:                                    ; preds = %assert_end56
  %67 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %67(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.10, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end58:                                     ; preds = %assert_end56
  %68 = getelementptr inbounds i64, i64* %default_function.ph_0.shape, i64 2, !dbg !18
  %69 = load i64, i64* %68, align 8, !dbg !18, !tbaa !59
  %70 = trunc i64 %69 to i32, !dbg !18
  %71 = icmp eq i32 %70, 18, !dbg !18
  br i1 %71, label %assert_end60, label %assert_fail59, !dbg !18, !prof !19

assert_fail59:                                    ; preds = %assert_end58
  %72 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %72(i8* getelementptr inbounds ([193 x i8], [193 x i8]* @.str.11, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end60:                                     ; preds = %assert_end58
  %73 = icmp eq i64* %default_function.ph_0.strides, null, !dbg !18
  br i1 %73, label %if_end, label %if_then, !dbg !18, !prof !62

if_then:                                          ; preds = %assert_end60
  %74 = load i64, i64* %default_function.ph_0.strides, align 8, !dbg !18, !tbaa !63
  %75 = trunc i64 %74 to i32, !dbg !18
  %76 = icmp eq i32 %75, 18, !dbg !18
  %77 = getelementptr inbounds i64, i64* %default_function.ph_0.strides, i64 2, !dbg !18
  %78 = load i64, i64* %77, align 8, !dbg !18, !tbaa !73
  %79 = trunc i64 %78 to i32, !dbg !18
  %80 = icmp eq i32 %79, 1, !dbg !18
  %81 = and i1 %76, %80, !dbg !18
  br i1 %81, label %if_end, label %assert_fail61, !dbg !18, !prof !19

if_end:                                           ; preds = %assert_end60, %if_then
  %82 = getelementptr inbounds %1, %1* %ph_0185, i64 0, i32 6, !dbg !18
  %83 = load i64, i64* %82, align 8, !dbg !18
  %84 = icmp eq i64 %83, 0, !dbg !18
  br i1 %84, label %assert_end64, label %assert_fail63, !dbg !18, !prof !19

assert_fail61:                                    ; preds = %if_then
  %85 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %85(i8* getelementptr inbounds ([189 x i8], [189 x i8]* @.str.12, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail63:                                    ; preds = %if_end
  %86 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %86(i8* getelementptr inbounds ([196 x i8], [196 x i8]* @.str.13, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end64:                                     ; preds = %if_end
  %87 = getelementptr inbounds %1, %1* %ph_0185, i64 0, i32 1, i32 0, !dbg !18
  %88 = load i32, i32* %87, align 4, !dbg !18
  %89 = icmp eq i32 %88, 1, !dbg !18
  br i1 %89, label %assert_end66, label %assert_fail65, !dbg !18, !prof !19

assert_fail65:                                    ; preds = %assert_end64
  %90 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %90(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.14, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end66:                                     ; preds = %assert_end64
  %91 = getelementptr inbounds %1, %1* %compute186, i64 0, i32 2, !dbg !18
  %92 = load i32, i32* %91, align 4, !dbg !18
  %93 = icmp eq i32 %92, 3, !dbg !18
  br i1 %93, label %assert_end70, label %assert_fail67, !dbg !18, !prof !19

assert_fail67:                                    ; preds = %assert_end66
  %94 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %94(i8* getelementptr inbounds ([113 x i8], [113 x i8]* @.str.15, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end70:                                     ; preds = %assert_end66
  %95 = getelementptr inbounds %1, %1* %compute186, i64 0, i32 3, i32 2, !dbg !18
  %96 = load i16, i16* %95, align 2, !dbg !18
  %97 = icmp eq i16 %96, 1, !dbg !18
  %98 = getelementptr inbounds %1, %1* %compute186, i64 0, i32 3, i32 1, !dbg !18
  %99 = load i8, i8* %98, align 1, !dbg !18
  %100 = icmp eq i8 %99, 32, !dbg !18
  %101 = getelementptr inbounds %1, %1* %compute186, i64 0, i32 3, i32 0, !dbg !18
  %102 = load i8, i8* %101, align 1, !dbg !18
  %103 = icmp eq i8 %102, 2, !dbg !18
  %104 = and i1 %100, %103, !dbg !18
  %105 = and i1 %97, %104, !dbg !18
  br i1 %105, label %assert_end72, label %assert_fail71, !dbg !18, !prof !19

assert_fail71:                                    ; preds = %assert_end70
  %106 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %106(i8* getelementptr inbounds ([247 x i8], [247 x i8]* @.str.16, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end72:                                     ; preds = %assert_end70
  %107 = load i64, i64* %default_function.compute.shape, align 8, !dbg !18, !tbaa !76
  %108 = trunc i64 %107 to i32, !dbg !18
  %109 = icmp eq i32 %108, 11, !dbg !18
  br i1 %109, label %assert_end74, label %assert_fail73, !dbg !18, !prof !19

assert_fail73:                                    ; preds = %assert_end72
  %110 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %110(i8* getelementptr inbounds ([202 x i8], [202 x i8]* @.str.17, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end74:                                     ; preds = %assert_end72
  %111 = getelementptr inbounds i64, i64* %default_function.compute.shape, i64 1, !dbg !18
  %112 = load i64, i64* %111, align 8, !dbg !18, !tbaa !86
  %113 = trunc i64 %112 to i32, !dbg !18
  %114 = icmp eq i32 %113, 1, !dbg !18
  br i1 %114, label %assert_end76, label %assert_fail75, !dbg !18, !prof !19

assert_fail75:                                    ; preds = %assert_end74
  %115 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %115(i8* getelementptr inbounds ([200 x i8], [200 x i8]* @.str.18, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end76:                                     ; preds = %assert_end74
  %116 = getelementptr inbounds i64, i64* %default_function.compute.shape, i64 2, !dbg !18
  %117 = load i64, i64* %116, align 8, !dbg !18, !tbaa !88
  %118 = trunc i64 %117 to i32, !dbg !18
  %119 = icmp eq i32 %118, 18, !dbg !18
  br i1 %119, label %assert_end78, label %assert_fail77, !dbg !18, !prof !19

assert_fail77:                                    ; preds = %assert_end76
  %120 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %120(i8* getelementptr inbounds ([202 x i8], [202 x i8]* @.str.19, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end78:                                     ; preds = %assert_end76
  %121 = icmp eq i64* %default_function.compute.strides, null, !dbg !18
  br i1 %121, label %if_end80, label %if_then79, !dbg !18, !prof !62

if_then79:                                        ; preds = %assert_end78
  %122 = load i64, i64* %default_function.compute.strides, align 8, !dbg !18, !tbaa !91
  %123 = trunc i64 %122 to i32, !dbg !18
  %124 = icmp eq i32 %123, 18, !dbg !18
  %125 = getelementptr inbounds i64, i64* %default_function.compute.strides, i64 2, !dbg !18
  %126 = load i64, i64* %125, align 8, !dbg !18, !tbaa !101
  %127 = trunc i64 %126 to i32, !dbg !18
  %128 = icmp eq i32 %127, 1, !dbg !18
  %129 = and i1 %124, %128, !dbg !18
  br i1 %129, label %if_end80, label %assert_fail81, !dbg !18, !prof !19

if_end80:                                         ; preds = %assert_end78, %if_then79
  %130 = getelementptr inbounds %1, %1* %compute186, i64 0, i32 6, !dbg !18
  %131 = load i64, i64* %130, align 8, !dbg !18
  %132 = icmp eq i64 %131, 0, !dbg !18
  br i1 %132, label %assert_end84, label %assert_fail83, !dbg !18, !prof !19

assert_fail81:                                    ; preds = %if_then79
  %133 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %133(i8* getelementptr inbounds ([198 x i8], [198 x i8]* @.str.20, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail83:                                    ; preds = %if_end80
  %134 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %134(i8* getelementptr inbounds ([205 x i8], [205 x i8]* @.str.21, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end84:                                     ; preds = %if_end80
  %135 = getelementptr inbounds %1, %1* %compute186, i64 0, i32 1, i32 0, !dbg !18
  %136 = load i32, i32* %135, align 4, !dbg !18
  %137 = icmp eq i32 %136, 1, !dbg !18
  br i1 %137, label %assert_end86, label %assert_fail85, !dbg !18, !prof !19

assert_fail85:                                    ; preds = %assert_end84
  %138 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %138(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.22, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end86:                                     ; preds = %assert_end84
  %139 = getelementptr inbounds %1, %1* %compute186, i64 0, i32 1, i32 1, !dbg !18
  %140 = load i32, i32* %139, align 4, !dbg !18
  %141 = icmp eq i32 %dev_id, %140, !dbg !18
  br i1 %141, label %assert_end88, label %assert_fail87, !dbg !18, !prof !19

assert_fail87:                                    ; preds = %assert_end86
  %142 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %142(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.23, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end88:                                     ; preds = %assert_end86
  %143 = getelementptr inbounds %1, %1* %compute4187, i64 0, i32 2, !dbg !18
  %144 = load i32, i32* %143, align 4, !dbg !18
  %145 = icmp eq i32 %144, 3, !dbg !18
  br i1 %145, label %assert_end92, label %assert_fail89, !dbg !18, !prof !19

assert_fail89:                                    ; preds = %assert_end88
  %146 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %146(i8* getelementptr inbounds ([113 x i8], [113 x i8]* @.str.15, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end92:                                     ; preds = %assert_end88
  %147 = getelementptr inbounds %1, %1* %compute4187, i64 0, i32 3, i32 2, !dbg !18
  %148 = load i16, i16* %147, align 2, !dbg !18
  %149 = icmp eq i16 %148, 1, !dbg !18
  %150 = getelementptr inbounds %1, %1* %compute4187, i64 0, i32 3, i32 1, !dbg !18
  %151 = load i8, i8* %150, align 1, !dbg !18
  %152 = icmp eq i8 %151, 32, !dbg !18
  %153 = getelementptr inbounds %1, %1* %compute4187, i64 0, i32 3, i32 0, !dbg !18
  %154 = load i8, i8* %153, align 1, !dbg !18
  %155 = icmp eq i8 %154, 2, !dbg !18
  %156 = and i1 %152, %155, !dbg !18
  %157 = and i1 %149, %156, !dbg !18
  br i1 %157, label %assert_end94, label %assert_fail93, !dbg !18, !prof !19

assert_fail93:                                    ; preds = %assert_end92
  %158 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %158(i8* getelementptr inbounds ([247 x i8], [247 x i8]* @.str.16, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end94:                                     ; preds = %assert_end92
  %159 = load i64, i64* %default_function.compute.shape17, align 8, !dbg !18, !tbaa !104
  %160 = trunc i64 %159 to i32, !dbg !18
  %161 = icmp eq i32 %160, 11, !dbg !18
  br i1 %161, label %assert_end96, label %assert_fail95, !dbg !18, !prof !19

assert_fail95:                                    ; preds = %assert_end94
  %162 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %162(i8* getelementptr inbounds ([202 x i8], [202 x i8]* @.str.17, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end96:                                     ; preds = %assert_end94
  %163 = getelementptr inbounds i64, i64* %default_function.compute.shape17, i64 1, !dbg !18
  %164 = load i64, i64* %163, align 8, !dbg !18, !tbaa !114
  %165 = trunc i64 %164 to i32, !dbg !18
  %166 = icmp eq i32 %165, 1, !dbg !18
  br i1 %166, label %assert_end98, label %assert_fail97, !dbg !18, !prof !19

assert_fail97:                                    ; preds = %assert_end96
  %167 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %167(i8* getelementptr inbounds ([200 x i8], [200 x i8]* @.str.18, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end98:                                     ; preds = %assert_end96
  %168 = getelementptr inbounds i64, i64* %default_function.compute.shape17, i64 2, !dbg !18
  %169 = load i64, i64* %168, align 8, !dbg !18, !tbaa !116
  %170 = trunc i64 %169 to i32, !dbg !18
  %171 = icmp eq i32 %170, 18, !dbg !18
  br i1 %171, label %assert_end100, label %assert_fail99, !dbg !18, !prof !19

assert_fail99:                                    ; preds = %assert_end98
  %172 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %172(i8* getelementptr inbounds ([202 x i8], [202 x i8]* @.str.19, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end100:                                    ; preds = %assert_end98
  %173 = icmp eq i64* %default_function.compute.strides18, null, !dbg !18
  br i1 %173, label %if_end102, label %if_then101, !dbg !18, !prof !62

if_then101:                                       ; preds = %assert_end100
  %174 = load i64, i64* %default_function.compute.strides18, align 8, !dbg !18, !tbaa !119
  %175 = trunc i64 %174 to i32, !dbg !18
  %176 = icmp eq i32 %175, 18, !dbg !18
  %177 = getelementptr inbounds i64, i64* %default_function.compute.strides18, i64 2, !dbg !18
  %178 = load i64, i64* %177, align 8, !dbg !18, !tbaa !129
  %179 = trunc i64 %178 to i32, !dbg !18
  %180 = icmp eq i32 %179, 1, !dbg !18
  %181 = and i1 %176, %180, !dbg !18
  br i1 %181, label %if_end102, label %assert_fail103, !dbg !18, !prof !19

if_end102:                                        ; preds = %assert_end100, %if_then101
  %182 = getelementptr inbounds %1, %1* %compute4187, i64 0, i32 6, !dbg !18
  %183 = load i64, i64* %182, align 8, !dbg !18
  %184 = icmp eq i64 %183, 0, !dbg !18
  br i1 %184, label %assert_end106, label %assert_fail105, !dbg !18, !prof !19

assert_fail103:                                   ; preds = %if_then101
  %185 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %185(i8* getelementptr inbounds ([198 x i8], [198 x i8]* @.str.20, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail105:                                   ; preds = %if_end102
  %186 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %186(i8* getelementptr inbounds ([205 x i8], [205 x i8]* @.str.21, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end106:                                    ; preds = %if_end102
  %187 = getelementptr inbounds %1, %1* %compute4187, i64 0, i32 1, i32 0, !dbg !18
  %188 = load i32, i32* %187, align 4, !dbg !18
  %189 = icmp eq i32 %188, 1, !dbg !18
  br i1 %189, label %assert_end108, label %assert_fail107, !dbg !18, !prof !19

assert_fail107:                                   ; preds = %assert_end106
  %190 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %190(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.22, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end108:                                    ; preds = %assert_end106
  %191 = getelementptr inbounds %1, %1* %compute4187, i64 0, i32 1, i32 1, !dbg !18
  %192 = load i32, i32* %191, align 4, !dbg !18
  %193 = icmp eq i32 %dev_id, %192, !dbg !18
  br i1 %193, label %assert_end110, label %assert_fail109, !dbg !18, !prof !19

assert_fail109:                                   ; preds = %assert_end108
  %194 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %194(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.23, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end110:                                    ; preds = %assert_end108
  %195 = getelementptr inbounds %1, %1* %compute5188, i64 0, i32 2, !dbg !18
  %196 = load i32, i32* %195, align 4, !dbg !18
  %197 = icmp eq i32 %196, 3, !dbg !18
  br i1 %197, label %assert_end114, label %assert_fail111, !dbg !18, !prof !19

assert_fail111:                                   ; preds = %assert_end110
  %198 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %198(i8* getelementptr inbounds ([113 x i8], [113 x i8]* @.str.15, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end114:                                    ; preds = %assert_end110
  %199 = getelementptr inbounds %1, %1* %compute5188, i64 0, i32 3, i32 2, !dbg !18
  %200 = load i16, i16* %199, align 2, !dbg !18
  %201 = icmp eq i16 %200, 1, !dbg !18
  %202 = getelementptr inbounds %1, %1* %compute5188, i64 0, i32 3, i32 1, !dbg !18
  %203 = load i8, i8* %202, align 1, !dbg !18
  %204 = icmp eq i8 %203, 32, !dbg !18
  %205 = getelementptr inbounds %1, %1* %compute5188, i64 0, i32 3, i32 0, !dbg !18
  %206 = load i8, i8* %205, align 1, !dbg !18
  %207 = icmp eq i8 %206, 2, !dbg !18
  %208 = and i1 %204, %207, !dbg !18
  %209 = and i1 %201, %208, !dbg !18
  br i1 %209, label %assert_end116, label %assert_fail115, !dbg !18, !prof !19

assert_fail115:                                   ; preds = %assert_end114
  %210 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %210(i8* getelementptr inbounds ([247 x i8], [247 x i8]* @.str.16, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end116:                                    ; preds = %assert_end114
  %211 = load i64, i64* %default_function.compute.shape24, align 8, !dbg !18, !tbaa !132
  %212 = trunc i64 %211 to i32, !dbg !18
  %213 = icmp eq i32 %212, 11, !dbg !18
  br i1 %213, label %assert_end118, label %assert_fail117, !dbg !18, !prof !19

assert_fail117:                                   ; preds = %assert_end116
  %214 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %214(i8* getelementptr inbounds ([202 x i8], [202 x i8]* @.str.17, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end118:                                    ; preds = %assert_end116
  %215 = getelementptr inbounds i64, i64* %default_function.compute.shape24, i64 1, !dbg !18
  %216 = load i64, i64* %215, align 8, !dbg !18, !tbaa !142
  %217 = trunc i64 %216 to i32, !dbg !18
  %218 = icmp eq i32 %217, 1, !dbg !18
  br i1 %218, label %assert_end120, label %assert_fail119, !dbg !18, !prof !19

assert_fail119:                                   ; preds = %assert_end118
  %219 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %219(i8* getelementptr inbounds ([200 x i8], [200 x i8]* @.str.18, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end120:                                    ; preds = %assert_end118
  %220 = getelementptr inbounds i64, i64* %default_function.compute.shape24, i64 2, !dbg !18
  %221 = load i64, i64* %220, align 8, !dbg !18, !tbaa !144
  %222 = trunc i64 %221 to i32, !dbg !18
  %223 = icmp eq i32 %222, 18, !dbg !18
  br i1 %223, label %assert_end122, label %assert_fail121, !dbg !18, !prof !19

assert_fail121:                                   ; preds = %assert_end120
  %224 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %224(i8* getelementptr inbounds ([202 x i8], [202 x i8]* @.str.19, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end122:                                    ; preds = %assert_end120
  %225 = icmp eq i64* %default_function.compute.strides25, null, !dbg !18
  br i1 %225, label %if_end124, label %if_then123, !dbg !18, !prof !62

if_then123:                                       ; preds = %assert_end122
  %226 = load i64, i64* %default_function.compute.strides25, align 8, !dbg !18, !tbaa !147
  %227 = trunc i64 %226 to i32, !dbg !18
  %228 = icmp eq i32 %227, 18, !dbg !18
  %229 = getelementptr inbounds i64, i64* %default_function.compute.strides25, i64 2, !dbg !18
  %230 = load i64, i64* %229, align 8, !dbg !18, !tbaa !157
  %231 = trunc i64 %230 to i32, !dbg !18
  %232 = icmp eq i32 %231, 1, !dbg !18
  %233 = and i1 %228, %232, !dbg !18
  br i1 %233, label %if_end124, label %assert_fail125, !dbg !18, !prof !19

if_end124:                                        ; preds = %assert_end122, %if_then123
  %234 = getelementptr inbounds %1, %1* %compute5188, i64 0, i32 6, !dbg !18
  %235 = load i64, i64* %234, align 8, !dbg !18
  %236 = icmp eq i64 %235, 0, !dbg !18
  br i1 %236, label %assert_end128, label %assert_fail127, !dbg !18, !prof !19

assert_fail125:                                   ; preds = %if_then123
  %237 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %237(i8* getelementptr inbounds ([198 x i8], [198 x i8]* @.str.20, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail127:                                   ; preds = %if_end124
  %238 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %238(i8* getelementptr inbounds ([205 x i8], [205 x i8]* @.str.21, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end128:                                    ; preds = %if_end124
  %239 = getelementptr inbounds %1, %1* %compute5188, i64 0, i32 1, i32 0, !dbg !18
  %240 = load i32, i32* %239, align 4, !dbg !18
  %241 = icmp eq i32 %240, 1, !dbg !18
  br i1 %241, label %assert_end130, label %assert_fail129, !dbg !18, !prof !19

assert_fail129:                                   ; preds = %assert_end128
  %242 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %242(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.22, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end130:                                    ; preds = %assert_end128
  %243 = getelementptr inbounds %1, %1* %compute5188, i64 0, i32 1, i32 1, !dbg !18
  %244 = load i32, i32* %243, align 4, !dbg !18
  %245 = icmp eq i32 %dev_id, %244, !dbg !18
  br i1 %245, label %assert_end132, label %assert_fail131, !dbg !18, !prof !19

assert_fail131:                                   ; preds = %assert_end130
  %246 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %246(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.23, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end132:                                    ; preds = %assert_end130
  %247 = getelementptr inbounds %1, %1* %compute6189, i64 0, i32 2, !dbg !18
  %248 = load i32, i32* %247, align 4, !dbg !18
  %249 = icmp eq i32 %248, 3, !dbg !18
  br i1 %249, label %assert_end136, label %assert_fail133, !dbg !18, !prof !19

assert_fail133:                                   ; preds = %assert_end132
  %250 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %250(i8* getelementptr inbounds ([113 x i8], [113 x i8]* @.str.15, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end136:                                    ; preds = %assert_end132
  %251 = getelementptr inbounds %1, %1* %compute6189, i64 0, i32 3, i32 2, !dbg !18
  %252 = load i16, i16* %251, align 2, !dbg !18
  %253 = icmp eq i16 %252, 1, !dbg !18
  %254 = getelementptr inbounds %1, %1* %compute6189, i64 0, i32 3, i32 1, !dbg !18
  %255 = load i8, i8* %254, align 1, !dbg !18
  %256 = icmp eq i8 %255, 32, !dbg !18
  %257 = getelementptr inbounds %1, %1* %compute6189, i64 0, i32 3, i32 0, !dbg !18
  %258 = load i8, i8* %257, align 1, !dbg !18
  %259 = icmp eq i8 %258, 2, !dbg !18
  %260 = and i1 %256, %259, !dbg !18
  %261 = and i1 %253, %260, !dbg !18
  br i1 %261, label %assert_end138, label %assert_fail137, !dbg !18, !prof !19

assert_fail137:                                   ; preds = %assert_end136
  %262 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %262(i8* getelementptr inbounds ([247 x i8], [247 x i8]* @.str.16, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end138:                                    ; preds = %assert_end136
  %263 = load i64, i64* %default_function.compute.shape31, align 8, !dbg !18, !tbaa !160
  %264 = trunc i64 %263 to i32, !dbg !18
  %265 = icmp eq i32 %264, 11, !dbg !18
  br i1 %265, label %assert_end140, label %assert_fail139, !dbg !18, !prof !19

assert_fail139:                                   ; preds = %assert_end138
  %266 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %266(i8* getelementptr inbounds ([202 x i8], [202 x i8]* @.str.17, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end140:                                    ; preds = %assert_end138
  %267 = getelementptr inbounds i64, i64* %default_function.compute.shape31, i64 1, !dbg !18
  %268 = load i64, i64* %267, align 8, !dbg !18, !tbaa !170
  %269 = trunc i64 %268 to i32, !dbg !18
  %270 = icmp eq i32 %269, 1, !dbg !18
  br i1 %270, label %assert_end142, label %assert_fail141, !dbg !18, !prof !19

assert_fail141:                                   ; preds = %assert_end140
  %271 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %271(i8* getelementptr inbounds ([200 x i8], [200 x i8]* @.str.18, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end142:                                    ; preds = %assert_end140
  %272 = getelementptr inbounds i64, i64* %default_function.compute.shape31, i64 2, !dbg !18
  %273 = load i64, i64* %272, align 8, !dbg !18, !tbaa !172
  %274 = trunc i64 %273 to i32, !dbg !18
  %275 = icmp eq i32 %274, 18, !dbg !18
  br i1 %275, label %assert_end144, label %assert_fail143, !dbg !18, !prof !19

assert_fail143:                                   ; preds = %assert_end142
  %276 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %276(i8* getelementptr inbounds ([202 x i8], [202 x i8]* @.str.19, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end144:                                    ; preds = %assert_end142
  %277 = icmp eq i64* %default_function.compute.strides32, null, !dbg !18
  br i1 %277, label %if_end146, label %if_then145, !dbg !18, !prof !62

if_then145:                                       ; preds = %assert_end144
  %278 = load i64, i64* %default_function.compute.strides32, align 8, !dbg !18, !tbaa !175
  %279 = trunc i64 %278 to i32, !dbg !18
  %280 = icmp eq i32 %279, 18, !dbg !18
  %281 = getelementptr inbounds i64, i64* %default_function.compute.strides32, i64 2, !dbg !18
  %282 = load i64, i64* %281, align 8, !dbg !18, !tbaa !185
  %283 = trunc i64 %282 to i32, !dbg !18
  %284 = icmp eq i32 %283, 1, !dbg !18
  %285 = and i1 %280, %284, !dbg !18
  br i1 %285, label %if_end146, label %assert_fail147, !dbg !18, !prof !19

if_end146:                                        ; preds = %assert_end144, %if_then145
  %286 = getelementptr inbounds %1, %1* %compute6189, i64 0, i32 6, !dbg !18
  %287 = load i64, i64* %286, align 8, !dbg !18
  %288 = icmp eq i64 %287, 0, !dbg !18
  br i1 %288, label %assert_end150, label %assert_fail149, !dbg !18, !prof !19

assert_fail147:                                   ; preds = %if_then145
  %289 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %289(i8* getelementptr inbounds ([198 x i8], [198 x i8]* @.str.20, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail149:                                   ; preds = %if_end146
  %290 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %290(i8* getelementptr inbounds ([205 x i8], [205 x i8]* @.str.21, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end150:                                    ; preds = %if_end146
  %291 = getelementptr inbounds %1, %1* %compute6189, i64 0, i32 1, i32 0, !dbg !18
  %292 = load i32, i32* %291, align 4, !dbg !18
  %293 = icmp eq i32 %292, 1, !dbg !18
  br i1 %293, label %assert_end152, label %assert_fail151, !dbg !18, !prof !19

assert_fail151:                                   ; preds = %assert_end150
  %294 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %294(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.22, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end152:                                    ; preds = %assert_end150
  %295 = getelementptr inbounds %1, %1* %compute6189, i64 0, i32 1, i32 1, !dbg !18
  %296 = load i32, i32* %295, align 4, !dbg !18
  %297 = icmp eq i32 %dev_id, %296, !dbg !18
  br i1 %297, label %assert_end154, label %assert_fail153, !dbg !18, !prof !19

assert_fail153:                                   ; preds = %assert_end152
  %298 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %298(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.23, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end154:                                    ; preds = %assert_end152
  %299 = getelementptr inbounds %1, %1* %T_subtract190, i64 0, i32 2, !dbg !18
  %300 = load i32, i32* %299, align 4, !dbg !18
  %301 = icmp eq i32 %300, 3, !dbg !18
  br i1 %301, label %assert_end158, label %assert_fail155, !dbg !18, !prof !19

assert_fail155:                                   ; preds = %assert_end154
  %302 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %302(i8* getelementptr inbounds ([119 x i8], [119 x i8]* @.str.24, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end158:                                    ; preds = %assert_end154
  %303 = getelementptr inbounds %1, %1* %T_subtract190, i64 0, i32 3, i32 2, !dbg !18
  %304 = load i16, i16* %303, align 2, !dbg !18
  %305 = icmp eq i16 %304, 1, !dbg !18
  %306 = getelementptr inbounds %1, %1* %T_subtract190, i64 0, i32 3, i32 1, !dbg !18
  %307 = load i8, i8* %306, align 1, !dbg !18
  %308 = icmp eq i8 %307, 32, !dbg !18
  %309 = getelementptr inbounds %1, %1* %T_subtract190, i64 0, i32 3, i32 0, !dbg !18
  %310 = load i8, i8* %309, align 1, !dbg !18
  %311 = icmp eq i8 %310, 2, !dbg !18
  %312 = and i1 %308, %311, !dbg !18
  %313 = and i1 %305, %312, !dbg !18
  br i1 %313, label %assert_end160, label %assert_fail159, !dbg !18, !prof !19

assert_fail159:                                   ; preds = %assert_end158
  %314 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %314(i8* getelementptr inbounds ([259 x i8], [259 x i8]* @.str.25, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end160:                                    ; preds = %assert_end158
  %315 = load i64, i64* %default_function.T_subtract.shape, align 8, !dbg !18, !tbaa !188
  %316 = trunc i64 %315 to i32, !dbg !18
  %317 = icmp eq i32 %316, 11, !dbg !18
  br i1 %317, label %assert_end162, label %assert_fail161, !dbg !18, !prof !19

assert_fail161:                                   ; preds = %assert_end160
  %318 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %318(i8* getelementptr inbounds ([211 x i8], [211 x i8]* @.str.26, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end162:                                    ; preds = %assert_end160
  %319 = getelementptr inbounds i64, i64* %default_function.T_subtract.shape, i64 1, !dbg !18
  %320 = load i64, i64* %319, align 8, !dbg !18, !tbaa !198
  %321 = trunc i64 %320 to i32, !dbg !18
  %322 = icmp eq i32 %321, 1, !dbg !18
  br i1 %322, label %assert_end164, label %assert_fail163, !dbg !18, !prof !19

assert_fail163:                                   ; preds = %assert_end162
  %323 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %323(i8* getelementptr inbounds ([209 x i8], [209 x i8]* @.str.27, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end164:                                    ; preds = %assert_end162
  %324 = getelementptr inbounds i64, i64* %default_function.T_subtract.shape, i64 2, !dbg !18
  %325 = load i64, i64* %324, align 8, !dbg !18, !tbaa !200
  %326 = trunc i64 %325 to i32, !dbg !18
  %327 = icmp eq i32 %326, 18, !dbg !18
  br i1 %327, label %assert_end166, label %assert_fail165, !dbg !18, !prof !19

assert_fail165:                                   ; preds = %assert_end164
  %328 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %328(i8* getelementptr inbounds ([211 x i8], [211 x i8]* @.str.28, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end166:                                    ; preds = %assert_end164
  %329 = icmp eq i64* %default_function.T_subtract.strides, null, !dbg !18
  br i1 %329, label %if_end168, label %if_then167, !dbg !18, !prof !62

if_then167:                                       ; preds = %assert_end166
  %330 = load i64, i64* %default_function.T_subtract.strides, align 8, !dbg !18, !tbaa !203
  %331 = trunc i64 %330 to i32, !dbg !18
  %332 = icmp eq i32 %331, 18, !dbg !18
  %333 = getelementptr inbounds i64, i64* %default_function.T_subtract.strides, i64 2, !dbg !18
  %334 = load i64, i64* %333, align 8, !dbg !18, !tbaa !213
  %335 = trunc i64 %334 to i32, !dbg !18
  %336 = icmp eq i32 %335, 1, !dbg !18
  %337 = and i1 %332, %336, !dbg !18
  br i1 %337, label %if_end168, label %assert_fail169, !dbg !18, !prof !19

if_end168:                                        ; preds = %assert_end166, %if_then167
  %338 = getelementptr inbounds %1, %1* %T_subtract190, i64 0, i32 6, !dbg !18
  %339 = load i64, i64* %338, align 8, !dbg !18
  %340 = icmp eq i64 %339, 0, !dbg !18
  br i1 %340, label %assert_end172, label %assert_fail171, !dbg !18, !prof !19

assert_fail169:                                   ; preds = %if_then167
  %341 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %341(i8* getelementptr inbounds ([207 x i8], [207 x i8]* @.str.29, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail171:                                   ; preds = %if_end168
  %342 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %342(i8* getelementptr inbounds ([214 x i8], [214 x i8]* @.str.30, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end172:                                    ; preds = %if_end168
  %343 = getelementptr inbounds %1, %1* %T_subtract190, i64 0, i32 1, i32 0, !dbg !18
  %344 = load i32, i32* %343, align 4, !dbg !18
  %345 = icmp eq i32 %344, 1, !dbg !18
  br i1 %345, label %assert_end174, label %assert_fail173, !dbg !18, !prof !19

assert_fail173:                                   ; preds = %assert_end172
  %346 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %346(i8* getelementptr inbounds ([194 x i8], [194 x i8]* @.str.31, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end174:                                    ; preds = %assert_end172
  %347 = getelementptr inbounds %1, %1* %T_subtract190, i64 0, i32 1, i32 1, !dbg !18
  %348 = load i32, i32* %347, align 4, !dbg !18
  %349 = icmp eq i32 %dev_id, %348, !dbg !18
  br i1 %349, label %assert_end176, label %assert_fail175, !dbg !18, !prof !19

assert_fail175:                                   ; preds = %assert_end174
  %350 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %350(i8* getelementptr inbounds ([200 x i8], [200 x i8]* @.str.32, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end176:                                    ; preds = %assert_end174
  %351 = call fastcc i32 @default_function_compute_(i8* nonnull %stack_value, float* %T_subtract_void_ptr196, i32* nonnull %stack_tcode184.sub, float* %compute_void_ptr192, float* %compute_void_ptr12193, float* %compute_void_ptr19194, float* %compute_void_ptr26195, float* %ph_0_void_ptr191), !dbg !18
  ret i32 %351, !dbg !18
}

; Function Attrs: nounwind willreturn
declare void @llvm.assume(i1) #1

; Function Attrs: noinline
define internal fastcc i32 @default_function_compute_(i8* noalias %0, float* noalias align 64 %1, i32* noalias %2, float* noalias align 64 %3, float* noalias align 64 %4, float* noalias align 64 %5, float* noalias align 64 %6, float* noalias align 64 %7) unnamed_addr #2 {
entry:
  %8 = alloca i8*, align 8
  %9 = bitcast i8* %0 to %0*
  %10 = bitcast i8* %0 to float**
  store float* %1, float** %10, align 8
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to float**
  store float* %3, float** %12, align 8
  %13 = getelementptr inbounds i8, i8* %0, i64 16
  %14 = bitcast i8* %13 to float**
  store float* %4, float** %14, align 8
  %15 = getelementptr inbounds i8, i8* %0, i64 24
  %16 = bitcast i8* %15 to float**
  store float* %5, float** %16, align 8
  %17 = bitcast i32* %2 to <4 x i32>*
  store <4 x i32> <i32 3, i32 3, i32 3, i32 3>, <4 x i32>* %17, align 4, !tbaa !216
  %18 = getelementptr inbounds i8, i8* %0, i64 32
  %19 = bitcast i8* %18 to float**
  store float* %6, float** %19, align 8
  %20 = getelementptr inbounds i32, i32* %2, i64 4
  store i32 3, i32* %20, align 4, !tbaa !225
  %21 = getelementptr inbounds i8, i8* %0, i64 40
  %22 = bitcast i8* %21 to float**
  store float* %7, float** %22, align 8
  %23 = getelementptr inbounds i32, i32* %2, i64 5
  store i32 3, i32* %23, align 4, !tbaa !229
  %24 = getelementptr inbounds i8, i8* %0, i64 48
  %25 = bitcast i8* %24 to %0*
  %26 = getelementptr inbounds i32, i32* %2, i64 6
  %27 = load i32 (i8*, %0*, i32*, i32, %0*, i32*)*, i32 (i8*, %0*, i32*, i32, %0*, i32*)** @__TVMFuncCall, align 8, !tbaa !20
  %28 = load i8*, i8** @.tvm_func.default_function_kernel, align 8
  %29 = icmp eq i8* %28, null
  br i1 %29, label %handle_init, label %handle_init_end, !prof !62

handle_init:                                      ; preds = %entry
  %30 = load i8*, i8** @__tvm_module_ctx, align 8, !tbaa !20
  %31 = load i32 (i8*, i8*, i8**)*, i32 (i8*, i8*, i8**)** @__TVMBackendGetFuncFromEnv, align 8, !tbaa !20
  %32 = call i32 %31(i8* %30, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.33, i64 0, i64 0), i8** nonnull %8)
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %call_end, label %call_fail, !prof !19

handle_init_end:                                  ; preds = %entry, %call_end
  %34 = phi i8* [ %28, %entry ], [ %37, %call_end ]
  %35 = call i32 %27(i8* %34, %0* %9, i32* nonnull %2, i32 6, %0* nonnull %25, i32* nonnull %26)
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %call_end2, label %call_fail, !prof !19

call_fail:                                        ; preds = %call_end2, %handle_init_end, %handle_init
  %merge = phi i32 [ %32, %handle_init ], [ %35, %handle_init_end ], [ 0, %call_end2 ]
  ret i32 %merge

call_end:                                         ; preds = %handle_init
  %37 = load i8*, i8** %8, align 8
  store i8* %37, i8** @.tvm_func.default_function_kernel, align 8
  br label %handle_init_end

call_end2:                                        ; preds = %handle_init_end
  %38 = bitcast i8* %24 to i64*
  %39 = load i64, i64* %38, align 8
  %kernel_error_code = trunc i64 %39 to i32
  %40 = icmp eq i32 %kernel_error_code, 0
  br i1 %40, label %call_fail, label %assert_fail, !prof !19

assert_fail:                                      ; preds = %call_end2
  %41 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !20
  call void %41(i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.34, i64 0, i64 0))
  ret i32 -1
}

; Function Attrs: nounwind readnone
define weak dso_local i16 @__truncsfhf2(float %a0) local_unnamed_addr #3 section ".text.tvm.fp16.conv" {
b0:
  %v0 = bitcast float %a0 to i32
  %v1 = and i32 %v0, 2147483647
  %v2 = add nsw i32 %v1, -947912704
  %v3 = add nsw i32 %v1, -1199570944
  %v4 = icmp ult i32 %v2, %v3
  br i1 %v4, label %b1, label %b5

b1:                                               ; preds = %b0
  %v5 = lshr i32 %v0, 13
  %v6 = and i32 %v5, 65535
  %v7 = add nuw nsw i32 %v6, -114688
  %v8 = and i32 %v0, 8191
  %v9 = icmp ugt i32 %v8, 4096
  br i1 %v9, label %b2, label %b3

b2:                                               ; preds = %b1
  %v10 = add nuw nsw i32 %v6, -114687
  br label %b13

b3:                                               ; preds = %b1
  %v11 = icmp eq i32 %v8, 4096
  br i1 %v11, label %b4, label %b13

b4:                                               ; preds = %b3
  %v12 = and i32 %v7, 65535
  %v13 = and i32 %v5, 1
  %v14 = add nuw nsw i32 %v12, %v13
  br label %b13

b5:                                               ; preds = %b0
  %v15 = icmp ugt i32 %v1, 2139095040
  br i1 %v15, label %b6, label %b7

b6:                                               ; preds = %b5
  %v16 = lshr i32 %v0, 13
  %v17 = and i32 %v16, 511
  %v18 = or i32 %v17, 32256
  br label %b13

b7:                                               ; preds = %b5
  %v19 = icmp ugt i32 %v1, 1199570943
  br i1 %v19, label %b13, label %b8

b8:                                               ; preds = %b7
  %v20 = icmp ult i32 %v1, 754974720
  br i1 %v20, label %b13, label %b9

b9:                                               ; preds = %b8
  %v21 = lshr i32 %v1, 23
  %v22 = sub nsw i32 113, %v21
  %v23 = and i32 %v0, 8388607
  %v24 = or i32 %v23, 8388608
  %v25 = add nsw i32 %v21, -81
  %v26 = shl i32 %v24, %v25
  %v27 = icmp ne i32 %v26, 0
  %v28 = lshr i32 %v24, %v22
  %v29 = zext i1 %v27 to i32
  %v30 = lshr i32 %v28, 13
  %v31 = and i32 %v28, 8191
  %v32 = or i32 %v31, %v29
  %v33 = icmp ugt i32 %v32, 4096
  br i1 %v33, label %b10, label %b11

b10:                                              ; preds = %b9
  %v34 = add nuw nsw i32 %v30, 1
  br label %b13

b11:                                              ; preds = %b9
  %v35 = icmp eq i32 %v32, 4096
  br i1 %v35, label %b12, label %b13

b12:                                              ; preds = %b11
  %v36 = and i32 %v30, 1
  %v37 = add nuw nsw i32 %v36, %v30
  br label %b13

b13:                                              ; preds = %b12, %b11, %b10, %b8, %b7, %b6, %b4, %b3, %b2
  %v38 = phi i32 [ %v18, %b6 ], [ %v10, %b2 ], [ %v14, %b4 ], [ %v7, %b3 ], [ 31744, %b7 ], [ 0, %b8 ], [ %v34, %b10 ], [ %v37, %b12 ], [ %v30, %b11 ]
  %v39 = lshr i32 %v0, 16
  %v40 = and i32 %v39, 32768
  %v41 = or i32 %v38, %v40
  %vlast = trunc i32 %v41 to i16
  ret i16 %vlast
}

; Function Attrs: nounwind readnone
define weak dso_local float @__extendhfsf2(i16 %a0) local_unnamed_addr #3 section ".text.tvm.fp16.conv" {
b0:
  %v1 = and i16 %a0, 32767
  %v2 = zext i16 %v1 to i32
  %v3 = add nsw i16 %v1, -1024
  %v4 = icmp ult i16 %v3, 30720
  br i1 %v4, label %b1, label %b2

b1:                                               ; preds = %b0
  %v5 = shl nuw nsw i32 %v2, 13
  %v6 = add nuw nsw i32 %v5, 939524096
  br label %b6

b2:                                               ; preds = %b0
  %v7 = icmp ugt i16 %v1, 31743
  br i1 %v7, label %b3, label %b4

b3:                                               ; preds = %b2
  %v8 = shl nuw nsw i32 %v2, 13
  %v9 = or i32 %v8, 2139095040
  br label %b6

b4:                                               ; preds = %b2
  %v10 = icmp eq i16 %v1, 0
  br i1 %v10, label %b6, label %b5

b5:                                               ; preds = %b4
  %v11 = icmp ult i16 %v1, 256
  %v12 = lshr i32 %v2, 8
  %v13 = select i1 %v11, i32 %v2, i32 %v12
  %v14 = select i1 %v11, i32 32, i32 24
  %v15 = icmp ult i32 %v13, 16
  %v16 = lshr i32 %v13, 4
  %v17 = add nsw i32 %v14, -4
  %v18 = select i1 %v15, i32 %v13, i32 %v16
  %v19 = select i1 %v15, i32 %v14, i32 %v17
  %v20 = icmp ult i32 %v18, 4
  %v21 = lshr i32 %v18, 2
  %v22 = add nsw i32 %v19, -2
  %v23 = select i1 %v20, i32 %v18, i32 %v21
  %v24 = select i1 %v20, i32 %v19, i32 %v22
  %v25 = icmp ult i32 %v23, 2
  %v26 = sub nsw i32 0, %v23
  %v27 = select i1 %v25, i32 %v26, i32 -2
  %v28 = add nsw i32 %v27, %v24
  %v29 = add nsw i32 %v28, -8
  %v30 = shl i32 %v2, %v29
  %v31 = xor i32 %v30, 8388608
  %v32 = shl i32 %v28, 23
  %v33 = sub i32 1124073472, %v32
  %v34 = or i32 %v31, %v33
  br label %b6

b6:                                               ; preds = %b5, %b4, %b3, %b1
  %v35 = phi i32 [ %v6, %b1 ], [ %v9, %b3 ], [ %v34, %b5 ], [ 0, %b4 ]
  %v36 = and i16 %a0, -32768
  %v37 = zext i16 %v36 to i32
  %v38 = shl nuw i32 %v37, 16
  %v39 = or i32 %v35, %v38
  %v40 = bitcast i32 %v39 to float
  ret float %v40
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.value(metadata, metadata, metadata) #4

attributes #0 = { "target-cpu"="generic" }
attributes #1 = { nounwind willreturn }
attributes #2 = { noinline "target-cpu"="generic" }
attributes #3 = { nounwind readnone "target-cpu"="generic" "target-features" }
attributes #4 = { nounwind readnone speculatable willreturn }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "TVM", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2)
!1 = !DIFile(filename: "main.tir", directory: ".")
!2 = !{}
!3 = !{i32 2, !"tvm_target", !"llvm -mtriple=x86_64-pc-linux-gnu"}
!4 = !{i32 4, !"Debug Info Version", i32 3}
!5 = distinct !DISubprogram(name: "main.tir", scope: !1, file: !1, type: !6, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !11)
!6 = !DISubroutineType(types: !7)
!7 = !{!8, !9, !10, !8, !9, !10, !9}
!8 = !DIBasicType(name: "int32", size: 32, encoding: DW_ATE_signed)
!9 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null)
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8)
!11 = !{!12, !13, !14, !15, !16, !17}
!12 = !DILocalVariable(name: "arg1", arg: 1, scope: !5, file: !1, type: !9)
!13 = !DILocalVariable(name: "arg2", arg: 2, scope: !5, file: !1, type: !10)
!14 = !DILocalVariable(name: "arg3", arg: 3, scope: !5, file: !1, type: !8)
!15 = !DILocalVariable(name: "arg4", arg: 4, scope: !5, file: !1, type: !9)
!16 = !DILocalVariable(name: "arg5", arg: 5, scope: !5, file: !1, type: !10)
!17 = !DILocalVariable(name: "arg6", arg: 6, scope: !5, file: !1, type: !9)
!18 = !DILocation(line: 0, scope: !5)
!19 = !{!"branch_weights", i32 1048576, i32 1}
!20 = !{!21, !21, i64 0}
!21 = !{!"ctx_ptr", !22, i64 0}
!22 = !{!"tvm-tbaa"}
!23 = !{!24, !24, i64 0}
!24 = !{!"0x4ce6a00.w4.b0", !25, i64 0}
!25 = !{!"0x4ce6a00.w8.b0", !26, i64 0}
!26 = !{!"0x4ce6a00.w16.b0", !27, i64 0}
!27 = !{!"0x4ce6a00.w32.b0", !28, i64 0}
!28 = !{!"0x4ce6a00.w64.b0", !29, i64 0}
!29 = !{!"0x4ce6a00.w128.b0", !30, i64 0}
!30 = !{!"0x4ce6a00.w256.b0", !31, i64 0}
!31 = !{!"0x4ce6a00.w512.b0", !32, i64 0}
!32 = !{!"0x4ce6a00.w1024.b0", !33, i64 0}
!33 = !{!"0x4ce6a00", !22, i64 0}
!34 = !{!35, !35, i64 0}
!35 = !{!"0x4ce6a00.w4.b4", !25, i64 0}
!36 = !{!37, !37, i64 0}
!37 = !{!"0x4ce6a00.w4.b8", !38, i64 0}
!38 = !{!"0x4ce6a00.w8.b8", !26, i64 0}
!39 = !{!40, !40, i64 0}
!40 = !{!"0x4ce6a00.w4.b12", !38, i64 0}
!41 = !{!42, !42, i64 0}
!42 = !{!"0x4ce6a00.w4.b16", !43, i64 0}
!43 = !{!"0x4ce6a00.w8.b16", !44, i64 0}
!44 = !{!"0x4ce6a00.w16.b16", !27, i64 0}
!45 = !{!46, !46, i64 0}
!46 = !{!"0x4ce6a00.w4.b20", !43, i64 0}
!47 = !{!48, !48, i64 0}
!48 = !{!"0x4792f30.w8.b0", !49, i64 0}
!49 = !{!"0x4792f30.w16.b0", !50, i64 0}
!50 = !{!"0x4792f30.w32.b0", !51, i64 0}
!51 = !{!"0x4792f30.w64.b0", !52, i64 0}
!52 = !{!"0x4792f30.w128.b0", !53, i64 0}
!53 = !{!"0x4792f30.w256.b0", !54, i64 0}
!54 = !{!"0x4792f30.w512.b0", !55, i64 0}
!55 = !{!"0x4792f30.w1024.b0", !56, i64 0}
!56 = !{!"0x4792f30", !22, i64 0}
!57 = !{!58, !58, i64 0}
!58 = !{!"0x4792f30.w8.b8", !49, i64 0}
!59 = !{!60, !60, i64 0}
!60 = !{!"0x4792f30.w8.b16", !61, i64 0}
!61 = !{!"0x4792f30.w16.b16", !50, i64 0}
!62 = !{!"branch_weights", i32 1, i32 1048576}
!63 = !{!64, !64, i64 0}
!64 = !{!"0x445bdf0.w8.b0", !65, i64 0}
!65 = !{!"0x445bdf0.w16.b0", !66, i64 0}
!66 = !{!"0x445bdf0.w32.b0", !67, i64 0}
!67 = !{!"0x445bdf0.w64.b0", !68, i64 0}
!68 = !{!"0x445bdf0.w128.b0", !69, i64 0}
!69 = !{!"0x445bdf0.w256.b0", !70, i64 0}
!70 = !{!"0x445bdf0.w512.b0", !71, i64 0}
!71 = !{!"0x445bdf0.w1024.b0", !72, i64 0}
!72 = !{!"0x445bdf0", !22, i64 0}
!73 = !{!74, !74, i64 0}
!74 = !{!"0x445bdf0.w8.b16", !75, i64 0}
!75 = !{!"0x445bdf0.w16.b16", !66, i64 0}
!76 = !{!77, !77, i64 0}
!77 = !{!"0x447bde0.w8.b0", !78, i64 0}
!78 = !{!"0x447bde0.w16.b0", !79, i64 0}
!79 = !{!"0x447bde0.w32.b0", !80, i64 0}
!80 = !{!"0x447bde0.w64.b0", !81, i64 0}
!81 = !{!"0x447bde0.w128.b0", !82, i64 0}
!82 = !{!"0x447bde0.w256.b0", !83, i64 0}
!83 = !{!"0x447bde0.w512.b0", !84, i64 0}
!84 = !{!"0x447bde0.w1024.b0", !85, i64 0}
!85 = !{!"0x447bde0", !22, i64 0}
!86 = !{!87, !87, i64 0}
!87 = !{!"0x447bde0.w8.b8", !78, i64 0}
!88 = !{!89, !89, i64 0}
!89 = !{!"0x447bde0.w8.b16", !90, i64 0}
!90 = !{!"0x447bde0.w16.b16", !79, i64 0}
!91 = !{!92, !92, i64 0}
!92 = !{!"0x4b37180.w8.b0", !93, i64 0}
!93 = !{!"0x4b37180.w16.b0", !94, i64 0}
!94 = !{!"0x4b37180.w32.b0", !95, i64 0}
!95 = !{!"0x4b37180.w64.b0", !96, i64 0}
!96 = !{!"0x4b37180.w128.b0", !97, i64 0}
!97 = !{!"0x4b37180.w256.b0", !98, i64 0}
!98 = !{!"0x4b37180.w512.b0", !99, i64 0}
!99 = !{!"0x4b37180.w1024.b0", !100, i64 0}
!100 = !{!"0x4b37180", !22, i64 0}
!101 = !{!102, !102, i64 0}
!102 = !{!"0x4b37180.w8.b16", !103, i64 0}
!103 = !{!"0x4b37180.w16.b16", !94, i64 0}
!104 = !{!105, !105, i64 0}
!105 = !{!"0x4574c70.w8.b0", !106, i64 0}
!106 = !{!"0x4574c70.w16.b0", !107, i64 0}
!107 = !{!"0x4574c70.w32.b0", !108, i64 0}
!108 = !{!"0x4574c70.w64.b0", !109, i64 0}
!109 = !{!"0x4574c70.w128.b0", !110, i64 0}
!110 = !{!"0x4574c70.w256.b0", !111, i64 0}
!111 = !{!"0x4574c70.w512.b0", !112, i64 0}
!112 = !{!"0x4574c70.w1024.b0", !113, i64 0}
!113 = !{!"0x4574c70", !22, i64 0}
!114 = !{!115, !115, i64 0}
!115 = !{!"0x4574c70.w8.b8", !106, i64 0}
!116 = !{!117, !117, i64 0}
!117 = !{!"0x4574c70.w8.b16", !118, i64 0}
!118 = !{!"0x4574c70.w16.b16", !107, i64 0}
!119 = !{!120, !120, i64 0}
!120 = !{!"0x4cbefd0.w8.b0", !121, i64 0}
!121 = !{!"0x4cbefd0.w16.b0", !122, i64 0}
!122 = !{!"0x4cbefd0.w32.b0", !123, i64 0}
!123 = !{!"0x4cbefd0.w64.b0", !124, i64 0}
!124 = !{!"0x4cbefd0.w128.b0", !125, i64 0}
!125 = !{!"0x4cbefd0.w256.b0", !126, i64 0}
!126 = !{!"0x4cbefd0.w512.b0", !127, i64 0}
!127 = !{!"0x4cbefd0.w1024.b0", !128, i64 0}
!128 = !{!"0x4cbefd0", !22, i64 0}
!129 = !{!130, !130, i64 0}
!130 = !{!"0x4cbefd0.w8.b16", !131, i64 0}
!131 = !{!"0x4cbefd0.w16.b16", !122, i64 0}
!132 = !{!133, !133, i64 0}
!133 = !{!"0x4cdeab0.w8.b0", !134, i64 0}
!134 = !{!"0x4cdeab0.w16.b0", !135, i64 0}
!135 = !{!"0x4cdeab0.w32.b0", !136, i64 0}
!136 = !{!"0x4cdeab0.w64.b0", !137, i64 0}
!137 = !{!"0x4cdeab0.w128.b0", !138, i64 0}
!138 = !{!"0x4cdeab0.w256.b0", !139, i64 0}
!139 = !{!"0x4cdeab0.w512.b0", !140, i64 0}
!140 = !{!"0x4cdeab0.w1024.b0", !141, i64 0}
!141 = !{!"0x4cdeab0", !22, i64 0}
!142 = !{!143, !143, i64 0}
!143 = !{!"0x4cdeab0.w8.b8", !134, i64 0}
!144 = !{!145, !145, i64 0}
!145 = !{!"0x4cdeab0.w8.b16", !146, i64 0}
!146 = !{!"0x4cdeab0.w16.b16", !135, i64 0}
!147 = !{!148, !148, i64 0}
!148 = !{!"0x4cf5d50.w8.b0", !149, i64 0}
!149 = !{!"0x4cf5d50.w16.b0", !150, i64 0}
!150 = !{!"0x4cf5d50.w32.b0", !151, i64 0}
!151 = !{!"0x4cf5d50.w64.b0", !152, i64 0}
!152 = !{!"0x4cf5d50.w128.b0", !153, i64 0}
!153 = !{!"0x4cf5d50.w256.b0", !154, i64 0}
!154 = !{!"0x4cf5d50.w512.b0", !155, i64 0}
!155 = !{!"0x4cf5d50.w1024.b0", !156, i64 0}
!156 = !{!"0x4cf5d50", !22, i64 0}
!157 = !{!158, !158, i64 0}
!158 = !{!"0x4cf5d50.w8.b16", !159, i64 0}
!159 = !{!"0x4cf5d50.w16.b16", !150, i64 0}
!160 = !{!161, !161, i64 0}
!161 = !{!"0x448b1e0.w8.b0", !162, i64 0}
!162 = !{!"0x448b1e0.w16.b0", !163, i64 0}
!163 = !{!"0x448b1e0.w32.b0", !164, i64 0}
!164 = !{!"0x448b1e0.w64.b0", !165, i64 0}
!165 = !{!"0x448b1e0.w128.b0", !166, i64 0}
!166 = !{!"0x448b1e0.w256.b0", !167, i64 0}
!167 = !{!"0x448b1e0.w512.b0", !168, i64 0}
!168 = !{!"0x448b1e0.w1024.b0", !169, i64 0}
!169 = !{!"0x448b1e0", !22, i64 0}
!170 = !{!171, !171, i64 0}
!171 = !{!"0x448b1e0.w8.b8", !162, i64 0}
!172 = !{!173, !173, i64 0}
!173 = !{!"0x448b1e0.w8.b16", !174, i64 0}
!174 = !{!"0x448b1e0.w16.b16", !163, i64 0}
!175 = !{!176, !176, i64 0}
!176 = !{!"0x448b740.w8.b0", !177, i64 0}
!177 = !{!"0x448b740.w16.b0", !178, i64 0}
!178 = !{!"0x448b740.w32.b0", !179, i64 0}
!179 = !{!"0x448b740.w64.b0", !180, i64 0}
!180 = !{!"0x448b740.w128.b0", !181, i64 0}
!181 = !{!"0x448b740.w256.b0", !182, i64 0}
!182 = !{!"0x448b740.w512.b0", !183, i64 0}
!183 = !{!"0x448b740.w1024.b0", !184, i64 0}
!184 = !{!"0x448b740", !22, i64 0}
!185 = !{!186, !186, i64 0}
!186 = !{!"0x448b740.w8.b16", !187, i64 0}
!187 = !{!"0x448b740.w16.b16", !178, i64 0}
!188 = !{!189, !189, i64 0}
!189 = !{!"0x4cf35f0.w8.b0", !190, i64 0}
!190 = !{!"0x4cf35f0.w16.b0", !191, i64 0}
!191 = !{!"0x4cf35f0.w32.b0", !192, i64 0}
!192 = !{!"0x4cf35f0.w64.b0", !193, i64 0}
!193 = !{!"0x4cf35f0.w128.b0", !194, i64 0}
!194 = !{!"0x4cf35f0.w256.b0", !195, i64 0}
!195 = !{!"0x4cf35f0.w512.b0", !196, i64 0}
!196 = !{!"0x4cf35f0.w1024.b0", !197, i64 0}
!197 = !{!"0x4cf35f0", !22, i64 0}
!198 = !{!199, !199, i64 0}
!199 = !{!"0x4cf35f0.w8.b8", !190, i64 0}
!200 = !{!201, !201, i64 0}
!201 = !{!"0x4cf35f0.w8.b16", !202, i64 0}
!202 = !{!"0x4cf35f0.w16.b16", !191, i64 0}
!203 = !{!204, !204, i64 0}
!204 = !{!"0x4cdf7e0.w8.b0", !205, i64 0}
!205 = !{!"0x4cdf7e0.w16.b0", !206, i64 0}
!206 = !{!"0x4cdf7e0.w32.b0", !207, i64 0}
!207 = !{!"0x4cdf7e0.w64.b0", !208, i64 0}
!208 = !{!"0x4cdf7e0.w128.b0", !209, i64 0}
!209 = !{!"0x4cdf7e0.w256.b0", !210, i64 0}
!210 = !{!"0x4cdf7e0.w512.b0", !211, i64 0}
!211 = !{!"0x4cdf7e0.w1024.b0", !212, i64 0}
!212 = !{!"0x4cdf7e0", !22, i64 0}
!213 = !{!214, !214, i64 0}
!214 = !{!"0x4cdf7e0.w8.b16", !215, i64 0}
!215 = !{!"0x4cdf7e0.w16.b16", !206, i64 0}
!216 = !{!217, !217, i64 0}
!217 = !{!"0x4cf4850.w16.b0", !218, i64 0}
!218 = !{!"0x4cf4850.w32.b0", !219, i64 0}
!219 = !{!"0x4cf4850.w64.b0", !220, i64 0}
!220 = !{!"0x4cf4850.w128.b0", !221, i64 0}
!221 = !{!"0x4cf4850.w256.b0", !222, i64 0}
!222 = !{!"0x4cf4850.w512.b0", !223, i64 0}
!223 = !{!"0x4cf4850.w1024.b0", !224, i64 0}
!224 = !{!"0x4cf4850", !22, i64 0}
!225 = !{!226, !226, i64 0}
!226 = !{!"0x4cf4850.w4.b16", !227, i64 0}
!227 = !{!"0x4cf4850.w8.b16", !228, i64 0}
!228 = !{!"0x4cf4850.w16.b16", !218, i64 0}
!229 = !{!230, !230, i64 0}
!230 = !{!"0x4cf4850.w4.b20", !227, i64 0}
