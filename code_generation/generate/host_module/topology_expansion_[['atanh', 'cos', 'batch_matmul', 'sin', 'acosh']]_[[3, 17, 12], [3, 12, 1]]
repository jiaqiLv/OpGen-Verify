; ModuleID = 'TVMMod'
source_filename = "TVMMod"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%0 = type { double }
%1 = type { i8*, %2, i32, %3, i64*, i64*, i64 }
%2 = type { i32, i32 }
%3 = type { i8, i8, i16 }

@__tvm_module_ctx = linkonce dllexport local_unnamed_addr global i8* null, align 8
@__TVMFuncCall = linkonce dllexport local_unnamed_addr global i32 (i8*, %0*, i32*, i32, %0*, i32*)* null, align 8
@__TVMBackendGetFuncFromEnv = linkonce dllexport local_unnamed_addr global i32 (i8*, i8*, i8**)* null, align 8
@__TVMAPISetLastError = linkonce dllexport local_unnamed_addr global void (i8*)* null, align 8
@.str = private constant [67 x i8] c"Assert fail: num_args == 5, default_function: num_args should be 5\00", align 1
@.str.1 = private constant [130 x i8] c"Assert fail: ph_0_code == 3 or ph_0_code == 13 or ph_0_code == 7 or ph_0_code == 4, default_function: Expect arg[0] to be pointer\00", align 1
@.str.2 = private constant [130 x i8] c"Assert fail: ph_4_code == 3 or ph_4_code == 13 or ph_4_code == 7 or ph_4_code == 4, default_function: Expect arg[1] to be pointer\00", align 1
@.str.3 = private constant [142 x i8] c"Assert fail: compute_code == 3 or compute_code == 13 or compute_code == 7 or compute_code == 4, default_function: Expect arg[2] to be pointer\00", align 1
@.str.4 = private constant [182 x i8] c"Assert fail: T_batch_matmul_NN_code == 3 or T_batch_matmul_NN_code == 13 or T_batch_matmul_NN_code == 7 or T_batch_matmul_NN_code == 4, default_function: Expect arg[3] to be pointer\00", align 1
@.str.5 = private constant [142 x i8] c"Assert fail: compute_code == 3 or compute_code == 13 or compute_code == 7 or compute_code == 4, default_function: Expect arg[4] to be pointer\00", align 1
@.str.6 = private constant [107 x i8] c"Assert fail: 3 == T.tvm_struct_get(ph_0, 0, 4, \22int32\22), default_function.ph_0.ndim is expected to equal 3\00", align 1
@.str.7 = private constant [235 x i8] c"Assert fail: T.tvm_struct_get(ph_0, 0, 5, \22uint8\22) == T.uint8(2) and T.tvm_struct_get(ph_0, 0, 6, \22uint8\22) == T.uint8(32) and T.tvm_struct_get(ph_0, 0, 7, \22uint16\22) == T.uint16(1), default_function.ph_0.dtype is expected to be float32\00", align 1
@.str.8 = private constant [191 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_0_shape[0]) == 3, Argument default_function.ph_0.shape[0] has an unsatisfied constraint: 3 == T.Cast(\22int32\22, default_function_ph_0_shape[0])\00", align 1
@.str.9 = private constant [193 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_0_shape[1]) == 17, Argument default_function.ph_0.shape[1] has an unsatisfied constraint: 17 == T.Cast(\22int32\22, default_function_ph_0_shape[1])\00", align 1
@.str.10 = private constant [193 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_0_shape[2]) == 12, Argument default_function.ph_0.shape[2] has an unsatisfied constraint: 12 == T.Cast(\22int32\22, default_function_ph_0_shape[2])\00", align 1
@.str.11 = private constant [250 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_ph_0_strides[2]) and 12 == T.Cast(\22int32\22, default_function_ph_0_strides[1]) and 204 == T.Cast(\22int32\22, default_function_ph_0_strides[0]), default_function.ph_0.strides: expected to be compact array\00", align 1
@.str.12 = private constant [196 x i8] c"Assert fail: T.uint64(0) == T.tvm_struct_get(ph_0, 0, 8, \22uint64\22), Argument default_function.ph_0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(ph_0, 0, 8, \22uint64\22)\00", align 1
@.str.13 = private constant [176 x i8] c"Assert fail: T.tvm_struct_get(ph_0, 0, 10, \22int32\22) == 1, Argument default_function.ph_0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(ph_0, 0, 10, \22int32\22)\00", align 1
@.str.14 = private constant [107 x i8] c"Assert fail: 3 == T.tvm_struct_get(ph_4, 0, 4, \22int32\22), default_function.ph_4.ndim is expected to equal 3\00", align 1
@.str.15 = private constant [235 x i8] c"Assert fail: T.tvm_struct_get(ph_4, 0, 5, \22uint8\22) == T.uint8(2) and T.tvm_struct_get(ph_4, 0, 6, \22uint8\22) == T.uint8(32) and T.tvm_struct_get(ph_4, 0, 7, \22uint16\22) == T.uint16(1), default_function.ph_4.dtype is expected to be float32\00", align 1
@.str.16 = private constant [191 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_4_shape[0]) == 3, Argument default_function.ph_4.shape[0] has an unsatisfied constraint: 3 == T.Cast(\22int32\22, default_function_ph_4_shape[0])\00", align 1
@.str.17 = private constant [193 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_4_shape[1]) == 12, Argument default_function.ph_4.shape[1] has an unsatisfied constraint: 12 == T.Cast(\22int32\22, default_function_ph_4_shape[1])\00", align 1
@.str.18 = private constant [191 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_4_shape[2]) == 1, Argument default_function.ph_4.shape[2] has an unsatisfied constraint: 1 == T.Cast(\22int32\22, default_function_ph_4_shape[2])\00", align 1
@.str.19 = private constant [189 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_ph_4_strides[1]) and 12 == T.Cast(\22int32\22, default_function_ph_4_strides[0]), default_function.ph_4.strides: expected to be compact array\00", align 1
@.str.20 = private constant [196 x i8] c"Assert fail: T.uint64(0) == T.tvm_struct_get(ph_4, 0, 8, \22uint64\22), Argument default_function.ph_4.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(ph_4, 0, 8, \22uint64\22)\00", align 1
@.str.21 = private constant [176 x i8] c"Assert fail: T.tvm_struct_get(ph_4, 0, 10, \22int32\22) == 1, Argument default_function.ph_4.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(ph_4, 0, 10, \22int32\22)\00", align 1
@.str.22 = private constant [182 x i8] c"Assert fail: dev_id == T.tvm_struct_get(ph_4, 0, 9, \22int32\22), Argument default_function.ph_4.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(ph_4, 0, 9, \22int32\22)\00", align 1
@.str.23 = private constant [113 x i8] c"Assert fail: 3 == T.tvm_struct_get(compute, 0, 4, \22int32\22), default_function.compute.ndim is expected to equal 3\00", align 1
@.str.24 = private constant [247 x i8] c"Assert fail: T.tvm_struct_get(compute, 0, 5, \22uint8\22) == T.uint8(2) and T.tvm_struct_get(compute, 0, 6, \22uint8\22) == T.uint8(32) and T.tvm_struct_get(compute, 0, 7, \22uint16\22) == T.uint16(1), default_function.compute.dtype is expected to be float32\00", align 1
@.str.25 = private constant [200 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_compute_shape[0]) == 3, Argument default_function.compute.shape[0] has an unsatisfied constraint: 3 == T.Cast(\22int32\22, default_function_compute_shape[0])\00", align 1
@.str.26 = private constant [202 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_compute_shape[1]) == 17, Argument default_function.compute.shape[1] has an unsatisfied constraint: 17 == T.Cast(\22int32\22, default_function_compute_shape[1])\00", align 1
@.str.27 = private constant [202 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_compute_shape[2]) == 12, Argument default_function.compute.shape[2] has an unsatisfied constraint: 12 == T.Cast(\22int32\22, default_function_compute_shape[2])\00", align 1
@.str.28 = private constant [262 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_compute_strides[2]) and 12 == T.Cast(\22int32\22, default_function_compute_strides[1]) and 204 == T.Cast(\22int32\22, default_function_compute_strides[0]), default_function.compute.strides: expected to be compact array\00", align 1
@.str.29 = private constant [205 x i8] c"Assert fail: T.uint64(0) == T.tvm_struct_get(compute, 0, 8, \22uint64\22), Argument default_function.compute.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(compute, 0, 8, \22uint64\22)\00", align 1
@.str.30 = private constant [185 x i8] c"Assert fail: T.tvm_struct_get(compute, 0, 10, \22int32\22) == 1, Argument default_function.compute.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(compute, 0, 10, \22int32\22)\00", align 1
@.str.31 = private constant [191 x i8] c"Assert fail: dev_id == T.tvm_struct_get(compute, 0, 9, \22int32\22), Argument default_function.compute.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(compute, 0, 9, \22int32\22)\00", align 1
@.str.32 = private constant [133 x i8] c"Assert fail: 3 == T.tvm_struct_get(T_batch_matmul_NN, 0, 4, \22int32\22), default_function.T_batch_matmul_NN.ndim is expected to equal 3\00", align 1
@.str.33 = private constant [287 x i8] c"Assert fail: T.tvm_struct_get(T_batch_matmul_NN, 0, 5, \22uint8\22) == T.uint8(2) and T.tvm_struct_get(T_batch_matmul_NN, 0, 6, \22uint8\22) == T.uint8(32) and T.tvm_struct_get(T_batch_matmul_NN, 0, 7, \22uint16\22) == T.uint16(1), default_function.T_batch_matmul_NN.dtype is expected to be float32\00", align 1
@.str.34 = private constant [230 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_T_batch_matmul_NN_shape[0]) == 3, Argument default_function.T_batch_matmul_NN.shape[0] has an unsatisfied constraint: 3 == T.Cast(\22int32\22, default_function_T_batch_matmul_NN_shape[0])\00", align 1
@.str.35 = private constant [232 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_T_batch_matmul_NN_shape[1]) == 17, Argument default_function.T_batch_matmul_NN.shape[1] has an unsatisfied constraint: 17 == T.Cast(\22int32\22, default_function_T_batch_matmul_NN_shape[1])\00", align 1
@.str.36 = private constant [230 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_T_batch_matmul_NN_shape[2]) == 1, Argument default_function.T_batch_matmul_NN.shape[2] has an unsatisfied constraint: 1 == T.Cast(\22int32\22, default_function_T_batch_matmul_NN_shape[2])\00", align 1
@.str.37 = private constant [228 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_T_batch_matmul_NN_strides[1]) and 17 == T.Cast(\22int32\22, default_function_T_batch_matmul_NN_strides[0]), default_function.T_batch_matmul_NN.strides: expected to be compact array\00", align 1
@.str.38 = private constant [235 x i8] c"Assert fail: T.uint64(0) == T.tvm_struct_get(T_batch_matmul_NN, 0, 8, \22uint64\22), Argument default_function.T_batch_matmul_NN.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_batch_matmul_NN, 0, 8, \22uint64\22)\00", align 1
@.str.39 = private constant [215 x i8] c"Assert fail: T.tvm_struct_get(T_batch_matmul_NN, 0, 10, \22int32\22) == 1, Argument default_function.T_batch_matmul_NN.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_batch_matmul_NN, 0, 10, \22int32\22)\00", align 1
@.str.40 = private constant [221 x i8] c"Assert fail: dev_id == T.tvm_struct_get(T_batch_matmul_NN, 0, 9, \22int32\22), Argument default_function.T_batch_matmul_NN.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_batch_matmul_NN, 0, 9, \22int32\22)\00", align 1
@.tvm_func.default_function_kernel = internal unnamed_addr global i8* null, align 8
@.str.41 = private constant [24 x i8] c"default_function_kernel\00", align 1
@.str.42 = private constant [68 x i8] c"Assert fail: kernel_error_code == 0, Error executing compute kernel\00", align 1
@__tvm_main__ = weak dllexport local_unnamed_addr constant [17 x i8] c"default_function\00", align 1
@llvm.global_ctors = appending global [0 x { i32, void ()*, i8* }] zeroinitializer

define dllexport i32 @default_function(i8* noalias nocapture readonly %args, i32* noalias nocapture readonly %arg_type_ids, i32 %num_args, i8* noalias nocapture readnone %out_ret_value, i32* noalias nocapture readnone %out_ret_tcode, i8* noalias nocapture readnone %resource_handle) local_unnamed_addr #0 !dbg !5 {
entry:
  call void @llvm.dbg.value(metadata i8* %args, metadata !12, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i32* %arg_type_ids, metadata !13, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i32 %num_args, metadata !14, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i8* %out_ret_value, metadata !15, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i32* %out_ret_tcode, metadata !16, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i8* %resource_handle, metadata !17, metadata !DIExpression()), !dbg !18
  %stack_value_void_ptr144 = alloca [6 x %0], align 8, !dbg !18
  %stack_tcode145 = alloca [6 x i32], align 4, !dbg !18
  %stack_tcode145.sub = getelementptr inbounds [6 x i32], [6 x i32]* %stack_tcode145, i64 0, i64 0
  %stack_value = bitcast [6 x %0]* %stack_value_void_ptr144 to i8*, !dbg !18
  %0 = icmp eq i32 %num_args, 5, !dbg !18
  br i1 %0, label %assert_end, label %assert_fail, !dbg !18, !prof !19

assert_fail:                                      ; preds = %entry
  %1 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %1(i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end:                                       ; preds = %entry
  %ph_0.code = load i32, i32* %arg_type_ids, align 4, !dbg !18, !tbaa !23
  %2 = getelementptr inbounds i32, i32* %arg_type_ids, i64 1, !dbg !18
  %ph_4.code = load i32, i32* %2, align 4, !dbg !18, !tbaa !34
  %3 = getelementptr inbounds i32, i32* %arg_type_ids, i64 2, !dbg !18
  %compute.code = load i32, i32* %3, align 4, !dbg !18, !tbaa !36
  %4 = getelementptr inbounds i32, i32* %arg_type_ids, i64 3, !dbg !18
  %T_batch_matmul_NN.code = load i32, i32* %4, align 4, !dbg !18, !tbaa !39
  %5 = getelementptr inbounds i32, i32* %arg_type_ids, i64 4, !dbg !18
  %compute.code1 = load i32, i32* %5, align 4, !dbg !18, !tbaa !41
  %6 = bitcast i8* %args to %1**, !dbg !18
  %ph_0146 = load %1*, %1** %6, align 8, !dbg !18
  %7 = getelementptr inbounds i8, i8* %args, i64 8, !dbg !18
  %8 = bitcast i8* %7 to %1**, !dbg !18
  %ph_4147 = load %1*, %1** %8, align 8, !dbg !18
  %9 = getelementptr inbounds i8, i8* %args, i64 16, !dbg !18
  %10 = bitcast i8* %9 to %1**, !dbg !18
  %compute148 = load %1*, %1** %10, align 8, !dbg !18
  %11 = getelementptr inbounds i8, i8* %args, i64 24, !dbg !18
  %12 = bitcast i8* %11 to %1**, !dbg !18
  %T_batch_matmul_NN149 = load %1*, %1** %12, align 8, !dbg !18
  %13 = getelementptr inbounds i8, i8* %args, i64 32, !dbg !18
  %14 = bitcast i8* %13 to %1**, !dbg !18
  %compute2150 = load %1*, %1** %14, align 8, !dbg !18
  %15 = bitcast %1* %ph_0146 to float**, !dbg !18
  %ph_0_void_ptr151 = load float*, float** %15, align 8, !dbg !18
  %ptrint = ptrtoint float* %ph_0_void_ptr151 to i64, !dbg !18
  %maskedptr = and i64 %ptrint, 63, !dbg !18
  %maskcond = icmp eq i64 %maskedptr, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond), !dbg !18
  %16 = getelementptr inbounds %1, %1* %ph_0146, i64 0, i32 4, !dbg !18
  %default_function.ph_0.shape = load i64*, i64** %16, align 8, !dbg !18
  %17 = getelementptr inbounds %1, %1* %ph_0146, i64 0, i32 5, !dbg !18
  %default_function.ph_0.strides = load i64*, i64** %17, align 8, !dbg !18
  %18 = getelementptr inbounds %1, %1* %ph_0146, i64 0, i32 1, i32 1, !dbg !18
  %dev_id = load i32, i32* %18, align 4, !dbg !18
  %19 = bitcast %1* %ph_4147 to float**, !dbg !18
  %ph_4_void_ptr152 = load float*, float** %19, align 8, !dbg !18
  %ptrint5 = ptrtoint float* %ph_4_void_ptr152 to i64, !dbg !18
  %maskedptr6 = and i64 %ptrint5, 63, !dbg !18
  %maskcond7 = icmp eq i64 %maskedptr6, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond7), !dbg !18
  %20 = getelementptr inbounds %1, %1* %ph_4147, i64 0, i32 4, !dbg !18
  %default_function.ph_4.shape = load i64*, i64** %20, align 8, !dbg !18
  %21 = getelementptr inbounds %1, %1* %ph_4147, i64 0, i32 5, !dbg !18
  %default_function.ph_4.strides = load i64*, i64** %21, align 8, !dbg !18
  %22 = bitcast %1* %compute148 to float**, !dbg !18
  %compute_void_ptr153 = load float*, float** %22, align 8, !dbg !18
  %ptrint9 = ptrtoint float* %compute_void_ptr153 to i64, !dbg !18
  %maskedptr10 = and i64 %ptrint9, 63, !dbg !18
  %maskcond11 = icmp eq i64 %maskedptr10, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond11), !dbg !18
  %23 = getelementptr inbounds %1, %1* %compute148, i64 0, i32 4, !dbg !18
  %default_function.compute.shape = load i64*, i64** %23, align 8, !dbg !18
  %24 = getelementptr inbounds %1, %1* %compute148, i64 0, i32 5, !dbg !18
  %default_function.compute.strides = load i64*, i64** %24, align 8, !dbg !18
  %25 = bitcast %1* %T_batch_matmul_NN149 to float**, !dbg !18
  %T_batch_matmul_NN_void_ptr154 = load float*, float** %25, align 8, !dbg !18
  %ptrint13 = ptrtoint float* %T_batch_matmul_NN_void_ptr154 to i64, !dbg !18
  %maskedptr14 = and i64 %ptrint13, 63, !dbg !18
  %maskcond15 = icmp eq i64 %maskedptr14, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond15), !dbg !18
  %26 = getelementptr inbounds %1, %1* %T_batch_matmul_NN149, i64 0, i32 4, !dbg !18
  %default_function.T_batch_matmul_NN.shape = load i64*, i64** %26, align 8, !dbg !18
  %27 = getelementptr inbounds %1, %1* %T_batch_matmul_NN149, i64 0, i32 5, !dbg !18
  %default_function.T_batch_matmul_NN.strides = load i64*, i64** %27, align 8, !dbg !18
  %28 = bitcast %1* %compute2150 to float**, !dbg !18
  %compute_void_ptr16155 = load float*, float** %28, align 8, !dbg !18
  %ptrint18 = ptrtoint float* %compute_void_ptr16155 to i64, !dbg !18
  %maskedptr19 = and i64 %ptrint18, 63, !dbg !18
  %maskcond20 = icmp eq i64 %maskedptr19, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond20), !dbg !18
  %29 = getelementptr inbounds %1, %1* %compute2150, i64 0, i32 4, !dbg !18
  %default_function.compute.shape21 = load i64*, i64** %29, align 8, !dbg !18
  %30 = getelementptr inbounds %1, %1* %compute2150, i64 0, i32 5, !dbg !18
  %default_function.compute.strides22 = load i64*, i64** %30, align 8, !dbg !18
  switch i32 %ph_0.code, label %assert_fail23 [
    i32 13, label %assert_end24
    i32 7, label %assert_end24
    i32 4, label %assert_end24
    i32 3, label %assert_end24
  ], !dbg !18

assert_fail23:                                    ; preds = %assert_end
  %31 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %31(i8* getelementptr inbounds ([130 x i8], [130 x i8]* @.str.1, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end24:                                     ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  switch i32 %ph_4.code, label %assert_fail25 [
    i32 13, label %assert_end26
    i32 7, label %assert_end26
    i32 4, label %assert_end26
    i32 3, label %assert_end26
  ], !dbg !18

assert_fail25:                                    ; preds = %assert_end24
  %32 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %32(i8* getelementptr inbounds ([130 x i8], [130 x i8]* @.str.2, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end26:                                     ; preds = %assert_end24, %assert_end24, %assert_end24, %assert_end24
  switch i32 %compute.code, label %assert_fail27 [
    i32 13, label %assert_end28
    i32 7, label %assert_end28
    i32 4, label %assert_end28
    i32 3, label %assert_end28
  ], !dbg !18

assert_fail27:                                    ; preds = %assert_end26
  %33 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %33(i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.3, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end28:                                     ; preds = %assert_end26, %assert_end26, %assert_end26, %assert_end26
  switch i32 %T_batch_matmul_NN.code, label %assert_fail29 [
    i32 13, label %assert_end30
    i32 7, label %assert_end30
    i32 4, label %assert_end30
    i32 3, label %assert_end30
  ], !dbg !18

assert_fail29:                                    ; preds = %assert_end28
  %34 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %34(i8* getelementptr inbounds ([182 x i8], [182 x i8]* @.str.4, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end30:                                     ; preds = %assert_end28, %assert_end28, %assert_end28, %assert_end28
  switch i32 %compute.code1, label %assert_fail31 [
    i32 13, label %assert_end32
    i32 7, label %assert_end32
    i32 4, label %assert_end32
    i32 3, label %assert_end32
  ], !dbg !18

assert_fail31:                                    ; preds = %assert_end30
  %35 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %35(i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.5, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end32:                                     ; preds = %assert_end30, %assert_end30, %assert_end30, %assert_end30
  %36 = getelementptr inbounds %1, %1* %ph_0146, i64 0, i32 2, !dbg !18
  %37 = load i32, i32* %36, align 4, !dbg !18
  %38 = icmp eq i32 %37, 3, !dbg !18
  br i1 %38, label %assert_end36, label %assert_fail33, !dbg !18, !prof !19

assert_fail33:                                    ; preds = %assert_end32
  %39 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %39(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.6, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end36:                                     ; preds = %assert_end32
  %40 = getelementptr inbounds %1, %1* %ph_0146, i64 0, i32 3, i32 2, !dbg !18
  %41 = load i16, i16* %40, align 2, !dbg !18
  %42 = icmp eq i16 %41, 1, !dbg !18
  %43 = getelementptr inbounds %1, %1* %ph_0146, i64 0, i32 3, i32 1, !dbg !18
  %44 = load i8, i8* %43, align 1, !dbg !18
  %45 = icmp eq i8 %44, 32, !dbg !18
  %46 = getelementptr inbounds %1, %1* %ph_0146, i64 0, i32 3, i32 0, !dbg !18
  %47 = load i8, i8* %46, align 1, !dbg !18
  %48 = icmp eq i8 %47, 2, !dbg !18
  %49 = and i1 %45, %48, !dbg !18
  %50 = and i1 %42, %49, !dbg !18
  br i1 %50, label %assert_end38, label %assert_fail37, !dbg !18, !prof !19

assert_fail37:                                    ; preds = %assert_end36
  %51 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %51(i8* getelementptr inbounds ([235 x i8], [235 x i8]* @.str.7, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end38:                                     ; preds = %assert_end36
  %52 = load i64, i64* %default_function.ph_0.shape, align 8, !dbg !18, !tbaa !45
  %53 = trunc i64 %52 to i32, !dbg !18
  %54 = icmp eq i32 %53, 3, !dbg !18
  br i1 %54, label %assert_end40, label %assert_fail39, !dbg !18, !prof !19

assert_fail39:                                    ; preds = %assert_end38
  %55 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %55(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.8, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end40:                                     ; preds = %assert_end38
  %56 = getelementptr inbounds i64, i64* %default_function.ph_0.shape, i64 1, !dbg !18
  %57 = load i64, i64* %56, align 8, !dbg !18, !tbaa !55
  %58 = trunc i64 %57 to i32, !dbg !18
  %59 = icmp eq i32 %58, 17, !dbg !18
  br i1 %59, label %assert_end42, label %assert_fail41, !dbg !18, !prof !19

assert_fail41:                                    ; preds = %assert_end40
  %60 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %60(i8* getelementptr inbounds ([193 x i8], [193 x i8]* @.str.9, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end42:                                     ; preds = %assert_end40
  %61 = getelementptr inbounds i64, i64* %default_function.ph_0.shape, i64 2, !dbg !18
  %62 = load i64, i64* %61, align 8, !dbg !18, !tbaa !57
  %63 = trunc i64 %62 to i32, !dbg !18
  %64 = icmp eq i32 %63, 12, !dbg !18
  br i1 %64, label %assert_end44, label %assert_fail43, !dbg !18, !prof !19

assert_fail43:                                    ; preds = %assert_end42
  %65 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %65(i8* getelementptr inbounds ([193 x i8], [193 x i8]* @.str.10, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end44:                                     ; preds = %assert_end42
  %66 = icmp eq i64* %default_function.ph_0.strides, null, !dbg !18
  br i1 %66, label %if_end, label %if_then, !dbg !18, !prof !60

if_then:                                          ; preds = %assert_end44
  %67 = load i64, i64* %default_function.ph_0.strides, align 8, !dbg !18, !tbaa !61
  %68 = trunc i64 %67 to i32, !dbg !18
  %69 = icmp eq i32 %68, 204, !dbg !18
  %70 = getelementptr inbounds i64, i64* %default_function.ph_0.strides, i64 1, !dbg !18
  %71 = load i64, i64* %70, align 8, !dbg !18, !tbaa !71
  %72 = trunc i64 %71 to i32, !dbg !18
  %73 = icmp eq i32 %72, 12, !dbg !18
  %74 = getelementptr inbounds i64, i64* %default_function.ph_0.strides, i64 2, !dbg !18
  %75 = load i64, i64* %74, align 8, !dbg !18, !tbaa !73
  %76 = trunc i64 %75 to i32, !dbg !18
  %77 = icmp eq i32 %76, 1, !dbg !18
  %78 = and i1 %73, %77, !dbg !18
  %79 = and i1 %69, %78, !dbg !18
  br i1 %79, label %if_end, label %assert_fail45, !dbg !18, !prof !19

if_end:                                           ; preds = %assert_end44, %if_then
  %80 = getelementptr inbounds %1, %1* %ph_0146, i64 0, i32 6, !dbg !18
  %81 = load i64, i64* %80, align 8, !dbg !18
  %82 = icmp eq i64 %81, 0, !dbg !18
  br i1 %82, label %assert_end48, label %assert_fail47, !dbg !18, !prof !19

assert_fail45:                                    ; preds = %if_then
  %83 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %83(i8* getelementptr inbounds ([250 x i8], [250 x i8]* @.str.11, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail47:                                    ; preds = %if_end
  %84 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %84(i8* getelementptr inbounds ([196 x i8], [196 x i8]* @.str.12, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end48:                                     ; preds = %if_end
  %85 = getelementptr inbounds %1, %1* %ph_0146, i64 0, i32 1, i32 0, !dbg !18
  %86 = load i32, i32* %85, align 4, !dbg !18
  %87 = icmp eq i32 %86, 1, !dbg !18
  br i1 %87, label %assert_end50, label %assert_fail49, !dbg !18, !prof !19

assert_fail49:                                    ; preds = %assert_end48
  %88 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %88(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.13, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end50:                                     ; preds = %assert_end48
  %89 = getelementptr inbounds %1, %1* %ph_4147, i64 0, i32 2, !dbg !18
  %90 = load i32, i32* %89, align 4, !dbg !18
  %91 = icmp eq i32 %90, 3, !dbg !18
  br i1 %91, label %assert_end54, label %assert_fail51, !dbg !18, !prof !19

assert_fail51:                                    ; preds = %assert_end50
  %92 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %92(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.14, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end54:                                     ; preds = %assert_end50
  %93 = getelementptr inbounds %1, %1* %ph_4147, i64 0, i32 3, i32 2, !dbg !18
  %94 = load i16, i16* %93, align 2, !dbg !18
  %95 = icmp eq i16 %94, 1, !dbg !18
  %96 = getelementptr inbounds %1, %1* %ph_4147, i64 0, i32 3, i32 1, !dbg !18
  %97 = load i8, i8* %96, align 1, !dbg !18
  %98 = icmp eq i8 %97, 32, !dbg !18
  %99 = getelementptr inbounds %1, %1* %ph_4147, i64 0, i32 3, i32 0, !dbg !18
  %100 = load i8, i8* %99, align 1, !dbg !18
  %101 = icmp eq i8 %100, 2, !dbg !18
  %102 = and i1 %98, %101, !dbg !18
  %103 = and i1 %95, %102, !dbg !18
  br i1 %103, label %assert_end56, label %assert_fail55, !dbg !18, !prof !19

assert_fail55:                                    ; preds = %assert_end54
  %104 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %104(i8* getelementptr inbounds ([235 x i8], [235 x i8]* @.str.15, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end56:                                     ; preds = %assert_end54
  %105 = load i64, i64* %default_function.ph_4.shape, align 8, !dbg !18, !tbaa !76
  %106 = trunc i64 %105 to i32, !dbg !18
  %107 = icmp eq i32 %106, 3, !dbg !18
  br i1 %107, label %assert_end58, label %assert_fail57, !dbg !18, !prof !19

assert_fail57:                                    ; preds = %assert_end56
  %108 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %108(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.16, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end58:                                     ; preds = %assert_end56
  %109 = getelementptr inbounds i64, i64* %default_function.ph_4.shape, i64 1, !dbg !18
  %110 = load i64, i64* %109, align 8, !dbg !18, !tbaa !86
  %111 = trunc i64 %110 to i32, !dbg !18
  %112 = icmp eq i32 %111, 12, !dbg !18
  br i1 %112, label %assert_end60, label %assert_fail59, !dbg !18, !prof !19

assert_fail59:                                    ; preds = %assert_end58
  %113 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %113(i8* getelementptr inbounds ([193 x i8], [193 x i8]* @.str.17, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end60:                                     ; preds = %assert_end58
  %114 = getelementptr inbounds i64, i64* %default_function.ph_4.shape, i64 2, !dbg !18
  %115 = load i64, i64* %114, align 8, !dbg !18, !tbaa !88
  %116 = trunc i64 %115 to i32, !dbg !18
  %117 = icmp eq i32 %116, 1, !dbg !18
  br i1 %117, label %assert_end62, label %assert_fail61, !dbg !18, !prof !19

assert_fail61:                                    ; preds = %assert_end60
  %118 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %118(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.18, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end62:                                     ; preds = %assert_end60
  %119 = icmp eq i64* %default_function.ph_4.strides, null, !dbg !18
  br i1 %119, label %if_end64, label %if_then63, !dbg !18, !prof !60

if_then63:                                        ; preds = %assert_end62
  %120 = load i64, i64* %default_function.ph_4.strides, align 8, !dbg !18, !tbaa !91
  %121 = trunc i64 %120 to i32, !dbg !18
  %122 = icmp eq i32 %121, 12, !dbg !18
  %123 = getelementptr inbounds i64, i64* %default_function.ph_4.strides, i64 1, !dbg !18
  %124 = load i64, i64* %123, align 8, !dbg !18, !tbaa !101
  %125 = trunc i64 %124 to i32, !dbg !18
  %126 = icmp eq i32 %125, 1, !dbg !18
  %127 = and i1 %122, %126, !dbg !18
  br i1 %127, label %if_end64, label %assert_fail65, !dbg !18, !prof !19

if_end64:                                         ; preds = %assert_end62, %if_then63
  %128 = getelementptr inbounds %1, %1* %ph_4147, i64 0, i32 6, !dbg !18
  %129 = load i64, i64* %128, align 8, !dbg !18
  %130 = icmp eq i64 %129, 0, !dbg !18
  br i1 %130, label %assert_end68, label %assert_fail67, !dbg !18, !prof !19

assert_fail65:                                    ; preds = %if_then63
  %131 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %131(i8* getelementptr inbounds ([189 x i8], [189 x i8]* @.str.19, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail67:                                    ; preds = %if_end64
  %132 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %132(i8* getelementptr inbounds ([196 x i8], [196 x i8]* @.str.20, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end68:                                     ; preds = %if_end64
  %133 = getelementptr inbounds %1, %1* %ph_4147, i64 0, i32 1, i32 0, !dbg !18
  %134 = load i32, i32* %133, align 4, !dbg !18
  %135 = icmp eq i32 %134, 1, !dbg !18
  br i1 %135, label %assert_end70, label %assert_fail69, !dbg !18, !prof !19

assert_fail69:                                    ; preds = %assert_end68
  %136 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %136(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.21, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end70:                                     ; preds = %assert_end68
  %137 = getelementptr inbounds %1, %1* %ph_4147, i64 0, i32 1, i32 1, !dbg !18
  %138 = load i32, i32* %137, align 4, !dbg !18
  %139 = icmp eq i32 %dev_id, %138, !dbg !18
  br i1 %139, label %assert_end72, label %assert_fail71, !dbg !18, !prof !19

assert_fail71:                                    ; preds = %assert_end70
  %140 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %140(i8* getelementptr inbounds ([182 x i8], [182 x i8]* @.str.22, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end72:                                     ; preds = %assert_end70
  %141 = getelementptr inbounds %1, %1* %compute148, i64 0, i32 2, !dbg !18
  %142 = load i32, i32* %141, align 4, !dbg !18
  %143 = icmp eq i32 %142, 3, !dbg !18
  br i1 %143, label %assert_end76, label %assert_fail73, !dbg !18, !prof !19

assert_fail73:                                    ; preds = %assert_end72
  %144 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %144(i8* getelementptr inbounds ([113 x i8], [113 x i8]* @.str.23, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end76:                                     ; preds = %assert_end72
  %145 = getelementptr inbounds %1, %1* %compute148, i64 0, i32 3, i32 2, !dbg !18
  %146 = load i16, i16* %145, align 2, !dbg !18
  %147 = icmp eq i16 %146, 1, !dbg !18
  %148 = getelementptr inbounds %1, %1* %compute148, i64 0, i32 3, i32 1, !dbg !18
  %149 = load i8, i8* %148, align 1, !dbg !18
  %150 = icmp eq i8 %149, 32, !dbg !18
  %151 = getelementptr inbounds %1, %1* %compute148, i64 0, i32 3, i32 0, !dbg !18
  %152 = load i8, i8* %151, align 1, !dbg !18
  %153 = icmp eq i8 %152, 2, !dbg !18
  %154 = and i1 %150, %153, !dbg !18
  %155 = and i1 %147, %154, !dbg !18
  br i1 %155, label %assert_end78, label %assert_fail77, !dbg !18, !prof !19

assert_fail77:                                    ; preds = %assert_end76
  %156 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %156(i8* getelementptr inbounds ([247 x i8], [247 x i8]* @.str.24, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end78:                                     ; preds = %assert_end76
  %157 = load i64, i64* %default_function.compute.shape, align 8, !dbg !18, !tbaa !103
  %158 = trunc i64 %157 to i32, !dbg !18
  %159 = icmp eq i32 %158, 3, !dbg !18
  br i1 %159, label %assert_end80, label %assert_fail79, !dbg !18, !prof !19

assert_fail79:                                    ; preds = %assert_end78
  %160 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %160(i8* getelementptr inbounds ([200 x i8], [200 x i8]* @.str.25, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end80:                                     ; preds = %assert_end78
  %161 = getelementptr inbounds i64, i64* %default_function.compute.shape, i64 1, !dbg !18
  %162 = load i64, i64* %161, align 8, !dbg !18, !tbaa !113
  %163 = trunc i64 %162 to i32, !dbg !18
  %164 = icmp eq i32 %163, 17, !dbg !18
  br i1 %164, label %assert_end82, label %assert_fail81, !dbg !18, !prof !19

assert_fail81:                                    ; preds = %assert_end80
  %165 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %165(i8* getelementptr inbounds ([202 x i8], [202 x i8]* @.str.26, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end82:                                     ; preds = %assert_end80
  %166 = getelementptr inbounds i64, i64* %default_function.compute.shape, i64 2, !dbg !18
  %167 = load i64, i64* %166, align 8, !dbg !18, !tbaa !115
  %168 = trunc i64 %167 to i32, !dbg !18
  %169 = icmp eq i32 %168, 12, !dbg !18
  br i1 %169, label %assert_end84, label %assert_fail83, !dbg !18, !prof !19

assert_fail83:                                    ; preds = %assert_end82
  %170 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %170(i8* getelementptr inbounds ([202 x i8], [202 x i8]* @.str.27, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end84:                                     ; preds = %assert_end82
  %171 = icmp eq i64* %default_function.compute.strides, null, !dbg !18
  br i1 %171, label %if_end86, label %if_then85, !dbg !18, !prof !60

if_then85:                                        ; preds = %assert_end84
  %172 = load i64, i64* %default_function.compute.strides, align 8, !dbg !18, !tbaa !118
  %173 = trunc i64 %172 to i32, !dbg !18
  %174 = icmp eq i32 %173, 204, !dbg !18
  %175 = getelementptr inbounds i64, i64* %default_function.compute.strides, i64 1, !dbg !18
  %176 = load i64, i64* %175, align 8, !dbg !18, !tbaa !128
  %177 = trunc i64 %176 to i32, !dbg !18
  %178 = icmp eq i32 %177, 12, !dbg !18
  %179 = getelementptr inbounds i64, i64* %default_function.compute.strides, i64 2, !dbg !18
  %180 = load i64, i64* %179, align 8, !dbg !18, !tbaa !130
  %181 = trunc i64 %180 to i32, !dbg !18
  %182 = icmp eq i32 %181, 1, !dbg !18
  %183 = and i1 %178, %182, !dbg !18
  %184 = and i1 %174, %183, !dbg !18
  br i1 %184, label %if_end86, label %assert_fail87, !dbg !18, !prof !19

if_end86:                                         ; preds = %assert_end84, %if_then85
  %185 = getelementptr inbounds %1, %1* %compute148, i64 0, i32 6, !dbg !18
  %186 = load i64, i64* %185, align 8, !dbg !18
  %187 = icmp eq i64 %186, 0, !dbg !18
  br i1 %187, label %assert_end90, label %assert_fail89, !dbg !18, !prof !19

assert_fail87:                                    ; preds = %if_then85
  %188 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %188(i8* getelementptr inbounds ([262 x i8], [262 x i8]* @.str.28, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail89:                                    ; preds = %if_end86
  %189 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %189(i8* getelementptr inbounds ([205 x i8], [205 x i8]* @.str.29, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end90:                                     ; preds = %if_end86
  %190 = getelementptr inbounds %1, %1* %compute148, i64 0, i32 1, i32 0, !dbg !18
  %191 = load i32, i32* %190, align 4, !dbg !18
  %192 = icmp eq i32 %191, 1, !dbg !18
  br i1 %192, label %assert_end92, label %assert_fail91, !dbg !18, !prof !19

assert_fail91:                                    ; preds = %assert_end90
  %193 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %193(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.30, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end92:                                     ; preds = %assert_end90
  %194 = getelementptr inbounds %1, %1* %compute148, i64 0, i32 1, i32 1, !dbg !18
  %195 = load i32, i32* %194, align 4, !dbg !18
  %196 = icmp eq i32 %dev_id, %195, !dbg !18
  br i1 %196, label %assert_end94, label %assert_fail93, !dbg !18, !prof !19

assert_fail93:                                    ; preds = %assert_end92
  %197 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %197(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.31, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end94:                                     ; preds = %assert_end92
  %198 = getelementptr inbounds %1, %1* %T_batch_matmul_NN149, i64 0, i32 2, !dbg !18
  %199 = load i32, i32* %198, align 4, !dbg !18
  %200 = icmp eq i32 %199, 3, !dbg !18
  br i1 %200, label %assert_end98, label %assert_fail95, !dbg !18, !prof !19

assert_fail95:                                    ; preds = %assert_end94
  %201 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %201(i8* getelementptr inbounds ([133 x i8], [133 x i8]* @.str.32, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end98:                                     ; preds = %assert_end94
  %202 = getelementptr inbounds %1, %1* %T_batch_matmul_NN149, i64 0, i32 3, i32 2, !dbg !18
  %203 = load i16, i16* %202, align 2, !dbg !18
  %204 = icmp eq i16 %203, 1, !dbg !18
  %205 = getelementptr inbounds %1, %1* %T_batch_matmul_NN149, i64 0, i32 3, i32 1, !dbg !18
  %206 = load i8, i8* %205, align 1, !dbg !18
  %207 = icmp eq i8 %206, 32, !dbg !18
  %208 = getelementptr inbounds %1, %1* %T_batch_matmul_NN149, i64 0, i32 3, i32 0, !dbg !18
  %209 = load i8, i8* %208, align 1, !dbg !18
  %210 = icmp eq i8 %209, 2, !dbg !18
  %211 = and i1 %207, %210, !dbg !18
  %212 = and i1 %204, %211, !dbg !18
  br i1 %212, label %assert_end100, label %assert_fail99, !dbg !18, !prof !19

assert_fail99:                                    ; preds = %assert_end98
  %213 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %213(i8* getelementptr inbounds ([287 x i8], [287 x i8]* @.str.33, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end100:                                    ; preds = %assert_end98
  %214 = load i64, i64* %default_function.T_batch_matmul_NN.shape, align 8, !dbg !18, !tbaa !133
  %215 = trunc i64 %214 to i32, !dbg !18
  %216 = icmp eq i32 %215, 3, !dbg !18
  br i1 %216, label %assert_end102, label %assert_fail101, !dbg !18, !prof !19

assert_fail101:                                   ; preds = %assert_end100
  %217 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %217(i8* getelementptr inbounds ([230 x i8], [230 x i8]* @.str.34, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end102:                                    ; preds = %assert_end100
  %218 = getelementptr inbounds i64, i64* %default_function.T_batch_matmul_NN.shape, i64 1, !dbg !18
  %219 = load i64, i64* %218, align 8, !dbg !18, !tbaa !143
  %220 = trunc i64 %219 to i32, !dbg !18
  %221 = icmp eq i32 %220, 17, !dbg !18
  br i1 %221, label %assert_end104, label %assert_fail103, !dbg !18, !prof !19

assert_fail103:                                   ; preds = %assert_end102
  %222 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %222(i8* getelementptr inbounds ([232 x i8], [232 x i8]* @.str.35, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end104:                                    ; preds = %assert_end102
  %223 = getelementptr inbounds i64, i64* %default_function.T_batch_matmul_NN.shape, i64 2, !dbg !18
  %224 = load i64, i64* %223, align 8, !dbg !18, !tbaa !145
  %225 = trunc i64 %224 to i32, !dbg !18
  %226 = icmp eq i32 %225, 1, !dbg !18
  br i1 %226, label %assert_end106, label %assert_fail105, !dbg !18, !prof !19

assert_fail105:                                   ; preds = %assert_end104
  %227 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %227(i8* getelementptr inbounds ([230 x i8], [230 x i8]* @.str.36, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end106:                                    ; preds = %assert_end104
  %228 = icmp eq i64* %default_function.T_batch_matmul_NN.strides, null, !dbg !18
  br i1 %228, label %if_end108, label %if_then107, !dbg !18, !prof !60

if_then107:                                       ; preds = %assert_end106
  %229 = load i64, i64* %default_function.T_batch_matmul_NN.strides, align 8, !dbg !18, !tbaa !148
  %230 = trunc i64 %229 to i32, !dbg !18
  %231 = icmp eq i32 %230, 17, !dbg !18
  %232 = getelementptr inbounds i64, i64* %default_function.T_batch_matmul_NN.strides, i64 1, !dbg !18
  %233 = load i64, i64* %232, align 8, !dbg !18, !tbaa !158
  %234 = trunc i64 %233 to i32, !dbg !18
  %235 = icmp eq i32 %234, 1, !dbg !18
  %236 = and i1 %231, %235, !dbg !18
  br i1 %236, label %if_end108, label %assert_fail109, !dbg !18, !prof !19

if_end108:                                        ; preds = %assert_end106, %if_then107
  %237 = getelementptr inbounds %1, %1* %T_batch_matmul_NN149, i64 0, i32 6, !dbg !18
  %238 = load i64, i64* %237, align 8, !dbg !18
  %239 = icmp eq i64 %238, 0, !dbg !18
  br i1 %239, label %assert_end112, label %assert_fail111, !dbg !18, !prof !19

assert_fail109:                                   ; preds = %if_then107
  %240 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %240(i8* getelementptr inbounds ([228 x i8], [228 x i8]* @.str.37, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail111:                                   ; preds = %if_end108
  %241 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %241(i8* getelementptr inbounds ([235 x i8], [235 x i8]* @.str.38, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end112:                                    ; preds = %if_end108
  %242 = getelementptr inbounds %1, %1* %T_batch_matmul_NN149, i64 0, i32 1, i32 0, !dbg !18
  %243 = load i32, i32* %242, align 4, !dbg !18
  %244 = icmp eq i32 %243, 1, !dbg !18
  br i1 %244, label %assert_end114, label %assert_fail113, !dbg !18, !prof !19

assert_fail113:                                   ; preds = %assert_end112
  %245 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %245(i8* getelementptr inbounds ([215 x i8], [215 x i8]* @.str.39, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end114:                                    ; preds = %assert_end112
  %246 = getelementptr inbounds %1, %1* %T_batch_matmul_NN149, i64 0, i32 1, i32 1, !dbg !18
  %247 = load i32, i32* %246, align 4, !dbg !18
  %248 = icmp eq i32 %dev_id, %247, !dbg !18
  br i1 %248, label %assert_end116, label %assert_fail115, !dbg !18, !prof !19

assert_fail115:                                   ; preds = %assert_end114
  %249 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %249(i8* getelementptr inbounds ([221 x i8], [221 x i8]* @.str.40, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end116:                                    ; preds = %assert_end114
  %250 = getelementptr inbounds %1, %1* %compute2150, i64 0, i32 2, !dbg !18
  %251 = load i32, i32* %250, align 4, !dbg !18
  %252 = icmp eq i32 %251, 3, !dbg !18
  br i1 %252, label %assert_end120, label %assert_fail117, !dbg !18, !prof !19

assert_fail117:                                   ; preds = %assert_end116
  %253 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %253(i8* getelementptr inbounds ([113 x i8], [113 x i8]* @.str.23, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end120:                                    ; preds = %assert_end116
  %254 = getelementptr inbounds %1, %1* %compute2150, i64 0, i32 3, i32 2, !dbg !18
  %255 = load i16, i16* %254, align 2, !dbg !18
  %256 = icmp eq i16 %255, 1, !dbg !18
  %257 = getelementptr inbounds %1, %1* %compute2150, i64 0, i32 3, i32 1, !dbg !18
  %258 = load i8, i8* %257, align 1, !dbg !18
  %259 = icmp eq i8 %258, 32, !dbg !18
  %260 = getelementptr inbounds %1, %1* %compute2150, i64 0, i32 3, i32 0, !dbg !18
  %261 = load i8, i8* %260, align 1, !dbg !18
  %262 = icmp eq i8 %261, 2, !dbg !18
  %263 = and i1 %259, %262, !dbg !18
  %264 = and i1 %256, %263, !dbg !18
  br i1 %264, label %assert_end122, label %assert_fail121, !dbg !18, !prof !19

assert_fail121:                                   ; preds = %assert_end120
  %265 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %265(i8* getelementptr inbounds ([247 x i8], [247 x i8]* @.str.24, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end122:                                    ; preds = %assert_end120
  %266 = load i64, i64* %default_function.compute.shape21, align 8, !dbg !18, !tbaa !160
  %267 = trunc i64 %266 to i32, !dbg !18
  %268 = icmp eq i32 %267, 3, !dbg !18
  br i1 %268, label %assert_end124, label %assert_fail123, !dbg !18, !prof !19

assert_fail123:                                   ; preds = %assert_end122
  %269 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %269(i8* getelementptr inbounds ([200 x i8], [200 x i8]* @.str.25, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end124:                                    ; preds = %assert_end122
  %270 = getelementptr inbounds i64, i64* %default_function.compute.shape21, i64 1, !dbg !18
  %271 = load i64, i64* %270, align 8, !dbg !18, !tbaa !170
  %272 = trunc i64 %271 to i32, !dbg !18
  %273 = icmp eq i32 %272, 17, !dbg !18
  br i1 %273, label %assert_end126, label %assert_fail125, !dbg !18, !prof !19

assert_fail125:                                   ; preds = %assert_end124
  %274 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %274(i8* getelementptr inbounds ([202 x i8], [202 x i8]* @.str.26, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end126:                                    ; preds = %assert_end124
  %275 = getelementptr inbounds i64, i64* %default_function.compute.shape21, i64 2, !dbg !18
  %276 = load i64, i64* %275, align 8, !dbg !18, !tbaa !172
  %277 = trunc i64 %276 to i32, !dbg !18
  %278 = icmp eq i32 %277, 12, !dbg !18
  br i1 %278, label %assert_end128, label %assert_fail127, !dbg !18, !prof !19

assert_fail127:                                   ; preds = %assert_end126
  %279 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %279(i8* getelementptr inbounds ([202 x i8], [202 x i8]* @.str.27, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end128:                                    ; preds = %assert_end126
  %280 = icmp eq i64* %default_function.compute.strides22, null, !dbg !18
  br i1 %280, label %if_end130, label %if_then129, !dbg !18, !prof !60

if_then129:                                       ; preds = %assert_end128
  %281 = load i64, i64* %default_function.compute.strides22, align 8, !dbg !18, !tbaa !175
  %282 = trunc i64 %281 to i32, !dbg !18
  %283 = icmp eq i32 %282, 204, !dbg !18
  %284 = getelementptr inbounds i64, i64* %default_function.compute.strides22, i64 1, !dbg !18
  %285 = load i64, i64* %284, align 8, !dbg !18, !tbaa !185
  %286 = trunc i64 %285 to i32, !dbg !18
  %287 = icmp eq i32 %286, 12, !dbg !18
  %288 = getelementptr inbounds i64, i64* %default_function.compute.strides22, i64 2, !dbg !18
  %289 = load i64, i64* %288, align 8, !dbg !18, !tbaa !187
  %290 = trunc i64 %289 to i32, !dbg !18
  %291 = icmp eq i32 %290, 1, !dbg !18
  %292 = and i1 %287, %291, !dbg !18
  %293 = and i1 %283, %292, !dbg !18
  br i1 %293, label %if_end130, label %assert_fail131, !dbg !18, !prof !19

if_end130:                                        ; preds = %assert_end128, %if_then129
  %294 = getelementptr inbounds %1, %1* %compute2150, i64 0, i32 6, !dbg !18
  %295 = load i64, i64* %294, align 8, !dbg !18
  %296 = icmp eq i64 %295, 0, !dbg !18
  br i1 %296, label %assert_end134, label %assert_fail133, !dbg !18, !prof !19

assert_fail131:                                   ; preds = %if_then129
  %297 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %297(i8* getelementptr inbounds ([262 x i8], [262 x i8]* @.str.28, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail133:                                   ; preds = %if_end130
  %298 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %298(i8* getelementptr inbounds ([205 x i8], [205 x i8]* @.str.29, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end134:                                    ; preds = %if_end130
  %299 = getelementptr inbounds %1, %1* %compute2150, i64 0, i32 1, i32 0, !dbg !18
  %300 = load i32, i32* %299, align 4, !dbg !18
  %301 = icmp eq i32 %300, 1, !dbg !18
  br i1 %301, label %assert_end136, label %assert_fail135, !dbg !18, !prof !19

assert_fail135:                                   ; preds = %assert_end134
  %302 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %302(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.30, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end136:                                    ; preds = %assert_end134
  %303 = getelementptr inbounds %1, %1* %compute2150, i64 0, i32 1, i32 1, !dbg !18
  %304 = load i32, i32* %303, align 4, !dbg !18
  %305 = icmp eq i32 %dev_id, %304, !dbg !18
  br i1 %305, label %assert_end138, label %assert_fail137, !dbg !18, !prof !19

assert_fail137:                                   ; preds = %assert_end136
  %306 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %306(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.31, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end138:                                    ; preds = %assert_end136
  %307 = call fastcc i32 @default_function_compute_(i8* nonnull %stack_value, float* %T_batch_matmul_NN_void_ptr154, i32* nonnull %stack_tcode145.sub, float* %compute_void_ptr153, float* %compute_void_ptr16155, float* %ph_0_void_ptr151, float* %ph_4_void_ptr152), !dbg !18
  ret i32 %307, !dbg !18
}

; Function Attrs: nounwind willreturn
declare void @llvm.assume(i1) #1

; Function Attrs: noinline
define internal fastcc i32 @default_function_compute_(i8* noalias %0, float* noalias align 64 %1, i32* noalias %2, float* noalias align 64 %3, float* noalias align 64 %4, float* noalias align 64 %5, float* noalias align 64 %6) unnamed_addr #2 {
entry:
  %7 = alloca i8*, align 8
  %8 = bitcast i8* %0 to %0*
  %9 = bitcast i8* %0 to float**
  store float* %1, float** %9, align 8
  %10 = getelementptr inbounds i8, i8* %0, i64 8
  %11 = bitcast i8* %10 to float**
  store float* %3, float** %11, align 8
  %12 = getelementptr inbounds i8, i8* %0, i64 16
  %13 = bitcast i8* %12 to float**
  store float* %4, float** %13, align 8
  %14 = getelementptr inbounds i8, i8* %0, i64 24
  %15 = bitcast i8* %14 to float**
  store float* %5, float** %15, align 8
  %16 = bitcast i32* %2 to <4 x i32>*
  store <4 x i32> <i32 3, i32 3, i32 3, i32 3>, <4 x i32>* %16, align 4, !tbaa !190
  %17 = getelementptr inbounds i8, i8* %0, i64 32
  %18 = bitcast i8* %17 to float**
  store float* %6, float** %18, align 8
  %19 = getelementptr inbounds i32, i32* %2, i64 4
  store i32 3, i32* %19, align 4, !tbaa !199
  %20 = getelementptr inbounds i8, i8* %0, i64 40
  %21 = bitcast i8* %20 to %0*
  %22 = getelementptr inbounds i32, i32* %2, i64 5
  %23 = load i32 (i8*, %0*, i32*, i32, %0*, i32*)*, i32 (i8*, %0*, i32*, i32, %0*, i32*)** @__TVMFuncCall, align 8, !tbaa !20
  %24 = load i8*, i8** @.tvm_func.default_function_kernel, align 8
  %25 = icmp eq i8* %24, null
  br i1 %25, label %handle_init, label %handle_init_end, !prof !60

handle_init:                                      ; preds = %entry
  %26 = load i8*, i8** @__tvm_module_ctx, align 8, !tbaa !20
  %27 = load i32 (i8*, i8*, i8**)*, i32 (i8*, i8*, i8**)** @__TVMBackendGetFuncFromEnv, align 8, !tbaa !20
  %28 = call i32 %27(i8* %26, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.41, i64 0, i64 0), i8** nonnull %7)
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %call_end, label %call_fail, !prof !19

handle_init_end:                                  ; preds = %entry, %call_end
  %30 = phi i8* [ %24, %entry ], [ %33, %call_end ]
  %31 = call i32 %23(i8* %30, %0* %8, i32* nonnull %2, i32 5, %0* nonnull %21, i32* nonnull %22)
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %call_end2, label %call_fail, !prof !19

call_fail:                                        ; preds = %call_end2, %handle_init_end, %handle_init
  %merge = phi i32 [ %28, %handle_init ], [ %31, %handle_init_end ], [ 0, %call_end2 ]
  ret i32 %merge

call_end:                                         ; preds = %handle_init
  %33 = load i8*, i8** %7, align 8
  store i8* %33, i8** @.tvm_func.default_function_kernel, align 8
  br label %handle_init_end

call_end2:                                        ; preds = %handle_init_end
  %34 = bitcast i8* %20 to i64*
  %35 = load i64, i64* %34, align 8
  %kernel_error_code = trunc i64 %35 to i32
  %36 = icmp eq i32 %kernel_error_code, 0
  br i1 %36, label %call_fail, label %assert_fail, !prof !19

assert_fail:                                      ; preds = %call_end2
  %37 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !20
  call void %37(i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.42, i64 0, i64 0))
  ret i32 -1
}

; Function Attrs: nounwind readnone
define weak dso_local i16 @__truncsfhf2(float %a0) local_unnamed_addr #3 section ".text.tvm.fp16.conv" {
b0:
  %v0 = bitcast float %a0 to i32
  %v1 = and i32 %v0, 2147483647
  %v2 = add nsw i32 %v1, -947912704
  %v3 = add nsw i32 %v1, -1199570944
  %v4 = icmp ult i32 %v2, %v3
  br i1 %v4, label %b1, label %b5

b1:                                               ; preds = %b0
  %v5 = lshr i32 %v0, 13
  %v6 = and i32 %v5, 65535
  %v7 = add nuw nsw i32 %v6, -114688
  %v8 = and i32 %v0, 8191
  %v9 = icmp ugt i32 %v8, 4096
  br i1 %v9, label %b2, label %b3

b2:                                               ; preds = %b1
  %v10 = add nuw nsw i32 %v6, -114687
  br label %b13

b3:                                               ; preds = %b1
  %v11 = icmp eq i32 %v8, 4096
  br i1 %v11, label %b4, label %b13

b4:                                               ; preds = %b3
  %v12 = and i32 %v7, 65535
  %v13 = and i32 %v5, 1
  %v14 = add nuw nsw i32 %v12, %v13
  br label %b13

b5:                                               ; preds = %b0
  %v15 = icmp ugt i32 %v1, 2139095040
  br i1 %v15, label %b6, label %b7

b6:                                               ; preds = %b5
  %v16 = lshr i32 %v0, 13
  %v17 = and i32 %v16, 511
  %v18 = or i32 %v17, 32256
  br label %b13

b7:                                               ; preds = %b5
  %v19 = icmp ugt i32 %v1, 1199570943
  br i1 %v19, label %b13, label %b8

b8:                                               ; preds = %b7
  %v20 = icmp ult i32 %v1, 754974720
  br i1 %v20, label %b13, label %b9

b9:                                               ; preds = %b8
  %v21 = lshr i32 %v1, 23
  %v22 = sub nsw i32 113, %v21
  %v23 = and i32 %v0, 8388607
  %v24 = or i32 %v23, 8388608
  %v25 = add nsw i32 %v21, -81
  %v26 = shl i32 %v24, %v25
  %v27 = icmp ne i32 %v26, 0
  %v28 = lshr i32 %v24, %v22
  %v29 = zext i1 %v27 to i32
  %v30 = lshr i32 %v28, 13
  %v31 = and i32 %v28, 8191
  %v32 = or i32 %v31, %v29
  %v33 = icmp ugt i32 %v32, 4096
  br i1 %v33, label %b10, label %b11

b10:                                              ; preds = %b9
  %v34 = add nuw nsw i32 %v30, 1
  br label %b13

b11:                                              ; preds = %b9
  %v35 = icmp eq i32 %v32, 4096
  br i1 %v35, label %b12, label %b13

b12:                                              ; preds = %b11
  %v36 = and i32 %v30, 1
  %v37 = add nuw nsw i32 %v36, %v30
  br label %b13

b13:                                              ; preds = %b12, %b11, %b10, %b8, %b7, %b6, %b4, %b3, %b2
  %v38 = phi i32 [ %v18, %b6 ], [ %v10, %b2 ], [ %v14, %b4 ], [ %v7, %b3 ], [ 31744, %b7 ], [ 0, %b8 ], [ %v34, %b10 ], [ %v37, %b12 ], [ %v30, %b11 ]
  %v39 = lshr i32 %v0, 16
  %v40 = and i32 %v39, 32768
  %v41 = or i32 %v38, %v40
  %vlast = trunc i32 %v41 to i16
  ret i16 %vlast
}

; Function Attrs: nounwind readnone
define weak dso_local float @__extendhfsf2(i16 %a0) local_unnamed_addr #3 section ".text.tvm.fp16.conv" {
b0:
  %v1 = and i16 %a0, 32767
  %v2 = zext i16 %v1 to i32
  %v3 = add nsw i16 %v1, -1024
  %v4 = icmp ult i16 %v3, 30720
  br i1 %v4, label %b1, label %b2

b1:                                               ; preds = %b0
  %v5 = shl nuw nsw i32 %v2, 13
  %v6 = add nuw nsw i32 %v5, 939524096
  br label %b6

b2:                                               ; preds = %b0
  %v7 = icmp ugt i16 %v1, 31743
  br i1 %v7, label %b3, label %b4

b3:                                               ; preds = %b2
  %v8 = shl nuw nsw i32 %v2, 13
  %v9 = or i32 %v8, 2139095040
  br label %b6

b4:                                               ; preds = %b2
  %v10 = icmp eq i16 %v1, 0
  br i1 %v10, label %b6, label %b5

b5:                                               ; preds = %b4
  %v11 = icmp ult i16 %v1, 256
  %v12 = lshr i32 %v2, 8
  %v13 = select i1 %v11, i32 %v2, i32 %v12
  %v14 = select i1 %v11, i32 32, i32 24
  %v15 = icmp ult i32 %v13, 16
  %v16 = lshr i32 %v13, 4
  %v17 = add nsw i32 %v14, -4
  %v18 = select i1 %v15, i32 %v13, i32 %v16
  %v19 = select i1 %v15, i32 %v14, i32 %v17
  %v20 = icmp ult i32 %v18, 4
  %v21 = lshr i32 %v18, 2
  %v22 = add nsw i32 %v19, -2
  %v23 = select i1 %v20, i32 %v18, i32 %v21
  %v24 = select i1 %v20, i32 %v19, i32 %v22
  %v25 = icmp ult i32 %v23, 2
  %v26 = sub nsw i32 0, %v23
  %v27 = select i1 %v25, i32 %v26, i32 -2
  %v28 = add nsw i32 %v27, %v24
  %v29 = add nsw i32 %v28, -8
  %v30 = shl i32 %v2, %v29
  %v31 = xor i32 %v30, 8388608
  %v32 = shl i32 %v28, 23
  %v33 = sub i32 1124073472, %v32
  %v34 = or i32 %v31, %v33
  br label %b6

b6:                                               ; preds = %b5, %b4, %b3, %b1
  %v35 = phi i32 [ %v6, %b1 ], [ %v9, %b3 ], [ %v34, %b5 ], [ 0, %b4 ]
  %v36 = and i16 %a0, -32768
  %v37 = zext i16 %v36 to i32
  %v38 = shl nuw i32 %v37, 16
  %v39 = or i32 %v35, %v38
  %v40 = bitcast i32 %v39 to float
  ret float %v40
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.value(metadata, metadata, metadata) #4

attributes #0 = { "target-cpu"="generic" }
attributes #1 = { nounwind willreturn }
attributes #2 = { noinline "target-cpu"="generic" }
attributes #3 = { nounwind readnone "target-cpu"="generic" "target-features" }
attributes #4 = { nounwind readnone speculatable willreturn }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "TVM", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2)
!1 = !DIFile(filename: "main.tir", directory: ".")
!2 = !{}
!3 = !{i32 2, !"tvm_target", !"llvm -mtriple=x86_64-pc-linux-gnu"}
!4 = !{i32 4, !"Debug Info Version", i32 3}
!5 = distinct !DISubprogram(name: "main.tir", scope: !1, file: !1, type: !6, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !11)
!6 = !DISubroutineType(types: !7)
!7 = !{!8, !9, !10, !8, !9, !10, !9}
!8 = !DIBasicType(name: "int32", size: 32, encoding: DW_ATE_signed)
!9 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null)
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8)
!11 = !{!12, !13, !14, !15, !16, !17}
!12 = !DILocalVariable(name: "arg1", arg: 1, scope: !5, file: !1, type: !9)
!13 = !DILocalVariable(name: "arg2", arg: 2, scope: !5, file: !1, type: !10)
!14 = !DILocalVariable(name: "arg3", arg: 3, scope: !5, file: !1, type: !8)
!15 = !DILocalVariable(name: "arg4", arg: 4, scope: !5, file: !1, type: !9)
!16 = !DILocalVariable(name: "arg5", arg: 5, scope: !5, file: !1, type: !10)
!17 = !DILocalVariable(name: "arg6", arg: 6, scope: !5, file: !1, type: !9)
!18 = !DILocation(line: 0, scope: !5)
!19 = !{!"branch_weights", i32 1048576, i32 1}
!20 = !{!21, !21, i64 0}
!21 = !{!"ctx_ptr", !22, i64 0}
!22 = !{!"tvm-tbaa"}
!23 = !{!24, !24, i64 0}
!24 = !{!"0x3c740b0.w4.b0", !25, i64 0}
!25 = !{!"0x3c740b0.w8.b0", !26, i64 0}
!26 = !{!"0x3c740b0.w16.b0", !27, i64 0}
!27 = !{!"0x3c740b0.w32.b0", !28, i64 0}
!28 = !{!"0x3c740b0.w64.b0", !29, i64 0}
!29 = !{!"0x3c740b0.w128.b0", !30, i64 0}
!30 = !{!"0x3c740b0.w256.b0", !31, i64 0}
!31 = !{!"0x3c740b0.w512.b0", !32, i64 0}
!32 = !{!"0x3c740b0.w1024.b0", !33, i64 0}
!33 = !{!"0x3c740b0", !22, i64 0}
!34 = !{!35, !35, i64 0}
!35 = !{!"0x3c740b0.w4.b4", !25, i64 0}
!36 = !{!37, !37, i64 0}
!37 = !{!"0x3c740b0.w4.b8", !38, i64 0}
!38 = !{!"0x3c740b0.w8.b8", !26, i64 0}
!39 = !{!40, !40, i64 0}
!40 = !{!"0x3c740b0.w4.b12", !38, i64 0}
!41 = !{!42, !42, i64 0}
!42 = !{!"0x3c740b0.w4.b16", !43, i64 0}
!43 = !{!"0x3c740b0.w8.b16", !44, i64 0}
!44 = !{!"0x3c740b0.w16.b16", !27, i64 0}
!45 = !{!46, !46, i64 0}
!46 = !{!"0x3f7cc70.w8.b0", !47, i64 0}
!47 = !{!"0x3f7cc70.w16.b0", !48, i64 0}
!48 = !{!"0x3f7cc70.w32.b0", !49, i64 0}
!49 = !{!"0x3f7cc70.w64.b0", !50, i64 0}
!50 = !{!"0x3f7cc70.w128.b0", !51, i64 0}
!51 = !{!"0x3f7cc70.w256.b0", !52, i64 0}
!52 = !{!"0x3f7cc70.w512.b0", !53, i64 0}
!53 = !{!"0x3f7cc70.w1024.b0", !54, i64 0}
!54 = !{!"0x3f7cc70", !22, i64 0}
!55 = !{!56, !56, i64 0}
!56 = !{!"0x3f7cc70.w8.b8", !47, i64 0}
!57 = !{!58, !58, i64 0}
!58 = !{!"0x3f7cc70.w8.b16", !59, i64 0}
!59 = !{!"0x3f7cc70.w16.b16", !48, i64 0}
!60 = !{!"branch_weights", i32 1, i32 1048576}
!61 = !{!62, !62, i64 0}
!62 = !{!"0x3cf96e0.w8.b0", !63, i64 0}
!63 = !{!"0x3cf96e0.w16.b0", !64, i64 0}
!64 = !{!"0x3cf96e0.w32.b0", !65, i64 0}
!65 = !{!"0x3cf96e0.w64.b0", !66, i64 0}
!66 = !{!"0x3cf96e0.w128.b0", !67, i64 0}
!67 = !{!"0x3cf96e0.w256.b0", !68, i64 0}
!68 = !{!"0x3cf96e0.w512.b0", !69, i64 0}
!69 = !{!"0x3cf96e0.w1024.b0", !70, i64 0}
!70 = !{!"0x3cf96e0", !22, i64 0}
!71 = !{!72, !72, i64 0}
!72 = !{!"0x3cf96e0.w8.b8", !63, i64 0}
!73 = !{!74, !74, i64 0}
!74 = !{!"0x3cf96e0.w8.b16", !75, i64 0}
!75 = !{!"0x3cf96e0.w16.b16", !64, i64 0}
!76 = !{!77, !77, i64 0}
!77 = !{!"0x485f440.w8.b0", !78, i64 0}
!78 = !{!"0x485f440.w16.b0", !79, i64 0}
!79 = !{!"0x485f440.w32.b0", !80, i64 0}
!80 = !{!"0x485f440.w64.b0", !81, i64 0}
!81 = !{!"0x485f440.w128.b0", !82, i64 0}
!82 = !{!"0x485f440.w256.b0", !83, i64 0}
!83 = !{!"0x485f440.w512.b0", !84, i64 0}
!84 = !{!"0x485f440.w1024.b0", !85, i64 0}
!85 = !{!"0x485f440", !22, i64 0}
!86 = !{!87, !87, i64 0}
!87 = !{!"0x485f440.w8.b8", !78, i64 0}
!88 = !{!89, !89, i64 0}
!89 = !{!"0x485f440.w8.b16", !90, i64 0}
!90 = !{!"0x485f440.w16.b16", !79, i64 0}
!91 = !{!92, !92, i64 0}
!92 = !{!"0x4c368e0.w8.b0", !93, i64 0}
!93 = !{!"0x4c368e0.w16.b0", !94, i64 0}
!94 = !{!"0x4c368e0.w32.b0", !95, i64 0}
!95 = !{!"0x4c368e0.w64.b0", !96, i64 0}
!96 = !{!"0x4c368e0.w128.b0", !97, i64 0}
!97 = !{!"0x4c368e0.w256.b0", !98, i64 0}
!98 = !{!"0x4c368e0.w512.b0", !99, i64 0}
!99 = !{!"0x4c368e0.w1024.b0", !100, i64 0}
!100 = !{!"0x4c368e0", !22, i64 0}
!101 = !{!102, !102, i64 0}
!102 = !{!"0x4c368e0.w8.b8", !93, i64 0}
!103 = !{!104, !104, i64 0}
!104 = !{!"0x4823090.w8.b0", !105, i64 0}
!105 = !{!"0x4823090.w16.b0", !106, i64 0}
!106 = !{!"0x4823090.w32.b0", !107, i64 0}
!107 = !{!"0x4823090.w64.b0", !108, i64 0}
!108 = !{!"0x4823090.w128.b0", !109, i64 0}
!109 = !{!"0x4823090.w256.b0", !110, i64 0}
!110 = !{!"0x4823090.w512.b0", !111, i64 0}
!111 = !{!"0x4823090.w1024.b0", !112, i64 0}
!112 = !{!"0x4823090", !22, i64 0}
!113 = !{!114, !114, i64 0}
!114 = !{!"0x4823090.w8.b8", !105, i64 0}
!115 = !{!116, !116, i64 0}
!116 = !{!"0x4823090.w8.b16", !117, i64 0}
!117 = !{!"0x4823090.w16.b16", !106, i64 0}
!118 = !{!119, !119, i64 0}
!119 = !{!"0x4c1c700.w8.b0", !120, i64 0}
!120 = !{!"0x4c1c700.w16.b0", !121, i64 0}
!121 = !{!"0x4c1c700.w32.b0", !122, i64 0}
!122 = !{!"0x4c1c700.w64.b0", !123, i64 0}
!123 = !{!"0x4c1c700.w128.b0", !124, i64 0}
!124 = !{!"0x4c1c700.w256.b0", !125, i64 0}
!125 = !{!"0x4c1c700.w512.b0", !126, i64 0}
!126 = !{!"0x4c1c700.w1024.b0", !127, i64 0}
!127 = !{!"0x4c1c700", !22, i64 0}
!128 = !{!129, !129, i64 0}
!129 = !{!"0x4c1c700.w8.b8", !120, i64 0}
!130 = !{!131, !131, i64 0}
!131 = !{!"0x4c1c700.w8.b16", !132, i64 0}
!132 = !{!"0x4c1c700.w16.b16", !121, i64 0}
!133 = !{!134, !134, i64 0}
!134 = !{!"0x482e910.w8.b0", !135, i64 0}
!135 = !{!"0x482e910.w16.b0", !136, i64 0}
!136 = !{!"0x482e910.w32.b0", !137, i64 0}
!137 = !{!"0x482e910.w64.b0", !138, i64 0}
!138 = !{!"0x482e910.w128.b0", !139, i64 0}
!139 = !{!"0x482e910.w256.b0", !140, i64 0}
!140 = !{!"0x482e910.w512.b0", !141, i64 0}
!141 = !{!"0x482e910.w1024.b0", !142, i64 0}
!142 = !{!"0x482e910", !22, i64 0}
!143 = !{!144, !144, i64 0}
!144 = !{!"0x482e910.w8.b8", !135, i64 0}
!145 = !{!146, !146, i64 0}
!146 = !{!"0x482e910.w8.b16", !147, i64 0}
!147 = !{!"0x482e910.w16.b16", !136, i64 0}
!148 = !{!149, !149, i64 0}
!149 = !{!"0x4c82f10.w8.b0", !150, i64 0}
!150 = !{!"0x4c82f10.w16.b0", !151, i64 0}
!151 = !{!"0x4c82f10.w32.b0", !152, i64 0}
!152 = !{!"0x4c82f10.w64.b0", !153, i64 0}
!153 = !{!"0x4c82f10.w128.b0", !154, i64 0}
!154 = !{!"0x4c82f10.w256.b0", !155, i64 0}
!155 = !{!"0x4c82f10.w512.b0", !156, i64 0}
!156 = !{!"0x4c82f10.w1024.b0", !157, i64 0}
!157 = !{!"0x4c82f10", !22, i64 0}
!158 = !{!159, !159, i64 0}
!159 = !{!"0x4c82f10.w8.b8", !150, i64 0}
!160 = !{!161, !161, i64 0}
!161 = !{!"0x4c5eea0.w8.b0", !162, i64 0}
!162 = !{!"0x4c5eea0.w16.b0", !163, i64 0}
!163 = !{!"0x4c5eea0.w32.b0", !164, i64 0}
!164 = !{!"0x4c5eea0.w64.b0", !165, i64 0}
!165 = !{!"0x4c5eea0.w128.b0", !166, i64 0}
!166 = !{!"0x4c5eea0.w256.b0", !167, i64 0}
!167 = !{!"0x4c5eea0.w512.b0", !168, i64 0}
!168 = !{!"0x4c5eea0.w1024.b0", !169, i64 0}
!169 = !{!"0x4c5eea0", !22, i64 0}
!170 = !{!171, !171, i64 0}
!171 = !{!"0x4c5eea0.w8.b8", !162, i64 0}
!172 = !{!173, !173, i64 0}
!173 = !{!"0x4c5eea0.w8.b16", !174, i64 0}
!174 = !{!"0x4c5eea0.w16.b16", !163, i64 0}
!175 = !{!176, !176, i64 0}
!176 = !{!"0x4c30930.w8.b0", !177, i64 0}
!177 = !{!"0x4c30930.w16.b0", !178, i64 0}
!178 = !{!"0x4c30930.w32.b0", !179, i64 0}
!179 = !{!"0x4c30930.w64.b0", !180, i64 0}
!180 = !{!"0x4c30930.w128.b0", !181, i64 0}
!181 = !{!"0x4c30930.w256.b0", !182, i64 0}
!182 = !{!"0x4c30930.w512.b0", !183, i64 0}
!183 = !{!"0x4c30930.w1024.b0", !184, i64 0}
!184 = !{!"0x4c30930", !22, i64 0}
!185 = !{!186, !186, i64 0}
!186 = !{!"0x4c30930.w8.b8", !177, i64 0}
!187 = !{!188, !188, i64 0}
!188 = !{!"0x4c30930.w8.b16", !189, i64 0}
!189 = !{!"0x4c30930.w16.b16", !178, i64 0}
!190 = !{!191, !191, i64 0}
!191 = !{!"0x4133cf0.w16.b0", !192, i64 0}
!192 = !{!"0x4133cf0.w32.b0", !193, i64 0}
!193 = !{!"0x4133cf0.w64.b0", !194, i64 0}
!194 = !{!"0x4133cf0.w128.b0", !195, i64 0}
!195 = !{!"0x4133cf0.w256.b0", !196, i64 0}
!196 = !{!"0x4133cf0.w512.b0", !197, i64 0}
!197 = !{!"0x4133cf0.w1024.b0", !198, i64 0}
!198 = !{!"0x4133cf0", !22, i64 0}
!199 = !{!200, !200, i64 0}
!200 = !{!"0x4133cf0.w4.b16", !201, i64 0}
!201 = !{!"0x4133cf0.w8.b16", !202, i64 0}
!202 = !{!"0x4133cf0.w16.b16", !192, i64 0}
