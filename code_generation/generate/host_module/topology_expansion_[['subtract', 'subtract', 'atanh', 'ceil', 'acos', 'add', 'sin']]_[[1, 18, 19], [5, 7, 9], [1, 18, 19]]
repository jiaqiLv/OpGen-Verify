; ModuleID = 'TVMMod'
source_filename = "TVMMod"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%0 = type { double }
%1 = type { i8*, %2, i32, %3, i64*, i64*, i64 }
%2 = type { i32, i32 }
%3 = type { i8, i8, i16 }

@__tvm_module_ctx = linkonce dllexport local_unnamed_addr global i8* null, align 8
@__TVMFuncCall = linkonce dllexport local_unnamed_addr global i32 (i8*, %0*, i32*, i32, %0*, i32*)* null, align 8
@__TVMBackendGetFuncFromEnv = linkonce dllexport local_unnamed_addr global i32 (i8*, i8*, i8**)* null, align 8
@__TVMAPISetLastError = linkonce dllexport local_unnamed_addr global void (i8*)* null, align 8
@.str = private constant [67 x i8] c"Assert fail: num_args == 7, default_function: num_args should be 7\00", align 1
@.str.1 = private constant [130 x i8] c"Assert fail: ph_0_code == 3 or ph_0_code == 13 or ph_0_code == 7 or ph_0_code == 4, default_function: Expect arg[0] to be pointer\00", align 1
@.str.2 = private constant [130 x i8] c"Assert fail: ph_3_code == 3 or ph_3_code == 13 or ph_3_code == 7 or ph_3_code == 4, default_function: Expect arg[1] to be pointer\00", align 1
@.str.3 = private constant [154 x i8] c"Assert fail: T_subtract_code == 3 or T_subtract_code == 13 or T_subtract_code == 7 or T_subtract_code == 4, default_function: Expect arg[2] to be pointer\00", align 1
@.str.4 = private constant [142 x i8] c"Assert fail: compute_code == 3 or compute_code == 13 or compute_code == 7 or compute_code == 4, default_function: Expect arg[3] to be pointer\00", align 1
@.str.5 = private constant [142 x i8] c"Assert fail: compute_code == 3 or compute_code == 13 or compute_code == 7 or compute_code == 4, default_function: Expect arg[4] to be pointer\00", align 1
@.str.6 = private constant [134 x i8] c"Assert fail: T_add_code == 3 or T_add_code == 13 or T_add_code == 7 or T_add_code == 4, default_function: Expect arg[5] to be pointer\00", align 1
@.str.7 = private constant [142 x i8] c"Assert fail: compute_code == 3 or compute_code == 13 or compute_code == 7 or compute_code == 4, default_function: Expect arg[6] to be pointer\00", align 1
@.str.8 = private constant [107 x i8] c"Assert fail: 3 == T.tvm_struct_get(ph_0, 0, 4, \22int32\22), default_function.ph_0.ndim is expected to equal 3\00", align 1
@.str.9 = private constant [235 x i8] c"Assert fail: T.tvm_struct_get(ph_0, 0, 5, \22uint8\22) == T.uint8(2) and T.tvm_struct_get(ph_0, 0, 6, \22uint8\22) == T.uint8(32) and T.tvm_struct_get(ph_0, 0, 7, \22uint16\22) == T.uint16(1), default_function.ph_0.dtype is expected to be float32\00", align 1
@.str.10 = private constant [191 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_0_shape[0]) == 1, Argument default_function.ph_0.shape[0] has an unsatisfied constraint: 1 == T.Cast(\22int32\22, default_function_ph_0_shape[0])\00", align 1
@.str.11 = private constant [193 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_0_shape[1]) == 18, Argument default_function.ph_0.shape[1] has an unsatisfied constraint: 18 == T.Cast(\22int32\22, default_function_ph_0_shape[1])\00", align 1
@.str.12 = private constant [193 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_0_shape[2]) == 19, Argument default_function.ph_0.shape[2] has an unsatisfied constraint: 19 == T.Cast(\22int32\22, default_function_ph_0_shape[2])\00", align 1
@.str.13 = private constant [189 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_ph_0_strides[2]) and 19 == T.Cast(\22int32\22, default_function_ph_0_strides[1]), default_function.ph_0.strides: expected to be compact array\00", align 1
@.str.14 = private constant [196 x i8] c"Assert fail: T.uint64(0) == T.tvm_struct_get(ph_0, 0, 8, \22uint64\22), Argument default_function.ph_0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(ph_0, 0, 8, \22uint64\22)\00", align 1
@.str.15 = private constant [176 x i8] c"Assert fail: T.tvm_struct_get(ph_0, 0, 10, \22int32\22) == 1, Argument default_function.ph_0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(ph_0, 0, 10, \22int32\22)\00", align 1
@.str.16 = private constant [107 x i8] c"Assert fail: 3 == T.tvm_struct_get(ph_3, 0, 4, \22int32\22), default_function.ph_3.ndim is expected to equal 3\00", align 1
@.str.17 = private constant [235 x i8] c"Assert fail: T.tvm_struct_get(ph_3, 0, 5, \22uint8\22) == T.uint8(2) and T.tvm_struct_get(ph_3, 0, 6, \22uint8\22) == T.uint8(32) and T.tvm_struct_get(ph_3, 0, 7, \22uint16\22) == T.uint16(1), default_function.ph_3.dtype is expected to be float32\00", align 1
@.str.18 = private constant [191 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_3_shape[0]) == 1, Argument default_function.ph_3.shape[0] has an unsatisfied constraint: 1 == T.Cast(\22int32\22, default_function_ph_3_shape[0])\00", align 1
@.str.19 = private constant [193 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_3_shape[1]) == 18, Argument default_function.ph_3.shape[1] has an unsatisfied constraint: 18 == T.Cast(\22int32\22, default_function_ph_3_shape[1])\00", align 1
@.str.20 = private constant [193 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_3_shape[2]) == 19, Argument default_function.ph_3.shape[2] has an unsatisfied constraint: 19 == T.Cast(\22int32\22, default_function_ph_3_shape[2])\00", align 1
@.str.21 = private constant [189 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_ph_3_strides[2]) and 19 == T.Cast(\22int32\22, default_function_ph_3_strides[1]), default_function.ph_3.strides: expected to be compact array\00", align 1
@.str.22 = private constant [196 x i8] c"Assert fail: T.uint64(0) == T.tvm_struct_get(ph_3, 0, 8, \22uint64\22), Argument default_function.ph_3.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(ph_3, 0, 8, \22uint64\22)\00", align 1
@.str.23 = private constant [176 x i8] c"Assert fail: T.tvm_struct_get(ph_3, 0, 10, \22int32\22) == 1, Argument default_function.ph_3.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(ph_3, 0, 10, \22int32\22)\00", align 1
@.str.24 = private constant [182 x i8] c"Assert fail: dev_id == T.tvm_struct_get(ph_3, 0, 9, \22int32\22), Argument default_function.ph_3.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(ph_3, 0, 9, \22int32\22)\00", align 1
@.str.25 = private constant [119 x i8] c"Assert fail: 3 == T.tvm_struct_get(T_subtract, 0, 4, \22int32\22), default_function.T_subtract.ndim is expected to equal 3\00", align 1
@.str.26 = private constant [259 x i8] c"Assert fail: T.tvm_struct_get(T_subtract, 0, 5, \22uint8\22) == T.uint8(2) and T.tvm_struct_get(T_subtract, 0, 6, \22uint8\22) == T.uint8(32) and T.tvm_struct_get(T_subtract, 0, 7, \22uint16\22) == T.uint16(1), default_function.T_subtract.dtype is expected to be float32\00", align 1
@.str.27 = private constant [209 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_T_subtract_shape[0]) == 1, Argument default_function.T_subtract.shape[0] has an unsatisfied constraint: 1 == T.Cast(\22int32\22, default_function_T_subtract_shape[0])\00", align 1
@.str.28 = private constant [211 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_T_subtract_shape[1]) == 18, Argument default_function.T_subtract.shape[1] has an unsatisfied constraint: 18 == T.Cast(\22int32\22, default_function_T_subtract_shape[1])\00", align 1
@.str.29 = private constant [211 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_T_subtract_shape[2]) == 19, Argument default_function.T_subtract.shape[2] has an unsatisfied constraint: 19 == T.Cast(\22int32\22, default_function_T_subtract_shape[2])\00", align 1
@.str.30 = private constant [207 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_T_subtract_strides[2]) and 19 == T.Cast(\22int32\22, default_function_T_subtract_strides[1]), default_function.T_subtract.strides: expected to be compact array\00", align 1
@.str.31 = private constant [214 x i8] c"Assert fail: T.uint64(0) == T.tvm_struct_get(T_subtract, 0, 8, \22uint64\22), Argument default_function.T_subtract.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_subtract, 0, 8, \22uint64\22)\00", align 1
@.str.32 = private constant [194 x i8] c"Assert fail: T.tvm_struct_get(T_subtract, 0, 10, \22int32\22) == 1, Argument default_function.T_subtract.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_subtract, 0, 10, \22int32\22)\00", align 1
@.str.33 = private constant [200 x i8] c"Assert fail: dev_id == T.tvm_struct_get(T_subtract, 0, 9, \22int32\22), Argument default_function.T_subtract.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_subtract, 0, 9, \22int32\22)\00", align 1
@.str.34 = private constant [113 x i8] c"Assert fail: 3 == T.tvm_struct_get(compute, 0, 4, \22int32\22), default_function.compute.ndim is expected to equal 3\00", align 1
@.str.35 = private constant [247 x i8] c"Assert fail: T.tvm_struct_get(compute, 0, 5, \22uint8\22) == T.uint8(2) and T.tvm_struct_get(compute, 0, 6, \22uint8\22) == T.uint8(32) and T.tvm_struct_get(compute, 0, 7, \22uint16\22) == T.uint16(1), default_function.compute.dtype is expected to be float32\00", align 1
@.str.36 = private constant [200 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_compute_shape[0]) == 1, Argument default_function.compute.shape[0] has an unsatisfied constraint: 1 == T.Cast(\22int32\22, default_function_compute_shape[0])\00", align 1
@.str.37 = private constant [202 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_compute_shape[1]) == 18, Argument default_function.compute.shape[1] has an unsatisfied constraint: 18 == T.Cast(\22int32\22, default_function_compute_shape[1])\00", align 1
@.str.38 = private constant [202 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_compute_shape[2]) == 19, Argument default_function.compute.shape[2] has an unsatisfied constraint: 19 == T.Cast(\22int32\22, default_function_compute_shape[2])\00", align 1
@.str.39 = private constant [198 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_compute_strides[2]) and 19 == T.Cast(\22int32\22, default_function_compute_strides[1]), default_function.compute.strides: expected to be compact array\00", align 1
@.str.40 = private constant [205 x i8] c"Assert fail: T.uint64(0) == T.tvm_struct_get(compute, 0, 8, \22uint64\22), Argument default_function.compute.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(compute, 0, 8, \22uint64\22)\00", align 1
@.str.41 = private constant [185 x i8] c"Assert fail: T.tvm_struct_get(compute, 0, 10, \22int32\22) == 1, Argument default_function.compute.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(compute, 0, 10, \22int32\22)\00", align 1
@.str.42 = private constant [191 x i8] c"Assert fail: dev_id == T.tvm_struct_get(compute, 0, 9, \22int32\22), Argument default_function.compute.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(compute, 0, 9, \22int32\22)\00", align 1
@.str.43 = private constant [109 x i8] c"Assert fail: 3 == T.tvm_struct_get(T_add, 0, 4, \22int32\22), default_function.T_add.ndim is expected to equal 3\00", align 1
@.str.44 = private constant [239 x i8] c"Assert fail: T.tvm_struct_get(T_add, 0, 5, \22uint8\22) == T.uint8(2) and T.tvm_struct_get(T_add, 0, 6, \22uint8\22) == T.uint8(32) and T.tvm_struct_get(T_add, 0, 7, \22uint16\22) == T.uint16(1), default_function.T_add.dtype is expected to be float32\00", align 1
@.str.45 = private constant [194 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_T_add_shape[0]) == 1, Argument default_function.T_add.shape[0] has an unsatisfied constraint: 1 == T.Cast(\22int32\22, default_function_T_add_shape[0])\00", align 1
@.str.46 = private constant [196 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_T_add_shape[1]) == 18, Argument default_function.T_add.shape[1] has an unsatisfied constraint: 18 == T.Cast(\22int32\22, default_function_T_add_shape[1])\00", align 1
@.str.47 = private constant [196 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_T_add_shape[2]) == 19, Argument default_function.T_add.shape[2] has an unsatisfied constraint: 19 == T.Cast(\22int32\22, default_function_T_add_shape[2])\00", align 1
@.str.48 = private constant [192 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_T_add_strides[2]) and 19 == T.Cast(\22int32\22, default_function_T_add_strides[1]), default_function.T_add.strides: expected to be compact array\00", align 1
@.str.49 = private constant [199 x i8] c"Assert fail: T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, \22uint64\22), Argument default_function.T_add.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, \22uint64\22)\00", align 1
@.str.50 = private constant [179 x i8] c"Assert fail: T.tvm_struct_get(T_add, 0, 10, \22int32\22) == 1, Argument default_function.T_add.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_add, 0, 10, \22int32\22)\00", align 1
@.str.51 = private constant [185 x i8] c"Assert fail: dev_id == T.tvm_struct_get(T_add, 0, 9, \22int32\22), Argument default_function.T_add.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_add, 0, 9, \22int32\22)\00", align 1
@.tvm_func.default_function_kernel = internal unnamed_addr global i8* null, align 8
@.str.52 = private constant [24 x i8] c"default_function_kernel\00", align 1
@.str.53 = private constant [68 x i8] c"Assert fail: kernel_error_code == 0, Error executing compute kernel\00", align 1
@__tvm_main__ = weak dllexport local_unnamed_addr constant [17 x i8] c"default_function\00", align 1
@llvm.global_ctors = appending global [0 x { i32, void ()*, i8* }] zeroinitializer

define dllexport i32 @default_function(i8* noalias nocapture readonly %args, i32* noalias nocapture readonly %arg_type_ids, i32 %num_args, i8* noalias nocapture readnone %out_ret_value, i32* noalias nocapture readnone %out_ret_tcode, i8* noalias nocapture readnone %resource_handle) local_unnamed_addr #0 !dbg !5 {
entry:
  call void @llvm.dbg.value(metadata i8* %args, metadata !12, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i32* %arg_type_ids, metadata !13, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i32 %num_args, metadata !14, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i8* %out_ret_value, metadata !15, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i32* %out_ret_tcode, metadata !16, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i8* %resource_handle, metadata !17, metadata !DIExpression()), !dbg !18
  %stack_value_void_ptr207 = alloca [8 x %0], align 8, !dbg !18
  %stack_tcode208 = alloca [8 x i32], align 4, !dbg !18
  %stack_tcode208.sub = getelementptr inbounds [8 x i32], [8 x i32]* %stack_tcode208, i64 0, i64 0
  %stack_value = bitcast [8 x %0]* %stack_value_void_ptr207 to i8*, !dbg !18
  %0 = icmp eq i32 %num_args, 7, !dbg !18
  br i1 %0, label %assert_end, label %assert_fail, !dbg !18, !prof !19

assert_fail:                                      ; preds = %entry
  %1 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %1(i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end:                                       ; preds = %entry
  %ph_0.code = load i32, i32* %arg_type_ids, align 4, !dbg !18, !tbaa !23
  %2 = getelementptr inbounds i32, i32* %arg_type_ids, i64 1, !dbg !18
  %ph_3.code = load i32, i32* %2, align 4, !dbg !18, !tbaa !34
  %3 = getelementptr inbounds i32, i32* %arg_type_ids, i64 2, !dbg !18
  %T_subtract.code = load i32, i32* %3, align 4, !dbg !18, !tbaa !36
  %4 = getelementptr inbounds i32, i32* %arg_type_ids, i64 3, !dbg !18
  %compute.code = load i32, i32* %4, align 4, !dbg !18, !tbaa !39
  %5 = getelementptr inbounds i32, i32* %arg_type_ids, i64 4, !dbg !18
  %compute.code1 = load i32, i32* %5, align 4, !dbg !18, !tbaa !41
  %6 = getelementptr inbounds i32, i32* %arg_type_ids, i64 5, !dbg !18
  %T_add.code = load i32, i32* %6, align 4, !dbg !18, !tbaa !45
  %7 = getelementptr inbounds i32, i32* %arg_type_ids, i64 6, !dbg !18
  %compute.code2 = load i32, i32* %7, align 4, !dbg !18, !tbaa !47
  %8 = bitcast i8* %args to %1**, !dbg !18
  %ph_0209 = load %1*, %1** %8, align 8, !dbg !18
  %9 = getelementptr inbounds i8, i8* %args, i64 8, !dbg !18
  %10 = bitcast i8* %9 to %1**, !dbg !18
  %ph_3210 = load %1*, %1** %10, align 8, !dbg !18
  %11 = getelementptr inbounds i8, i8* %args, i64 16, !dbg !18
  %12 = bitcast i8* %11 to %1**, !dbg !18
  %T_subtract211 = load %1*, %1** %12, align 8, !dbg !18
  %13 = getelementptr inbounds i8, i8* %args, i64 24, !dbg !18
  %14 = bitcast i8* %13 to %1**, !dbg !18
  %compute212 = load %1*, %1** %14, align 8, !dbg !18
  %15 = getelementptr inbounds i8, i8* %args, i64 32, !dbg !18
  %16 = bitcast i8* %15 to %1**, !dbg !18
  %compute3213 = load %1*, %1** %16, align 8, !dbg !18
  %17 = getelementptr inbounds i8, i8* %args, i64 40, !dbg !18
  %18 = bitcast i8* %17 to %1**, !dbg !18
  %T_add214 = load %1*, %1** %18, align 8, !dbg !18
  %19 = getelementptr inbounds i8, i8* %args, i64 48, !dbg !18
  %20 = bitcast i8* %19 to %1**, !dbg !18
  %compute4215 = load %1*, %1** %20, align 8, !dbg !18
  %21 = bitcast %1* %ph_0209 to float**, !dbg !18
  %ph_0_void_ptr216 = load float*, float** %21, align 8, !dbg !18
  %ptrint = ptrtoint float* %ph_0_void_ptr216 to i64, !dbg !18
  %maskedptr = and i64 %ptrint, 63, !dbg !18
  %maskcond = icmp eq i64 %maskedptr, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond), !dbg !18
  %22 = getelementptr inbounds %1, %1* %ph_0209, i64 0, i32 4, !dbg !18
  %default_function.ph_0.shape = load i64*, i64** %22, align 8, !dbg !18
  %23 = getelementptr inbounds %1, %1* %ph_0209, i64 0, i32 5, !dbg !18
  %default_function.ph_0.strides = load i64*, i64** %23, align 8, !dbg !18
  %24 = getelementptr inbounds %1, %1* %ph_0209, i64 0, i32 1, i32 1, !dbg !18
  %dev_id = load i32, i32* %24, align 4, !dbg !18
  %25 = bitcast %1* %ph_3210 to float**, !dbg !18
  %ph_3_void_ptr217 = load float*, float** %25, align 8, !dbg !18
  %ptrint7 = ptrtoint float* %ph_3_void_ptr217 to i64, !dbg !18
  %maskedptr8 = and i64 %ptrint7, 63, !dbg !18
  %maskcond9 = icmp eq i64 %maskedptr8, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond9), !dbg !18
  %26 = getelementptr inbounds %1, %1* %ph_3210, i64 0, i32 4, !dbg !18
  %default_function.ph_3.shape = load i64*, i64** %26, align 8, !dbg !18
  %27 = getelementptr inbounds %1, %1* %ph_3210, i64 0, i32 5, !dbg !18
  %default_function.ph_3.strides = load i64*, i64** %27, align 8, !dbg !18
  %28 = bitcast %1* %T_subtract211 to float**, !dbg !18
  %T_subtract_void_ptr218 = load float*, float** %28, align 8, !dbg !18
  %ptrint11 = ptrtoint float* %T_subtract_void_ptr218 to i64, !dbg !18
  %maskedptr12 = and i64 %ptrint11, 63, !dbg !18
  %maskcond13 = icmp eq i64 %maskedptr12, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond13), !dbg !18
  %29 = getelementptr inbounds %1, %1* %T_subtract211, i64 0, i32 4, !dbg !18
  %default_function.T_subtract.shape = load i64*, i64** %29, align 8, !dbg !18
  %30 = getelementptr inbounds %1, %1* %T_subtract211, i64 0, i32 5, !dbg !18
  %default_function.T_subtract.strides = load i64*, i64** %30, align 8, !dbg !18
  %31 = bitcast %1* %compute212 to float**, !dbg !18
  %compute_void_ptr219 = load float*, float** %31, align 8, !dbg !18
  %ptrint15 = ptrtoint float* %compute_void_ptr219 to i64, !dbg !18
  %maskedptr16 = and i64 %ptrint15, 63, !dbg !18
  %maskcond17 = icmp eq i64 %maskedptr16, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond17), !dbg !18
  %32 = getelementptr inbounds %1, %1* %compute212, i64 0, i32 4, !dbg !18
  %default_function.compute.shape = load i64*, i64** %32, align 8, !dbg !18
  %33 = getelementptr inbounds %1, %1* %compute212, i64 0, i32 5, !dbg !18
  %default_function.compute.strides = load i64*, i64** %33, align 8, !dbg !18
  %34 = bitcast %1* %compute3213 to float**, !dbg !18
  %compute_void_ptr18220 = load float*, float** %34, align 8, !dbg !18
  %ptrint20 = ptrtoint float* %compute_void_ptr18220 to i64, !dbg !18
  %maskedptr21 = and i64 %ptrint20, 63, !dbg !18
  %maskcond22 = icmp eq i64 %maskedptr21, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond22), !dbg !18
  %35 = getelementptr inbounds %1, %1* %compute3213, i64 0, i32 4, !dbg !18
  %default_function.compute.shape23 = load i64*, i64** %35, align 8, !dbg !18
  %36 = getelementptr inbounds %1, %1* %compute3213, i64 0, i32 5, !dbg !18
  %default_function.compute.strides24 = load i64*, i64** %36, align 8, !dbg !18
  %37 = bitcast %1* %T_add214 to float**, !dbg !18
  %T_add_void_ptr221 = load float*, float** %37, align 8, !dbg !18
  %ptrint26 = ptrtoint float* %T_add_void_ptr221 to i64, !dbg !18
  %maskedptr27 = and i64 %ptrint26, 63, !dbg !18
  %maskcond28 = icmp eq i64 %maskedptr27, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond28), !dbg !18
  %38 = getelementptr inbounds %1, %1* %T_add214, i64 0, i32 4, !dbg !18
  %default_function.T_add.shape = load i64*, i64** %38, align 8, !dbg !18
  %39 = getelementptr inbounds %1, %1* %T_add214, i64 0, i32 5, !dbg !18
  %default_function.T_add.strides = load i64*, i64** %39, align 8, !dbg !18
  %40 = bitcast %1* %compute4215 to float**, !dbg !18
  %compute_void_ptr29222 = load float*, float** %40, align 8, !dbg !18
  %ptrint31 = ptrtoint float* %compute_void_ptr29222 to i64, !dbg !18
  %maskedptr32 = and i64 %ptrint31, 63, !dbg !18
  %maskcond33 = icmp eq i64 %maskedptr32, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond33), !dbg !18
  %41 = getelementptr inbounds %1, %1* %compute4215, i64 0, i32 4, !dbg !18
  %default_function.compute.shape34 = load i64*, i64** %41, align 8, !dbg !18
  %42 = getelementptr inbounds %1, %1* %compute4215, i64 0, i32 5, !dbg !18
  %default_function.compute.strides35 = load i64*, i64** %42, align 8, !dbg !18
  switch i32 %ph_0.code, label %assert_fail36 [
    i32 13, label %assert_end37
    i32 7, label %assert_end37
    i32 4, label %assert_end37
    i32 3, label %assert_end37
  ], !dbg !18

assert_fail36:                                    ; preds = %assert_end
  %43 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %43(i8* getelementptr inbounds ([130 x i8], [130 x i8]* @.str.1, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end37:                                     ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  switch i32 %ph_3.code, label %assert_fail38 [
    i32 13, label %assert_end39
    i32 7, label %assert_end39
    i32 4, label %assert_end39
    i32 3, label %assert_end39
  ], !dbg !18

assert_fail38:                                    ; preds = %assert_end37
  %44 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %44(i8* getelementptr inbounds ([130 x i8], [130 x i8]* @.str.2, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end39:                                     ; preds = %assert_end37, %assert_end37, %assert_end37, %assert_end37
  switch i32 %T_subtract.code, label %assert_fail40 [
    i32 13, label %assert_end41
    i32 7, label %assert_end41
    i32 4, label %assert_end41
    i32 3, label %assert_end41
  ], !dbg !18

assert_fail40:                                    ; preds = %assert_end39
  %45 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %45(i8* getelementptr inbounds ([154 x i8], [154 x i8]* @.str.3, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end41:                                     ; preds = %assert_end39, %assert_end39, %assert_end39, %assert_end39
  switch i32 %compute.code, label %assert_fail42 [
    i32 13, label %assert_end43
    i32 7, label %assert_end43
    i32 4, label %assert_end43
    i32 3, label %assert_end43
  ], !dbg !18

assert_fail42:                                    ; preds = %assert_end41
  %46 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %46(i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.4, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end43:                                     ; preds = %assert_end41, %assert_end41, %assert_end41, %assert_end41
  switch i32 %compute.code1, label %assert_fail44 [
    i32 13, label %assert_end45
    i32 7, label %assert_end45
    i32 4, label %assert_end45
    i32 3, label %assert_end45
  ], !dbg !18

assert_fail44:                                    ; preds = %assert_end43
  %47 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %47(i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.5, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end45:                                     ; preds = %assert_end43, %assert_end43, %assert_end43, %assert_end43
  switch i32 %T_add.code, label %assert_fail46 [
    i32 13, label %assert_end47
    i32 7, label %assert_end47
    i32 4, label %assert_end47
    i32 3, label %assert_end47
  ], !dbg !18

assert_fail46:                                    ; preds = %assert_end45
  %48 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %48(i8* getelementptr inbounds ([134 x i8], [134 x i8]* @.str.6, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end47:                                     ; preds = %assert_end45, %assert_end45, %assert_end45, %assert_end45
  switch i32 %compute.code2, label %assert_fail48 [
    i32 13, label %assert_end49
    i32 7, label %assert_end49
    i32 4, label %assert_end49
    i32 3, label %assert_end49
  ], !dbg !18

assert_fail48:                                    ; preds = %assert_end47
  %49 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %49(i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.7, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end49:                                     ; preds = %assert_end47, %assert_end47, %assert_end47, %assert_end47
  %50 = getelementptr inbounds %1, %1* %ph_0209, i64 0, i32 2, !dbg !18
  %51 = load i32, i32* %50, align 4, !dbg !18
  %52 = icmp eq i32 %51, 3, !dbg !18
  br i1 %52, label %assert_end53, label %assert_fail50, !dbg !18, !prof !19

assert_fail50:                                    ; preds = %assert_end49
  %53 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %53(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.8, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end53:                                     ; preds = %assert_end49
  %54 = getelementptr inbounds %1, %1* %ph_0209, i64 0, i32 3, i32 2, !dbg !18
  %55 = load i16, i16* %54, align 2, !dbg !18
  %56 = icmp eq i16 %55, 1, !dbg !18
  %57 = getelementptr inbounds %1, %1* %ph_0209, i64 0, i32 3, i32 1, !dbg !18
  %58 = load i8, i8* %57, align 1, !dbg !18
  %59 = icmp eq i8 %58, 32, !dbg !18
  %60 = getelementptr inbounds %1, %1* %ph_0209, i64 0, i32 3, i32 0, !dbg !18
  %61 = load i8, i8* %60, align 1, !dbg !18
  %62 = icmp eq i8 %61, 2, !dbg !18
  %63 = and i1 %59, %62, !dbg !18
  %64 = and i1 %56, %63, !dbg !18
  br i1 %64, label %assert_end55, label %assert_fail54, !dbg !18, !prof !19

assert_fail54:                                    ; preds = %assert_end53
  %65 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %65(i8* getelementptr inbounds ([235 x i8], [235 x i8]* @.str.9, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end55:                                     ; preds = %assert_end53
  %66 = load i64, i64* %default_function.ph_0.shape, align 8, !dbg !18, !tbaa !50
  %67 = trunc i64 %66 to i32, !dbg !18
  %68 = icmp eq i32 %67, 1, !dbg !18
  br i1 %68, label %assert_end57, label %assert_fail56, !dbg !18, !prof !19

assert_fail56:                                    ; preds = %assert_end55
  %69 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %69(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.10, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end57:                                     ; preds = %assert_end55
  %70 = getelementptr inbounds i64, i64* %default_function.ph_0.shape, i64 1, !dbg !18
  %71 = load i64, i64* %70, align 8, !dbg !18, !tbaa !60
  %72 = trunc i64 %71 to i32, !dbg !18
  %73 = icmp eq i32 %72, 18, !dbg !18
  br i1 %73, label %assert_end59, label %assert_fail58, !dbg !18, !prof !19

assert_fail58:                                    ; preds = %assert_end57
  %74 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %74(i8* getelementptr inbounds ([193 x i8], [193 x i8]* @.str.11, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end59:                                     ; preds = %assert_end57
  %75 = getelementptr inbounds i64, i64* %default_function.ph_0.shape, i64 2, !dbg !18
  %76 = load i64, i64* %75, align 8, !dbg !18, !tbaa !62
  %77 = trunc i64 %76 to i32, !dbg !18
  %78 = icmp eq i32 %77, 19, !dbg !18
  br i1 %78, label %assert_end61, label %assert_fail60, !dbg !18, !prof !19

assert_fail60:                                    ; preds = %assert_end59
  %79 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %79(i8* getelementptr inbounds ([193 x i8], [193 x i8]* @.str.12, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end61:                                     ; preds = %assert_end59
  %80 = icmp eq i64* %default_function.ph_0.strides, null, !dbg !18
  br i1 %80, label %if_end, label %if_then, !dbg !18, !prof !65

if_then:                                          ; preds = %assert_end61
  %81 = getelementptr inbounds i64, i64* %default_function.ph_0.strides, i64 1, !dbg !18
  %82 = load i64, i64* %81, align 8, !dbg !18, !tbaa !66
  %83 = trunc i64 %82 to i32, !dbg !18
  %84 = icmp eq i32 %83, 19, !dbg !18
  %85 = getelementptr inbounds i64, i64* %default_function.ph_0.strides, i64 2, !dbg !18
  %86 = load i64, i64* %85, align 8, !dbg !18, !tbaa !76
  %87 = trunc i64 %86 to i32, !dbg !18
  %88 = icmp eq i32 %87, 1, !dbg !18
  %89 = and i1 %84, %88, !dbg !18
  br i1 %89, label %if_end, label %assert_fail62, !dbg !18, !prof !19

if_end:                                           ; preds = %assert_end61, %if_then
  %90 = getelementptr inbounds %1, %1* %ph_0209, i64 0, i32 6, !dbg !18
  %91 = load i64, i64* %90, align 8, !dbg !18
  %92 = icmp eq i64 %91, 0, !dbg !18
  br i1 %92, label %assert_end65, label %assert_fail64, !dbg !18, !prof !19

assert_fail62:                                    ; preds = %if_then
  %93 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %93(i8* getelementptr inbounds ([189 x i8], [189 x i8]* @.str.13, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail64:                                    ; preds = %if_end
  %94 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %94(i8* getelementptr inbounds ([196 x i8], [196 x i8]* @.str.14, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end65:                                     ; preds = %if_end
  %95 = getelementptr inbounds %1, %1* %ph_0209, i64 0, i32 1, i32 0, !dbg !18
  %96 = load i32, i32* %95, align 4, !dbg !18
  %97 = icmp eq i32 %96, 1, !dbg !18
  br i1 %97, label %assert_end67, label %assert_fail66, !dbg !18, !prof !19

assert_fail66:                                    ; preds = %assert_end65
  %98 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %98(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.15, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end67:                                     ; preds = %assert_end65
  %99 = getelementptr inbounds %1, %1* %ph_3210, i64 0, i32 2, !dbg !18
  %100 = load i32, i32* %99, align 4, !dbg !18
  %101 = icmp eq i32 %100, 3, !dbg !18
  br i1 %101, label %assert_end71, label %assert_fail68, !dbg !18, !prof !19

assert_fail68:                                    ; preds = %assert_end67
  %102 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %102(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.16, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end71:                                     ; preds = %assert_end67
  %103 = getelementptr inbounds %1, %1* %ph_3210, i64 0, i32 3, i32 2, !dbg !18
  %104 = load i16, i16* %103, align 2, !dbg !18
  %105 = icmp eq i16 %104, 1, !dbg !18
  %106 = getelementptr inbounds %1, %1* %ph_3210, i64 0, i32 3, i32 1, !dbg !18
  %107 = load i8, i8* %106, align 1, !dbg !18
  %108 = icmp eq i8 %107, 32, !dbg !18
  %109 = getelementptr inbounds %1, %1* %ph_3210, i64 0, i32 3, i32 0, !dbg !18
  %110 = load i8, i8* %109, align 1, !dbg !18
  %111 = icmp eq i8 %110, 2, !dbg !18
  %112 = and i1 %108, %111, !dbg !18
  %113 = and i1 %105, %112, !dbg !18
  br i1 %113, label %assert_end73, label %assert_fail72, !dbg !18, !prof !19

assert_fail72:                                    ; preds = %assert_end71
  %114 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %114(i8* getelementptr inbounds ([235 x i8], [235 x i8]* @.str.17, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end73:                                     ; preds = %assert_end71
  %115 = load i64, i64* %default_function.ph_3.shape, align 8, !dbg !18, !tbaa !79
  %116 = trunc i64 %115 to i32, !dbg !18
  %117 = icmp eq i32 %116, 1, !dbg !18
  br i1 %117, label %assert_end75, label %assert_fail74, !dbg !18, !prof !19

assert_fail74:                                    ; preds = %assert_end73
  %118 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %118(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.18, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end75:                                     ; preds = %assert_end73
  %119 = getelementptr inbounds i64, i64* %default_function.ph_3.shape, i64 1, !dbg !18
  %120 = load i64, i64* %119, align 8, !dbg !18, !tbaa !89
  %121 = trunc i64 %120 to i32, !dbg !18
  %122 = icmp eq i32 %121, 18, !dbg !18
  br i1 %122, label %assert_end77, label %assert_fail76, !dbg !18, !prof !19

assert_fail76:                                    ; preds = %assert_end75
  %123 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %123(i8* getelementptr inbounds ([193 x i8], [193 x i8]* @.str.19, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end77:                                     ; preds = %assert_end75
  %124 = getelementptr inbounds i64, i64* %default_function.ph_3.shape, i64 2, !dbg !18
  %125 = load i64, i64* %124, align 8, !dbg !18, !tbaa !91
  %126 = trunc i64 %125 to i32, !dbg !18
  %127 = icmp eq i32 %126, 19, !dbg !18
  br i1 %127, label %assert_end79, label %assert_fail78, !dbg !18, !prof !19

assert_fail78:                                    ; preds = %assert_end77
  %128 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %128(i8* getelementptr inbounds ([193 x i8], [193 x i8]* @.str.20, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end79:                                     ; preds = %assert_end77
  %129 = icmp eq i64* %default_function.ph_3.strides, null, !dbg !18
  br i1 %129, label %if_end81, label %if_then80, !dbg !18, !prof !65

if_then80:                                        ; preds = %assert_end79
  %130 = getelementptr inbounds i64, i64* %default_function.ph_3.strides, i64 1, !dbg !18
  %131 = load i64, i64* %130, align 8, !dbg !18, !tbaa !94
  %132 = trunc i64 %131 to i32, !dbg !18
  %133 = icmp eq i32 %132, 19, !dbg !18
  %134 = getelementptr inbounds i64, i64* %default_function.ph_3.strides, i64 2, !dbg !18
  %135 = load i64, i64* %134, align 8, !dbg !18, !tbaa !104
  %136 = trunc i64 %135 to i32, !dbg !18
  %137 = icmp eq i32 %136, 1, !dbg !18
  %138 = and i1 %133, %137, !dbg !18
  br i1 %138, label %if_end81, label %assert_fail82, !dbg !18, !prof !19

if_end81:                                         ; preds = %assert_end79, %if_then80
  %139 = getelementptr inbounds %1, %1* %ph_3210, i64 0, i32 6, !dbg !18
  %140 = load i64, i64* %139, align 8, !dbg !18
  %141 = icmp eq i64 %140, 0, !dbg !18
  br i1 %141, label %assert_end85, label %assert_fail84, !dbg !18, !prof !19

assert_fail82:                                    ; preds = %if_then80
  %142 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %142(i8* getelementptr inbounds ([189 x i8], [189 x i8]* @.str.21, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail84:                                    ; preds = %if_end81
  %143 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %143(i8* getelementptr inbounds ([196 x i8], [196 x i8]* @.str.22, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end85:                                     ; preds = %if_end81
  %144 = getelementptr inbounds %1, %1* %ph_3210, i64 0, i32 1, i32 0, !dbg !18
  %145 = load i32, i32* %144, align 4, !dbg !18
  %146 = icmp eq i32 %145, 1, !dbg !18
  br i1 %146, label %assert_end87, label %assert_fail86, !dbg !18, !prof !19

assert_fail86:                                    ; preds = %assert_end85
  %147 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %147(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.23, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end87:                                     ; preds = %assert_end85
  %148 = getelementptr inbounds %1, %1* %ph_3210, i64 0, i32 1, i32 1, !dbg !18
  %149 = load i32, i32* %148, align 4, !dbg !18
  %150 = icmp eq i32 %dev_id, %149, !dbg !18
  br i1 %150, label %assert_end89, label %assert_fail88, !dbg !18, !prof !19

assert_fail88:                                    ; preds = %assert_end87
  %151 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %151(i8* getelementptr inbounds ([182 x i8], [182 x i8]* @.str.24, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end89:                                     ; preds = %assert_end87
  %152 = getelementptr inbounds %1, %1* %T_subtract211, i64 0, i32 2, !dbg !18
  %153 = load i32, i32* %152, align 4, !dbg !18
  %154 = icmp eq i32 %153, 3, !dbg !18
  br i1 %154, label %assert_end93, label %assert_fail90, !dbg !18, !prof !19

assert_fail90:                                    ; preds = %assert_end89
  %155 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %155(i8* getelementptr inbounds ([119 x i8], [119 x i8]* @.str.25, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end93:                                     ; preds = %assert_end89
  %156 = getelementptr inbounds %1, %1* %T_subtract211, i64 0, i32 3, i32 2, !dbg !18
  %157 = load i16, i16* %156, align 2, !dbg !18
  %158 = icmp eq i16 %157, 1, !dbg !18
  %159 = getelementptr inbounds %1, %1* %T_subtract211, i64 0, i32 3, i32 1, !dbg !18
  %160 = load i8, i8* %159, align 1, !dbg !18
  %161 = icmp eq i8 %160, 32, !dbg !18
  %162 = getelementptr inbounds %1, %1* %T_subtract211, i64 0, i32 3, i32 0, !dbg !18
  %163 = load i8, i8* %162, align 1, !dbg !18
  %164 = icmp eq i8 %163, 2, !dbg !18
  %165 = and i1 %161, %164, !dbg !18
  %166 = and i1 %158, %165, !dbg !18
  br i1 %166, label %assert_end95, label %assert_fail94, !dbg !18, !prof !19

assert_fail94:                                    ; preds = %assert_end93
  %167 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %167(i8* getelementptr inbounds ([259 x i8], [259 x i8]* @.str.26, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end95:                                     ; preds = %assert_end93
  %168 = load i64, i64* %default_function.T_subtract.shape, align 8, !dbg !18, !tbaa !107
  %169 = trunc i64 %168 to i32, !dbg !18
  %170 = icmp eq i32 %169, 1, !dbg !18
  br i1 %170, label %assert_end97, label %assert_fail96, !dbg !18, !prof !19

assert_fail96:                                    ; preds = %assert_end95
  %171 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %171(i8* getelementptr inbounds ([209 x i8], [209 x i8]* @.str.27, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end97:                                     ; preds = %assert_end95
  %172 = getelementptr inbounds i64, i64* %default_function.T_subtract.shape, i64 1, !dbg !18
  %173 = load i64, i64* %172, align 8, !dbg !18, !tbaa !117
  %174 = trunc i64 %173 to i32, !dbg !18
  %175 = icmp eq i32 %174, 18, !dbg !18
  br i1 %175, label %assert_end99, label %assert_fail98, !dbg !18, !prof !19

assert_fail98:                                    ; preds = %assert_end97
  %176 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %176(i8* getelementptr inbounds ([211 x i8], [211 x i8]* @.str.28, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end99:                                     ; preds = %assert_end97
  %177 = getelementptr inbounds i64, i64* %default_function.T_subtract.shape, i64 2, !dbg !18
  %178 = load i64, i64* %177, align 8, !dbg !18, !tbaa !119
  %179 = trunc i64 %178 to i32, !dbg !18
  %180 = icmp eq i32 %179, 19, !dbg !18
  br i1 %180, label %assert_end101, label %assert_fail100, !dbg !18, !prof !19

assert_fail100:                                   ; preds = %assert_end99
  %181 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %181(i8* getelementptr inbounds ([211 x i8], [211 x i8]* @.str.29, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end101:                                    ; preds = %assert_end99
  %182 = icmp eq i64* %default_function.T_subtract.strides, null, !dbg !18
  br i1 %182, label %if_end103, label %if_then102, !dbg !18, !prof !65

if_then102:                                       ; preds = %assert_end101
  %183 = getelementptr inbounds i64, i64* %default_function.T_subtract.strides, i64 1, !dbg !18
  %184 = load i64, i64* %183, align 8, !dbg !18, !tbaa !122
  %185 = trunc i64 %184 to i32, !dbg !18
  %186 = icmp eq i32 %185, 19, !dbg !18
  %187 = getelementptr inbounds i64, i64* %default_function.T_subtract.strides, i64 2, !dbg !18
  %188 = load i64, i64* %187, align 8, !dbg !18, !tbaa !132
  %189 = trunc i64 %188 to i32, !dbg !18
  %190 = icmp eq i32 %189, 1, !dbg !18
  %191 = and i1 %186, %190, !dbg !18
  br i1 %191, label %if_end103, label %assert_fail104, !dbg !18, !prof !19

if_end103:                                        ; preds = %assert_end101, %if_then102
  %192 = getelementptr inbounds %1, %1* %T_subtract211, i64 0, i32 6, !dbg !18
  %193 = load i64, i64* %192, align 8, !dbg !18
  %194 = icmp eq i64 %193, 0, !dbg !18
  br i1 %194, label %assert_end107, label %assert_fail106, !dbg !18, !prof !19

assert_fail104:                                   ; preds = %if_then102
  %195 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %195(i8* getelementptr inbounds ([207 x i8], [207 x i8]* @.str.30, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail106:                                   ; preds = %if_end103
  %196 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %196(i8* getelementptr inbounds ([214 x i8], [214 x i8]* @.str.31, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end107:                                    ; preds = %if_end103
  %197 = getelementptr inbounds %1, %1* %T_subtract211, i64 0, i32 1, i32 0, !dbg !18
  %198 = load i32, i32* %197, align 4, !dbg !18
  %199 = icmp eq i32 %198, 1, !dbg !18
  br i1 %199, label %assert_end109, label %assert_fail108, !dbg !18, !prof !19

assert_fail108:                                   ; preds = %assert_end107
  %200 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %200(i8* getelementptr inbounds ([194 x i8], [194 x i8]* @.str.32, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end109:                                    ; preds = %assert_end107
  %201 = getelementptr inbounds %1, %1* %T_subtract211, i64 0, i32 1, i32 1, !dbg !18
  %202 = load i32, i32* %201, align 4, !dbg !18
  %203 = icmp eq i32 %dev_id, %202, !dbg !18
  br i1 %203, label %assert_end111, label %assert_fail110, !dbg !18, !prof !19

assert_fail110:                                   ; preds = %assert_end109
  %204 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %204(i8* getelementptr inbounds ([200 x i8], [200 x i8]* @.str.33, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end111:                                    ; preds = %assert_end109
  %205 = getelementptr inbounds %1, %1* %compute212, i64 0, i32 2, !dbg !18
  %206 = load i32, i32* %205, align 4, !dbg !18
  %207 = icmp eq i32 %206, 3, !dbg !18
  br i1 %207, label %assert_end115, label %assert_fail112, !dbg !18, !prof !19

assert_fail112:                                   ; preds = %assert_end111
  %208 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %208(i8* getelementptr inbounds ([113 x i8], [113 x i8]* @.str.34, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end115:                                    ; preds = %assert_end111
  %209 = getelementptr inbounds %1, %1* %compute212, i64 0, i32 3, i32 2, !dbg !18
  %210 = load i16, i16* %209, align 2, !dbg !18
  %211 = icmp eq i16 %210, 1, !dbg !18
  %212 = getelementptr inbounds %1, %1* %compute212, i64 0, i32 3, i32 1, !dbg !18
  %213 = load i8, i8* %212, align 1, !dbg !18
  %214 = icmp eq i8 %213, 32, !dbg !18
  %215 = getelementptr inbounds %1, %1* %compute212, i64 0, i32 3, i32 0, !dbg !18
  %216 = load i8, i8* %215, align 1, !dbg !18
  %217 = icmp eq i8 %216, 2, !dbg !18
  %218 = and i1 %214, %217, !dbg !18
  %219 = and i1 %211, %218, !dbg !18
  br i1 %219, label %assert_end117, label %assert_fail116, !dbg !18, !prof !19

assert_fail116:                                   ; preds = %assert_end115
  %220 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %220(i8* getelementptr inbounds ([247 x i8], [247 x i8]* @.str.35, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end117:                                    ; preds = %assert_end115
  %221 = load i64, i64* %default_function.compute.shape, align 8, !dbg !18, !tbaa !135
  %222 = trunc i64 %221 to i32, !dbg !18
  %223 = icmp eq i32 %222, 1, !dbg !18
  br i1 %223, label %assert_end119, label %assert_fail118, !dbg !18, !prof !19

assert_fail118:                                   ; preds = %assert_end117
  %224 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %224(i8* getelementptr inbounds ([200 x i8], [200 x i8]* @.str.36, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end119:                                    ; preds = %assert_end117
  %225 = getelementptr inbounds i64, i64* %default_function.compute.shape, i64 1, !dbg !18
  %226 = load i64, i64* %225, align 8, !dbg !18, !tbaa !145
  %227 = trunc i64 %226 to i32, !dbg !18
  %228 = icmp eq i32 %227, 18, !dbg !18
  br i1 %228, label %assert_end121, label %assert_fail120, !dbg !18, !prof !19

assert_fail120:                                   ; preds = %assert_end119
  %229 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %229(i8* getelementptr inbounds ([202 x i8], [202 x i8]* @.str.37, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end121:                                    ; preds = %assert_end119
  %230 = getelementptr inbounds i64, i64* %default_function.compute.shape, i64 2, !dbg !18
  %231 = load i64, i64* %230, align 8, !dbg !18, !tbaa !147
  %232 = trunc i64 %231 to i32, !dbg !18
  %233 = icmp eq i32 %232, 19, !dbg !18
  br i1 %233, label %assert_end123, label %assert_fail122, !dbg !18, !prof !19

assert_fail122:                                   ; preds = %assert_end121
  %234 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %234(i8* getelementptr inbounds ([202 x i8], [202 x i8]* @.str.38, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end123:                                    ; preds = %assert_end121
  %235 = icmp eq i64* %default_function.compute.strides, null, !dbg !18
  br i1 %235, label %if_end125, label %if_then124, !dbg !18, !prof !65

if_then124:                                       ; preds = %assert_end123
  %236 = getelementptr inbounds i64, i64* %default_function.compute.strides, i64 1, !dbg !18
  %237 = load i64, i64* %236, align 8, !dbg !18, !tbaa !150
  %238 = trunc i64 %237 to i32, !dbg !18
  %239 = icmp eq i32 %238, 19, !dbg !18
  %240 = getelementptr inbounds i64, i64* %default_function.compute.strides, i64 2, !dbg !18
  %241 = load i64, i64* %240, align 8, !dbg !18, !tbaa !160
  %242 = trunc i64 %241 to i32, !dbg !18
  %243 = icmp eq i32 %242, 1, !dbg !18
  %244 = and i1 %239, %243, !dbg !18
  br i1 %244, label %if_end125, label %assert_fail126, !dbg !18, !prof !19

if_end125:                                        ; preds = %assert_end123, %if_then124
  %245 = getelementptr inbounds %1, %1* %compute212, i64 0, i32 6, !dbg !18
  %246 = load i64, i64* %245, align 8, !dbg !18
  %247 = icmp eq i64 %246, 0, !dbg !18
  br i1 %247, label %assert_end129, label %assert_fail128, !dbg !18, !prof !19

assert_fail126:                                   ; preds = %if_then124
  %248 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %248(i8* getelementptr inbounds ([198 x i8], [198 x i8]* @.str.39, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail128:                                   ; preds = %if_end125
  %249 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %249(i8* getelementptr inbounds ([205 x i8], [205 x i8]* @.str.40, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end129:                                    ; preds = %if_end125
  %250 = getelementptr inbounds %1, %1* %compute212, i64 0, i32 1, i32 0, !dbg !18
  %251 = load i32, i32* %250, align 4, !dbg !18
  %252 = icmp eq i32 %251, 1, !dbg !18
  br i1 %252, label %assert_end131, label %assert_fail130, !dbg !18, !prof !19

assert_fail130:                                   ; preds = %assert_end129
  %253 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %253(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.41, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end131:                                    ; preds = %assert_end129
  %254 = getelementptr inbounds %1, %1* %compute212, i64 0, i32 1, i32 1, !dbg !18
  %255 = load i32, i32* %254, align 4, !dbg !18
  %256 = icmp eq i32 %dev_id, %255, !dbg !18
  br i1 %256, label %assert_end133, label %assert_fail132, !dbg !18, !prof !19

assert_fail132:                                   ; preds = %assert_end131
  %257 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %257(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.42, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end133:                                    ; preds = %assert_end131
  %258 = getelementptr inbounds %1, %1* %compute3213, i64 0, i32 2, !dbg !18
  %259 = load i32, i32* %258, align 4, !dbg !18
  %260 = icmp eq i32 %259, 3, !dbg !18
  br i1 %260, label %assert_end137, label %assert_fail134, !dbg !18, !prof !19

assert_fail134:                                   ; preds = %assert_end133
  %261 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %261(i8* getelementptr inbounds ([113 x i8], [113 x i8]* @.str.34, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end137:                                    ; preds = %assert_end133
  %262 = getelementptr inbounds %1, %1* %compute3213, i64 0, i32 3, i32 2, !dbg !18
  %263 = load i16, i16* %262, align 2, !dbg !18
  %264 = icmp eq i16 %263, 1, !dbg !18
  %265 = getelementptr inbounds %1, %1* %compute3213, i64 0, i32 3, i32 1, !dbg !18
  %266 = load i8, i8* %265, align 1, !dbg !18
  %267 = icmp eq i8 %266, 32, !dbg !18
  %268 = getelementptr inbounds %1, %1* %compute3213, i64 0, i32 3, i32 0, !dbg !18
  %269 = load i8, i8* %268, align 1, !dbg !18
  %270 = icmp eq i8 %269, 2, !dbg !18
  %271 = and i1 %267, %270, !dbg !18
  %272 = and i1 %264, %271, !dbg !18
  br i1 %272, label %assert_end139, label %assert_fail138, !dbg !18, !prof !19

assert_fail138:                                   ; preds = %assert_end137
  %273 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %273(i8* getelementptr inbounds ([247 x i8], [247 x i8]* @.str.35, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end139:                                    ; preds = %assert_end137
  %274 = load i64, i64* %default_function.compute.shape23, align 8, !dbg !18, !tbaa !163
  %275 = trunc i64 %274 to i32, !dbg !18
  %276 = icmp eq i32 %275, 1, !dbg !18
  br i1 %276, label %assert_end141, label %assert_fail140, !dbg !18, !prof !19

assert_fail140:                                   ; preds = %assert_end139
  %277 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %277(i8* getelementptr inbounds ([200 x i8], [200 x i8]* @.str.36, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end141:                                    ; preds = %assert_end139
  %278 = getelementptr inbounds i64, i64* %default_function.compute.shape23, i64 1, !dbg !18
  %279 = load i64, i64* %278, align 8, !dbg !18, !tbaa !173
  %280 = trunc i64 %279 to i32, !dbg !18
  %281 = icmp eq i32 %280, 18, !dbg !18
  br i1 %281, label %assert_end143, label %assert_fail142, !dbg !18, !prof !19

assert_fail142:                                   ; preds = %assert_end141
  %282 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %282(i8* getelementptr inbounds ([202 x i8], [202 x i8]* @.str.37, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end143:                                    ; preds = %assert_end141
  %283 = getelementptr inbounds i64, i64* %default_function.compute.shape23, i64 2, !dbg !18
  %284 = load i64, i64* %283, align 8, !dbg !18, !tbaa !175
  %285 = trunc i64 %284 to i32, !dbg !18
  %286 = icmp eq i32 %285, 19, !dbg !18
  br i1 %286, label %assert_end145, label %assert_fail144, !dbg !18, !prof !19

assert_fail144:                                   ; preds = %assert_end143
  %287 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %287(i8* getelementptr inbounds ([202 x i8], [202 x i8]* @.str.38, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end145:                                    ; preds = %assert_end143
  %288 = icmp eq i64* %default_function.compute.strides24, null, !dbg !18
  br i1 %288, label %if_end147, label %if_then146, !dbg !18, !prof !65

if_then146:                                       ; preds = %assert_end145
  %289 = getelementptr inbounds i64, i64* %default_function.compute.strides24, i64 1, !dbg !18
  %290 = load i64, i64* %289, align 8, !dbg !18, !tbaa !178
  %291 = trunc i64 %290 to i32, !dbg !18
  %292 = icmp eq i32 %291, 19, !dbg !18
  %293 = getelementptr inbounds i64, i64* %default_function.compute.strides24, i64 2, !dbg !18
  %294 = load i64, i64* %293, align 8, !dbg !18, !tbaa !188
  %295 = trunc i64 %294 to i32, !dbg !18
  %296 = icmp eq i32 %295, 1, !dbg !18
  %297 = and i1 %292, %296, !dbg !18
  br i1 %297, label %if_end147, label %assert_fail148, !dbg !18, !prof !19

if_end147:                                        ; preds = %assert_end145, %if_then146
  %298 = getelementptr inbounds %1, %1* %compute3213, i64 0, i32 6, !dbg !18
  %299 = load i64, i64* %298, align 8, !dbg !18
  %300 = icmp eq i64 %299, 0, !dbg !18
  br i1 %300, label %assert_end151, label %assert_fail150, !dbg !18, !prof !19

assert_fail148:                                   ; preds = %if_then146
  %301 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %301(i8* getelementptr inbounds ([198 x i8], [198 x i8]* @.str.39, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail150:                                   ; preds = %if_end147
  %302 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %302(i8* getelementptr inbounds ([205 x i8], [205 x i8]* @.str.40, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end151:                                    ; preds = %if_end147
  %303 = getelementptr inbounds %1, %1* %compute3213, i64 0, i32 1, i32 0, !dbg !18
  %304 = load i32, i32* %303, align 4, !dbg !18
  %305 = icmp eq i32 %304, 1, !dbg !18
  br i1 %305, label %assert_end153, label %assert_fail152, !dbg !18, !prof !19

assert_fail152:                                   ; preds = %assert_end151
  %306 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %306(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.41, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end153:                                    ; preds = %assert_end151
  %307 = getelementptr inbounds %1, %1* %compute3213, i64 0, i32 1, i32 1, !dbg !18
  %308 = load i32, i32* %307, align 4, !dbg !18
  %309 = icmp eq i32 %dev_id, %308, !dbg !18
  br i1 %309, label %assert_end155, label %assert_fail154, !dbg !18, !prof !19

assert_fail154:                                   ; preds = %assert_end153
  %310 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %310(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.42, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end155:                                    ; preds = %assert_end153
  %311 = getelementptr inbounds %1, %1* %T_add214, i64 0, i32 2, !dbg !18
  %312 = load i32, i32* %311, align 4, !dbg !18
  %313 = icmp eq i32 %312, 3, !dbg !18
  br i1 %313, label %assert_end159, label %assert_fail156, !dbg !18, !prof !19

assert_fail156:                                   ; preds = %assert_end155
  %314 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %314(i8* getelementptr inbounds ([109 x i8], [109 x i8]* @.str.43, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end159:                                    ; preds = %assert_end155
  %315 = getelementptr inbounds %1, %1* %T_add214, i64 0, i32 3, i32 2, !dbg !18
  %316 = load i16, i16* %315, align 2, !dbg !18
  %317 = icmp eq i16 %316, 1, !dbg !18
  %318 = getelementptr inbounds %1, %1* %T_add214, i64 0, i32 3, i32 1, !dbg !18
  %319 = load i8, i8* %318, align 1, !dbg !18
  %320 = icmp eq i8 %319, 32, !dbg !18
  %321 = getelementptr inbounds %1, %1* %T_add214, i64 0, i32 3, i32 0, !dbg !18
  %322 = load i8, i8* %321, align 1, !dbg !18
  %323 = icmp eq i8 %322, 2, !dbg !18
  %324 = and i1 %320, %323, !dbg !18
  %325 = and i1 %317, %324, !dbg !18
  br i1 %325, label %assert_end161, label %assert_fail160, !dbg !18, !prof !19

assert_fail160:                                   ; preds = %assert_end159
  %326 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %326(i8* getelementptr inbounds ([239 x i8], [239 x i8]* @.str.44, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end161:                                    ; preds = %assert_end159
  %327 = load i64, i64* %default_function.T_add.shape, align 8, !dbg !18, !tbaa !191
  %328 = trunc i64 %327 to i32, !dbg !18
  %329 = icmp eq i32 %328, 1, !dbg !18
  br i1 %329, label %assert_end163, label %assert_fail162, !dbg !18, !prof !19

assert_fail162:                                   ; preds = %assert_end161
  %330 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %330(i8* getelementptr inbounds ([194 x i8], [194 x i8]* @.str.45, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end163:                                    ; preds = %assert_end161
  %331 = getelementptr inbounds i64, i64* %default_function.T_add.shape, i64 1, !dbg !18
  %332 = load i64, i64* %331, align 8, !dbg !18, !tbaa !201
  %333 = trunc i64 %332 to i32, !dbg !18
  %334 = icmp eq i32 %333, 18, !dbg !18
  br i1 %334, label %assert_end165, label %assert_fail164, !dbg !18, !prof !19

assert_fail164:                                   ; preds = %assert_end163
  %335 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %335(i8* getelementptr inbounds ([196 x i8], [196 x i8]* @.str.46, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end165:                                    ; preds = %assert_end163
  %336 = getelementptr inbounds i64, i64* %default_function.T_add.shape, i64 2, !dbg !18
  %337 = load i64, i64* %336, align 8, !dbg !18, !tbaa !203
  %338 = trunc i64 %337 to i32, !dbg !18
  %339 = icmp eq i32 %338, 19, !dbg !18
  br i1 %339, label %assert_end167, label %assert_fail166, !dbg !18, !prof !19

assert_fail166:                                   ; preds = %assert_end165
  %340 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %340(i8* getelementptr inbounds ([196 x i8], [196 x i8]* @.str.47, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end167:                                    ; preds = %assert_end165
  %341 = icmp eq i64* %default_function.T_add.strides, null, !dbg !18
  br i1 %341, label %if_end169, label %if_then168, !dbg !18, !prof !65

if_then168:                                       ; preds = %assert_end167
  %342 = getelementptr inbounds i64, i64* %default_function.T_add.strides, i64 1, !dbg !18
  %343 = load i64, i64* %342, align 8, !dbg !18, !tbaa !206
  %344 = trunc i64 %343 to i32, !dbg !18
  %345 = icmp eq i32 %344, 19, !dbg !18
  %346 = getelementptr inbounds i64, i64* %default_function.T_add.strides, i64 2, !dbg !18
  %347 = load i64, i64* %346, align 8, !dbg !18, !tbaa !216
  %348 = trunc i64 %347 to i32, !dbg !18
  %349 = icmp eq i32 %348, 1, !dbg !18
  %350 = and i1 %345, %349, !dbg !18
  br i1 %350, label %if_end169, label %assert_fail170, !dbg !18, !prof !19

if_end169:                                        ; preds = %assert_end167, %if_then168
  %351 = getelementptr inbounds %1, %1* %T_add214, i64 0, i32 6, !dbg !18
  %352 = load i64, i64* %351, align 8, !dbg !18
  %353 = icmp eq i64 %352, 0, !dbg !18
  br i1 %353, label %assert_end173, label %assert_fail172, !dbg !18, !prof !19

assert_fail170:                                   ; preds = %if_then168
  %354 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %354(i8* getelementptr inbounds ([192 x i8], [192 x i8]* @.str.48, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail172:                                   ; preds = %if_end169
  %355 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %355(i8* getelementptr inbounds ([199 x i8], [199 x i8]* @.str.49, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end173:                                    ; preds = %if_end169
  %356 = getelementptr inbounds %1, %1* %T_add214, i64 0, i32 1, i32 0, !dbg !18
  %357 = load i32, i32* %356, align 4, !dbg !18
  %358 = icmp eq i32 %357, 1, !dbg !18
  br i1 %358, label %assert_end175, label %assert_fail174, !dbg !18, !prof !19

assert_fail174:                                   ; preds = %assert_end173
  %359 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %359(i8* getelementptr inbounds ([179 x i8], [179 x i8]* @.str.50, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end175:                                    ; preds = %assert_end173
  %360 = getelementptr inbounds %1, %1* %T_add214, i64 0, i32 1, i32 1, !dbg !18
  %361 = load i32, i32* %360, align 4, !dbg !18
  %362 = icmp eq i32 %dev_id, %361, !dbg !18
  br i1 %362, label %assert_end177, label %assert_fail176, !dbg !18, !prof !19

assert_fail176:                                   ; preds = %assert_end175
  %363 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %363(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.51, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end177:                                    ; preds = %assert_end175
  %364 = getelementptr inbounds %1, %1* %compute4215, i64 0, i32 2, !dbg !18
  %365 = load i32, i32* %364, align 4, !dbg !18
  %366 = icmp eq i32 %365, 3, !dbg !18
  br i1 %366, label %assert_end181, label %assert_fail178, !dbg !18, !prof !19

assert_fail178:                                   ; preds = %assert_end177
  %367 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %367(i8* getelementptr inbounds ([113 x i8], [113 x i8]* @.str.34, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end181:                                    ; preds = %assert_end177
  %368 = getelementptr inbounds %1, %1* %compute4215, i64 0, i32 3, i32 2, !dbg !18
  %369 = load i16, i16* %368, align 2, !dbg !18
  %370 = icmp eq i16 %369, 1, !dbg !18
  %371 = getelementptr inbounds %1, %1* %compute4215, i64 0, i32 3, i32 1, !dbg !18
  %372 = load i8, i8* %371, align 1, !dbg !18
  %373 = icmp eq i8 %372, 32, !dbg !18
  %374 = getelementptr inbounds %1, %1* %compute4215, i64 0, i32 3, i32 0, !dbg !18
  %375 = load i8, i8* %374, align 1, !dbg !18
  %376 = icmp eq i8 %375, 2, !dbg !18
  %377 = and i1 %373, %376, !dbg !18
  %378 = and i1 %370, %377, !dbg !18
  br i1 %378, label %assert_end183, label %assert_fail182, !dbg !18, !prof !19

assert_fail182:                                   ; preds = %assert_end181
  %379 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %379(i8* getelementptr inbounds ([247 x i8], [247 x i8]* @.str.35, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end183:                                    ; preds = %assert_end181
  %380 = load i64, i64* %default_function.compute.shape34, align 8, !dbg !18, !tbaa !219
  %381 = trunc i64 %380 to i32, !dbg !18
  %382 = icmp eq i32 %381, 1, !dbg !18
  br i1 %382, label %assert_end185, label %assert_fail184, !dbg !18, !prof !19

assert_fail184:                                   ; preds = %assert_end183
  %383 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %383(i8* getelementptr inbounds ([200 x i8], [200 x i8]* @.str.36, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end185:                                    ; preds = %assert_end183
  %384 = getelementptr inbounds i64, i64* %default_function.compute.shape34, i64 1, !dbg !18
  %385 = load i64, i64* %384, align 8, !dbg !18, !tbaa !229
  %386 = trunc i64 %385 to i32, !dbg !18
  %387 = icmp eq i32 %386, 18, !dbg !18
  br i1 %387, label %assert_end187, label %assert_fail186, !dbg !18, !prof !19

assert_fail186:                                   ; preds = %assert_end185
  %388 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %388(i8* getelementptr inbounds ([202 x i8], [202 x i8]* @.str.37, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end187:                                    ; preds = %assert_end185
  %389 = getelementptr inbounds i64, i64* %default_function.compute.shape34, i64 2, !dbg !18
  %390 = load i64, i64* %389, align 8, !dbg !18, !tbaa !231
  %391 = trunc i64 %390 to i32, !dbg !18
  %392 = icmp eq i32 %391, 19, !dbg !18
  br i1 %392, label %assert_end189, label %assert_fail188, !dbg !18, !prof !19

assert_fail188:                                   ; preds = %assert_end187
  %393 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %393(i8* getelementptr inbounds ([202 x i8], [202 x i8]* @.str.38, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end189:                                    ; preds = %assert_end187
  %394 = icmp eq i64* %default_function.compute.strides35, null, !dbg !18
  br i1 %394, label %if_end191, label %if_then190, !dbg !18, !prof !65

if_then190:                                       ; preds = %assert_end189
  %395 = getelementptr inbounds i64, i64* %default_function.compute.strides35, i64 1, !dbg !18
  %396 = load i64, i64* %395, align 8, !dbg !18, !tbaa !234
  %397 = trunc i64 %396 to i32, !dbg !18
  %398 = icmp eq i32 %397, 19, !dbg !18
  %399 = getelementptr inbounds i64, i64* %default_function.compute.strides35, i64 2, !dbg !18
  %400 = load i64, i64* %399, align 8, !dbg !18, !tbaa !244
  %401 = trunc i64 %400 to i32, !dbg !18
  %402 = icmp eq i32 %401, 1, !dbg !18
  %403 = and i1 %398, %402, !dbg !18
  br i1 %403, label %if_end191, label %assert_fail192, !dbg !18, !prof !19

if_end191:                                        ; preds = %assert_end189, %if_then190
  %404 = getelementptr inbounds %1, %1* %compute4215, i64 0, i32 6, !dbg !18
  %405 = load i64, i64* %404, align 8, !dbg !18
  %406 = icmp eq i64 %405, 0, !dbg !18
  br i1 %406, label %assert_end195, label %assert_fail194, !dbg !18, !prof !19

assert_fail192:                                   ; preds = %if_then190
  %407 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %407(i8* getelementptr inbounds ([198 x i8], [198 x i8]* @.str.39, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail194:                                   ; preds = %if_end191
  %408 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %408(i8* getelementptr inbounds ([205 x i8], [205 x i8]* @.str.40, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end195:                                    ; preds = %if_end191
  %409 = getelementptr inbounds %1, %1* %compute4215, i64 0, i32 1, i32 0, !dbg !18
  %410 = load i32, i32* %409, align 4, !dbg !18
  %411 = icmp eq i32 %410, 1, !dbg !18
  br i1 %411, label %assert_end197, label %assert_fail196, !dbg !18, !prof !19

assert_fail196:                                   ; preds = %assert_end195
  %412 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %412(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.41, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end197:                                    ; preds = %assert_end195
  %413 = getelementptr inbounds %1, %1* %compute4215, i64 0, i32 1, i32 1, !dbg !18
  %414 = load i32, i32* %413, align 4, !dbg !18
  %415 = icmp eq i32 %dev_id, %414, !dbg !18
  br i1 %415, label %assert_end199, label %assert_fail198, !dbg !18, !prof !19

assert_fail198:                                   ; preds = %assert_end197
  %416 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %416(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.42, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end199:                                    ; preds = %assert_end197
  %417 = call fastcc i32 @default_function_compute_(i8* nonnull %stack_value, float* %T_add_void_ptr221, i32* nonnull %stack_tcode208.sub, float* %T_subtract_void_ptr218, float* %compute_void_ptr219, float* %compute_void_ptr18220, float* %compute_void_ptr29222, float* %ph_0_void_ptr216, float* %ph_3_void_ptr217), !dbg !18
  ret i32 %417, !dbg !18
}

; Function Attrs: nounwind willreturn
declare void @llvm.assume(i1) #1

; Function Attrs: noinline
define internal fastcc i32 @default_function_compute_(i8* noalias %0, float* noalias align 64 %1, i32* noalias %2, float* noalias align 64 %3, float* noalias align 64 %4, float* noalias align 64 %5, float* noalias align 64 %6, float* noalias align 64 %7, float* noalias align 64 %8) unnamed_addr #2 {
entry:
  %9 = alloca i8*, align 8
  %10 = bitcast i8* %0 to %0*
  %11 = bitcast i8* %0 to float**
  store float* %1, float** %11, align 8
  %12 = getelementptr inbounds i8, i8* %0, i64 8
  %13 = bitcast i8* %12 to float**
  store float* %3, float** %13, align 8
  %14 = getelementptr inbounds i8, i8* %0, i64 16
  %15 = bitcast i8* %14 to float**
  store float* %4, float** %15, align 8
  %16 = getelementptr inbounds i8, i8* %0, i64 24
  %17 = bitcast i8* %16 to float**
  store float* %5, float** %17, align 8
  %18 = bitcast i32* %2 to <4 x i32>*
  store <4 x i32> <i32 3, i32 3, i32 3, i32 3>, <4 x i32>* %18, align 4, !tbaa !247
  %19 = getelementptr inbounds i8, i8* %0, i64 32
  %20 = bitcast i8* %19 to float**
  store float* %6, float** %20, align 8
  %21 = getelementptr inbounds i32, i32* %2, i64 4
  store i32 3, i32* %21, align 4, !tbaa !256
  %22 = getelementptr inbounds i8, i8* %0, i64 40
  %23 = bitcast i8* %22 to float**
  store float* %7, float** %23, align 8
  %24 = getelementptr inbounds i32, i32* %2, i64 5
  store i32 3, i32* %24, align 4, !tbaa !260
  %25 = getelementptr inbounds i8, i8* %0, i64 48
  %26 = bitcast i8* %25 to float**
  store float* %8, float** %26, align 8
  %27 = getelementptr inbounds i32, i32* %2, i64 6
  store i32 3, i32* %27, align 4, !tbaa !262
  %28 = getelementptr inbounds i8, i8* %0, i64 56
  %29 = bitcast i8* %28 to %0*
  %30 = getelementptr inbounds i32, i32* %2, i64 7
  %31 = load i32 (i8*, %0*, i32*, i32, %0*, i32*)*, i32 (i8*, %0*, i32*, i32, %0*, i32*)** @__TVMFuncCall, align 8, !tbaa !20
  %32 = load i8*, i8** @.tvm_func.default_function_kernel, align 8
  %33 = icmp eq i8* %32, null
  br i1 %33, label %handle_init, label %handle_init_end, !prof !65

handle_init:                                      ; preds = %entry
  %34 = load i8*, i8** @__tvm_module_ctx, align 8, !tbaa !20
  %35 = load i32 (i8*, i8*, i8**)*, i32 (i8*, i8*, i8**)** @__TVMBackendGetFuncFromEnv, align 8, !tbaa !20
  %36 = call i32 %35(i8* %34, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.52, i64 0, i64 0), i8** nonnull %9)
  %37 = icmp eq i32 %36, 0
  br i1 %37, label %call_end, label %call_fail, !prof !19

handle_init_end:                                  ; preds = %entry, %call_end
  %38 = phi i8* [ %32, %entry ], [ %41, %call_end ]
  %39 = call i32 %31(i8* %38, %0* %10, i32* nonnull %2, i32 7, %0* nonnull %29, i32* nonnull %30)
  %40 = icmp eq i32 %39, 0
  br i1 %40, label %call_end2, label %call_fail, !prof !19

call_fail:                                        ; preds = %call_end2, %handle_init_end, %handle_init
  %merge = phi i32 [ %36, %handle_init ], [ %39, %handle_init_end ], [ 0, %call_end2 ]
  ret i32 %merge

call_end:                                         ; preds = %handle_init
  %41 = load i8*, i8** %9, align 8
  store i8* %41, i8** @.tvm_func.default_function_kernel, align 8
  br label %handle_init_end

call_end2:                                        ; preds = %handle_init_end
  %42 = bitcast i8* %28 to i64*
  %43 = load i64, i64* %42, align 8
  %kernel_error_code = trunc i64 %43 to i32
  %44 = icmp eq i32 %kernel_error_code, 0
  br i1 %44, label %call_fail, label %assert_fail, !prof !19

assert_fail:                                      ; preds = %call_end2
  %45 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !20
  call void %45(i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.53, i64 0, i64 0))
  ret i32 -1
}

; Function Attrs: nounwind readnone
define weak dso_local i16 @__truncsfhf2(float %a0) local_unnamed_addr #3 section ".text.tvm.fp16.conv" {
b0:
  %v0 = bitcast float %a0 to i32
  %v1 = and i32 %v0, 2147483647
  %v2 = add nsw i32 %v1, -947912704
  %v3 = add nsw i32 %v1, -1199570944
  %v4 = icmp ult i32 %v2, %v3
  br i1 %v4, label %b1, label %b5

b1:                                               ; preds = %b0
  %v5 = lshr i32 %v0, 13
  %v6 = and i32 %v5, 65535
  %v7 = add nuw nsw i32 %v6, -114688
  %v8 = and i32 %v0, 8191
  %v9 = icmp ugt i32 %v8, 4096
  br i1 %v9, label %b2, label %b3

b2:                                               ; preds = %b1
  %v10 = add nuw nsw i32 %v6, -114687
  br label %b13

b3:                                               ; preds = %b1
  %v11 = icmp eq i32 %v8, 4096
  br i1 %v11, label %b4, label %b13

b4:                                               ; preds = %b3
  %v12 = and i32 %v7, 65535
  %v13 = and i32 %v5, 1
  %v14 = add nuw nsw i32 %v12, %v13
  br label %b13

b5:                                               ; preds = %b0
  %v15 = icmp ugt i32 %v1, 2139095040
  br i1 %v15, label %b6, label %b7

b6:                                               ; preds = %b5
  %v16 = lshr i32 %v0, 13
  %v17 = and i32 %v16, 511
  %v18 = or i32 %v17, 32256
  br label %b13

b7:                                               ; preds = %b5
  %v19 = icmp ugt i32 %v1, 1199570943
  br i1 %v19, label %b13, label %b8

b8:                                               ; preds = %b7
  %v20 = icmp ult i32 %v1, 754974720
  br i1 %v20, label %b13, label %b9

b9:                                               ; preds = %b8
  %v21 = lshr i32 %v1, 23
  %v22 = sub nsw i32 113, %v21
  %v23 = and i32 %v0, 8388607
  %v24 = or i32 %v23, 8388608
  %v25 = add nsw i32 %v21, -81
  %v26 = shl i32 %v24, %v25
  %v27 = icmp ne i32 %v26, 0
  %v28 = lshr i32 %v24, %v22
  %v29 = zext i1 %v27 to i32
  %v30 = lshr i32 %v28, 13
  %v31 = and i32 %v28, 8191
  %v32 = or i32 %v31, %v29
  %v33 = icmp ugt i32 %v32, 4096
  br i1 %v33, label %b10, label %b11

b10:                                              ; preds = %b9
  %v34 = add nuw nsw i32 %v30, 1
  br label %b13

b11:                                              ; preds = %b9
  %v35 = icmp eq i32 %v32, 4096
  br i1 %v35, label %b12, label %b13

b12:                                              ; preds = %b11
  %v36 = and i32 %v30, 1
  %v37 = add nuw nsw i32 %v36, %v30
  br label %b13

b13:                                              ; preds = %b12, %b11, %b10, %b8, %b7, %b6, %b4, %b3, %b2
  %v38 = phi i32 [ %v18, %b6 ], [ %v10, %b2 ], [ %v14, %b4 ], [ %v7, %b3 ], [ 31744, %b7 ], [ 0, %b8 ], [ %v34, %b10 ], [ %v37, %b12 ], [ %v30, %b11 ]
  %v39 = lshr i32 %v0, 16
  %v40 = and i32 %v39, 32768
  %v41 = or i32 %v38, %v40
  %vlast = trunc i32 %v41 to i16
  ret i16 %vlast
}

; Function Attrs: nounwind readnone
define weak dso_local float @__extendhfsf2(i16 %a0) local_unnamed_addr #3 section ".text.tvm.fp16.conv" {
b0:
  %v1 = and i16 %a0, 32767
  %v2 = zext i16 %v1 to i32
  %v3 = add nsw i16 %v1, -1024
  %v4 = icmp ult i16 %v3, 30720
  br i1 %v4, label %b1, label %b2

b1:                                               ; preds = %b0
  %v5 = shl nuw nsw i32 %v2, 13
  %v6 = add nuw nsw i32 %v5, 939524096
  br label %b6

b2:                                               ; preds = %b0
  %v7 = icmp ugt i16 %v1, 31743
  br i1 %v7, label %b3, label %b4

b3:                                               ; preds = %b2
  %v8 = shl nuw nsw i32 %v2, 13
  %v9 = or i32 %v8, 2139095040
  br label %b6

b4:                                               ; preds = %b2
  %v10 = icmp eq i16 %v1, 0
  br i1 %v10, label %b6, label %b5

b5:                                               ; preds = %b4
  %v11 = icmp ult i16 %v1, 256
  %v12 = lshr i32 %v2, 8
  %v13 = select i1 %v11, i32 %v2, i32 %v12
  %v14 = select i1 %v11, i32 32, i32 24
  %v15 = icmp ult i32 %v13, 16
  %v16 = lshr i32 %v13, 4
  %v17 = add nsw i32 %v14, -4
  %v18 = select i1 %v15, i32 %v13, i32 %v16
  %v19 = select i1 %v15, i32 %v14, i32 %v17
  %v20 = icmp ult i32 %v18, 4
  %v21 = lshr i32 %v18, 2
  %v22 = add nsw i32 %v19, -2
  %v23 = select i1 %v20, i32 %v18, i32 %v21
  %v24 = select i1 %v20, i32 %v19, i32 %v22
  %v25 = icmp ult i32 %v23, 2
  %v26 = sub nsw i32 0, %v23
  %v27 = select i1 %v25, i32 %v26, i32 -2
  %v28 = add nsw i32 %v27, %v24
  %v29 = add nsw i32 %v28, -8
  %v30 = shl i32 %v2, %v29
  %v31 = xor i32 %v30, 8388608
  %v32 = shl i32 %v28, 23
  %v33 = sub i32 1124073472, %v32
  %v34 = or i32 %v31, %v33
  br label %b6

b6:                                               ; preds = %b5, %b4, %b3, %b1
  %v35 = phi i32 [ %v6, %b1 ], [ %v9, %b3 ], [ %v34, %b5 ], [ 0, %b4 ]
  %v36 = and i16 %a0, -32768
  %v37 = zext i16 %v36 to i32
  %v38 = shl nuw i32 %v37, 16
  %v39 = or i32 %v35, %v38
  %v40 = bitcast i32 %v39 to float
  ret float %v40
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.value(metadata, metadata, metadata) #4

attributes #0 = { "target-cpu"="generic" }
attributes #1 = { nounwind willreturn }
attributes #2 = { noinline "target-cpu"="generic" }
attributes #3 = { nounwind readnone "target-cpu"="generic" "target-features" }
attributes #4 = { nounwind readnone speculatable willreturn }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "TVM", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2)
!1 = !DIFile(filename: "main.tir", directory: ".")
!2 = !{}
!3 = !{i32 2, !"tvm_target", !"llvm -mtriple=x86_64-pc-linux-gnu"}
!4 = !{i32 4, !"Debug Info Version", i32 3}
!5 = distinct !DISubprogram(name: "main.tir", scope: !1, file: !1, type: !6, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !11)
!6 = !DISubroutineType(types: !7)
!7 = !{!8, !9, !10, !8, !9, !10, !9}
!8 = !DIBasicType(name: "int32", size: 32, encoding: DW_ATE_signed)
!9 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null)
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8)
!11 = !{!12, !13, !14, !15, !16, !17}
!12 = !DILocalVariable(name: "arg1", arg: 1, scope: !5, file: !1, type: !9)
!13 = !DILocalVariable(name: "arg2", arg: 2, scope: !5, file: !1, type: !10)
!14 = !DILocalVariable(name: "arg3", arg: 3, scope: !5, file: !1, type: !8)
!15 = !DILocalVariable(name: "arg4", arg: 4, scope: !5, file: !1, type: !9)
!16 = !DILocalVariable(name: "arg5", arg: 5, scope: !5, file: !1, type: !10)
!17 = !DILocalVariable(name: "arg6", arg: 6, scope: !5, file: !1, type: !9)
!18 = !DILocation(line: 0, scope: !5)
!19 = !{!"branch_weights", i32 1048576, i32 1}
!20 = !{!21, !21, i64 0}
!21 = !{!"ctx_ptr", !22, i64 0}
!22 = !{!"tvm-tbaa"}
!23 = !{!24, !24, i64 0}
!24 = !{!"0x49a8200.w4.b0", !25, i64 0}
!25 = !{!"0x49a8200.w8.b0", !26, i64 0}
!26 = !{!"0x49a8200.w16.b0", !27, i64 0}
!27 = !{!"0x49a8200.w32.b0", !28, i64 0}
!28 = !{!"0x49a8200.w64.b0", !29, i64 0}
!29 = !{!"0x49a8200.w128.b0", !30, i64 0}
!30 = !{!"0x49a8200.w256.b0", !31, i64 0}
!31 = !{!"0x49a8200.w512.b0", !32, i64 0}
!32 = !{!"0x49a8200.w1024.b0", !33, i64 0}
!33 = !{!"0x49a8200", !22, i64 0}
!34 = !{!35, !35, i64 0}
!35 = !{!"0x49a8200.w4.b4", !25, i64 0}
!36 = !{!37, !37, i64 0}
!37 = !{!"0x49a8200.w4.b8", !38, i64 0}
!38 = !{!"0x49a8200.w8.b8", !26, i64 0}
!39 = !{!40, !40, i64 0}
!40 = !{!"0x49a8200.w4.b12", !38, i64 0}
!41 = !{!42, !42, i64 0}
!42 = !{!"0x49a8200.w4.b16", !43, i64 0}
!43 = !{!"0x49a8200.w8.b16", !44, i64 0}
!44 = !{!"0x49a8200.w16.b16", !27, i64 0}
!45 = !{!46, !46, i64 0}
!46 = !{!"0x49a8200.w4.b20", !43, i64 0}
!47 = !{!48, !48, i64 0}
!48 = !{!"0x49a8200.w4.b24", !49, i64 0}
!49 = !{!"0x49a8200.w8.b24", !44, i64 0}
!50 = !{!51, !51, i64 0}
!51 = !{!"0x43871c0.w8.b0", !52, i64 0}
!52 = !{!"0x43871c0.w16.b0", !53, i64 0}
!53 = !{!"0x43871c0.w32.b0", !54, i64 0}
!54 = !{!"0x43871c0.w64.b0", !55, i64 0}
!55 = !{!"0x43871c0.w128.b0", !56, i64 0}
!56 = !{!"0x43871c0.w256.b0", !57, i64 0}
!57 = !{!"0x43871c0.w512.b0", !58, i64 0}
!58 = !{!"0x43871c0.w1024.b0", !59, i64 0}
!59 = !{!"0x43871c0", !22, i64 0}
!60 = !{!61, !61, i64 0}
!61 = !{!"0x43871c0.w8.b8", !52, i64 0}
!62 = !{!63, !63, i64 0}
!63 = !{!"0x43871c0.w8.b16", !64, i64 0}
!64 = !{!"0x43871c0.w16.b16", !53, i64 0}
!65 = !{!"branch_weights", i32 1, i32 1048576}
!66 = !{!67, !67, i64 0}
!67 = !{!"0x3fcb9b0.w8.b8", !68, i64 0}
!68 = !{!"0x3fcb9b0.w16.b0", !69, i64 0}
!69 = !{!"0x3fcb9b0.w32.b0", !70, i64 0}
!70 = !{!"0x3fcb9b0.w64.b0", !71, i64 0}
!71 = !{!"0x3fcb9b0.w128.b0", !72, i64 0}
!72 = !{!"0x3fcb9b0.w256.b0", !73, i64 0}
!73 = !{!"0x3fcb9b0.w512.b0", !74, i64 0}
!74 = !{!"0x3fcb9b0.w1024.b0", !75, i64 0}
!75 = !{!"0x3fcb9b0", !22, i64 0}
!76 = !{!77, !77, i64 0}
!77 = !{!"0x3fcb9b0.w8.b16", !78, i64 0}
!78 = !{!"0x3fcb9b0.w16.b16", !69, i64 0}
!79 = !{!80, !80, i64 0}
!80 = !{!"0x4614290.w8.b0", !81, i64 0}
!81 = !{!"0x4614290.w16.b0", !82, i64 0}
!82 = !{!"0x4614290.w32.b0", !83, i64 0}
!83 = !{!"0x4614290.w64.b0", !84, i64 0}
!84 = !{!"0x4614290.w128.b0", !85, i64 0}
!85 = !{!"0x4614290.w256.b0", !86, i64 0}
!86 = !{!"0x4614290.w512.b0", !87, i64 0}
!87 = !{!"0x4614290.w1024.b0", !88, i64 0}
!88 = !{!"0x4614290", !22, i64 0}
!89 = !{!90, !90, i64 0}
!90 = !{!"0x4614290.w8.b8", !81, i64 0}
!91 = !{!92, !92, i64 0}
!92 = !{!"0x4614290.w8.b16", !93, i64 0}
!93 = !{!"0x4614290.w16.b16", !82, i64 0}
!94 = !{!95, !95, i64 0}
!95 = !{!"0x421e970.w8.b8", !96, i64 0}
!96 = !{!"0x421e970.w16.b0", !97, i64 0}
!97 = !{!"0x421e970.w32.b0", !98, i64 0}
!98 = !{!"0x421e970.w64.b0", !99, i64 0}
!99 = !{!"0x421e970.w128.b0", !100, i64 0}
!100 = !{!"0x421e970.w256.b0", !101, i64 0}
!101 = !{!"0x421e970.w512.b0", !102, i64 0}
!102 = !{!"0x421e970.w1024.b0", !103, i64 0}
!103 = !{!"0x421e970", !22, i64 0}
!104 = !{!105, !105, i64 0}
!105 = !{!"0x421e970.w8.b16", !106, i64 0}
!106 = !{!"0x421e970.w16.b16", !97, i64 0}
!107 = !{!108, !108, i64 0}
!108 = !{!"0x3f5a6a0.w8.b0", !109, i64 0}
!109 = !{!"0x3f5a6a0.w16.b0", !110, i64 0}
!110 = !{!"0x3f5a6a0.w32.b0", !111, i64 0}
!111 = !{!"0x3f5a6a0.w64.b0", !112, i64 0}
!112 = !{!"0x3f5a6a0.w128.b0", !113, i64 0}
!113 = !{!"0x3f5a6a0.w256.b0", !114, i64 0}
!114 = !{!"0x3f5a6a0.w512.b0", !115, i64 0}
!115 = !{!"0x3f5a6a0.w1024.b0", !116, i64 0}
!116 = !{!"0x3f5a6a0", !22, i64 0}
!117 = !{!118, !118, i64 0}
!118 = !{!"0x3f5a6a0.w8.b8", !109, i64 0}
!119 = !{!120, !120, i64 0}
!120 = !{!"0x3f5a6a0.w8.b16", !121, i64 0}
!121 = !{!"0x3f5a6a0.w16.b16", !110, i64 0}
!122 = !{!123, !123, i64 0}
!123 = !{!"0x46dee10.w8.b8", !124, i64 0}
!124 = !{!"0x46dee10.w16.b0", !125, i64 0}
!125 = !{!"0x46dee10.w32.b0", !126, i64 0}
!126 = !{!"0x46dee10.w64.b0", !127, i64 0}
!127 = !{!"0x46dee10.w128.b0", !128, i64 0}
!128 = !{!"0x46dee10.w256.b0", !129, i64 0}
!129 = !{!"0x46dee10.w512.b0", !130, i64 0}
!130 = !{!"0x46dee10.w1024.b0", !131, i64 0}
!131 = !{!"0x46dee10", !22, i64 0}
!132 = !{!133, !133, i64 0}
!133 = !{!"0x46dee10.w8.b16", !134, i64 0}
!134 = !{!"0x46dee10.w16.b16", !125, i64 0}
!135 = !{!136, !136, i64 0}
!136 = !{!"0x4b8b6a0.w8.b0", !137, i64 0}
!137 = !{!"0x4b8b6a0.w16.b0", !138, i64 0}
!138 = !{!"0x4b8b6a0.w32.b0", !139, i64 0}
!139 = !{!"0x4b8b6a0.w64.b0", !140, i64 0}
!140 = !{!"0x4b8b6a0.w128.b0", !141, i64 0}
!141 = !{!"0x4b8b6a0.w256.b0", !142, i64 0}
!142 = !{!"0x4b8b6a0.w512.b0", !143, i64 0}
!143 = !{!"0x4b8b6a0.w1024.b0", !144, i64 0}
!144 = !{!"0x4b8b6a0", !22, i64 0}
!145 = !{!146, !146, i64 0}
!146 = !{!"0x4b8b6a0.w8.b8", !137, i64 0}
!147 = !{!148, !148, i64 0}
!148 = !{!"0x4b8b6a0.w8.b16", !149, i64 0}
!149 = !{!"0x4b8b6a0.w16.b16", !138, i64 0}
!150 = !{!151, !151, i64 0}
!151 = !{!"0x4b5c9c0.w8.b8", !152, i64 0}
!152 = !{!"0x4b5c9c0.w16.b0", !153, i64 0}
!153 = !{!"0x4b5c9c0.w32.b0", !154, i64 0}
!154 = !{!"0x4b5c9c0.w64.b0", !155, i64 0}
!155 = !{!"0x4b5c9c0.w128.b0", !156, i64 0}
!156 = !{!"0x4b5c9c0.w256.b0", !157, i64 0}
!157 = !{!"0x4b5c9c0.w512.b0", !158, i64 0}
!158 = !{!"0x4b5c9c0.w1024.b0", !159, i64 0}
!159 = !{!"0x4b5c9c0", !22, i64 0}
!160 = !{!161, !161, i64 0}
!161 = !{!"0x4b5c9c0.w8.b16", !162, i64 0}
!162 = !{!"0x4b5c9c0.w16.b16", !153, i64 0}
!163 = !{!164, !164, i64 0}
!164 = !{!"0x4b6cc90.w8.b0", !165, i64 0}
!165 = !{!"0x4b6cc90.w16.b0", !166, i64 0}
!166 = !{!"0x4b6cc90.w32.b0", !167, i64 0}
!167 = !{!"0x4b6cc90.w64.b0", !168, i64 0}
!168 = !{!"0x4b6cc90.w128.b0", !169, i64 0}
!169 = !{!"0x4b6cc90.w256.b0", !170, i64 0}
!170 = !{!"0x4b6cc90.w512.b0", !171, i64 0}
!171 = !{!"0x4b6cc90.w1024.b0", !172, i64 0}
!172 = !{!"0x4b6cc90", !22, i64 0}
!173 = !{!174, !174, i64 0}
!174 = !{!"0x4b6cc90.w8.b8", !165, i64 0}
!175 = !{!176, !176, i64 0}
!176 = !{!"0x4b6cc90.w8.b16", !177, i64 0}
!177 = !{!"0x4b6cc90.w16.b16", !166, i64 0}
!178 = !{!179, !179, i64 0}
!179 = !{!"0x4b7f9e0.w8.b8", !180, i64 0}
!180 = !{!"0x4b7f9e0.w16.b0", !181, i64 0}
!181 = !{!"0x4b7f9e0.w32.b0", !182, i64 0}
!182 = !{!"0x4b7f9e0.w64.b0", !183, i64 0}
!183 = !{!"0x4b7f9e0.w128.b0", !184, i64 0}
!184 = !{!"0x4b7f9e0.w256.b0", !185, i64 0}
!185 = !{!"0x4b7f9e0.w512.b0", !186, i64 0}
!186 = !{!"0x4b7f9e0.w1024.b0", !187, i64 0}
!187 = !{!"0x4b7f9e0", !22, i64 0}
!188 = !{!189, !189, i64 0}
!189 = !{!"0x4b7f9e0.w8.b16", !190, i64 0}
!190 = !{!"0x4b7f9e0.w16.b16", !181, i64 0}
!191 = !{!192, !192, i64 0}
!192 = !{!"0x4b824c0.w8.b0", !193, i64 0}
!193 = !{!"0x4b824c0.w16.b0", !194, i64 0}
!194 = !{!"0x4b824c0.w32.b0", !195, i64 0}
!195 = !{!"0x4b824c0.w64.b0", !196, i64 0}
!196 = !{!"0x4b824c0.w128.b0", !197, i64 0}
!197 = !{!"0x4b824c0.w256.b0", !198, i64 0}
!198 = !{!"0x4b824c0.w512.b0", !199, i64 0}
!199 = !{!"0x4b824c0.w1024.b0", !200, i64 0}
!200 = !{!"0x4b824c0", !22, i64 0}
!201 = !{!202, !202, i64 0}
!202 = !{!"0x4b824c0.w8.b8", !193, i64 0}
!203 = !{!204, !204, i64 0}
!204 = !{!"0x4b824c0.w8.b16", !205, i64 0}
!205 = !{!"0x4b824c0.w16.b16", !194, i64 0}
!206 = !{!207, !207, i64 0}
!207 = !{!"0x4b87240.w8.b8", !208, i64 0}
!208 = !{!"0x4b87240.w16.b0", !209, i64 0}
!209 = !{!"0x4b87240.w32.b0", !210, i64 0}
!210 = !{!"0x4b87240.w64.b0", !211, i64 0}
!211 = !{!"0x4b87240.w128.b0", !212, i64 0}
!212 = !{!"0x4b87240.w256.b0", !213, i64 0}
!213 = !{!"0x4b87240.w512.b0", !214, i64 0}
!214 = !{!"0x4b87240.w1024.b0", !215, i64 0}
!215 = !{!"0x4b87240", !22, i64 0}
!216 = !{!217, !217, i64 0}
!217 = !{!"0x4b87240.w8.b16", !218, i64 0}
!218 = !{!"0x4b87240.w16.b16", !209, i64 0}
!219 = !{!220, !220, i64 0}
!220 = !{!"0x4bb3410.w8.b0", !221, i64 0}
!221 = !{!"0x4bb3410.w16.b0", !222, i64 0}
!222 = !{!"0x4bb3410.w32.b0", !223, i64 0}
!223 = !{!"0x4bb3410.w64.b0", !224, i64 0}
!224 = !{!"0x4bb3410.w128.b0", !225, i64 0}
!225 = !{!"0x4bb3410.w256.b0", !226, i64 0}
!226 = !{!"0x4bb3410.w512.b0", !227, i64 0}
!227 = !{!"0x4bb3410.w1024.b0", !228, i64 0}
!228 = !{!"0x4bb3410", !22, i64 0}
!229 = !{!230, !230, i64 0}
!230 = !{!"0x4bb3410.w8.b8", !221, i64 0}
!231 = !{!232, !232, i64 0}
!232 = !{!"0x4bb3410.w8.b16", !233, i64 0}
!233 = !{!"0x4bb3410.w16.b16", !222, i64 0}
!234 = !{!235, !235, i64 0}
!235 = !{!"0x4b798d0.w8.b8", !236, i64 0}
!236 = !{!"0x4b798d0.w16.b0", !237, i64 0}
!237 = !{!"0x4b798d0.w32.b0", !238, i64 0}
!238 = !{!"0x4b798d0.w64.b0", !239, i64 0}
!239 = !{!"0x4b798d0.w128.b0", !240, i64 0}
!240 = !{!"0x4b798d0.w256.b0", !241, i64 0}
!241 = !{!"0x4b798d0.w512.b0", !242, i64 0}
!242 = !{!"0x4b798d0.w1024.b0", !243, i64 0}
!243 = !{!"0x4b798d0", !22, i64 0}
!244 = !{!245, !245, i64 0}
!245 = !{!"0x4b798d0.w8.b16", !246, i64 0}
!246 = !{!"0x4b798d0.w16.b16", !237, i64 0}
!247 = !{!248, !248, i64 0}
!248 = !{!"0x40e6d20.w16.b0", !249, i64 0}
!249 = !{!"0x40e6d20.w32.b0", !250, i64 0}
!250 = !{!"0x40e6d20.w64.b0", !251, i64 0}
!251 = !{!"0x40e6d20.w128.b0", !252, i64 0}
!252 = !{!"0x40e6d20.w256.b0", !253, i64 0}
!253 = !{!"0x40e6d20.w512.b0", !254, i64 0}
!254 = !{!"0x40e6d20.w1024.b0", !255, i64 0}
!255 = !{!"0x40e6d20", !22, i64 0}
!256 = !{!257, !257, i64 0}
!257 = !{!"0x40e6d20.w4.b16", !258, i64 0}
!258 = !{!"0x40e6d20.w8.b16", !259, i64 0}
!259 = !{!"0x40e6d20.w16.b16", !249, i64 0}
!260 = !{!261, !261, i64 0}
!261 = !{!"0x40e6d20.w4.b20", !258, i64 0}
!262 = !{!263, !263, i64 0}
!263 = !{!"0x40e6d20.w4.b24", !264, i64 0}
!264 = !{!"0x40e6d20.w8.b24", !259, i64 0}
