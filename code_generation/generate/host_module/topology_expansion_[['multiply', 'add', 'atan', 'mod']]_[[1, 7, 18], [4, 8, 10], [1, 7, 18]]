; ModuleID = 'TVMMod'
source_filename = "TVMMod"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%0 = type { double }
%1 = type { i8*, %2, i32, %3, i64*, i64*, i64 }
%2 = type { i32, i32 }
%3 = type { i8, i8, i16 }

@__tvm_module_ctx = linkonce dllexport local_unnamed_addr global i8* null, align 8
@__TVMFuncCall = linkonce dllexport local_unnamed_addr global i32 (i8*, %0*, i32*, i32, %0*, i32*)* null, align 8
@__TVMBackendGetFuncFromEnv = linkonce dllexport local_unnamed_addr global i32 (i8*, i8*, i8**)* null, align 8
@__TVMAPISetLastError = linkonce dllexport local_unnamed_addr global void (i8*)* null, align 8
@.str = private constant [67 x i8] c"Assert fail: num_args == 5, default_function: num_args should be 5\00", align 1
@.str.1 = private constant [130 x i8] c"Assert fail: ph_0_code == 3 or ph_0_code == 13 or ph_0_code == 7 or ph_0_code == 4, default_function: Expect arg[0] to be pointer\00", align 1
@.str.2 = private constant [130 x i8] c"Assert fail: ph_3_code == 3 or ph_3_code == 13 or ph_3_code == 7 or ph_3_code == 4, default_function: Expect arg[1] to be pointer\00", align 1
@.str.3 = private constant [154 x i8] c"Assert fail: T_multiply_code == 3 or T_multiply_code == 13 or T_multiply_code == 7 or T_multiply_code == 4, default_function: Expect arg[2] to be pointer\00", align 1
@.str.4 = private constant [134 x i8] c"Assert fail: T_add_code == 3 or T_add_code == 13 or T_add_code == 7 or T_add_code == 4, default_function: Expect arg[3] to be pointer\00", align 1
@.str.5 = private constant [134 x i8] c"Assert fail: T_mod_code == 3 or T_mod_code == 13 or T_mod_code == 7 or T_mod_code == 4, default_function: Expect arg[4] to be pointer\00", align 1
@.str.6 = private constant [107 x i8] c"Assert fail: 3 == T.tvm_struct_get(ph_0, 0, 4, \22int32\22), default_function.ph_0.ndim is expected to equal 3\00", align 1
@.str.7 = private constant [235 x i8] c"Assert fail: T.tvm_struct_get(ph_0, 0, 5, \22uint8\22) == T.uint8(2) and T.tvm_struct_get(ph_0, 0, 6, \22uint8\22) == T.uint8(32) and T.tvm_struct_get(ph_0, 0, 7, \22uint16\22) == T.uint16(1), default_function.ph_0.dtype is expected to be float32\00", align 1
@.str.8 = private constant [191 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_0_shape[0]) == 1, Argument default_function.ph_0.shape[0] has an unsatisfied constraint: 1 == T.Cast(\22int32\22, default_function_ph_0_shape[0])\00", align 1
@.str.9 = private constant [191 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_0_shape[1]) == 7, Argument default_function.ph_0.shape[1] has an unsatisfied constraint: 7 == T.Cast(\22int32\22, default_function_ph_0_shape[1])\00", align 1
@.str.10 = private constant [193 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_0_shape[2]) == 18, Argument default_function.ph_0.shape[2] has an unsatisfied constraint: 18 == T.Cast(\22int32\22, default_function_ph_0_shape[2])\00", align 1
@.str.11 = private constant [189 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_ph_0_strides[2]) and 18 == T.Cast(\22int32\22, default_function_ph_0_strides[1]), default_function.ph_0.strides: expected to be compact array\00", align 1
@.str.12 = private constant [196 x i8] c"Assert fail: T.uint64(0) == T.tvm_struct_get(ph_0, 0, 8, \22uint64\22), Argument default_function.ph_0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(ph_0, 0, 8, \22uint64\22)\00", align 1
@.str.13 = private constant [176 x i8] c"Assert fail: T.tvm_struct_get(ph_0, 0, 10, \22int32\22) == 1, Argument default_function.ph_0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(ph_0, 0, 10, \22int32\22)\00", align 1
@.str.14 = private constant [107 x i8] c"Assert fail: 3 == T.tvm_struct_get(ph_3, 0, 4, \22int32\22), default_function.ph_3.ndim is expected to equal 3\00", align 1
@.str.15 = private constant [235 x i8] c"Assert fail: T.tvm_struct_get(ph_3, 0, 5, \22uint8\22) == T.uint8(2) and T.tvm_struct_get(ph_3, 0, 6, \22uint8\22) == T.uint8(32) and T.tvm_struct_get(ph_3, 0, 7, \22uint16\22) == T.uint16(1), default_function.ph_3.dtype is expected to be float32\00", align 1
@.str.16 = private constant [191 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_3_shape[0]) == 1, Argument default_function.ph_3.shape[0] has an unsatisfied constraint: 1 == T.Cast(\22int32\22, default_function_ph_3_shape[0])\00", align 1
@.str.17 = private constant [191 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_3_shape[1]) == 7, Argument default_function.ph_3.shape[1] has an unsatisfied constraint: 7 == T.Cast(\22int32\22, default_function_ph_3_shape[1])\00", align 1
@.str.18 = private constant [193 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_3_shape[2]) == 18, Argument default_function.ph_3.shape[2] has an unsatisfied constraint: 18 == T.Cast(\22int32\22, default_function_ph_3_shape[2])\00", align 1
@.str.19 = private constant [189 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_ph_3_strides[2]) and 18 == T.Cast(\22int32\22, default_function_ph_3_strides[1]), default_function.ph_3.strides: expected to be compact array\00", align 1
@.str.20 = private constant [196 x i8] c"Assert fail: T.uint64(0) == T.tvm_struct_get(ph_3, 0, 8, \22uint64\22), Argument default_function.ph_3.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(ph_3, 0, 8, \22uint64\22)\00", align 1
@.str.21 = private constant [176 x i8] c"Assert fail: T.tvm_struct_get(ph_3, 0, 10, \22int32\22) == 1, Argument default_function.ph_3.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(ph_3, 0, 10, \22int32\22)\00", align 1
@.str.22 = private constant [182 x i8] c"Assert fail: dev_id == T.tvm_struct_get(ph_3, 0, 9, \22int32\22), Argument default_function.ph_3.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(ph_3, 0, 9, \22int32\22)\00", align 1
@.str.23 = private constant [119 x i8] c"Assert fail: 3 == T.tvm_struct_get(T_multiply, 0, 4, \22int32\22), default_function.T_multiply.ndim is expected to equal 3\00", align 1
@.str.24 = private constant [259 x i8] c"Assert fail: T.tvm_struct_get(T_multiply, 0, 5, \22uint8\22) == T.uint8(2) and T.tvm_struct_get(T_multiply, 0, 6, \22uint8\22) == T.uint8(32) and T.tvm_struct_get(T_multiply, 0, 7, \22uint16\22) == T.uint16(1), default_function.T_multiply.dtype is expected to be float32\00", align 1
@.str.25 = private constant [209 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_T_multiply_shape[0]) == 1, Argument default_function.T_multiply.shape[0] has an unsatisfied constraint: 1 == T.Cast(\22int32\22, default_function_T_multiply_shape[0])\00", align 1
@.str.26 = private constant [209 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_T_multiply_shape[1]) == 7, Argument default_function.T_multiply.shape[1] has an unsatisfied constraint: 7 == T.Cast(\22int32\22, default_function_T_multiply_shape[1])\00", align 1
@.str.27 = private constant [211 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_T_multiply_shape[2]) == 18, Argument default_function.T_multiply.shape[2] has an unsatisfied constraint: 18 == T.Cast(\22int32\22, default_function_T_multiply_shape[2])\00", align 1
@.str.28 = private constant [207 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_T_multiply_strides[2]) and 18 == T.Cast(\22int32\22, default_function_T_multiply_strides[1]), default_function.T_multiply.strides: expected to be compact array\00", align 1
@.str.29 = private constant [214 x i8] c"Assert fail: T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, \22uint64\22), Argument default_function.T_multiply.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_multiply, 0, 8, \22uint64\22)\00", align 1
@.str.30 = private constant [194 x i8] c"Assert fail: T.tvm_struct_get(T_multiply, 0, 10, \22int32\22) == 1, Argument default_function.T_multiply.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_multiply, 0, 10, \22int32\22)\00", align 1
@.str.31 = private constant [200 x i8] c"Assert fail: dev_id == T.tvm_struct_get(T_multiply, 0, 9, \22int32\22), Argument default_function.T_multiply.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_multiply, 0, 9, \22int32\22)\00", align 1
@.str.32 = private constant [109 x i8] c"Assert fail: 3 == T.tvm_struct_get(T_add, 0, 4, \22int32\22), default_function.T_add.ndim is expected to equal 3\00", align 1
@.str.33 = private constant [239 x i8] c"Assert fail: T.tvm_struct_get(T_add, 0, 5, \22uint8\22) == T.uint8(2) and T.tvm_struct_get(T_add, 0, 6, \22uint8\22) == T.uint8(32) and T.tvm_struct_get(T_add, 0, 7, \22uint16\22) == T.uint16(1), default_function.T_add.dtype is expected to be float32\00", align 1
@.str.34 = private constant [194 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_T_add_shape[0]) == 1, Argument default_function.T_add.shape[0] has an unsatisfied constraint: 1 == T.Cast(\22int32\22, default_function_T_add_shape[0])\00", align 1
@.str.35 = private constant [194 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_T_add_shape[1]) == 7, Argument default_function.T_add.shape[1] has an unsatisfied constraint: 7 == T.Cast(\22int32\22, default_function_T_add_shape[1])\00", align 1
@.str.36 = private constant [196 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_T_add_shape[2]) == 18, Argument default_function.T_add.shape[2] has an unsatisfied constraint: 18 == T.Cast(\22int32\22, default_function_T_add_shape[2])\00", align 1
@.str.37 = private constant [192 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_T_add_strides[2]) and 18 == T.Cast(\22int32\22, default_function_T_add_strides[1]), default_function.T_add.strides: expected to be compact array\00", align 1
@.str.38 = private constant [199 x i8] c"Assert fail: T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, \22uint64\22), Argument default_function.T_add.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_add, 0, 8, \22uint64\22)\00", align 1
@.str.39 = private constant [179 x i8] c"Assert fail: T.tvm_struct_get(T_add, 0, 10, \22int32\22) == 1, Argument default_function.T_add.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_add, 0, 10, \22int32\22)\00", align 1
@.str.40 = private constant [185 x i8] c"Assert fail: dev_id == T.tvm_struct_get(T_add, 0, 9, \22int32\22), Argument default_function.T_add.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_add, 0, 9, \22int32\22)\00", align 1
@.str.41 = private constant [109 x i8] c"Assert fail: 3 == T.tvm_struct_get(T_mod, 0, 4, \22int32\22), default_function.T_mod.ndim is expected to equal 3\00", align 1
@.str.42 = private constant [239 x i8] c"Assert fail: T.tvm_struct_get(T_mod, 0, 5, \22uint8\22) == T.uint8(2) and T.tvm_struct_get(T_mod, 0, 6, \22uint8\22) == T.uint8(32) and T.tvm_struct_get(T_mod, 0, 7, \22uint16\22) == T.uint16(1), default_function.T_mod.dtype is expected to be float32\00", align 1
@.str.43 = private constant [194 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_T_mod_shape[0]) == 1, Argument default_function.T_mod.shape[0] has an unsatisfied constraint: 1 == T.Cast(\22int32\22, default_function_T_mod_shape[0])\00", align 1
@.str.44 = private constant [194 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_T_mod_shape[1]) == 7, Argument default_function.T_mod.shape[1] has an unsatisfied constraint: 7 == T.Cast(\22int32\22, default_function_T_mod_shape[1])\00", align 1
@.str.45 = private constant [196 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_T_mod_shape[2]) == 18, Argument default_function.T_mod.shape[2] has an unsatisfied constraint: 18 == T.Cast(\22int32\22, default_function_T_mod_shape[2])\00", align 1
@.str.46 = private constant [192 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_T_mod_strides[2]) and 18 == T.Cast(\22int32\22, default_function_T_mod_strides[1]), default_function.T_mod.strides: expected to be compact array\00", align 1
@.str.47 = private constant [199 x i8] c"Assert fail: T.uint64(0) == T.tvm_struct_get(T_mod, 0, 8, \22uint64\22), Argument default_function.T_mod.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_mod, 0, 8, \22uint64\22)\00", align 1
@.str.48 = private constant [179 x i8] c"Assert fail: T.tvm_struct_get(T_mod, 0, 10, \22int32\22) == 1, Argument default_function.T_mod.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_mod, 0, 10, \22int32\22)\00", align 1
@.str.49 = private constant [185 x i8] c"Assert fail: dev_id == T.tvm_struct_get(T_mod, 0, 9, \22int32\22), Argument default_function.T_mod.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_mod, 0, 9, \22int32\22)\00", align 1
@.tvm_func.default_function_kernel = internal unnamed_addr global i8* null, align 8
@.str.50 = private constant [24 x i8] c"default_function_kernel\00", align 1
@.str.51 = private constant [68 x i8] c"Assert fail: kernel_error_code == 0, Error executing compute kernel\00", align 1
@__tvm_main__ = weak dllexport local_unnamed_addr constant [17 x i8] c"default_function\00", align 1
@llvm.global_ctors = appending global [0 x { i32, void ()*, i8* }] zeroinitializer

define dllexport i32 @default_function(i8* noalias nocapture readonly %args, i32* noalias nocapture readonly %arg_type_ids, i32 %num_args, i8* noalias nocapture readnone %out_ret_value, i32* noalias nocapture readnone %out_ret_tcode, i8* noalias nocapture readnone %resource_handle) local_unnamed_addr #0 !dbg !5 {
entry:
  call void @llvm.dbg.value(metadata i8* %args, metadata !12, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i32* %arg_type_ids, metadata !13, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i32 %num_args, metadata !14, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i8* %out_ret_value, metadata !15, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i32* %out_ret_tcode, metadata !16, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i8* %resource_handle, metadata !17, metadata !DIExpression()), !dbg !18
  %stack_value_void_ptr139 = alloca [6 x %0], align 8, !dbg !18
  %stack_tcode140 = alloca [6 x i32], align 4, !dbg !18
  %stack_tcode140.sub = getelementptr inbounds [6 x i32], [6 x i32]* %stack_tcode140, i64 0, i64 0
  %stack_value = bitcast [6 x %0]* %stack_value_void_ptr139 to i8*, !dbg !18
  %0 = icmp eq i32 %num_args, 5, !dbg !18
  br i1 %0, label %assert_end, label %assert_fail, !dbg !18, !prof !19

assert_fail:                                      ; preds = %entry
  %1 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %1(i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end:                                       ; preds = %entry
  %ph_0.code = load i32, i32* %arg_type_ids, align 4, !dbg !18, !tbaa !23
  %2 = getelementptr inbounds i32, i32* %arg_type_ids, i64 1, !dbg !18
  %ph_3.code = load i32, i32* %2, align 4, !dbg !18, !tbaa !34
  %3 = getelementptr inbounds i32, i32* %arg_type_ids, i64 2, !dbg !18
  %T_multiply.code = load i32, i32* %3, align 4, !dbg !18, !tbaa !36
  %4 = getelementptr inbounds i32, i32* %arg_type_ids, i64 3, !dbg !18
  %T_add.code = load i32, i32* %4, align 4, !dbg !18, !tbaa !39
  %5 = getelementptr inbounds i32, i32* %arg_type_ids, i64 4, !dbg !18
  %T_mod.code = load i32, i32* %5, align 4, !dbg !18, !tbaa !41
  %6 = bitcast i8* %args to %1**, !dbg !18
  %ph_0141 = load %1*, %1** %6, align 8, !dbg !18
  %7 = getelementptr inbounds i8, i8* %args, i64 8, !dbg !18
  %8 = bitcast i8* %7 to %1**, !dbg !18
  %ph_3142 = load %1*, %1** %8, align 8, !dbg !18
  %9 = getelementptr inbounds i8, i8* %args, i64 16, !dbg !18
  %10 = bitcast i8* %9 to %1**, !dbg !18
  %T_multiply143 = load %1*, %1** %10, align 8, !dbg !18
  %11 = getelementptr inbounds i8, i8* %args, i64 24, !dbg !18
  %12 = bitcast i8* %11 to %1**, !dbg !18
  %T_add144 = load %1*, %1** %12, align 8, !dbg !18
  %13 = getelementptr inbounds i8, i8* %args, i64 32, !dbg !18
  %14 = bitcast i8* %13 to %1**, !dbg !18
  %T_mod145 = load %1*, %1** %14, align 8, !dbg !18
  %15 = bitcast %1* %ph_0141 to float**, !dbg !18
  %ph_0_void_ptr146 = load float*, float** %15, align 8, !dbg !18
  %ptrint = ptrtoint float* %ph_0_void_ptr146 to i64, !dbg !18
  %maskedptr = and i64 %ptrint, 63, !dbg !18
  %maskcond = icmp eq i64 %maskedptr, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond), !dbg !18
  %16 = getelementptr inbounds %1, %1* %ph_0141, i64 0, i32 4, !dbg !18
  %default_function.ph_0.shape = load i64*, i64** %16, align 8, !dbg !18
  %17 = getelementptr inbounds %1, %1* %ph_0141, i64 0, i32 5, !dbg !18
  %default_function.ph_0.strides = load i64*, i64** %17, align 8, !dbg !18
  %18 = getelementptr inbounds %1, %1* %ph_0141, i64 0, i32 1, i32 1, !dbg !18
  %dev_id = load i32, i32* %18, align 4, !dbg !18
  %19 = bitcast %1* %ph_3142 to float**, !dbg !18
  %ph_3_void_ptr147 = load float*, float** %19, align 8, !dbg !18
  %ptrint3 = ptrtoint float* %ph_3_void_ptr147 to i64, !dbg !18
  %maskedptr4 = and i64 %ptrint3, 63, !dbg !18
  %maskcond5 = icmp eq i64 %maskedptr4, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond5), !dbg !18
  %20 = getelementptr inbounds %1, %1* %ph_3142, i64 0, i32 4, !dbg !18
  %default_function.ph_3.shape = load i64*, i64** %20, align 8, !dbg !18
  %21 = getelementptr inbounds %1, %1* %ph_3142, i64 0, i32 5, !dbg !18
  %default_function.ph_3.strides = load i64*, i64** %21, align 8, !dbg !18
  %22 = bitcast %1* %T_multiply143 to float**, !dbg !18
  %T_multiply_void_ptr148 = load float*, float** %22, align 8, !dbg !18
  %ptrint7 = ptrtoint float* %T_multiply_void_ptr148 to i64, !dbg !18
  %maskedptr8 = and i64 %ptrint7, 63, !dbg !18
  %maskcond9 = icmp eq i64 %maskedptr8, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond9), !dbg !18
  %23 = getelementptr inbounds %1, %1* %T_multiply143, i64 0, i32 4, !dbg !18
  %default_function.T_multiply.shape = load i64*, i64** %23, align 8, !dbg !18
  %24 = getelementptr inbounds %1, %1* %T_multiply143, i64 0, i32 5, !dbg !18
  %default_function.T_multiply.strides = load i64*, i64** %24, align 8, !dbg !18
  %25 = bitcast %1* %T_add144 to float**, !dbg !18
  %T_add_void_ptr149 = load float*, float** %25, align 8, !dbg !18
  %ptrint11 = ptrtoint float* %T_add_void_ptr149 to i64, !dbg !18
  %maskedptr12 = and i64 %ptrint11, 63, !dbg !18
  %maskcond13 = icmp eq i64 %maskedptr12, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond13), !dbg !18
  %26 = getelementptr inbounds %1, %1* %T_add144, i64 0, i32 4, !dbg !18
  %default_function.T_add.shape = load i64*, i64** %26, align 8, !dbg !18
  %27 = getelementptr inbounds %1, %1* %T_add144, i64 0, i32 5, !dbg !18
  %default_function.T_add.strides = load i64*, i64** %27, align 8, !dbg !18
  %28 = bitcast %1* %T_mod145 to float**, !dbg !18
  %T_mod_void_ptr150 = load float*, float** %28, align 8, !dbg !18
  %ptrint15 = ptrtoint float* %T_mod_void_ptr150 to i64, !dbg !18
  %maskedptr16 = and i64 %ptrint15, 63, !dbg !18
  %maskcond17 = icmp eq i64 %maskedptr16, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond17), !dbg !18
  %29 = getelementptr inbounds %1, %1* %T_mod145, i64 0, i32 4, !dbg !18
  %default_function.T_mod.shape = load i64*, i64** %29, align 8, !dbg !18
  %30 = getelementptr inbounds %1, %1* %T_mod145, i64 0, i32 5, !dbg !18
  %default_function.T_mod.strides = load i64*, i64** %30, align 8, !dbg !18
  switch i32 %ph_0.code, label %assert_fail18 [
    i32 13, label %assert_end19
    i32 7, label %assert_end19
    i32 4, label %assert_end19
    i32 3, label %assert_end19
  ], !dbg !18

assert_fail18:                                    ; preds = %assert_end
  %31 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %31(i8* getelementptr inbounds ([130 x i8], [130 x i8]* @.str.1, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end19:                                     ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  switch i32 %ph_3.code, label %assert_fail20 [
    i32 13, label %assert_end21
    i32 7, label %assert_end21
    i32 4, label %assert_end21
    i32 3, label %assert_end21
  ], !dbg !18

assert_fail20:                                    ; preds = %assert_end19
  %32 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %32(i8* getelementptr inbounds ([130 x i8], [130 x i8]* @.str.2, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end21:                                     ; preds = %assert_end19, %assert_end19, %assert_end19, %assert_end19
  switch i32 %T_multiply.code, label %assert_fail22 [
    i32 13, label %assert_end23
    i32 7, label %assert_end23
    i32 4, label %assert_end23
    i32 3, label %assert_end23
  ], !dbg !18

assert_fail22:                                    ; preds = %assert_end21
  %33 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %33(i8* getelementptr inbounds ([154 x i8], [154 x i8]* @.str.3, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end23:                                     ; preds = %assert_end21, %assert_end21, %assert_end21, %assert_end21
  switch i32 %T_add.code, label %assert_fail24 [
    i32 13, label %assert_end25
    i32 7, label %assert_end25
    i32 4, label %assert_end25
    i32 3, label %assert_end25
  ], !dbg !18

assert_fail24:                                    ; preds = %assert_end23
  %34 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %34(i8* getelementptr inbounds ([134 x i8], [134 x i8]* @.str.4, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end25:                                     ; preds = %assert_end23, %assert_end23, %assert_end23, %assert_end23
  switch i32 %T_mod.code, label %assert_fail26 [
    i32 13, label %assert_end27
    i32 7, label %assert_end27
    i32 4, label %assert_end27
    i32 3, label %assert_end27
  ], !dbg !18

assert_fail26:                                    ; preds = %assert_end25
  %35 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %35(i8* getelementptr inbounds ([134 x i8], [134 x i8]* @.str.5, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end27:                                     ; preds = %assert_end25, %assert_end25, %assert_end25, %assert_end25
  %36 = getelementptr inbounds %1, %1* %ph_0141, i64 0, i32 2, !dbg !18
  %37 = load i32, i32* %36, align 4, !dbg !18
  %38 = icmp eq i32 %37, 3, !dbg !18
  br i1 %38, label %assert_end31, label %assert_fail28, !dbg !18, !prof !19

assert_fail28:                                    ; preds = %assert_end27
  %39 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %39(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.6, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end31:                                     ; preds = %assert_end27
  %40 = getelementptr inbounds %1, %1* %ph_0141, i64 0, i32 3, i32 2, !dbg !18
  %41 = load i16, i16* %40, align 2, !dbg !18
  %42 = icmp eq i16 %41, 1, !dbg !18
  %43 = getelementptr inbounds %1, %1* %ph_0141, i64 0, i32 3, i32 1, !dbg !18
  %44 = load i8, i8* %43, align 1, !dbg !18
  %45 = icmp eq i8 %44, 32, !dbg !18
  %46 = getelementptr inbounds %1, %1* %ph_0141, i64 0, i32 3, i32 0, !dbg !18
  %47 = load i8, i8* %46, align 1, !dbg !18
  %48 = icmp eq i8 %47, 2, !dbg !18
  %49 = and i1 %45, %48, !dbg !18
  %50 = and i1 %42, %49, !dbg !18
  br i1 %50, label %assert_end33, label %assert_fail32, !dbg !18, !prof !19

assert_fail32:                                    ; preds = %assert_end31
  %51 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %51(i8* getelementptr inbounds ([235 x i8], [235 x i8]* @.str.7, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end33:                                     ; preds = %assert_end31
  %52 = load i64, i64* %default_function.ph_0.shape, align 8, !dbg !18, !tbaa !45
  %53 = trunc i64 %52 to i32, !dbg !18
  %54 = icmp eq i32 %53, 1, !dbg !18
  br i1 %54, label %assert_end35, label %assert_fail34, !dbg !18, !prof !19

assert_fail34:                                    ; preds = %assert_end33
  %55 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %55(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.8, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end35:                                     ; preds = %assert_end33
  %56 = getelementptr inbounds i64, i64* %default_function.ph_0.shape, i64 1, !dbg !18
  %57 = load i64, i64* %56, align 8, !dbg !18, !tbaa !55
  %58 = trunc i64 %57 to i32, !dbg !18
  %59 = icmp eq i32 %58, 7, !dbg !18
  br i1 %59, label %assert_end37, label %assert_fail36, !dbg !18, !prof !19

assert_fail36:                                    ; preds = %assert_end35
  %60 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %60(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.9, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end37:                                     ; preds = %assert_end35
  %61 = getelementptr inbounds i64, i64* %default_function.ph_0.shape, i64 2, !dbg !18
  %62 = load i64, i64* %61, align 8, !dbg !18, !tbaa !57
  %63 = trunc i64 %62 to i32, !dbg !18
  %64 = icmp eq i32 %63, 18, !dbg !18
  br i1 %64, label %assert_end39, label %assert_fail38, !dbg !18, !prof !19

assert_fail38:                                    ; preds = %assert_end37
  %65 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %65(i8* getelementptr inbounds ([193 x i8], [193 x i8]* @.str.10, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end39:                                     ; preds = %assert_end37
  %66 = icmp eq i64* %default_function.ph_0.strides, null, !dbg !18
  br i1 %66, label %if_end, label %if_then, !dbg !18, !prof !60

if_then:                                          ; preds = %assert_end39
  %67 = getelementptr inbounds i64, i64* %default_function.ph_0.strides, i64 1, !dbg !18
  %68 = load i64, i64* %67, align 8, !dbg !18, !tbaa !61
  %69 = trunc i64 %68 to i32, !dbg !18
  %70 = icmp eq i32 %69, 18, !dbg !18
  %71 = getelementptr inbounds i64, i64* %default_function.ph_0.strides, i64 2, !dbg !18
  %72 = load i64, i64* %71, align 8, !dbg !18, !tbaa !71
  %73 = trunc i64 %72 to i32, !dbg !18
  %74 = icmp eq i32 %73, 1, !dbg !18
  %75 = and i1 %70, %74, !dbg !18
  br i1 %75, label %if_end, label %assert_fail40, !dbg !18, !prof !19

if_end:                                           ; preds = %assert_end39, %if_then
  %76 = getelementptr inbounds %1, %1* %ph_0141, i64 0, i32 6, !dbg !18
  %77 = load i64, i64* %76, align 8, !dbg !18
  %78 = icmp eq i64 %77, 0, !dbg !18
  br i1 %78, label %assert_end43, label %assert_fail42, !dbg !18, !prof !19

assert_fail40:                                    ; preds = %if_then
  %79 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %79(i8* getelementptr inbounds ([189 x i8], [189 x i8]* @.str.11, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail42:                                    ; preds = %if_end
  %80 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %80(i8* getelementptr inbounds ([196 x i8], [196 x i8]* @.str.12, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end43:                                     ; preds = %if_end
  %81 = getelementptr inbounds %1, %1* %ph_0141, i64 0, i32 1, i32 0, !dbg !18
  %82 = load i32, i32* %81, align 4, !dbg !18
  %83 = icmp eq i32 %82, 1, !dbg !18
  br i1 %83, label %assert_end45, label %assert_fail44, !dbg !18, !prof !19

assert_fail44:                                    ; preds = %assert_end43
  %84 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %84(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.13, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end45:                                     ; preds = %assert_end43
  %85 = getelementptr inbounds %1, %1* %ph_3142, i64 0, i32 2, !dbg !18
  %86 = load i32, i32* %85, align 4, !dbg !18
  %87 = icmp eq i32 %86, 3, !dbg !18
  br i1 %87, label %assert_end49, label %assert_fail46, !dbg !18, !prof !19

assert_fail46:                                    ; preds = %assert_end45
  %88 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %88(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.14, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end49:                                     ; preds = %assert_end45
  %89 = getelementptr inbounds %1, %1* %ph_3142, i64 0, i32 3, i32 2, !dbg !18
  %90 = load i16, i16* %89, align 2, !dbg !18
  %91 = icmp eq i16 %90, 1, !dbg !18
  %92 = getelementptr inbounds %1, %1* %ph_3142, i64 0, i32 3, i32 1, !dbg !18
  %93 = load i8, i8* %92, align 1, !dbg !18
  %94 = icmp eq i8 %93, 32, !dbg !18
  %95 = getelementptr inbounds %1, %1* %ph_3142, i64 0, i32 3, i32 0, !dbg !18
  %96 = load i8, i8* %95, align 1, !dbg !18
  %97 = icmp eq i8 %96, 2, !dbg !18
  %98 = and i1 %94, %97, !dbg !18
  %99 = and i1 %91, %98, !dbg !18
  br i1 %99, label %assert_end51, label %assert_fail50, !dbg !18, !prof !19

assert_fail50:                                    ; preds = %assert_end49
  %100 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %100(i8* getelementptr inbounds ([235 x i8], [235 x i8]* @.str.15, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end51:                                     ; preds = %assert_end49
  %101 = load i64, i64* %default_function.ph_3.shape, align 8, !dbg !18, !tbaa !74
  %102 = trunc i64 %101 to i32, !dbg !18
  %103 = icmp eq i32 %102, 1, !dbg !18
  br i1 %103, label %assert_end53, label %assert_fail52, !dbg !18, !prof !19

assert_fail52:                                    ; preds = %assert_end51
  %104 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %104(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.16, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end53:                                     ; preds = %assert_end51
  %105 = getelementptr inbounds i64, i64* %default_function.ph_3.shape, i64 1, !dbg !18
  %106 = load i64, i64* %105, align 8, !dbg !18, !tbaa !84
  %107 = trunc i64 %106 to i32, !dbg !18
  %108 = icmp eq i32 %107, 7, !dbg !18
  br i1 %108, label %assert_end55, label %assert_fail54, !dbg !18, !prof !19

assert_fail54:                                    ; preds = %assert_end53
  %109 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %109(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.17, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end55:                                     ; preds = %assert_end53
  %110 = getelementptr inbounds i64, i64* %default_function.ph_3.shape, i64 2, !dbg !18
  %111 = load i64, i64* %110, align 8, !dbg !18, !tbaa !86
  %112 = trunc i64 %111 to i32, !dbg !18
  %113 = icmp eq i32 %112, 18, !dbg !18
  br i1 %113, label %assert_end57, label %assert_fail56, !dbg !18, !prof !19

assert_fail56:                                    ; preds = %assert_end55
  %114 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %114(i8* getelementptr inbounds ([193 x i8], [193 x i8]* @.str.18, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end57:                                     ; preds = %assert_end55
  %115 = icmp eq i64* %default_function.ph_3.strides, null, !dbg !18
  br i1 %115, label %if_end59, label %if_then58, !dbg !18, !prof !60

if_then58:                                        ; preds = %assert_end57
  %116 = getelementptr inbounds i64, i64* %default_function.ph_3.strides, i64 1, !dbg !18
  %117 = load i64, i64* %116, align 8, !dbg !18, !tbaa !89
  %118 = trunc i64 %117 to i32, !dbg !18
  %119 = icmp eq i32 %118, 18, !dbg !18
  %120 = getelementptr inbounds i64, i64* %default_function.ph_3.strides, i64 2, !dbg !18
  %121 = load i64, i64* %120, align 8, !dbg !18, !tbaa !99
  %122 = trunc i64 %121 to i32, !dbg !18
  %123 = icmp eq i32 %122, 1, !dbg !18
  %124 = and i1 %119, %123, !dbg !18
  br i1 %124, label %if_end59, label %assert_fail60, !dbg !18, !prof !19

if_end59:                                         ; preds = %assert_end57, %if_then58
  %125 = getelementptr inbounds %1, %1* %ph_3142, i64 0, i32 6, !dbg !18
  %126 = load i64, i64* %125, align 8, !dbg !18
  %127 = icmp eq i64 %126, 0, !dbg !18
  br i1 %127, label %assert_end63, label %assert_fail62, !dbg !18, !prof !19

assert_fail60:                                    ; preds = %if_then58
  %128 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %128(i8* getelementptr inbounds ([189 x i8], [189 x i8]* @.str.19, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail62:                                    ; preds = %if_end59
  %129 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %129(i8* getelementptr inbounds ([196 x i8], [196 x i8]* @.str.20, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end63:                                     ; preds = %if_end59
  %130 = getelementptr inbounds %1, %1* %ph_3142, i64 0, i32 1, i32 0, !dbg !18
  %131 = load i32, i32* %130, align 4, !dbg !18
  %132 = icmp eq i32 %131, 1, !dbg !18
  br i1 %132, label %assert_end65, label %assert_fail64, !dbg !18, !prof !19

assert_fail64:                                    ; preds = %assert_end63
  %133 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %133(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.21, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end65:                                     ; preds = %assert_end63
  %134 = getelementptr inbounds %1, %1* %ph_3142, i64 0, i32 1, i32 1, !dbg !18
  %135 = load i32, i32* %134, align 4, !dbg !18
  %136 = icmp eq i32 %dev_id, %135, !dbg !18
  br i1 %136, label %assert_end67, label %assert_fail66, !dbg !18, !prof !19

assert_fail66:                                    ; preds = %assert_end65
  %137 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %137(i8* getelementptr inbounds ([182 x i8], [182 x i8]* @.str.22, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end67:                                     ; preds = %assert_end65
  %138 = getelementptr inbounds %1, %1* %T_multiply143, i64 0, i32 2, !dbg !18
  %139 = load i32, i32* %138, align 4, !dbg !18
  %140 = icmp eq i32 %139, 3, !dbg !18
  br i1 %140, label %assert_end71, label %assert_fail68, !dbg !18, !prof !19

assert_fail68:                                    ; preds = %assert_end67
  %141 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %141(i8* getelementptr inbounds ([119 x i8], [119 x i8]* @.str.23, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end71:                                     ; preds = %assert_end67
  %142 = getelementptr inbounds %1, %1* %T_multiply143, i64 0, i32 3, i32 2, !dbg !18
  %143 = load i16, i16* %142, align 2, !dbg !18
  %144 = icmp eq i16 %143, 1, !dbg !18
  %145 = getelementptr inbounds %1, %1* %T_multiply143, i64 0, i32 3, i32 1, !dbg !18
  %146 = load i8, i8* %145, align 1, !dbg !18
  %147 = icmp eq i8 %146, 32, !dbg !18
  %148 = getelementptr inbounds %1, %1* %T_multiply143, i64 0, i32 3, i32 0, !dbg !18
  %149 = load i8, i8* %148, align 1, !dbg !18
  %150 = icmp eq i8 %149, 2, !dbg !18
  %151 = and i1 %147, %150, !dbg !18
  %152 = and i1 %144, %151, !dbg !18
  br i1 %152, label %assert_end73, label %assert_fail72, !dbg !18, !prof !19

assert_fail72:                                    ; preds = %assert_end71
  %153 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %153(i8* getelementptr inbounds ([259 x i8], [259 x i8]* @.str.24, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end73:                                     ; preds = %assert_end71
  %154 = load i64, i64* %default_function.T_multiply.shape, align 8, !dbg !18, !tbaa !102
  %155 = trunc i64 %154 to i32, !dbg !18
  %156 = icmp eq i32 %155, 1, !dbg !18
  br i1 %156, label %assert_end75, label %assert_fail74, !dbg !18, !prof !19

assert_fail74:                                    ; preds = %assert_end73
  %157 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %157(i8* getelementptr inbounds ([209 x i8], [209 x i8]* @.str.25, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end75:                                     ; preds = %assert_end73
  %158 = getelementptr inbounds i64, i64* %default_function.T_multiply.shape, i64 1, !dbg !18
  %159 = load i64, i64* %158, align 8, !dbg !18, !tbaa !112
  %160 = trunc i64 %159 to i32, !dbg !18
  %161 = icmp eq i32 %160, 7, !dbg !18
  br i1 %161, label %assert_end77, label %assert_fail76, !dbg !18, !prof !19

assert_fail76:                                    ; preds = %assert_end75
  %162 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %162(i8* getelementptr inbounds ([209 x i8], [209 x i8]* @.str.26, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end77:                                     ; preds = %assert_end75
  %163 = getelementptr inbounds i64, i64* %default_function.T_multiply.shape, i64 2, !dbg !18
  %164 = load i64, i64* %163, align 8, !dbg !18, !tbaa !114
  %165 = trunc i64 %164 to i32, !dbg !18
  %166 = icmp eq i32 %165, 18, !dbg !18
  br i1 %166, label %assert_end79, label %assert_fail78, !dbg !18, !prof !19

assert_fail78:                                    ; preds = %assert_end77
  %167 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %167(i8* getelementptr inbounds ([211 x i8], [211 x i8]* @.str.27, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end79:                                     ; preds = %assert_end77
  %168 = icmp eq i64* %default_function.T_multiply.strides, null, !dbg !18
  br i1 %168, label %if_end81, label %if_then80, !dbg !18, !prof !60

if_then80:                                        ; preds = %assert_end79
  %169 = getelementptr inbounds i64, i64* %default_function.T_multiply.strides, i64 1, !dbg !18
  %170 = load i64, i64* %169, align 8, !dbg !18, !tbaa !117
  %171 = trunc i64 %170 to i32, !dbg !18
  %172 = icmp eq i32 %171, 18, !dbg !18
  %173 = getelementptr inbounds i64, i64* %default_function.T_multiply.strides, i64 2, !dbg !18
  %174 = load i64, i64* %173, align 8, !dbg !18, !tbaa !127
  %175 = trunc i64 %174 to i32, !dbg !18
  %176 = icmp eq i32 %175, 1, !dbg !18
  %177 = and i1 %172, %176, !dbg !18
  br i1 %177, label %if_end81, label %assert_fail82, !dbg !18, !prof !19

if_end81:                                         ; preds = %assert_end79, %if_then80
  %178 = getelementptr inbounds %1, %1* %T_multiply143, i64 0, i32 6, !dbg !18
  %179 = load i64, i64* %178, align 8, !dbg !18
  %180 = icmp eq i64 %179, 0, !dbg !18
  br i1 %180, label %assert_end85, label %assert_fail84, !dbg !18, !prof !19

assert_fail82:                                    ; preds = %if_then80
  %181 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %181(i8* getelementptr inbounds ([207 x i8], [207 x i8]* @.str.28, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail84:                                    ; preds = %if_end81
  %182 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %182(i8* getelementptr inbounds ([214 x i8], [214 x i8]* @.str.29, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end85:                                     ; preds = %if_end81
  %183 = getelementptr inbounds %1, %1* %T_multiply143, i64 0, i32 1, i32 0, !dbg !18
  %184 = load i32, i32* %183, align 4, !dbg !18
  %185 = icmp eq i32 %184, 1, !dbg !18
  br i1 %185, label %assert_end87, label %assert_fail86, !dbg !18, !prof !19

assert_fail86:                                    ; preds = %assert_end85
  %186 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %186(i8* getelementptr inbounds ([194 x i8], [194 x i8]* @.str.30, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end87:                                     ; preds = %assert_end85
  %187 = getelementptr inbounds %1, %1* %T_multiply143, i64 0, i32 1, i32 1, !dbg !18
  %188 = load i32, i32* %187, align 4, !dbg !18
  %189 = icmp eq i32 %dev_id, %188, !dbg !18
  br i1 %189, label %assert_end89, label %assert_fail88, !dbg !18, !prof !19

assert_fail88:                                    ; preds = %assert_end87
  %190 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %190(i8* getelementptr inbounds ([200 x i8], [200 x i8]* @.str.31, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end89:                                     ; preds = %assert_end87
  %191 = getelementptr inbounds %1, %1* %T_add144, i64 0, i32 2, !dbg !18
  %192 = load i32, i32* %191, align 4, !dbg !18
  %193 = icmp eq i32 %192, 3, !dbg !18
  br i1 %193, label %assert_end93, label %assert_fail90, !dbg !18, !prof !19

assert_fail90:                                    ; preds = %assert_end89
  %194 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %194(i8* getelementptr inbounds ([109 x i8], [109 x i8]* @.str.32, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end93:                                     ; preds = %assert_end89
  %195 = getelementptr inbounds %1, %1* %T_add144, i64 0, i32 3, i32 2, !dbg !18
  %196 = load i16, i16* %195, align 2, !dbg !18
  %197 = icmp eq i16 %196, 1, !dbg !18
  %198 = getelementptr inbounds %1, %1* %T_add144, i64 0, i32 3, i32 1, !dbg !18
  %199 = load i8, i8* %198, align 1, !dbg !18
  %200 = icmp eq i8 %199, 32, !dbg !18
  %201 = getelementptr inbounds %1, %1* %T_add144, i64 0, i32 3, i32 0, !dbg !18
  %202 = load i8, i8* %201, align 1, !dbg !18
  %203 = icmp eq i8 %202, 2, !dbg !18
  %204 = and i1 %200, %203, !dbg !18
  %205 = and i1 %197, %204, !dbg !18
  br i1 %205, label %assert_end95, label %assert_fail94, !dbg !18, !prof !19

assert_fail94:                                    ; preds = %assert_end93
  %206 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %206(i8* getelementptr inbounds ([239 x i8], [239 x i8]* @.str.33, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end95:                                     ; preds = %assert_end93
  %207 = load i64, i64* %default_function.T_add.shape, align 8, !dbg !18, !tbaa !130
  %208 = trunc i64 %207 to i32, !dbg !18
  %209 = icmp eq i32 %208, 1, !dbg !18
  br i1 %209, label %assert_end97, label %assert_fail96, !dbg !18, !prof !19

assert_fail96:                                    ; preds = %assert_end95
  %210 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %210(i8* getelementptr inbounds ([194 x i8], [194 x i8]* @.str.34, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end97:                                     ; preds = %assert_end95
  %211 = getelementptr inbounds i64, i64* %default_function.T_add.shape, i64 1, !dbg !18
  %212 = load i64, i64* %211, align 8, !dbg !18, !tbaa !140
  %213 = trunc i64 %212 to i32, !dbg !18
  %214 = icmp eq i32 %213, 7, !dbg !18
  br i1 %214, label %assert_end99, label %assert_fail98, !dbg !18, !prof !19

assert_fail98:                                    ; preds = %assert_end97
  %215 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %215(i8* getelementptr inbounds ([194 x i8], [194 x i8]* @.str.35, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end99:                                     ; preds = %assert_end97
  %216 = getelementptr inbounds i64, i64* %default_function.T_add.shape, i64 2, !dbg !18
  %217 = load i64, i64* %216, align 8, !dbg !18, !tbaa !142
  %218 = trunc i64 %217 to i32, !dbg !18
  %219 = icmp eq i32 %218, 18, !dbg !18
  br i1 %219, label %assert_end101, label %assert_fail100, !dbg !18, !prof !19

assert_fail100:                                   ; preds = %assert_end99
  %220 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %220(i8* getelementptr inbounds ([196 x i8], [196 x i8]* @.str.36, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end101:                                    ; preds = %assert_end99
  %221 = icmp eq i64* %default_function.T_add.strides, null, !dbg !18
  br i1 %221, label %if_end103, label %if_then102, !dbg !18, !prof !60

if_then102:                                       ; preds = %assert_end101
  %222 = getelementptr inbounds i64, i64* %default_function.T_add.strides, i64 1, !dbg !18
  %223 = load i64, i64* %222, align 8, !dbg !18, !tbaa !145
  %224 = trunc i64 %223 to i32, !dbg !18
  %225 = icmp eq i32 %224, 18, !dbg !18
  %226 = getelementptr inbounds i64, i64* %default_function.T_add.strides, i64 2, !dbg !18
  %227 = load i64, i64* %226, align 8, !dbg !18, !tbaa !155
  %228 = trunc i64 %227 to i32, !dbg !18
  %229 = icmp eq i32 %228, 1, !dbg !18
  %230 = and i1 %225, %229, !dbg !18
  br i1 %230, label %if_end103, label %assert_fail104, !dbg !18, !prof !19

if_end103:                                        ; preds = %assert_end101, %if_then102
  %231 = getelementptr inbounds %1, %1* %T_add144, i64 0, i32 6, !dbg !18
  %232 = load i64, i64* %231, align 8, !dbg !18
  %233 = icmp eq i64 %232, 0, !dbg !18
  br i1 %233, label %assert_end107, label %assert_fail106, !dbg !18, !prof !19

assert_fail104:                                   ; preds = %if_then102
  %234 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %234(i8* getelementptr inbounds ([192 x i8], [192 x i8]* @.str.37, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail106:                                   ; preds = %if_end103
  %235 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %235(i8* getelementptr inbounds ([199 x i8], [199 x i8]* @.str.38, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end107:                                    ; preds = %if_end103
  %236 = getelementptr inbounds %1, %1* %T_add144, i64 0, i32 1, i32 0, !dbg !18
  %237 = load i32, i32* %236, align 4, !dbg !18
  %238 = icmp eq i32 %237, 1, !dbg !18
  br i1 %238, label %assert_end109, label %assert_fail108, !dbg !18, !prof !19

assert_fail108:                                   ; preds = %assert_end107
  %239 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %239(i8* getelementptr inbounds ([179 x i8], [179 x i8]* @.str.39, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end109:                                    ; preds = %assert_end107
  %240 = getelementptr inbounds %1, %1* %T_add144, i64 0, i32 1, i32 1, !dbg !18
  %241 = load i32, i32* %240, align 4, !dbg !18
  %242 = icmp eq i32 %dev_id, %241, !dbg !18
  br i1 %242, label %assert_end111, label %assert_fail110, !dbg !18, !prof !19

assert_fail110:                                   ; preds = %assert_end109
  %243 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %243(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.40, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end111:                                    ; preds = %assert_end109
  %244 = getelementptr inbounds %1, %1* %T_mod145, i64 0, i32 2, !dbg !18
  %245 = load i32, i32* %244, align 4, !dbg !18
  %246 = icmp eq i32 %245, 3, !dbg !18
  br i1 %246, label %assert_end115, label %assert_fail112, !dbg !18, !prof !19

assert_fail112:                                   ; preds = %assert_end111
  %247 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %247(i8* getelementptr inbounds ([109 x i8], [109 x i8]* @.str.41, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end115:                                    ; preds = %assert_end111
  %248 = getelementptr inbounds %1, %1* %T_mod145, i64 0, i32 3, i32 2, !dbg !18
  %249 = load i16, i16* %248, align 2, !dbg !18
  %250 = icmp eq i16 %249, 1, !dbg !18
  %251 = getelementptr inbounds %1, %1* %T_mod145, i64 0, i32 3, i32 1, !dbg !18
  %252 = load i8, i8* %251, align 1, !dbg !18
  %253 = icmp eq i8 %252, 32, !dbg !18
  %254 = getelementptr inbounds %1, %1* %T_mod145, i64 0, i32 3, i32 0, !dbg !18
  %255 = load i8, i8* %254, align 1, !dbg !18
  %256 = icmp eq i8 %255, 2, !dbg !18
  %257 = and i1 %253, %256, !dbg !18
  %258 = and i1 %250, %257, !dbg !18
  br i1 %258, label %assert_end117, label %assert_fail116, !dbg !18, !prof !19

assert_fail116:                                   ; preds = %assert_end115
  %259 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %259(i8* getelementptr inbounds ([239 x i8], [239 x i8]* @.str.42, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end117:                                    ; preds = %assert_end115
  %260 = load i64, i64* %default_function.T_mod.shape, align 8, !dbg !18, !tbaa !158
  %261 = trunc i64 %260 to i32, !dbg !18
  %262 = icmp eq i32 %261, 1, !dbg !18
  br i1 %262, label %assert_end119, label %assert_fail118, !dbg !18, !prof !19

assert_fail118:                                   ; preds = %assert_end117
  %263 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %263(i8* getelementptr inbounds ([194 x i8], [194 x i8]* @.str.43, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end119:                                    ; preds = %assert_end117
  %264 = getelementptr inbounds i64, i64* %default_function.T_mod.shape, i64 1, !dbg !18
  %265 = load i64, i64* %264, align 8, !dbg !18, !tbaa !168
  %266 = trunc i64 %265 to i32, !dbg !18
  %267 = icmp eq i32 %266, 7, !dbg !18
  br i1 %267, label %assert_end121, label %assert_fail120, !dbg !18, !prof !19

assert_fail120:                                   ; preds = %assert_end119
  %268 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %268(i8* getelementptr inbounds ([194 x i8], [194 x i8]* @.str.44, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end121:                                    ; preds = %assert_end119
  %269 = getelementptr inbounds i64, i64* %default_function.T_mod.shape, i64 2, !dbg !18
  %270 = load i64, i64* %269, align 8, !dbg !18, !tbaa !170
  %271 = trunc i64 %270 to i32, !dbg !18
  %272 = icmp eq i32 %271, 18, !dbg !18
  br i1 %272, label %assert_end123, label %assert_fail122, !dbg !18, !prof !19

assert_fail122:                                   ; preds = %assert_end121
  %273 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %273(i8* getelementptr inbounds ([196 x i8], [196 x i8]* @.str.45, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end123:                                    ; preds = %assert_end121
  %274 = icmp eq i64* %default_function.T_mod.strides, null, !dbg !18
  br i1 %274, label %if_end125, label %if_then124, !dbg !18, !prof !60

if_then124:                                       ; preds = %assert_end123
  %275 = getelementptr inbounds i64, i64* %default_function.T_mod.strides, i64 1, !dbg !18
  %276 = load i64, i64* %275, align 8, !dbg !18, !tbaa !173
  %277 = trunc i64 %276 to i32, !dbg !18
  %278 = icmp eq i32 %277, 18, !dbg !18
  %279 = getelementptr inbounds i64, i64* %default_function.T_mod.strides, i64 2, !dbg !18
  %280 = load i64, i64* %279, align 8, !dbg !18, !tbaa !183
  %281 = trunc i64 %280 to i32, !dbg !18
  %282 = icmp eq i32 %281, 1, !dbg !18
  %283 = and i1 %278, %282, !dbg !18
  br i1 %283, label %if_end125, label %assert_fail126, !dbg !18, !prof !19

if_end125:                                        ; preds = %assert_end123, %if_then124
  %284 = getelementptr inbounds %1, %1* %T_mod145, i64 0, i32 6, !dbg !18
  %285 = load i64, i64* %284, align 8, !dbg !18
  %286 = icmp eq i64 %285, 0, !dbg !18
  br i1 %286, label %assert_end129, label %assert_fail128, !dbg !18, !prof !19

assert_fail126:                                   ; preds = %if_then124
  %287 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %287(i8* getelementptr inbounds ([192 x i8], [192 x i8]* @.str.46, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail128:                                   ; preds = %if_end125
  %288 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %288(i8* getelementptr inbounds ([199 x i8], [199 x i8]* @.str.47, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end129:                                    ; preds = %if_end125
  %289 = getelementptr inbounds %1, %1* %T_mod145, i64 0, i32 1, i32 0, !dbg !18
  %290 = load i32, i32* %289, align 4, !dbg !18
  %291 = icmp eq i32 %290, 1, !dbg !18
  br i1 %291, label %assert_end131, label %assert_fail130, !dbg !18, !prof !19

assert_fail130:                                   ; preds = %assert_end129
  %292 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %292(i8* getelementptr inbounds ([179 x i8], [179 x i8]* @.str.48, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end131:                                    ; preds = %assert_end129
  %293 = getelementptr inbounds %1, %1* %T_mod145, i64 0, i32 1, i32 1, !dbg !18
  %294 = load i32, i32* %293, align 4, !dbg !18
  %295 = icmp eq i32 %dev_id, %294, !dbg !18
  br i1 %295, label %assert_end133, label %assert_fail132, !dbg !18, !prof !19

assert_fail132:                                   ; preds = %assert_end131
  %296 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %296(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.49, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end133:                                    ; preds = %assert_end131
  %297 = call fastcc i32 @default_function_compute_(i8* nonnull %stack_value, float* %T_add_void_ptr149, i32* nonnull %stack_tcode140.sub, float* %T_mod_void_ptr150, float* %T_multiply_void_ptr148, float* %ph_0_void_ptr146, float* %ph_3_void_ptr147), !dbg !18
  ret i32 %297, !dbg !18
}

; Function Attrs: nounwind willreturn
declare void @llvm.assume(i1) #1

; Function Attrs: noinline
define internal fastcc i32 @default_function_compute_(i8* noalias %0, float* noalias align 64 %1, i32* noalias %2, float* noalias align 64 %3, float* noalias align 64 %4, float* noalias align 64 %5, float* noalias align 64 %6) unnamed_addr #2 {
entry:
  %7 = alloca i8*, align 8
  %8 = bitcast i8* %0 to %0*
  %9 = bitcast i8* %0 to float**
  store float* %1, float** %9, align 8
  %10 = getelementptr inbounds i8, i8* %0, i64 8
  %11 = bitcast i8* %10 to float**
  store float* %3, float** %11, align 8
  %12 = getelementptr inbounds i8, i8* %0, i64 16
  %13 = bitcast i8* %12 to float**
  store float* %4, float** %13, align 8
  %14 = getelementptr inbounds i8, i8* %0, i64 24
  %15 = bitcast i8* %14 to float**
  store float* %5, float** %15, align 8
  %16 = bitcast i32* %2 to <4 x i32>*
  store <4 x i32> <i32 3, i32 3, i32 3, i32 3>, <4 x i32>* %16, align 4, !tbaa !186
  %17 = getelementptr inbounds i8, i8* %0, i64 32
  %18 = bitcast i8* %17 to float**
  store float* %6, float** %18, align 8
  %19 = getelementptr inbounds i32, i32* %2, i64 4
  store i32 3, i32* %19, align 4, !tbaa !195
  %20 = getelementptr inbounds i8, i8* %0, i64 40
  %21 = bitcast i8* %20 to %0*
  %22 = getelementptr inbounds i32, i32* %2, i64 5
  %23 = load i32 (i8*, %0*, i32*, i32, %0*, i32*)*, i32 (i8*, %0*, i32*, i32, %0*, i32*)** @__TVMFuncCall, align 8, !tbaa !20
  %24 = load i8*, i8** @.tvm_func.default_function_kernel, align 8
  %25 = icmp eq i8* %24, null
  br i1 %25, label %handle_init, label %handle_init_end, !prof !60

handle_init:                                      ; preds = %entry
  %26 = load i8*, i8** @__tvm_module_ctx, align 8, !tbaa !20
  %27 = load i32 (i8*, i8*, i8**)*, i32 (i8*, i8*, i8**)** @__TVMBackendGetFuncFromEnv, align 8, !tbaa !20
  %28 = call i32 %27(i8* %26, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.50, i64 0, i64 0), i8** nonnull %7)
  %29 = icmp eq i32 %28, 0
  br i1 %29, label %call_end, label %call_fail, !prof !19

handle_init_end:                                  ; preds = %entry, %call_end
  %30 = phi i8* [ %24, %entry ], [ %33, %call_end ]
  %31 = call i32 %23(i8* %30, %0* %8, i32* nonnull %2, i32 5, %0* nonnull %21, i32* nonnull %22)
  %32 = icmp eq i32 %31, 0
  br i1 %32, label %call_end2, label %call_fail, !prof !19

call_fail:                                        ; preds = %call_end2, %handle_init_end, %handle_init
  %merge = phi i32 [ %28, %handle_init ], [ %31, %handle_init_end ], [ 0, %call_end2 ]
  ret i32 %merge

call_end:                                         ; preds = %handle_init
  %33 = load i8*, i8** %7, align 8
  store i8* %33, i8** @.tvm_func.default_function_kernel, align 8
  br label %handle_init_end

call_end2:                                        ; preds = %handle_init_end
  %34 = bitcast i8* %20 to i64*
  %35 = load i64, i64* %34, align 8
  %kernel_error_code = trunc i64 %35 to i32
  %36 = icmp eq i32 %kernel_error_code, 0
  br i1 %36, label %call_fail, label %assert_fail, !prof !19

assert_fail:                                      ; preds = %call_end2
  %37 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !20
  call void %37(i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.51, i64 0, i64 0))
  ret i32 -1
}

; Function Attrs: nounwind readnone
define weak dso_local i16 @__truncsfhf2(float %a0) local_unnamed_addr #3 section ".text.tvm.fp16.conv" {
b0:
  %v0 = bitcast float %a0 to i32
  %v1 = and i32 %v0, 2147483647
  %v2 = add nsw i32 %v1, -947912704
  %v3 = add nsw i32 %v1, -1199570944
  %v4 = icmp ult i32 %v2, %v3
  br i1 %v4, label %b1, label %b5

b1:                                               ; preds = %b0
  %v5 = lshr i32 %v0, 13
  %v6 = and i32 %v5, 65535
  %v7 = add nuw nsw i32 %v6, -114688
  %v8 = and i32 %v0, 8191
  %v9 = icmp ugt i32 %v8, 4096
  br i1 %v9, label %b2, label %b3

b2:                                               ; preds = %b1
  %v10 = add nuw nsw i32 %v6, -114687
  br label %b13

b3:                                               ; preds = %b1
  %v11 = icmp eq i32 %v8, 4096
  br i1 %v11, label %b4, label %b13

b4:                                               ; preds = %b3
  %v12 = and i32 %v7, 65535
  %v13 = and i32 %v5, 1
  %v14 = add nuw nsw i32 %v12, %v13
  br label %b13

b5:                                               ; preds = %b0
  %v15 = icmp ugt i32 %v1, 2139095040
  br i1 %v15, label %b6, label %b7

b6:                                               ; preds = %b5
  %v16 = lshr i32 %v0, 13
  %v17 = and i32 %v16, 511
  %v18 = or i32 %v17, 32256
  br label %b13

b7:                                               ; preds = %b5
  %v19 = icmp ugt i32 %v1, 1199570943
  br i1 %v19, label %b13, label %b8

b8:                                               ; preds = %b7
  %v20 = icmp ult i32 %v1, 754974720
  br i1 %v20, label %b13, label %b9

b9:                                               ; preds = %b8
  %v21 = lshr i32 %v1, 23
  %v22 = sub nsw i32 113, %v21
  %v23 = and i32 %v0, 8388607
  %v24 = or i32 %v23, 8388608
  %v25 = add nsw i32 %v21, -81
  %v26 = shl i32 %v24, %v25
  %v27 = icmp ne i32 %v26, 0
  %v28 = lshr i32 %v24, %v22
  %v29 = zext i1 %v27 to i32
  %v30 = lshr i32 %v28, 13
  %v31 = and i32 %v28, 8191
  %v32 = or i32 %v31, %v29
  %v33 = icmp ugt i32 %v32, 4096
  br i1 %v33, label %b10, label %b11

b10:                                              ; preds = %b9
  %v34 = add nuw nsw i32 %v30, 1
  br label %b13

b11:                                              ; preds = %b9
  %v35 = icmp eq i32 %v32, 4096
  br i1 %v35, label %b12, label %b13

b12:                                              ; preds = %b11
  %v36 = and i32 %v30, 1
  %v37 = add nuw nsw i32 %v36, %v30
  br label %b13

b13:                                              ; preds = %b12, %b11, %b10, %b8, %b7, %b6, %b4, %b3, %b2
  %v38 = phi i32 [ %v18, %b6 ], [ %v10, %b2 ], [ %v14, %b4 ], [ %v7, %b3 ], [ 31744, %b7 ], [ 0, %b8 ], [ %v34, %b10 ], [ %v37, %b12 ], [ %v30, %b11 ]
  %v39 = lshr i32 %v0, 16
  %v40 = and i32 %v39, 32768
  %v41 = or i32 %v38, %v40
  %vlast = trunc i32 %v41 to i16
  ret i16 %vlast
}

; Function Attrs: nounwind readnone
define weak dso_local float @__extendhfsf2(i16 %a0) local_unnamed_addr #3 section ".text.tvm.fp16.conv" {
b0:
  %v1 = and i16 %a0, 32767
  %v2 = zext i16 %v1 to i32
  %v3 = add nsw i16 %v1, -1024
  %v4 = icmp ult i16 %v3, 30720
  br i1 %v4, label %b1, label %b2

b1:                                               ; preds = %b0
  %v5 = shl nuw nsw i32 %v2, 13
  %v6 = add nuw nsw i32 %v5, 939524096
  br label %b6

b2:                                               ; preds = %b0
  %v7 = icmp ugt i16 %v1, 31743
  br i1 %v7, label %b3, label %b4

b3:                                               ; preds = %b2
  %v8 = shl nuw nsw i32 %v2, 13
  %v9 = or i32 %v8, 2139095040
  br label %b6

b4:                                               ; preds = %b2
  %v10 = icmp eq i16 %v1, 0
  br i1 %v10, label %b6, label %b5

b5:                                               ; preds = %b4
  %v11 = icmp ult i16 %v1, 256
  %v12 = lshr i32 %v2, 8
  %v13 = select i1 %v11, i32 %v2, i32 %v12
  %v14 = select i1 %v11, i32 32, i32 24
  %v15 = icmp ult i32 %v13, 16
  %v16 = lshr i32 %v13, 4
  %v17 = add nsw i32 %v14, -4
  %v18 = select i1 %v15, i32 %v13, i32 %v16
  %v19 = select i1 %v15, i32 %v14, i32 %v17
  %v20 = icmp ult i32 %v18, 4
  %v21 = lshr i32 %v18, 2
  %v22 = add nsw i32 %v19, -2
  %v23 = select i1 %v20, i32 %v18, i32 %v21
  %v24 = select i1 %v20, i32 %v19, i32 %v22
  %v25 = icmp ult i32 %v23, 2
  %v26 = sub nsw i32 0, %v23
  %v27 = select i1 %v25, i32 %v26, i32 -2
  %v28 = add nsw i32 %v27, %v24
  %v29 = add nsw i32 %v28, -8
  %v30 = shl i32 %v2, %v29
  %v31 = xor i32 %v30, 8388608
  %v32 = shl i32 %v28, 23
  %v33 = sub i32 1124073472, %v32
  %v34 = or i32 %v31, %v33
  br label %b6

b6:                                               ; preds = %b5, %b4, %b3, %b1
  %v35 = phi i32 [ %v6, %b1 ], [ %v9, %b3 ], [ %v34, %b5 ], [ 0, %b4 ]
  %v36 = and i16 %a0, -32768
  %v37 = zext i16 %v36 to i32
  %v38 = shl nuw i32 %v37, 16
  %v39 = or i32 %v35, %v38
  %v40 = bitcast i32 %v39 to float
  ret float %v40
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.value(metadata, metadata, metadata) #4

attributes #0 = { "target-cpu"="generic" }
attributes #1 = { nounwind willreturn }
attributes #2 = { noinline "target-cpu"="generic" }
attributes #3 = { nounwind readnone "target-cpu"="generic" "target-features" }
attributes #4 = { nounwind readnone speculatable willreturn }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "TVM", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2)
!1 = !DIFile(filename: "main.tir", directory: ".")
!2 = !{}
!3 = !{i32 2, !"tvm_target", !"llvm -mtriple=x86_64-pc-linux-gnu"}
!4 = !{i32 4, !"Debug Info Version", i32 3}
!5 = distinct !DISubprogram(name: "main.tir", scope: !1, file: !1, type: !6, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !11)
!6 = !DISubroutineType(types: !7)
!7 = !{!8, !9, !10, !8, !9, !10, !9}
!8 = !DIBasicType(name: "int32", size: 32, encoding: DW_ATE_signed)
!9 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null)
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8)
!11 = !{!12, !13, !14, !15, !16, !17}
!12 = !DILocalVariable(name: "arg1", arg: 1, scope: !5, file: !1, type: !9)
!13 = !DILocalVariable(name: "arg2", arg: 2, scope: !5, file: !1, type: !10)
!14 = !DILocalVariable(name: "arg3", arg: 3, scope: !5, file: !1, type: !8)
!15 = !DILocalVariable(name: "arg4", arg: 4, scope: !5, file: !1, type: !9)
!16 = !DILocalVariable(name: "arg5", arg: 5, scope: !5, file: !1, type: !10)
!17 = !DILocalVariable(name: "arg6", arg: 6, scope: !5, file: !1, type: !9)
!18 = !DILocation(line: 0, scope: !5)
!19 = !{!"branch_weights", i32 1048576, i32 1}
!20 = !{!21, !21, i64 0}
!21 = !{!"ctx_ptr", !22, i64 0}
!22 = !{!"tvm-tbaa"}
!23 = !{!24, !24, i64 0}
!24 = !{!"0x3213a00.w4.b0", !25, i64 0}
!25 = !{!"0x3213a00.w8.b0", !26, i64 0}
!26 = !{!"0x3213a00.w16.b0", !27, i64 0}
!27 = !{!"0x3213a00.w32.b0", !28, i64 0}
!28 = !{!"0x3213a00.w64.b0", !29, i64 0}
!29 = !{!"0x3213a00.w128.b0", !30, i64 0}
!30 = !{!"0x3213a00.w256.b0", !31, i64 0}
!31 = !{!"0x3213a00.w512.b0", !32, i64 0}
!32 = !{!"0x3213a00.w1024.b0", !33, i64 0}
!33 = !{!"0x3213a00", !22, i64 0}
!34 = !{!35, !35, i64 0}
!35 = !{!"0x3213a00.w4.b4", !25, i64 0}
!36 = !{!37, !37, i64 0}
!37 = !{!"0x3213a00.w4.b8", !38, i64 0}
!38 = !{!"0x3213a00.w8.b8", !26, i64 0}
!39 = !{!40, !40, i64 0}
!40 = !{!"0x3213a00.w4.b12", !38, i64 0}
!41 = !{!42, !42, i64 0}
!42 = !{!"0x3213a00.w4.b16", !43, i64 0}
!43 = !{!"0x3213a00.w8.b16", !44, i64 0}
!44 = !{!"0x3213a00.w16.b16", !27, i64 0}
!45 = !{!46, !46, i64 0}
!46 = !{!"0x2c89330.w8.b0", !47, i64 0}
!47 = !{!"0x2c89330.w16.b0", !48, i64 0}
!48 = !{!"0x2c89330.w32.b0", !49, i64 0}
!49 = !{!"0x2c89330.w64.b0", !50, i64 0}
!50 = !{!"0x2c89330.w128.b0", !51, i64 0}
!51 = !{!"0x2c89330.w256.b0", !52, i64 0}
!52 = !{!"0x2c89330.w512.b0", !53, i64 0}
!53 = !{!"0x2c89330.w1024.b0", !54, i64 0}
!54 = !{!"0x2c89330", !22, i64 0}
!55 = !{!56, !56, i64 0}
!56 = !{!"0x2c89330.w8.b8", !47, i64 0}
!57 = !{!58, !58, i64 0}
!58 = !{!"0x2c89330.w8.b16", !59, i64 0}
!59 = !{!"0x2c89330.w16.b16", !48, i64 0}
!60 = !{!"branch_weights", i32 1, i32 1048576}
!61 = !{!62, !62, i64 0}
!62 = !{!"0x31fd070.w8.b8", !63, i64 0}
!63 = !{!"0x31fd070.w16.b0", !64, i64 0}
!64 = !{!"0x31fd070.w32.b0", !65, i64 0}
!65 = !{!"0x31fd070.w64.b0", !66, i64 0}
!66 = !{!"0x31fd070.w128.b0", !67, i64 0}
!67 = !{!"0x31fd070.w256.b0", !68, i64 0}
!68 = !{!"0x31fd070.w512.b0", !69, i64 0}
!69 = !{!"0x31fd070.w1024.b0", !70, i64 0}
!70 = !{!"0x31fd070", !22, i64 0}
!71 = !{!72, !72, i64 0}
!72 = !{!"0x31fd070.w8.b16", !73, i64 0}
!73 = !{!"0x31fd070.w16.b16", !64, i64 0}
!74 = !{!75, !75, i64 0}
!75 = !{!"0x2b0f420.w8.b0", !76, i64 0}
!76 = !{!"0x2b0f420.w16.b0", !77, i64 0}
!77 = !{!"0x2b0f420.w32.b0", !78, i64 0}
!78 = !{!"0x2b0f420.w64.b0", !79, i64 0}
!79 = !{!"0x2b0f420.w128.b0", !80, i64 0}
!80 = !{!"0x2b0f420.w256.b0", !81, i64 0}
!81 = !{!"0x2b0f420.w512.b0", !82, i64 0}
!82 = !{!"0x2b0f420.w1024.b0", !83, i64 0}
!83 = !{!"0x2b0f420", !22, i64 0}
!84 = !{!85, !85, i64 0}
!85 = !{!"0x2b0f420.w8.b8", !76, i64 0}
!86 = !{!87, !87, i64 0}
!87 = !{!"0x2b0f420.w8.b16", !88, i64 0}
!88 = !{!"0x2b0f420.w16.b16", !77, i64 0}
!89 = !{!90, !90, i64 0}
!90 = !{!"0x2ae9c00.w8.b8", !91, i64 0}
!91 = !{!"0x2ae9c00.w16.b0", !92, i64 0}
!92 = !{!"0x2ae9c00.w32.b0", !93, i64 0}
!93 = !{!"0x2ae9c00.w64.b0", !94, i64 0}
!94 = !{!"0x2ae9c00.w128.b0", !95, i64 0}
!95 = !{!"0x2ae9c00.w256.b0", !96, i64 0}
!96 = !{!"0x2ae9c00.w512.b0", !97, i64 0}
!97 = !{!"0x2ae9c00.w1024.b0", !98, i64 0}
!98 = !{!"0x2ae9c00", !22, i64 0}
!99 = !{!100, !100, i64 0}
!100 = !{!"0x2ae9c00.w8.b16", !101, i64 0}
!101 = !{!"0x2ae9c00.w16.b16", !92, i64 0}
!102 = !{!103, !103, i64 0}
!103 = !{!"0x2889c70.w8.b0", !104, i64 0}
!104 = !{!"0x2889c70.w16.b0", !105, i64 0}
!105 = !{!"0x2889c70.w32.b0", !106, i64 0}
!106 = !{!"0x2889c70.w64.b0", !107, i64 0}
!107 = !{!"0x2889c70.w128.b0", !108, i64 0}
!108 = !{!"0x2889c70.w256.b0", !109, i64 0}
!109 = !{!"0x2889c70.w512.b0", !110, i64 0}
!110 = !{!"0x2889c70.w1024.b0", !111, i64 0}
!111 = !{!"0x2889c70", !22, i64 0}
!112 = !{!113, !113, i64 0}
!113 = !{!"0x2889c70.w8.b8", !104, i64 0}
!114 = !{!115, !115, i64 0}
!115 = !{!"0x2889c70.w8.b16", !116, i64 0}
!116 = !{!"0x2889c70.w16.b16", !105, i64 0}
!117 = !{!118, !118, i64 0}
!118 = !{!"0x2e7de50.w8.b8", !119, i64 0}
!119 = !{!"0x2e7de50.w16.b0", !120, i64 0}
!120 = !{!"0x2e7de50.w32.b0", !121, i64 0}
!121 = !{!"0x2e7de50.w64.b0", !122, i64 0}
!122 = !{!"0x2e7de50.w128.b0", !123, i64 0}
!123 = !{!"0x2e7de50.w256.b0", !124, i64 0}
!124 = !{!"0x2e7de50.w512.b0", !125, i64 0}
!125 = !{!"0x2e7de50.w1024.b0", !126, i64 0}
!126 = !{!"0x2e7de50", !22, i64 0}
!127 = !{!128, !128, i64 0}
!128 = !{!"0x2e7de50.w8.b16", !129, i64 0}
!129 = !{!"0x2e7de50.w16.b16", !120, i64 0}
!130 = !{!131, !131, i64 0}
!131 = !{!"0x28d21d0.w8.b0", !132, i64 0}
!132 = !{!"0x28d21d0.w16.b0", !133, i64 0}
!133 = !{!"0x28d21d0.w32.b0", !134, i64 0}
!134 = !{!"0x28d21d0.w64.b0", !135, i64 0}
!135 = !{!"0x28d21d0.w128.b0", !136, i64 0}
!136 = !{!"0x28d21d0.w256.b0", !137, i64 0}
!137 = !{!"0x28d21d0.w512.b0", !138, i64 0}
!138 = !{!"0x28d21d0.w1024.b0", !139, i64 0}
!139 = !{!"0x28d21d0", !22, i64 0}
!140 = !{!141, !141, i64 0}
!141 = !{!"0x28d21d0.w8.b8", !132, i64 0}
!142 = !{!143, !143, i64 0}
!143 = !{!"0x28d21d0.w8.b16", !144, i64 0}
!144 = !{!"0x28d21d0.w16.b16", !133, i64 0}
!145 = !{!146, !146, i64 0}
!146 = !{!"0x2fd0790.w8.b8", !147, i64 0}
!147 = !{!"0x2fd0790.w16.b0", !148, i64 0}
!148 = !{!"0x2fd0790.w32.b0", !149, i64 0}
!149 = !{!"0x2fd0790.w64.b0", !150, i64 0}
!150 = !{!"0x2fd0790.w128.b0", !151, i64 0}
!151 = !{!"0x2fd0790.w256.b0", !152, i64 0}
!152 = !{!"0x2fd0790.w512.b0", !153, i64 0}
!153 = !{!"0x2fd0790.w1024.b0", !154, i64 0}
!154 = !{!"0x2fd0790", !22, i64 0}
!155 = !{!156, !156, i64 0}
!156 = !{!"0x2fd0790.w8.b16", !157, i64 0}
!157 = !{!"0x2fd0790.w16.b16", !148, i64 0}
!158 = !{!159, !159, i64 0}
!159 = !{!"0x27b0f20.w8.b0", !160, i64 0}
!160 = !{!"0x27b0f20.w16.b0", !161, i64 0}
!161 = !{!"0x27b0f20.w32.b0", !162, i64 0}
!162 = !{!"0x27b0f20.w64.b0", !163, i64 0}
!163 = !{!"0x27b0f20.w128.b0", !164, i64 0}
!164 = !{!"0x27b0f20.w256.b0", !165, i64 0}
!165 = !{!"0x27b0f20.w512.b0", !166, i64 0}
!166 = !{!"0x27b0f20.w1024.b0", !167, i64 0}
!167 = !{!"0x27b0f20", !22, i64 0}
!168 = !{!169, !169, i64 0}
!169 = !{!"0x27b0f20.w8.b8", !160, i64 0}
!170 = !{!171, !171, i64 0}
!171 = !{!"0x27b0f20.w8.b16", !172, i64 0}
!172 = !{!"0x27b0f20.w16.b16", !161, i64 0}
!173 = !{!174, !174, i64 0}
!174 = !{!"0x352a510.w8.b8", !175, i64 0}
!175 = !{!"0x352a510.w16.b0", !176, i64 0}
!176 = !{!"0x352a510.w32.b0", !177, i64 0}
!177 = !{!"0x352a510.w64.b0", !178, i64 0}
!178 = !{!"0x352a510.w128.b0", !179, i64 0}
!179 = !{!"0x352a510.w256.b0", !180, i64 0}
!180 = !{!"0x352a510.w512.b0", !181, i64 0}
!181 = !{!"0x352a510.w1024.b0", !182, i64 0}
!182 = !{!"0x352a510", !22, i64 0}
!183 = !{!184, !184, i64 0}
!184 = !{!"0x352a510.w8.b16", !185, i64 0}
!185 = !{!"0x352a510.w16.b16", !176, i64 0}
!186 = !{!187, !187, i64 0}
!187 = !{!"0x2ff8600.w16.b0", !188, i64 0}
!188 = !{!"0x2ff8600.w32.b0", !189, i64 0}
!189 = !{!"0x2ff8600.w64.b0", !190, i64 0}
!190 = !{!"0x2ff8600.w128.b0", !191, i64 0}
!191 = !{!"0x2ff8600.w256.b0", !192, i64 0}
!192 = !{!"0x2ff8600.w512.b0", !193, i64 0}
!193 = !{!"0x2ff8600.w1024.b0", !194, i64 0}
!194 = !{!"0x2ff8600", !22, i64 0}
!195 = !{!196, !196, i64 0}
!196 = !{!"0x2ff8600.w4.b16", !197, i64 0}
!197 = !{!"0x2ff8600.w8.b16", !198, i64 0}
!198 = !{!"0x2ff8600.w16.b16", !188, i64 0}
