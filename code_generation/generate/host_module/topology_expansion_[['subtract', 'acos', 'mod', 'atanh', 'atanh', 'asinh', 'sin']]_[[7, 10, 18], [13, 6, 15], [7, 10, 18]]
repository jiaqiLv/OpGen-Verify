; ModuleID = 'TVMMod'
source_filename = "TVMMod"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%0 = type { double }
%1 = type { i8*, %2, i32, %3, i64*, i64*, i64 }
%2 = type { i32, i32 }
%3 = type { i8, i8, i16 }

@__tvm_module_ctx = linkonce dllexport local_unnamed_addr global i8* null, align 8
@__TVMFuncCall = linkonce dllexport local_unnamed_addr global i32 (i8*, %0*, i32*, i32, %0*, i32*)* null, align 8
@__TVMBackendGetFuncFromEnv = linkonce dllexport local_unnamed_addr global i32 (i8*, i8*, i8**)* null, align 8
@__TVMAPISetLastError = linkonce dllexport local_unnamed_addr global void (i8*)* null, align 8
@.str = private constant [67 x i8] c"Assert fail: num_args == 6, default_function: num_args should be 6\00", align 1
@.str.1 = private constant [130 x i8] c"Assert fail: ph_0_code == 3 or ph_0_code == 13 or ph_0_code == 7 or ph_0_code == 4, default_function: Expect arg[0] to be pointer\00", align 1
@.str.2 = private constant [130 x i8] c"Assert fail: ph_3_code == 3 or ph_3_code == 13 or ph_3_code == 7 or ph_3_code == 4, default_function: Expect arg[1] to be pointer\00", align 1
@.str.3 = private constant [142 x i8] c"Assert fail: compute_code == 3 or compute_code == 13 or compute_code == 7 or compute_code == 4, default_function: Expect arg[2] to be pointer\00", align 1
@.str.4 = private constant [142 x i8] c"Assert fail: compute_code == 3 or compute_code == 13 or compute_code == 7 or compute_code == 4, default_function: Expect arg[3] to be pointer\00", align 1
@.str.5 = private constant [142 x i8] c"Assert fail: compute_code == 3 or compute_code == 13 or compute_code == 7 or compute_code == 4, default_function: Expect arg[4] to be pointer\00", align 1
@.str.6 = private constant [142 x i8] c"Assert fail: compute_code == 3 or compute_code == 13 or compute_code == 7 or compute_code == 4, default_function: Expect arg[5] to be pointer\00", align 1
@.str.7 = private constant [107 x i8] c"Assert fail: 3 == T.tvm_struct_get(ph_0, 0, 4, \22int32\22), default_function.ph_0.ndim is expected to equal 3\00", align 1
@.str.8 = private constant [235 x i8] c"Assert fail: T.tvm_struct_get(ph_0, 0, 5, \22uint8\22) == T.uint8(2) and T.tvm_struct_get(ph_0, 0, 6, \22uint8\22) == T.uint8(32) and T.tvm_struct_get(ph_0, 0, 7, \22uint16\22) == T.uint16(1), default_function.ph_0.dtype is expected to be float32\00", align 1
@.str.9 = private constant [191 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_0_shape[0]) == 7, Argument default_function.ph_0.shape[0] has an unsatisfied constraint: 7 == T.Cast(\22int32\22, default_function_ph_0_shape[0])\00", align 1
@.str.10 = private constant [193 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_0_shape[1]) == 10, Argument default_function.ph_0.shape[1] has an unsatisfied constraint: 10 == T.Cast(\22int32\22, default_function_ph_0_shape[1])\00", align 1
@.str.11 = private constant [193 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_0_shape[2]) == 18, Argument default_function.ph_0.shape[2] has an unsatisfied constraint: 18 == T.Cast(\22int32\22, default_function_ph_0_shape[2])\00", align 1
@.str.12 = private constant [250 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_ph_0_strides[2]) and 18 == T.Cast(\22int32\22, default_function_ph_0_strides[1]) and 180 == T.Cast(\22int32\22, default_function_ph_0_strides[0]), default_function.ph_0.strides: expected to be compact array\00", align 1
@.str.13 = private constant [196 x i8] c"Assert fail: T.uint64(0) == T.tvm_struct_get(ph_0, 0, 8, \22uint64\22), Argument default_function.ph_0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(ph_0, 0, 8, \22uint64\22)\00", align 1
@.str.14 = private constant [176 x i8] c"Assert fail: T.tvm_struct_get(ph_0, 0, 10, \22int32\22) == 1, Argument default_function.ph_0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(ph_0, 0, 10, \22int32\22)\00", align 1
@.str.15 = private constant [107 x i8] c"Assert fail: 3 == T.tvm_struct_get(ph_3, 0, 4, \22int32\22), default_function.ph_3.ndim is expected to equal 3\00", align 1
@.str.16 = private constant [235 x i8] c"Assert fail: T.tvm_struct_get(ph_3, 0, 5, \22uint8\22) == T.uint8(2) and T.tvm_struct_get(ph_3, 0, 6, \22uint8\22) == T.uint8(32) and T.tvm_struct_get(ph_3, 0, 7, \22uint16\22) == T.uint16(1), default_function.ph_3.dtype is expected to be float32\00", align 1
@.str.17 = private constant [191 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_3_shape[0]) == 7, Argument default_function.ph_3.shape[0] has an unsatisfied constraint: 7 == T.Cast(\22int32\22, default_function_ph_3_shape[0])\00", align 1
@.str.18 = private constant [193 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_3_shape[1]) == 10, Argument default_function.ph_3.shape[1] has an unsatisfied constraint: 10 == T.Cast(\22int32\22, default_function_ph_3_shape[1])\00", align 1
@.str.19 = private constant [193 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_3_shape[2]) == 18, Argument default_function.ph_3.shape[2] has an unsatisfied constraint: 18 == T.Cast(\22int32\22, default_function_ph_3_shape[2])\00", align 1
@.str.20 = private constant [250 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_ph_3_strides[2]) and 18 == T.Cast(\22int32\22, default_function_ph_3_strides[1]) and 180 == T.Cast(\22int32\22, default_function_ph_3_strides[0]), default_function.ph_3.strides: expected to be compact array\00", align 1
@.str.21 = private constant [196 x i8] c"Assert fail: T.uint64(0) == T.tvm_struct_get(ph_3, 0, 8, \22uint64\22), Argument default_function.ph_3.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(ph_3, 0, 8, \22uint64\22)\00", align 1
@.str.22 = private constant [176 x i8] c"Assert fail: T.tvm_struct_get(ph_3, 0, 10, \22int32\22) == 1, Argument default_function.ph_3.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(ph_3, 0, 10, \22int32\22)\00", align 1
@.str.23 = private constant [182 x i8] c"Assert fail: dev_id == T.tvm_struct_get(ph_3, 0, 9, \22int32\22), Argument default_function.ph_3.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(ph_3, 0, 9, \22int32\22)\00", align 1
@.str.24 = private constant [113 x i8] c"Assert fail: 3 == T.tvm_struct_get(compute, 0, 4, \22int32\22), default_function.compute.ndim is expected to equal 3\00", align 1
@.str.25 = private constant [247 x i8] c"Assert fail: T.tvm_struct_get(compute, 0, 5, \22uint8\22) == T.uint8(2) and T.tvm_struct_get(compute, 0, 6, \22uint8\22) == T.uint8(32) and T.tvm_struct_get(compute, 0, 7, \22uint16\22) == T.uint16(1), default_function.compute.dtype is expected to be float32\00", align 1
@.str.26 = private constant [200 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_compute_shape[0]) == 7, Argument default_function.compute.shape[0] has an unsatisfied constraint: 7 == T.Cast(\22int32\22, default_function_compute_shape[0])\00", align 1
@.str.27 = private constant [202 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_compute_shape[1]) == 10, Argument default_function.compute.shape[1] has an unsatisfied constraint: 10 == T.Cast(\22int32\22, default_function_compute_shape[1])\00", align 1
@.str.28 = private constant [202 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_compute_shape[2]) == 18, Argument default_function.compute.shape[2] has an unsatisfied constraint: 18 == T.Cast(\22int32\22, default_function_compute_shape[2])\00", align 1
@.str.29 = private constant [262 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_compute_strides[2]) and 18 == T.Cast(\22int32\22, default_function_compute_strides[1]) and 180 == T.Cast(\22int32\22, default_function_compute_strides[0]), default_function.compute.strides: expected to be compact array\00", align 1
@.str.30 = private constant [205 x i8] c"Assert fail: T.uint64(0) == T.tvm_struct_get(compute, 0, 8, \22uint64\22), Argument default_function.compute.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(compute, 0, 8, \22uint64\22)\00", align 1
@.str.31 = private constant [185 x i8] c"Assert fail: T.tvm_struct_get(compute, 0, 10, \22int32\22) == 1, Argument default_function.compute.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(compute, 0, 10, \22int32\22)\00", align 1
@.str.32 = private constant [191 x i8] c"Assert fail: dev_id == T.tvm_struct_get(compute, 0, 9, \22int32\22), Argument default_function.compute.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(compute, 0, 9, \22int32\22)\00", align 1
@.tvm_func.default_function_kernel = internal unnamed_addr global i8* null, align 8
@.str.33 = private constant [24 x i8] c"default_function_kernel\00", align 1
@.str.34 = private constant [68 x i8] c"Assert fail: kernel_error_code == 0, Error executing compute kernel\00", align 1
@__tvm_main__ = weak dllexport local_unnamed_addr constant [17 x i8] c"default_function\00", align 1
@llvm.global_ctors = appending global [0 x { i32, void ()*, i8* }] zeroinitializer

define dllexport i32 @default_function(i8* noalias nocapture readonly %args, i32* noalias nocapture readonly %arg_type_ids, i32 %num_args, i8* noalias nocapture readnone %out_ret_value, i32* noalias nocapture readnone %out_ret_tcode, i8* noalias nocapture readnone %resource_handle) local_unnamed_addr #0 !dbg !5 {
entry:
  call void @llvm.dbg.value(metadata i8* %args, metadata !12, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i32* %arg_type_ids, metadata !13, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i32 %num_args, metadata !14, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i8* %out_ret_value, metadata !15, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i32* %out_ret_tcode, metadata !16, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i8* %resource_handle, metadata !17, metadata !DIExpression()), !dbg !18
  %stack_value_void_ptr183 = alloca [7 x %0], align 8, !dbg !18
  %stack_tcode184 = alloca [7 x i32], align 4, !dbg !18
  %stack_tcode184.sub = getelementptr inbounds [7 x i32], [7 x i32]* %stack_tcode184, i64 0, i64 0
  %stack_value = bitcast [7 x %0]* %stack_value_void_ptr183 to i8*, !dbg !18
  %0 = icmp eq i32 %num_args, 6, !dbg !18
  br i1 %0, label %assert_end, label %assert_fail, !dbg !18, !prof !19

assert_fail:                                      ; preds = %entry
  %1 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %1(i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end:                                       ; preds = %entry
  %ph_0.code = load i32, i32* %arg_type_ids, align 4, !dbg !18, !tbaa !23
  %2 = getelementptr inbounds i32, i32* %arg_type_ids, i64 1, !dbg !18
  %ph_3.code = load i32, i32* %2, align 4, !dbg !18, !tbaa !34
  %3 = getelementptr inbounds i32, i32* %arg_type_ids, i64 2, !dbg !18
  %compute.code = load i32, i32* %3, align 4, !dbg !18, !tbaa !36
  %4 = getelementptr inbounds i32, i32* %arg_type_ids, i64 3, !dbg !18
  %compute.code1 = load i32, i32* %4, align 4, !dbg !18, !tbaa !39
  %5 = getelementptr inbounds i32, i32* %arg_type_ids, i64 4, !dbg !18
  %compute.code2 = load i32, i32* %5, align 4, !dbg !18, !tbaa !41
  %6 = getelementptr inbounds i32, i32* %arg_type_ids, i64 5, !dbg !18
  %compute.code3 = load i32, i32* %6, align 4, !dbg !18, !tbaa !45
  %7 = bitcast i8* %args to %1**, !dbg !18
  %ph_0185 = load %1*, %1** %7, align 8, !dbg !18
  %8 = getelementptr inbounds i8, i8* %args, i64 8, !dbg !18
  %9 = bitcast i8* %8 to %1**, !dbg !18
  %ph_3186 = load %1*, %1** %9, align 8, !dbg !18
  %10 = getelementptr inbounds i8, i8* %args, i64 16, !dbg !18
  %11 = bitcast i8* %10 to %1**, !dbg !18
  %compute187 = load %1*, %1** %11, align 8, !dbg !18
  %12 = getelementptr inbounds i8, i8* %args, i64 24, !dbg !18
  %13 = bitcast i8* %12 to %1**, !dbg !18
  %compute4188 = load %1*, %1** %13, align 8, !dbg !18
  %14 = getelementptr inbounds i8, i8* %args, i64 32, !dbg !18
  %15 = bitcast i8* %14 to %1**, !dbg !18
  %compute5189 = load %1*, %1** %15, align 8, !dbg !18
  %16 = getelementptr inbounds i8, i8* %args, i64 40, !dbg !18
  %17 = bitcast i8* %16 to %1**, !dbg !18
  %compute6190 = load %1*, %1** %17, align 8, !dbg !18
  %18 = bitcast %1* %ph_0185 to float**, !dbg !18
  %ph_0_void_ptr191 = load float*, float** %18, align 8, !dbg !18
  %ptrint = ptrtoint float* %ph_0_void_ptr191 to i64, !dbg !18
  %maskedptr = and i64 %ptrint, 63, !dbg !18
  %maskcond = icmp eq i64 %maskedptr, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond), !dbg !18
  %19 = getelementptr inbounds %1, %1* %ph_0185, i64 0, i32 4, !dbg !18
  %default_function.ph_0.shape = load i64*, i64** %19, align 8, !dbg !18
  %20 = getelementptr inbounds %1, %1* %ph_0185, i64 0, i32 5, !dbg !18
  %default_function.ph_0.strides = load i64*, i64** %20, align 8, !dbg !18
  %21 = getelementptr inbounds %1, %1* %ph_0185, i64 0, i32 1, i32 1, !dbg !18
  %dev_id = load i32, i32* %21, align 4, !dbg !18
  %22 = bitcast %1* %ph_3186 to float**, !dbg !18
  %ph_3_void_ptr192 = load float*, float** %22, align 8, !dbg !18
  %ptrint9 = ptrtoint float* %ph_3_void_ptr192 to i64, !dbg !18
  %maskedptr10 = and i64 %ptrint9, 63, !dbg !18
  %maskcond11 = icmp eq i64 %maskedptr10, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond11), !dbg !18
  %23 = getelementptr inbounds %1, %1* %ph_3186, i64 0, i32 4, !dbg !18
  %default_function.ph_3.shape = load i64*, i64** %23, align 8, !dbg !18
  %24 = getelementptr inbounds %1, %1* %ph_3186, i64 0, i32 5, !dbg !18
  %default_function.ph_3.strides = load i64*, i64** %24, align 8, !dbg !18
  %25 = bitcast %1* %compute187 to float**, !dbg !18
  %compute_void_ptr193 = load float*, float** %25, align 8, !dbg !18
  %ptrint13 = ptrtoint float* %compute_void_ptr193 to i64, !dbg !18
  %maskedptr14 = and i64 %ptrint13, 63, !dbg !18
  %maskcond15 = icmp eq i64 %maskedptr14, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond15), !dbg !18
  %26 = getelementptr inbounds %1, %1* %compute187, i64 0, i32 4, !dbg !18
  %default_function.compute.shape = load i64*, i64** %26, align 8, !dbg !18
  %27 = getelementptr inbounds %1, %1* %compute187, i64 0, i32 5, !dbg !18
  %default_function.compute.strides = load i64*, i64** %27, align 8, !dbg !18
  %28 = bitcast %1* %compute4188 to float**, !dbg !18
  %compute_void_ptr16194 = load float*, float** %28, align 8, !dbg !18
  %ptrint18 = ptrtoint float* %compute_void_ptr16194 to i64, !dbg !18
  %maskedptr19 = and i64 %ptrint18, 63, !dbg !18
  %maskcond20 = icmp eq i64 %maskedptr19, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond20), !dbg !18
  %29 = getelementptr inbounds %1, %1* %compute4188, i64 0, i32 4, !dbg !18
  %default_function.compute.shape21 = load i64*, i64** %29, align 8, !dbg !18
  %30 = getelementptr inbounds %1, %1* %compute4188, i64 0, i32 5, !dbg !18
  %default_function.compute.strides22 = load i64*, i64** %30, align 8, !dbg !18
  %31 = bitcast %1* %compute5189 to float**, !dbg !18
  %compute_void_ptr23195 = load float*, float** %31, align 8, !dbg !18
  %ptrint25 = ptrtoint float* %compute_void_ptr23195 to i64, !dbg !18
  %maskedptr26 = and i64 %ptrint25, 63, !dbg !18
  %maskcond27 = icmp eq i64 %maskedptr26, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond27), !dbg !18
  %32 = getelementptr inbounds %1, %1* %compute5189, i64 0, i32 4, !dbg !18
  %default_function.compute.shape28 = load i64*, i64** %32, align 8, !dbg !18
  %33 = getelementptr inbounds %1, %1* %compute5189, i64 0, i32 5, !dbg !18
  %default_function.compute.strides29 = load i64*, i64** %33, align 8, !dbg !18
  %34 = bitcast %1* %compute6190 to float**, !dbg !18
  %compute_void_ptr30196 = load float*, float** %34, align 8, !dbg !18
  %ptrint32 = ptrtoint float* %compute_void_ptr30196 to i64, !dbg !18
  %maskedptr33 = and i64 %ptrint32, 63, !dbg !18
  %maskcond34 = icmp eq i64 %maskedptr33, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond34), !dbg !18
  %35 = getelementptr inbounds %1, %1* %compute6190, i64 0, i32 4, !dbg !18
  %default_function.compute.shape35 = load i64*, i64** %35, align 8, !dbg !18
  %36 = getelementptr inbounds %1, %1* %compute6190, i64 0, i32 5, !dbg !18
  %default_function.compute.strides36 = load i64*, i64** %36, align 8, !dbg !18
  switch i32 %ph_0.code, label %assert_fail37 [
    i32 13, label %assert_end38
    i32 7, label %assert_end38
    i32 4, label %assert_end38
    i32 3, label %assert_end38
  ], !dbg !18

assert_fail37:                                    ; preds = %assert_end
  %37 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %37(i8* getelementptr inbounds ([130 x i8], [130 x i8]* @.str.1, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end38:                                     ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  switch i32 %ph_3.code, label %assert_fail39 [
    i32 13, label %assert_end40
    i32 7, label %assert_end40
    i32 4, label %assert_end40
    i32 3, label %assert_end40
  ], !dbg !18

assert_fail39:                                    ; preds = %assert_end38
  %38 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %38(i8* getelementptr inbounds ([130 x i8], [130 x i8]* @.str.2, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end40:                                     ; preds = %assert_end38, %assert_end38, %assert_end38, %assert_end38
  switch i32 %compute.code, label %assert_fail41 [
    i32 13, label %assert_end42
    i32 7, label %assert_end42
    i32 4, label %assert_end42
    i32 3, label %assert_end42
  ], !dbg !18

assert_fail41:                                    ; preds = %assert_end40
  %39 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %39(i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.3, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end42:                                     ; preds = %assert_end40, %assert_end40, %assert_end40, %assert_end40
  switch i32 %compute.code1, label %assert_fail43 [
    i32 13, label %assert_end44
    i32 7, label %assert_end44
    i32 4, label %assert_end44
    i32 3, label %assert_end44
  ], !dbg !18

assert_fail43:                                    ; preds = %assert_end42
  %40 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %40(i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.4, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end44:                                     ; preds = %assert_end42, %assert_end42, %assert_end42, %assert_end42
  switch i32 %compute.code2, label %assert_fail45 [
    i32 13, label %assert_end46
    i32 7, label %assert_end46
    i32 4, label %assert_end46
    i32 3, label %assert_end46
  ], !dbg !18

assert_fail45:                                    ; preds = %assert_end44
  %41 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %41(i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.5, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end46:                                     ; preds = %assert_end44, %assert_end44, %assert_end44, %assert_end44
  switch i32 %compute.code3, label %assert_fail47 [
    i32 13, label %assert_end48
    i32 7, label %assert_end48
    i32 4, label %assert_end48
    i32 3, label %assert_end48
  ], !dbg !18

assert_fail47:                                    ; preds = %assert_end46
  %42 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %42(i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.6, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end48:                                     ; preds = %assert_end46, %assert_end46, %assert_end46, %assert_end46
  %43 = getelementptr inbounds %1, %1* %ph_0185, i64 0, i32 2, !dbg !18
  %44 = load i32, i32* %43, align 4, !dbg !18
  %45 = icmp eq i32 %44, 3, !dbg !18
  br i1 %45, label %assert_end52, label %assert_fail49, !dbg !18, !prof !19

assert_fail49:                                    ; preds = %assert_end48
  %46 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %46(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.7, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end52:                                     ; preds = %assert_end48
  %47 = getelementptr inbounds %1, %1* %ph_0185, i64 0, i32 3, i32 2, !dbg !18
  %48 = load i16, i16* %47, align 2, !dbg !18
  %49 = icmp eq i16 %48, 1, !dbg !18
  %50 = getelementptr inbounds %1, %1* %ph_0185, i64 0, i32 3, i32 1, !dbg !18
  %51 = load i8, i8* %50, align 1, !dbg !18
  %52 = icmp eq i8 %51, 32, !dbg !18
  %53 = getelementptr inbounds %1, %1* %ph_0185, i64 0, i32 3, i32 0, !dbg !18
  %54 = load i8, i8* %53, align 1, !dbg !18
  %55 = icmp eq i8 %54, 2, !dbg !18
  %56 = and i1 %52, %55, !dbg !18
  %57 = and i1 %49, %56, !dbg !18
  br i1 %57, label %assert_end54, label %assert_fail53, !dbg !18, !prof !19

assert_fail53:                                    ; preds = %assert_end52
  %58 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %58(i8* getelementptr inbounds ([235 x i8], [235 x i8]* @.str.8, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end54:                                     ; preds = %assert_end52
  %59 = load i64, i64* %default_function.ph_0.shape, align 8, !dbg !18, !tbaa !47
  %60 = trunc i64 %59 to i32, !dbg !18
  %61 = icmp eq i32 %60, 7, !dbg !18
  br i1 %61, label %assert_end56, label %assert_fail55, !dbg !18, !prof !19

assert_fail55:                                    ; preds = %assert_end54
  %62 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %62(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.9, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end56:                                     ; preds = %assert_end54
  %63 = getelementptr inbounds i64, i64* %default_function.ph_0.shape, i64 1, !dbg !18
  %64 = load i64, i64* %63, align 8, !dbg !18, !tbaa !57
  %65 = trunc i64 %64 to i32, !dbg !18
  %66 = icmp eq i32 %65, 10, !dbg !18
  br i1 %66, label %assert_end58, label %assert_fail57, !dbg !18, !prof !19

assert_fail57:                                    ; preds = %assert_end56
  %67 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %67(i8* getelementptr inbounds ([193 x i8], [193 x i8]* @.str.10, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end58:                                     ; preds = %assert_end56
  %68 = getelementptr inbounds i64, i64* %default_function.ph_0.shape, i64 2, !dbg !18
  %69 = load i64, i64* %68, align 8, !dbg !18, !tbaa !59
  %70 = trunc i64 %69 to i32, !dbg !18
  %71 = icmp eq i32 %70, 18, !dbg !18
  br i1 %71, label %assert_end60, label %assert_fail59, !dbg !18, !prof !19

assert_fail59:                                    ; preds = %assert_end58
  %72 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %72(i8* getelementptr inbounds ([193 x i8], [193 x i8]* @.str.11, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end60:                                     ; preds = %assert_end58
  %73 = icmp eq i64* %default_function.ph_0.strides, null, !dbg !18
  br i1 %73, label %if_end, label %if_then, !dbg !18, !prof !62

if_then:                                          ; preds = %assert_end60
  %74 = load i64, i64* %default_function.ph_0.strides, align 8, !dbg !18, !tbaa !63
  %75 = trunc i64 %74 to i32, !dbg !18
  %76 = icmp eq i32 %75, 180, !dbg !18
  %77 = getelementptr inbounds i64, i64* %default_function.ph_0.strides, i64 1, !dbg !18
  %78 = load i64, i64* %77, align 8, !dbg !18, !tbaa !73
  %79 = trunc i64 %78 to i32, !dbg !18
  %80 = icmp eq i32 %79, 18, !dbg !18
  %81 = getelementptr inbounds i64, i64* %default_function.ph_0.strides, i64 2, !dbg !18
  %82 = load i64, i64* %81, align 8, !dbg !18, !tbaa !75
  %83 = trunc i64 %82 to i32, !dbg !18
  %84 = icmp eq i32 %83, 1, !dbg !18
  %85 = and i1 %80, %84, !dbg !18
  %86 = and i1 %76, %85, !dbg !18
  br i1 %86, label %if_end, label %assert_fail61, !dbg !18, !prof !19

if_end:                                           ; preds = %assert_end60, %if_then
  %87 = getelementptr inbounds %1, %1* %ph_0185, i64 0, i32 6, !dbg !18
  %88 = load i64, i64* %87, align 8, !dbg !18
  %89 = icmp eq i64 %88, 0, !dbg !18
  br i1 %89, label %assert_end64, label %assert_fail63, !dbg !18, !prof !19

assert_fail61:                                    ; preds = %if_then
  %90 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %90(i8* getelementptr inbounds ([250 x i8], [250 x i8]* @.str.12, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail63:                                    ; preds = %if_end
  %91 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %91(i8* getelementptr inbounds ([196 x i8], [196 x i8]* @.str.13, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end64:                                     ; preds = %if_end
  %92 = getelementptr inbounds %1, %1* %ph_0185, i64 0, i32 1, i32 0, !dbg !18
  %93 = load i32, i32* %92, align 4, !dbg !18
  %94 = icmp eq i32 %93, 1, !dbg !18
  br i1 %94, label %assert_end66, label %assert_fail65, !dbg !18, !prof !19

assert_fail65:                                    ; preds = %assert_end64
  %95 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %95(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.14, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end66:                                     ; preds = %assert_end64
  %96 = getelementptr inbounds %1, %1* %ph_3186, i64 0, i32 2, !dbg !18
  %97 = load i32, i32* %96, align 4, !dbg !18
  %98 = icmp eq i32 %97, 3, !dbg !18
  br i1 %98, label %assert_end70, label %assert_fail67, !dbg !18, !prof !19

assert_fail67:                                    ; preds = %assert_end66
  %99 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %99(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.15, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end70:                                     ; preds = %assert_end66
  %100 = getelementptr inbounds %1, %1* %ph_3186, i64 0, i32 3, i32 2, !dbg !18
  %101 = load i16, i16* %100, align 2, !dbg !18
  %102 = icmp eq i16 %101, 1, !dbg !18
  %103 = getelementptr inbounds %1, %1* %ph_3186, i64 0, i32 3, i32 1, !dbg !18
  %104 = load i8, i8* %103, align 1, !dbg !18
  %105 = icmp eq i8 %104, 32, !dbg !18
  %106 = getelementptr inbounds %1, %1* %ph_3186, i64 0, i32 3, i32 0, !dbg !18
  %107 = load i8, i8* %106, align 1, !dbg !18
  %108 = icmp eq i8 %107, 2, !dbg !18
  %109 = and i1 %105, %108, !dbg !18
  %110 = and i1 %102, %109, !dbg !18
  br i1 %110, label %assert_end72, label %assert_fail71, !dbg !18, !prof !19

assert_fail71:                                    ; preds = %assert_end70
  %111 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %111(i8* getelementptr inbounds ([235 x i8], [235 x i8]* @.str.16, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end72:                                     ; preds = %assert_end70
  %112 = load i64, i64* %default_function.ph_3.shape, align 8, !dbg !18, !tbaa !78
  %113 = trunc i64 %112 to i32, !dbg !18
  %114 = icmp eq i32 %113, 7, !dbg !18
  br i1 %114, label %assert_end74, label %assert_fail73, !dbg !18, !prof !19

assert_fail73:                                    ; preds = %assert_end72
  %115 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %115(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.17, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end74:                                     ; preds = %assert_end72
  %116 = getelementptr inbounds i64, i64* %default_function.ph_3.shape, i64 1, !dbg !18
  %117 = load i64, i64* %116, align 8, !dbg !18, !tbaa !88
  %118 = trunc i64 %117 to i32, !dbg !18
  %119 = icmp eq i32 %118, 10, !dbg !18
  br i1 %119, label %assert_end76, label %assert_fail75, !dbg !18, !prof !19

assert_fail75:                                    ; preds = %assert_end74
  %120 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %120(i8* getelementptr inbounds ([193 x i8], [193 x i8]* @.str.18, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end76:                                     ; preds = %assert_end74
  %121 = getelementptr inbounds i64, i64* %default_function.ph_3.shape, i64 2, !dbg !18
  %122 = load i64, i64* %121, align 8, !dbg !18, !tbaa !90
  %123 = trunc i64 %122 to i32, !dbg !18
  %124 = icmp eq i32 %123, 18, !dbg !18
  br i1 %124, label %assert_end78, label %assert_fail77, !dbg !18, !prof !19

assert_fail77:                                    ; preds = %assert_end76
  %125 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %125(i8* getelementptr inbounds ([193 x i8], [193 x i8]* @.str.19, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end78:                                     ; preds = %assert_end76
  %126 = icmp eq i64* %default_function.ph_3.strides, null, !dbg !18
  br i1 %126, label %if_end80, label %if_then79, !dbg !18, !prof !62

if_then79:                                        ; preds = %assert_end78
  %127 = load i64, i64* %default_function.ph_3.strides, align 8, !dbg !18, !tbaa !93
  %128 = trunc i64 %127 to i32, !dbg !18
  %129 = icmp eq i32 %128, 180, !dbg !18
  %130 = getelementptr inbounds i64, i64* %default_function.ph_3.strides, i64 1, !dbg !18
  %131 = load i64, i64* %130, align 8, !dbg !18, !tbaa !103
  %132 = trunc i64 %131 to i32, !dbg !18
  %133 = icmp eq i32 %132, 18, !dbg !18
  %134 = getelementptr inbounds i64, i64* %default_function.ph_3.strides, i64 2, !dbg !18
  %135 = load i64, i64* %134, align 8, !dbg !18, !tbaa !105
  %136 = trunc i64 %135 to i32, !dbg !18
  %137 = icmp eq i32 %136, 1, !dbg !18
  %138 = and i1 %133, %137, !dbg !18
  %139 = and i1 %129, %138, !dbg !18
  br i1 %139, label %if_end80, label %assert_fail81, !dbg !18, !prof !19

if_end80:                                         ; preds = %assert_end78, %if_then79
  %140 = getelementptr inbounds %1, %1* %ph_3186, i64 0, i32 6, !dbg !18
  %141 = load i64, i64* %140, align 8, !dbg !18
  %142 = icmp eq i64 %141, 0, !dbg !18
  br i1 %142, label %assert_end84, label %assert_fail83, !dbg !18, !prof !19

assert_fail81:                                    ; preds = %if_then79
  %143 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %143(i8* getelementptr inbounds ([250 x i8], [250 x i8]* @.str.20, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail83:                                    ; preds = %if_end80
  %144 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %144(i8* getelementptr inbounds ([196 x i8], [196 x i8]* @.str.21, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end84:                                     ; preds = %if_end80
  %145 = getelementptr inbounds %1, %1* %ph_3186, i64 0, i32 1, i32 0, !dbg !18
  %146 = load i32, i32* %145, align 4, !dbg !18
  %147 = icmp eq i32 %146, 1, !dbg !18
  br i1 %147, label %assert_end86, label %assert_fail85, !dbg !18, !prof !19

assert_fail85:                                    ; preds = %assert_end84
  %148 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %148(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.22, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end86:                                     ; preds = %assert_end84
  %149 = getelementptr inbounds %1, %1* %ph_3186, i64 0, i32 1, i32 1, !dbg !18
  %150 = load i32, i32* %149, align 4, !dbg !18
  %151 = icmp eq i32 %dev_id, %150, !dbg !18
  br i1 %151, label %assert_end88, label %assert_fail87, !dbg !18, !prof !19

assert_fail87:                                    ; preds = %assert_end86
  %152 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %152(i8* getelementptr inbounds ([182 x i8], [182 x i8]* @.str.23, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end88:                                     ; preds = %assert_end86
  %153 = getelementptr inbounds %1, %1* %compute187, i64 0, i32 2, !dbg !18
  %154 = load i32, i32* %153, align 4, !dbg !18
  %155 = icmp eq i32 %154, 3, !dbg !18
  br i1 %155, label %assert_end92, label %assert_fail89, !dbg !18, !prof !19

assert_fail89:                                    ; preds = %assert_end88
  %156 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %156(i8* getelementptr inbounds ([113 x i8], [113 x i8]* @.str.24, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end92:                                     ; preds = %assert_end88
  %157 = getelementptr inbounds %1, %1* %compute187, i64 0, i32 3, i32 2, !dbg !18
  %158 = load i16, i16* %157, align 2, !dbg !18
  %159 = icmp eq i16 %158, 1, !dbg !18
  %160 = getelementptr inbounds %1, %1* %compute187, i64 0, i32 3, i32 1, !dbg !18
  %161 = load i8, i8* %160, align 1, !dbg !18
  %162 = icmp eq i8 %161, 32, !dbg !18
  %163 = getelementptr inbounds %1, %1* %compute187, i64 0, i32 3, i32 0, !dbg !18
  %164 = load i8, i8* %163, align 1, !dbg !18
  %165 = icmp eq i8 %164, 2, !dbg !18
  %166 = and i1 %162, %165, !dbg !18
  %167 = and i1 %159, %166, !dbg !18
  br i1 %167, label %assert_end94, label %assert_fail93, !dbg !18, !prof !19

assert_fail93:                                    ; preds = %assert_end92
  %168 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %168(i8* getelementptr inbounds ([247 x i8], [247 x i8]* @.str.25, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end94:                                     ; preds = %assert_end92
  %169 = load i64, i64* %default_function.compute.shape, align 8, !dbg !18, !tbaa !108
  %170 = trunc i64 %169 to i32, !dbg !18
  %171 = icmp eq i32 %170, 7, !dbg !18
  br i1 %171, label %assert_end96, label %assert_fail95, !dbg !18, !prof !19

assert_fail95:                                    ; preds = %assert_end94
  %172 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %172(i8* getelementptr inbounds ([200 x i8], [200 x i8]* @.str.26, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end96:                                     ; preds = %assert_end94
  %173 = getelementptr inbounds i64, i64* %default_function.compute.shape, i64 1, !dbg !18
  %174 = load i64, i64* %173, align 8, !dbg !18, !tbaa !118
  %175 = trunc i64 %174 to i32, !dbg !18
  %176 = icmp eq i32 %175, 10, !dbg !18
  br i1 %176, label %assert_end98, label %assert_fail97, !dbg !18, !prof !19

assert_fail97:                                    ; preds = %assert_end96
  %177 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %177(i8* getelementptr inbounds ([202 x i8], [202 x i8]* @.str.27, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end98:                                     ; preds = %assert_end96
  %178 = getelementptr inbounds i64, i64* %default_function.compute.shape, i64 2, !dbg !18
  %179 = load i64, i64* %178, align 8, !dbg !18, !tbaa !120
  %180 = trunc i64 %179 to i32, !dbg !18
  %181 = icmp eq i32 %180, 18, !dbg !18
  br i1 %181, label %assert_end100, label %assert_fail99, !dbg !18, !prof !19

assert_fail99:                                    ; preds = %assert_end98
  %182 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %182(i8* getelementptr inbounds ([202 x i8], [202 x i8]* @.str.28, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end100:                                    ; preds = %assert_end98
  %183 = icmp eq i64* %default_function.compute.strides, null, !dbg !18
  br i1 %183, label %if_end102, label %if_then101, !dbg !18, !prof !62

if_then101:                                       ; preds = %assert_end100
  %184 = load i64, i64* %default_function.compute.strides, align 8, !dbg !18, !tbaa !123
  %185 = trunc i64 %184 to i32, !dbg !18
  %186 = icmp eq i32 %185, 180, !dbg !18
  %187 = getelementptr inbounds i64, i64* %default_function.compute.strides, i64 1, !dbg !18
  %188 = load i64, i64* %187, align 8, !dbg !18, !tbaa !133
  %189 = trunc i64 %188 to i32, !dbg !18
  %190 = icmp eq i32 %189, 18, !dbg !18
  %191 = getelementptr inbounds i64, i64* %default_function.compute.strides, i64 2, !dbg !18
  %192 = load i64, i64* %191, align 8, !dbg !18, !tbaa !135
  %193 = trunc i64 %192 to i32, !dbg !18
  %194 = icmp eq i32 %193, 1, !dbg !18
  %195 = and i1 %190, %194, !dbg !18
  %196 = and i1 %186, %195, !dbg !18
  br i1 %196, label %if_end102, label %assert_fail103, !dbg !18, !prof !19

if_end102:                                        ; preds = %assert_end100, %if_then101
  %197 = getelementptr inbounds %1, %1* %compute187, i64 0, i32 6, !dbg !18
  %198 = load i64, i64* %197, align 8, !dbg !18
  %199 = icmp eq i64 %198, 0, !dbg !18
  br i1 %199, label %assert_end106, label %assert_fail105, !dbg !18, !prof !19

assert_fail103:                                   ; preds = %if_then101
  %200 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %200(i8* getelementptr inbounds ([262 x i8], [262 x i8]* @.str.29, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail105:                                   ; preds = %if_end102
  %201 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %201(i8* getelementptr inbounds ([205 x i8], [205 x i8]* @.str.30, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end106:                                    ; preds = %if_end102
  %202 = getelementptr inbounds %1, %1* %compute187, i64 0, i32 1, i32 0, !dbg !18
  %203 = load i32, i32* %202, align 4, !dbg !18
  %204 = icmp eq i32 %203, 1, !dbg !18
  br i1 %204, label %assert_end108, label %assert_fail107, !dbg !18, !prof !19

assert_fail107:                                   ; preds = %assert_end106
  %205 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %205(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.31, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end108:                                    ; preds = %assert_end106
  %206 = getelementptr inbounds %1, %1* %compute187, i64 0, i32 1, i32 1, !dbg !18
  %207 = load i32, i32* %206, align 4, !dbg !18
  %208 = icmp eq i32 %dev_id, %207, !dbg !18
  br i1 %208, label %assert_end110, label %assert_fail109, !dbg !18, !prof !19

assert_fail109:                                   ; preds = %assert_end108
  %209 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %209(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.32, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end110:                                    ; preds = %assert_end108
  %210 = getelementptr inbounds %1, %1* %compute4188, i64 0, i32 2, !dbg !18
  %211 = load i32, i32* %210, align 4, !dbg !18
  %212 = icmp eq i32 %211, 3, !dbg !18
  br i1 %212, label %assert_end114, label %assert_fail111, !dbg !18, !prof !19

assert_fail111:                                   ; preds = %assert_end110
  %213 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %213(i8* getelementptr inbounds ([113 x i8], [113 x i8]* @.str.24, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end114:                                    ; preds = %assert_end110
  %214 = getelementptr inbounds %1, %1* %compute4188, i64 0, i32 3, i32 2, !dbg !18
  %215 = load i16, i16* %214, align 2, !dbg !18
  %216 = icmp eq i16 %215, 1, !dbg !18
  %217 = getelementptr inbounds %1, %1* %compute4188, i64 0, i32 3, i32 1, !dbg !18
  %218 = load i8, i8* %217, align 1, !dbg !18
  %219 = icmp eq i8 %218, 32, !dbg !18
  %220 = getelementptr inbounds %1, %1* %compute4188, i64 0, i32 3, i32 0, !dbg !18
  %221 = load i8, i8* %220, align 1, !dbg !18
  %222 = icmp eq i8 %221, 2, !dbg !18
  %223 = and i1 %219, %222, !dbg !18
  %224 = and i1 %216, %223, !dbg !18
  br i1 %224, label %assert_end116, label %assert_fail115, !dbg !18, !prof !19

assert_fail115:                                   ; preds = %assert_end114
  %225 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %225(i8* getelementptr inbounds ([247 x i8], [247 x i8]* @.str.25, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end116:                                    ; preds = %assert_end114
  %226 = load i64, i64* %default_function.compute.shape21, align 8, !dbg !18, !tbaa !138
  %227 = trunc i64 %226 to i32, !dbg !18
  %228 = icmp eq i32 %227, 7, !dbg !18
  br i1 %228, label %assert_end118, label %assert_fail117, !dbg !18, !prof !19

assert_fail117:                                   ; preds = %assert_end116
  %229 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %229(i8* getelementptr inbounds ([200 x i8], [200 x i8]* @.str.26, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end118:                                    ; preds = %assert_end116
  %230 = getelementptr inbounds i64, i64* %default_function.compute.shape21, i64 1, !dbg !18
  %231 = load i64, i64* %230, align 8, !dbg !18, !tbaa !148
  %232 = trunc i64 %231 to i32, !dbg !18
  %233 = icmp eq i32 %232, 10, !dbg !18
  br i1 %233, label %assert_end120, label %assert_fail119, !dbg !18, !prof !19

assert_fail119:                                   ; preds = %assert_end118
  %234 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %234(i8* getelementptr inbounds ([202 x i8], [202 x i8]* @.str.27, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end120:                                    ; preds = %assert_end118
  %235 = getelementptr inbounds i64, i64* %default_function.compute.shape21, i64 2, !dbg !18
  %236 = load i64, i64* %235, align 8, !dbg !18, !tbaa !150
  %237 = trunc i64 %236 to i32, !dbg !18
  %238 = icmp eq i32 %237, 18, !dbg !18
  br i1 %238, label %assert_end122, label %assert_fail121, !dbg !18, !prof !19

assert_fail121:                                   ; preds = %assert_end120
  %239 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %239(i8* getelementptr inbounds ([202 x i8], [202 x i8]* @.str.28, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end122:                                    ; preds = %assert_end120
  %240 = icmp eq i64* %default_function.compute.strides22, null, !dbg !18
  br i1 %240, label %if_end124, label %if_then123, !dbg !18, !prof !62

if_then123:                                       ; preds = %assert_end122
  %241 = load i64, i64* %default_function.compute.strides22, align 8, !dbg !18, !tbaa !153
  %242 = trunc i64 %241 to i32, !dbg !18
  %243 = icmp eq i32 %242, 180, !dbg !18
  %244 = getelementptr inbounds i64, i64* %default_function.compute.strides22, i64 1, !dbg !18
  %245 = load i64, i64* %244, align 8, !dbg !18, !tbaa !163
  %246 = trunc i64 %245 to i32, !dbg !18
  %247 = icmp eq i32 %246, 18, !dbg !18
  %248 = getelementptr inbounds i64, i64* %default_function.compute.strides22, i64 2, !dbg !18
  %249 = load i64, i64* %248, align 8, !dbg !18, !tbaa !165
  %250 = trunc i64 %249 to i32, !dbg !18
  %251 = icmp eq i32 %250, 1, !dbg !18
  %252 = and i1 %247, %251, !dbg !18
  %253 = and i1 %243, %252, !dbg !18
  br i1 %253, label %if_end124, label %assert_fail125, !dbg !18, !prof !19

if_end124:                                        ; preds = %assert_end122, %if_then123
  %254 = getelementptr inbounds %1, %1* %compute4188, i64 0, i32 6, !dbg !18
  %255 = load i64, i64* %254, align 8, !dbg !18
  %256 = icmp eq i64 %255, 0, !dbg !18
  br i1 %256, label %assert_end128, label %assert_fail127, !dbg !18, !prof !19

assert_fail125:                                   ; preds = %if_then123
  %257 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %257(i8* getelementptr inbounds ([262 x i8], [262 x i8]* @.str.29, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail127:                                   ; preds = %if_end124
  %258 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %258(i8* getelementptr inbounds ([205 x i8], [205 x i8]* @.str.30, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end128:                                    ; preds = %if_end124
  %259 = getelementptr inbounds %1, %1* %compute4188, i64 0, i32 1, i32 0, !dbg !18
  %260 = load i32, i32* %259, align 4, !dbg !18
  %261 = icmp eq i32 %260, 1, !dbg !18
  br i1 %261, label %assert_end130, label %assert_fail129, !dbg !18, !prof !19

assert_fail129:                                   ; preds = %assert_end128
  %262 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %262(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.31, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end130:                                    ; preds = %assert_end128
  %263 = getelementptr inbounds %1, %1* %compute4188, i64 0, i32 1, i32 1, !dbg !18
  %264 = load i32, i32* %263, align 4, !dbg !18
  %265 = icmp eq i32 %dev_id, %264, !dbg !18
  br i1 %265, label %assert_end132, label %assert_fail131, !dbg !18, !prof !19

assert_fail131:                                   ; preds = %assert_end130
  %266 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %266(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.32, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end132:                                    ; preds = %assert_end130
  %267 = getelementptr inbounds %1, %1* %compute5189, i64 0, i32 2, !dbg !18
  %268 = load i32, i32* %267, align 4, !dbg !18
  %269 = icmp eq i32 %268, 3, !dbg !18
  br i1 %269, label %assert_end136, label %assert_fail133, !dbg !18, !prof !19

assert_fail133:                                   ; preds = %assert_end132
  %270 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %270(i8* getelementptr inbounds ([113 x i8], [113 x i8]* @.str.24, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end136:                                    ; preds = %assert_end132
  %271 = getelementptr inbounds %1, %1* %compute5189, i64 0, i32 3, i32 2, !dbg !18
  %272 = load i16, i16* %271, align 2, !dbg !18
  %273 = icmp eq i16 %272, 1, !dbg !18
  %274 = getelementptr inbounds %1, %1* %compute5189, i64 0, i32 3, i32 1, !dbg !18
  %275 = load i8, i8* %274, align 1, !dbg !18
  %276 = icmp eq i8 %275, 32, !dbg !18
  %277 = getelementptr inbounds %1, %1* %compute5189, i64 0, i32 3, i32 0, !dbg !18
  %278 = load i8, i8* %277, align 1, !dbg !18
  %279 = icmp eq i8 %278, 2, !dbg !18
  %280 = and i1 %276, %279, !dbg !18
  %281 = and i1 %273, %280, !dbg !18
  br i1 %281, label %assert_end138, label %assert_fail137, !dbg !18, !prof !19

assert_fail137:                                   ; preds = %assert_end136
  %282 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %282(i8* getelementptr inbounds ([247 x i8], [247 x i8]* @.str.25, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end138:                                    ; preds = %assert_end136
  %283 = load i64, i64* %default_function.compute.shape28, align 8, !dbg !18, !tbaa !168
  %284 = trunc i64 %283 to i32, !dbg !18
  %285 = icmp eq i32 %284, 7, !dbg !18
  br i1 %285, label %assert_end140, label %assert_fail139, !dbg !18, !prof !19

assert_fail139:                                   ; preds = %assert_end138
  %286 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %286(i8* getelementptr inbounds ([200 x i8], [200 x i8]* @.str.26, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end140:                                    ; preds = %assert_end138
  %287 = getelementptr inbounds i64, i64* %default_function.compute.shape28, i64 1, !dbg !18
  %288 = load i64, i64* %287, align 8, !dbg !18, !tbaa !178
  %289 = trunc i64 %288 to i32, !dbg !18
  %290 = icmp eq i32 %289, 10, !dbg !18
  br i1 %290, label %assert_end142, label %assert_fail141, !dbg !18, !prof !19

assert_fail141:                                   ; preds = %assert_end140
  %291 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %291(i8* getelementptr inbounds ([202 x i8], [202 x i8]* @.str.27, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end142:                                    ; preds = %assert_end140
  %292 = getelementptr inbounds i64, i64* %default_function.compute.shape28, i64 2, !dbg !18
  %293 = load i64, i64* %292, align 8, !dbg !18, !tbaa !180
  %294 = trunc i64 %293 to i32, !dbg !18
  %295 = icmp eq i32 %294, 18, !dbg !18
  br i1 %295, label %assert_end144, label %assert_fail143, !dbg !18, !prof !19

assert_fail143:                                   ; preds = %assert_end142
  %296 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %296(i8* getelementptr inbounds ([202 x i8], [202 x i8]* @.str.28, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end144:                                    ; preds = %assert_end142
  %297 = icmp eq i64* %default_function.compute.strides29, null, !dbg !18
  br i1 %297, label %if_end146, label %if_then145, !dbg !18, !prof !62

if_then145:                                       ; preds = %assert_end144
  %298 = load i64, i64* %default_function.compute.strides29, align 8, !dbg !18, !tbaa !183
  %299 = trunc i64 %298 to i32, !dbg !18
  %300 = icmp eq i32 %299, 180, !dbg !18
  %301 = getelementptr inbounds i64, i64* %default_function.compute.strides29, i64 1, !dbg !18
  %302 = load i64, i64* %301, align 8, !dbg !18, !tbaa !193
  %303 = trunc i64 %302 to i32, !dbg !18
  %304 = icmp eq i32 %303, 18, !dbg !18
  %305 = getelementptr inbounds i64, i64* %default_function.compute.strides29, i64 2, !dbg !18
  %306 = load i64, i64* %305, align 8, !dbg !18, !tbaa !195
  %307 = trunc i64 %306 to i32, !dbg !18
  %308 = icmp eq i32 %307, 1, !dbg !18
  %309 = and i1 %304, %308, !dbg !18
  %310 = and i1 %300, %309, !dbg !18
  br i1 %310, label %if_end146, label %assert_fail147, !dbg !18, !prof !19

if_end146:                                        ; preds = %assert_end144, %if_then145
  %311 = getelementptr inbounds %1, %1* %compute5189, i64 0, i32 6, !dbg !18
  %312 = load i64, i64* %311, align 8, !dbg !18
  %313 = icmp eq i64 %312, 0, !dbg !18
  br i1 %313, label %assert_end150, label %assert_fail149, !dbg !18, !prof !19

assert_fail147:                                   ; preds = %if_then145
  %314 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %314(i8* getelementptr inbounds ([262 x i8], [262 x i8]* @.str.29, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail149:                                   ; preds = %if_end146
  %315 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %315(i8* getelementptr inbounds ([205 x i8], [205 x i8]* @.str.30, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end150:                                    ; preds = %if_end146
  %316 = getelementptr inbounds %1, %1* %compute5189, i64 0, i32 1, i32 0, !dbg !18
  %317 = load i32, i32* %316, align 4, !dbg !18
  %318 = icmp eq i32 %317, 1, !dbg !18
  br i1 %318, label %assert_end152, label %assert_fail151, !dbg !18, !prof !19

assert_fail151:                                   ; preds = %assert_end150
  %319 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %319(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.31, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end152:                                    ; preds = %assert_end150
  %320 = getelementptr inbounds %1, %1* %compute5189, i64 0, i32 1, i32 1, !dbg !18
  %321 = load i32, i32* %320, align 4, !dbg !18
  %322 = icmp eq i32 %dev_id, %321, !dbg !18
  br i1 %322, label %assert_end154, label %assert_fail153, !dbg !18, !prof !19

assert_fail153:                                   ; preds = %assert_end152
  %323 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %323(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.32, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end154:                                    ; preds = %assert_end152
  %324 = getelementptr inbounds %1, %1* %compute6190, i64 0, i32 2, !dbg !18
  %325 = load i32, i32* %324, align 4, !dbg !18
  %326 = icmp eq i32 %325, 3, !dbg !18
  br i1 %326, label %assert_end158, label %assert_fail155, !dbg !18, !prof !19

assert_fail155:                                   ; preds = %assert_end154
  %327 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %327(i8* getelementptr inbounds ([113 x i8], [113 x i8]* @.str.24, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end158:                                    ; preds = %assert_end154
  %328 = getelementptr inbounds %1, %1* %compute6190, i64 0, i32 3, i32 2, !dbg !18
  %329 = load i16, i16* %328, align 2, !dbg !18
  %330 = icmp eq i16 %329, 1, !dbg !18
  %331 = getelementptr inbounds %1, %1* %compute6190, i64 0, i32 3, i32 1, !dbg !18
  %332 = load i8, i8* %331, align 1, !dbg !18
  %333 = icmp eq i8 %332, 32, !dbg !18
  %334 = getelementptr inbounds %1, %1* %compute6190, i64 0, i32 3, i32 0, !dbg !18
  %335 = load i8, i8* %334, align 1, !dbg !18
  %336 = icmp eq i8 %335, 2, !dbg !18
  %337 = and i1 %333, %336, !dbg !18
  %338 = and i1 %330, %337, !dbg !18
  br i1 %338, label %assert_end160, label %assert_fail159, !dbg !18, !prof !19

assert_fail159:                                   ; preds = %assert_end158
  %339 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %339(i8* getelementptr inbounds ([247 x i8], [247 x i8]* @.str.25, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end160:                                    ; preds = %assert_end158
  %340 = load i64, i64* %default_function.compute.shape35, align 8, !dbg !18, !tbaa !198
  %341 = trunc i64 %340 to i32, !dbg !18
  %342 = icmp eq i32 %341, 7, !dbg !18
  br i1 %342, label %assert_end162, label %assert_fail161, !dbg !18, !prof !19

assert_fail161:                                   ; preds = %assert_end160
  %343 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %343(i8* getelementptr inbounds ([200 x i8], [200 x i8]* @.str.26, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end162:                                    ; preds = %assert_end160
  %344 = getelementptr inbounds i64, i64* %default_function.compute.shape35, i64 1, !dbg !18
  %345 = load i64, i64* %344, align 8, !dbg !18, !tbaa !208
  %346 = trunc i64 %345 to i32, !dbg !18
  %347 = icmp eq i32 %346, 10, !dbg !18
  br i1 %347, label %assert_end164, label %assert_fail163, !dbg !18, !prof !19

assert_fail163:                                   ; preds = %assert_end162
  %348 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %348(i8* getelementptr inbounds ([202 x i8], [202 x i8]* @.str.27, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end164:                                    ; preds = %assert_end162
  %349 = getelementptr inbounds i64, i64* %default_function.compute.shape35, i64 2, !dbg !18
  %350 = load i64, i64* %349, align 8, !dbg !18, !tbaa !210
  %351 = trunc i64 %350 to i32, !dbg !18
  %352 = icmp eq i32 %351, 18, !dbg !18
  br i1 %352, label %assert_end166, label %assert_fail165, !dbg !18, !prof !19

assert_fail165:                                   ; preds = %assert_end164
  %353 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %353(i8* getelementptr inbounds ([202 x i8], [202 x i8]* @.str.28, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end166:                                    ; preds = %assert_end164
  %354 = icmp eq i64* %default_function.compute.strides36, null, !dbg !18
  br i1 %354, label %if_end168, label %if_then167, !dbg !18, !prof !62

if_then167:                                       ; preds = %assert_end166
  %355 = load i64, i64* %default_function.compute.strides36, align 8, !dbg !18, !tbaa !213
  %356 = trunc i64 %355 to i32, !dbg !18
  %357 = icmp eq i32 %356, 180, !dbg !18
  %358 = getelementptr inbounds i64, i64* %default_function.compute.strides36, i64 1, !dbg !18
  %359 = load i64, i64* %358, align 8, !dbg !18, !tbaa !223
  %360 = trunc i64 %359 to i32, !dbg !18
  %361 = icmp eq i32 %360, 18, !dbg !18
  %362 = getelementptr inbounds i64, i64* %default_function.compute.strides36, i64 2, !dbg !18
  %363 = load i64, i64* %362, align 8, !dbg !18, !tbaa !225
  %364 = trunc i64 %363 to i32, !dbg !18
  %365 = icmp eq i32 %364, 1, !dbg !18
  %366 = and i1 %361, %365, !dbg !18
  %367 = and i1 %357, %366, !dbg !18
  br i1 %367, label %if_end168, label %assert_fail169, !dbg !18, !prof !19

if_end168:                                        ; preds = %assert_end166, %if_then167
  %368 = getelementptr inbounds %1, %1* %compute6190, i64 0, i32 6, !dbg !18
  %369 = load i64, i64* %368, align 8, !dbg !18
  %370 = icmp eq i64 %369, 0, !dbg !18
  br i1 %370, label %assert_end172, label %assert_fail171, !dbg !18, !prof !19

assert_fail169:                                   ; preds = %if_then167
  %371 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %371(i8* getelementptr inbounds ([262 x i8], [262 x i8]* @.str.29, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail171:                                   ; preds = %if_end168
  %372 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %372(i8* getelementptr inbounds ([205 x i8], [205 x i8]* @.str.30, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end172:                                    ; preds = %if_end168
  %373 = getelementptr inbounds %1, %1* %compute6190, i64 0, i32 1, i32 0, !dbg !18
  %374 = load i32, i32* %373, align 4, !dbg !18
  %375 = icmp eq i32 %374, 1, !dbg !18
  br i1 %375, label %assert_end174, label %assert_fail173, !dbg !18, !prof !19

assert_fail173:                                   ; preds = %assert_end172
  %376 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %376(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.31, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end174:                                    ; preds = %assert_end172
  %377 = getelementptr inbounds %1, %1* %compute6190, i64 0, i32 1, i32 1, !dbg !18
  %378 = load i32, i32* %377, align 4, !dbg !18
  %379 = icmp eq i32 %dev_id, %378, !dbg !18
  br i1 %379, label %assert_end176, label %assert_fail175, !dbg !18, !prof !19

assert_fail175:                                   ; preds = %assert_end174
  %380 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %380(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.32, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end176:                                    ; preds = %assert_end174
  %381 = call fastcc i32 @default_function_compute_(i8* nonnull %stack_value, float* %compute_void_ptr193, i32* nonnull %stack_tcode184.sub, float* %compute_void_ptr16194, float* %compute_void_ptr23195, float* %compute_void_ptr30196, float* %ph_0_void_ptr191, float* %ph_3_void_ptr192), !dbg !18
  ret i32 %381, !dbg !18
}

; Function Attrs: nounwind willreturn
declare void @llvm.assume(i1) #1

; Function Attrs: noinline
define internal fastcc i32 @default_function_compute_(i8* noalias %0, float* noalias align 64 %1, i32* noalias %2, float* noalias align 64 %3, float* noalias align 64 %4, float* noalias align 64 %5, float* noalias align 64 %6, float* noalias align 64 %7) unnamed_addr #2 {
entry:
  %8 = alloca i8*, align 8
  %9 = bitcast i8* %0 to %0*
  %10 = bitcast i8* %0 to float**
  store float* %1, float** %10, align 8
  %11 = getelementptr inbounds i8, i8* %0, i64 8
  %12 = bitcast i8* %11 to float**
  store float* %3, float** %12, align 8
  %13 = getelementptr inbounds i8, i8* %0, i64 16
  %14 = bitcast i8* %13 to float**
  store float* %4, float** %14, align 8
  %15 = getelementptr inbounds i8, i8* %0, i64 24
  %16 = bitcast i8* %15 to float**
  store float* %5, float** %16, align 8
  %17 = bitcast i32* %2 to <4 x i32>*
  store <4 x i32> <i32 3, i32 3, i32 3, i32 3>, <4 x i32>* %17, align 4, !tbaa !228
  %18 = getelementptr inbounds i8, i8* %0, i64 32
  %19 = bitcast i8* %18 to float**
  store float* %6, float** %19, align 8
  %20 = getelementptr inbounds i32, i32* %2, i64 4
  store i32 3, i32* %20, align 4, !tbaa !237
  %21 = getelementptr inbounds i8, i8* %0, i64 40
  %22 = bitcast i8* %21 to float**
  store float* %7, float** %22, align 8
  %23 = getelementptr inbounds i32, i32* %2, i64 5
  store i32 3, i32* %23, align 4, !tbaa !241
  %24 = getelementptr inbounds i8, i8* %0, i64 48
  %25 = bitcast i8* %24 to %0*
  %26 = getelementptr inbounds i32, i32* %2, i64 6
  %27 = load i32 (i8*, %0*, i32*, i32, %0*, i32*)*, i32 (i8*, %0*, i32*, i32, %0*, i32*)** @__TVMFuncCall, align 8, !tbaa !20
  %28 = load i8*, i8** @.tvm_func.default_function_kernel, align 8
  %29 = icmp eq i8* %28, null
  br i1 %29, label %handle_init, label %handle_init_end, !prof !62

handle_init:                                      ; preds = %entry
  %30 = load i8*, i8** @__tvm_module_ctx, align 8, !tbaa !20
  %31 = load i32 (i8*, i8*, i8**)*, i32 (i8*, i8*, i8**)** @__TVMBackendGetFuncFromEnv, align 8, !tbaa !20
  %32 = call i32 %31(i8* %30, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.33, i64 0, i64 0), i8** nonnull %8)
  %33 = icmp eq i32 %32, 0
  br i1 %33, label %call_end, label %call_fail, !prof !19

handle_init_end:                                  ; preds = %entry, %call_end
  %34 = phi i8* [ %28, %entry ], [ %37, %call_end ]
  %35 = call i32 %27(i8* %34, %0* %9, i32* nonnull %2, i32 6, %0* nonnull %25, i32* nonnull %26)
  %36 = icmp eq i32 %35, 0
  br i1 %36, label %call_end2, label %call_fail, !prof !19

call_fail:                                        ; preds = %call_end2, %handle_init_end, %handle_init
  %merge = phi i32 [ %32, %handle_init ], [ %35, %handle_init_end ], [ 0, %call_end2 ]
  ret i32 %merge

call_end:                                         ; preds = %handle_init
  %37 = load i8*, i8** %8, align 8
  store i8* %37, i8** @.tvm_func.default_function_kernel, align 8
  br label %handle_init_end

call_end2:                                        ; preds = %handle_init_end
  %38 = bitcast i8* %24 to i64*
  %39 = load i64, i64* %38, align 8
  %kernel_error_code = trunc i64 %39 to i32
  %40 = icmp eq i32 %kernel_error_code, 0
  br i1 %40, label %call_fail, label %assert_fail, !prof !19

assert_fail:                                      ; preds = %call_end2
  %41 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !20
  call void %41(i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.34, i64 0, i64 0))
  ret i32 -1
}

; Function Attrs: nounwind readnone
define weak dso_local i16 @__truncsfhf2(float %a0) local_unnamed_addr #3 section ".text.tvm.fp16.conv" {
b0:
  %v0 = bitcast float %a0 to i32
  %v1 = and i32 %v0, 2147483647
  %v2 = add nsw i32 %v1, -947912704
  %v3 = add nsw i32 %v1, -1199570944
  %v4 = icmp ult i32 %v2, %v3
  br i1 %v4, label %b1, label %b5

b1:                                               ; preds = %b0
  %v5 = lshr i32 %v0, 13
  %v6 = and i32 %v5, 65535
  %v7 = add nuw nsw i32 %v6, -114688
  %v8 = and i32 %v0, 8191
  %v9 = icmp ugt i32 %v8, 4096
  br i1 %v9, label %b2, label %b3

b2:                                               ; preds = %b1
  %v10 = add nuw nsw i32 %v6, -114687
  br label %b13

b3:                                               ; preds = %b1
  %v11 = icmp eq i32 %v8, 4096
  br i1 %v11, label %b4, label %b13

b4:                                               ; preds = %b3
  %v12 = and i32 %v7, 65535
  %v13 = and i32 %v5, 1
  %v14 = add nuw nsw i32 %v12, %v13
  br label %b13

b5:                                               ; preds = %b0
  %v15 = icmp ugt i32 %v1, 2139095040
  br i1 %v15, label %b6, label %b7

b6:                                               ; preds = %b5
  %v16 = lshr i32 %v0, 13
  %v17 = and i32 %v16, 511
  %v18 = or i32 %v17, 32256
  br label %b13

b7:                                               ; preds = %b5
  %v19 = icmp ugt i32 %v1, 1199570943
  br i1 %v19, label %b13, label %b8

b8:                                               ; preds = %b7
  %v20 = icmp ult i32 %v1, 754974720
  br i1 %v20, label %b13, label %b9

b9:                                               ; preds = %b8
  %v21 = lshr i32 %v1, 23
  %v22 = sub nsw i32 113, %v21
  %v23 = and i32 %v0, 8388607
  %v24 = or i32 %v23, 8388608
  %v25 = add nsw i32 %v21, -81
  %v26 = shl i32 %v24, %v25
  %v27 = icmp ne i32 %v26, 0
  %v28 = lshr i32 %v24, %v22
  %v29 = zext i1 %v27 to i32
  %v30 = lshr i32 %v28, 13
  %v31 = and i32 %v28, 8191
  %v32 = or i32 %v31, %v29
  %v33 = icmp ugt i32 %v32, 4096
  br i1 %v33, label %b10, label %b11

b10:                                              ; preds = %b9
  %v34 = add nuw nsw i32 %v30, 1
  br label %b13

b11:                                              ; preds = %b9
  %v35 = icmp eq i32 %v32, 4096
  br i1 %v35, label %b12, label %b13

b12:                                              ; preds = %b11
  %v36 = and i32 %v30, 1
  %v37 = add nuw nsw i32 %v36, %v30
  br label %b13

b13:                                              ; preds = %b12, %b11, %b10, %b8, %b7, %b6, %b4, %b3, %b2
  %v38 = phi i32 [ %v18, %b6 ], [ %v10, %b2 ], [ %v14, %b4 ], [ %v7, %b3 ], [ 31744, %b7 ], [ 0, %b8 ], [ %v34, %b10 ], [ %v37, %b12 ], [ %v30, %b11 ]
  %v39 = lshr i32 %v0, 16
  %v40 = and i32 %v39, 32768
  %v41 = or i32 %v38, %v40
  %vlast = trunc i32 %v41 to i16
  ret i16 %vlast
}

; Function Attrs: nounwind readnone
define weak dso_local float @__extendhfsf2(i16 %a0) local_unnamed_addr #3 section ".text.tvm.fp16.conv" {
b0:
  %v1 = and i16 %a0, 32767
  %v2 = zext i16 %v1 to i32
  %v3 = add nsw i16 %v1, -1024
  %v4 = icmp ult i16 %v3, 30720
  br i1 %v4, label %b1, label %b2

b1:                                               ; preds = %b0
  %v5 = shl nuw nsw i32 %v2, 13
  %v6 = add nuw nsw i32 %v5, 939524096
  br label %b6

b2:                                               ; preds = %b0
  %v7 = icmp ugt i16 %v1, 31743
  br i1 %v7, label %b3, label %b4

b3:                                               ; preds = %b2
  %v8 = shl nuw nsw i32 %v2, 13
  %v9 = or i32 %v8, 2139095040
  br label %b6

b4:                                               ; preds = %b2
  %v10 = icmp eq i16 %v1, 0
  br i1 %v10, label %b6, label %b5

b5:                                               ; preds = %b4
  %v11 = icmp ult i16 %v1, 256
  %v12 = lshr i32 %v2, 8
  %v13 = select i1 %v11, i32 %v2, i32 %v12
  %v14 = select i1 %v11, i32 32, i32 24
  %v15 = icmp ult i32 %v13, 16
  %v16 = lshr i32 %v13, 4
  %v17 = add nsw i32 %v14, -4
  %v18 = select i1 %v15, i32 %v13, i32 %v16
  %v19 = select i1 %v15, i32 %v14, i32 %v17
  %v20 = icmp ult i32 %v18, 4
  %v21 = lshr i32 %v18, 2
  %v22 = add nsw i32 %v19, -2
  %v23 = select i1 %v20, i32 %v18, i32 %v21
  %v24 = select i1 %v20, i32 %v19, i32 %v22
  %v25 = icmp ult i32 %v23, 2
  %v26 = sub nsw i32 0, %v23
  %v27 = select i1 %v25, i32 %v26, i32 -2
  %v28 = add nsw i32 %v27, %v24
  %v29 = add nsw i32 %v28, -8
  %v30 = shl i32 %v2, %v29
  %v31 = xor i32 %v30, 8388608
  %v32 = shl i32 %v28, 23
  %v33 = sub i32 1124073472, %v32
  %v34 = or i32 %v31, %v33
  br label %b6

b6:                                               ; preds = %b5, %b4, %b3, %b1
  %v35 = phi i32 [ %v6, %b1 ], [ %v9, %b3 ], [ %v34, %b5 ], [ 0, %b4 ]
  %v36 = and i16 %a0, -32768
  %v37 = zext i16 %v36 to i32
  %v38 = shl nuw i32 %v37, 16
  %v39 = or i32 %v35, %v38
  %v40 = bitcast i32 %v39 to float
  ret float %v40
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.value(metadata, metadata, metadata) #4

attributes #0 = { "target-cpu"="generic" }
attributes #1 = { nounwind willreturn }
attributes #2 = { noinline "target-cpu"="generic" }
attributes #3 = { nounwind readnone "target-cpu"="generic" "target-features" }
attributes #4 = { nounwind readnone speculatable willreturn }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "TVM", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2)
!1 = !DIFile(filename: "main.tir", directory: ".")
!2 = !{}
!3 = !{i32 2, !"tvm_target", !"llvm -mtriple=x86_64-pc-linux-gnu"}
!4 = !{i32 4, !"Debug Info Version", i32 3}
!5 = distinct !DISubprogram(name: "main.tir", scope: !1, file: !1, type: !6, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !11)
!6 = !DISubroutineType(types: !7)
!7 = !{!8, !9, !10, !8, !9, !10, !9}
!8 = !DIBasicType(name: "int32", size: 32, encoding: DW_ATE_signed)
!9 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null)
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8)
!11 = !{!12, !13, !14, !15, !16, !17}
!12 = !DILocalVariable(name: "arg1", arg: 1, scope: !5, file: !1, type: !9)
!13 = !DILocalVariable(name: "arg2", arg: 2, scope: !5, file: !1, type: !10)
!14 = !DILocalVariable(name: "arg3", arg: 3, scope: !5, file: !1, type: !8)
!15 = !DILocalVariable(name: "arg4", arg: 4, scope: !5, file: !1, type: !9)
!16 = !DILocalVariable(name: "arg5", arg: 5, scope: !5, file: !1, type: !10)
!17 = !DILocalVariable(name: "arg6", arg: 6, scope: !5, file: !1, type: !9)
!18 = !DILocation(line: 0, scope: !5)
!19 = !{!"branch_weights", i32 1048576, i32 1}
!20 = !{!21, !21, i64 0}
!21 = !{!"ctx_ptr", !22, i64 0}
!22 = !{!"tvm-tbaa"}
!23 = !{!24, !24, i64 0}
!24 = !{!"0x44caab0.w4.b0", !25, i64 0}
!25 = !{!"0x44caab0.w8.b0", !26, i64 0}
!26 = !{!"0x44caab0.w16.b0", !27, i64 0}
!27 = !{!"0x44caab0.w32.b0", !28, i64 0}
!28 = !{!"0x44caab0.w64.b0", !29, i64 0}
!29 = !{!"0x44caab0.w128.b0", !30, i64 0}
!30 = !{!"0x44caab0.w256.b0", !31, i64 0}
!31 = !{!"0x44caab0.w512.b0", !32, i64 0}
!32 = !{!"0x44caab0.w1024.b0", !33, i64 0}
!33 = !{!"0x44caab0", !22, i64 0}
!34 = !{!35, !35, i64 0}
!35 = !{!"0x44caab0.w4.b4", !25, i64 0}
!36 = !{!37, !37, i64 0}
!37 = !{!"0x44caab0.w4.b8", !38, i64 0}
!38 = !{!"0x44caab0.w8.b8", !26, i64 0}
!39 = !{!40, !40, i64 0}
!40 = !{!"0x44caab0.w4.b12", !38, i64 0}
!41 = !{!42, !42, i64 0}
!42 = !{!"0x44caab0.w4.b16", !43, i64 0}
!43 = !{!"0x44caab0.w8.b16", !44, i64 0}
!44 = !{!"0x44caab0.w16.b16", !27, i64 0}
!45 = !{!46, !46, i64 0}
!46 = !{!"0x44caab0.w4.b20", !43, i64 0}
!47 = !{!48, !48, i64 0}
!48 = !{!"0x437d8f0.w8.b0", !49, i64 0}
!49 = !{!"0x437d8f0.w16.b0", !50, i64 0}
!50 = !{!"0x437d8f0.w32.b0", !51, i64 0}
!51 = !{!"0x437d8f0.w64.b0", !52, i64 0}
!52 = !{!"0x437d8f0.w128.b0", !53, i64 0}
!53 = !{!"0x437d8f0.w256.b0", !54, i64 0}
!54 = !{!"0x437d8f0.w512.b0", !55, i64 0}
!55 = !{!"0x437d8f0.w1024.b0", !56, i64 0}
!56 = !{!"0x437d8f0", !22, i64 0}
!57 = !{!58, !58, i64 0}
!58 = !{!"0x437d8f0.w8.b8", !49, i64 0}
!59 = !{!60, !60, i64 0}
!60 = !{!"0x437d8f0.w8.b16", !61, i64 0}
!61 = !{!"0x437d8f0.w16.b16", !50, i64 0}
!62 = !{!"branch_weights", i32 1, i32 1048576}
!63 = !{!64, !64, i64 0}
!64 = !{!"0x41f4090.w8.b0", !65, i64 0}
!65 = !{!"0x41f4090.w16.b0", !66, i64 0}
!66 = !{!"0x41f4090.w32.b0", !67, i64 0}
!67 = !{!"0x41f4090.w64.b0", !68, i64 0}
!68 = !{!"0x41f4090.w128.b0", !69, i64 0}
!69 = !{!"0x41f4090.w256.b0", !70, i64 0}
!70 = !{!"0x41f4090.w512.b0", !71, i64 0}
!71 = !{!"0x41f4090.w1024.b0", !72, i64 0}
!72 = !{!"0x41f4090", !22, i64 0}
!73 = !{!74, !74, i64 0}
!74 = !{!"0x41f4090.w8.b8", !65, i64 0}
!75 = !{!76, !76, i64 0}
!76 = !{!"0x41f4090.w8.b16", !77, i64 0}
!77 = !{!"0x41f4090.w16.b16", !66, i64 0}
!78 = !{!79, !79, i64 0}
!79 = !{!"0x457b0b0.w8.b0", !80, i64 0}
!80 = !{!"0x457b0b0.w16.b0", !81, i64 0}
!81 = !{!"0x457b0b0.w32.b0", !82, i64 0}
!82 = !{!"0x457b0b0.w64.b0", !83, i64 0}
!83 = !{!"0x457b0b0.w128.b0", !84, i64 0}
!84 = !{!"0x457b0b0.w256.b0", !85, i64 0}
!85 = !{!"0x457b0b0.w512.b0", !86, i64 0}
!86 = !{!"0x457b0b0.w1024.b0", !87, i64 0}
!87 = !{!"0x457b0b0", !22, i64 0}
!88 = !{!89, !89, i64 0}
!89 = !{!"0x457b0b0.w8.b8", !80, i64 0}
!90 = !{!91, !91, i64 0}
!91 = !{!"0x457b0b0.w8.b16", !92, i64 0}
!92 = !{!"0x457b0b0.w16.b16", !81, i64 0}
!93 = !{!94, !94, i64 0}
!94 = !{!"0x48099f0.w8.b0", !95, i64 0}
!95 = !{!"0x48099f0.w16.b0", !96, i64 0}
!96 = !{!"0x48099f0.w32.b0", !97, i64 0}
!97 = !{!"0x48099f0.w64.b0", !98, i64 0}
!98 = !{!"0x48099f0.w128.b0", !99, i64 0}
!99 = !{!"0x48099f0.w256.b0", !100, i64 0}
!100 = !{!"0x48099f0.w512.b0", !101, i64 0}
!101 = !{!"0x48099f0.w1024.b0", !102, i64 0}
!102 = !{!"0x48099f0", !22, i64 0}
!103 = !{!104, !104, i64 0}
!104 = !{!"0x48099f0.w8.b8", !95, i64 0}
!105 = !{!106, !106, i64 0}
!106 = !{!"0x48099f0.w8.b16", !107, i64 0}
!107 = !{!"0x48099f0.w16.b16", !96, i64 0}
!108 = !{!109, !109, i64 0}
!109 = !{!"0x458c540.w8.b0", !110, i64 0}
!110 = !{!"0x458c540.w16.b0", !111, i64 0}
!111 = !{!"0x458c540.w32.b0", !112, i64 0}
!112 = !{!"0x458c540.w64.b0", !113, i64 0}
!113 = !{!"0x458c540.w128.b0", !114, i64 0}
!114 = !{!"0x458c540.w256.b0", !115, i64 0}
!115 = !{!"0x458c540.w512.b0", !116, i64 0}
!116 = !{!"0x458c540.w1024.b0", !117, i64 0}
!117 = !{!"0x458c540", !22, i64 0}
!118 = !{!119, !119, i64 0}
!119 = !{!"0x458c540.w8.b8", !110, i64 0}
!120 = !{!121, !121, i64 0}
!121 = !{!"0x458c540.w8.b16", !122, i64 0}
!122 = !{!"0x458c540.w16.b16", !111, i64 0}
!123 = !{!124, !124, i64 0}
!124 = !{!"0x4473a40.w8.b0", !125, i64 0}
!125 = !{!"0x4473a40.w16.b0", !126, i64 0}
!126 = !{!"0x4473a40.w32.b0", !127, i64 0}
!127 = !{!"0x4473a40.w64.b0", !128, i64 0}
!128 = !{!"0x4473a40.w128.b0", !129, i64 0}
!129 = !{!"0x4473a40.w256.b0", !130, i64 0}
!130 = !{!"0x4473a40.w512.b0", !131, i64 0}
!131 = !{!"0x4473a40.w1024.b0", !132, i64 0}
!132 = !{!"0x4473a40", !22, i64 0}
!133 = !{!134, !134, i64 0}
!134 = !{!"0x4473a40.w8.b8", !125, i64 0}
!135 = !{!136, !136, i64 0}
!136 = !{!"0x4473a40.w8.b16", !137, i64 0}
!137 = !{!"0x4473a40.w16.b16", !126, i64 0}
!138 = !{!139, !139, i64 0}
!139 = !{!"0x41af770.w8.b0", !140, i64 0}
!140 = !{!"0x41af770.w16.b0", !141, i64 0}
!141 = !{!"0x41af770.w32.b0", !142, i64 0}
!142 = !{!"0x41af770.w64.b0", !143, i64 0}
!143 = !{!"0x41af770.w128.b0", !144, i64 0}
!144 = !{!"0x41af770.w256.b0", !145, i64 0}
!145 = !{!"0x41af770.w512.b0", !146, i64 0}
!146 = !{!"0x41af770.w1024.b0", !147, i64 0}
!147 = !{!"0x41af770", !22, i64 0}
!148 = !{!149, !149, i64 0}
!149 = !{!"0x41af770.w8.b8", !140, i64 0}
!150 = !{!151, !151, i64 0}
!151 = !{!"0x41af770.w8.b16", !152, i64 0}
!152 = !{!"0x41af770.w16.b16", !141, i64 0}
!153 = !{!154, !154, i64 0}
!154 = !{!"0x5cc1df0.w8.b0", !155, i64 0}
!155 = !{!"0x5cc1df0.w16.b0", !156, i64 0}
!156 = !{!"0x5cc1df0.w32.b0", !157, i64 0}
!157 = !{!"0x5cc1df0.w64.b0", !158, i64 0}
!158 = !{!"0x5cc1df0.w128.b0", !159, i64 0}
!159 = !{!"0x5cc1df0.w256.b0", !160, i64 0}
!160 = !{!"0x5cc1df0.w512.b0", !161, i64 0}
!161 = !{!"0x5cc1df0.w1024.b0", !162, i64 0}
!162 = !{!"0x5cc1df0", !22, i64 0}
!163 = !{!164, !164, i64 0}
!164 = !{!"0x5cc1df0.w8.b8", !155, i64 0}
!165 = !{!166, !166, i64 0}
!166 = !{!"0x5cc1df0.w8.b16", !167, i64 0}
!167 = !{!"0x5cc1df0.w16.b16", !156, i64 0}
!168 = !{!169, !169, i64 0}
!169 = !{!"0x4eeded0.w8.b0", !170, i64 0}
!170 = !{!"0x4eeded0.w16.b0", !171, i64 0}
!171 = !{!"0x4eeded0.w32.b0", !172, i64 0}
!172 = !{!"0x4eeded0.w64.b0", !173, i64 0}
!173 = !{!"0x4eeded0.w128.b0", !174, i64 0}
!174 = !{!"0x4eeded0.w256.b0", !175, i64 0}
!175 = !{!"0x4eeded0.w512.b0", !176, i64 0}
!176 = !{!"0x4eeded0.w1024.b0", !177, i64 0}
!177 = !{!"0x4eeded0", !22, i64 0}
!178 = !{!179, !179, i64 0}
!179 = !{!"0x4eeded0.w8.b8", !170, i64 0}
!180 = !{!181, !181, i64 0}
!181 = !{!"0x4eeded0.w8.b16", !182, i64 0}
!182 = !{!"0x4eeded0.w16.b16", !171, i64 0}
!183 = !{!184, !184, i64 0}
!184 = !{!"0x5448250.w8.b0", !185, i64 0}
!185 = !{!"0x5448250.w16.b0", !186, i64 0}
!186 = !{!"0x5448250.w32.b0", !187, i64 0}
!187 = !{!"0x5448250.w64.b0", !188, i64 0}
!188 = !{!"0x5448250.w128.b0", !189, i64 0}
!189 = !{!"0x5448250.w256.b0", !190, i64 0}
!190 = !{!"0x5448250.w512.b0", !191, i64 0}
!191 = !{!"0x5448250.w1024.b0", !192, i64 0}
!192 = !{!"0x5448250", !22, i64 0}
!193 = !{!194, !194, i64 0}
!194 = !{!"0x5448250.w8.b8", !185, i64 0}
!195 = !{!196, !196, i64 0}
!196 = !{!"0x5448250.w8.b16", !197, i64 0}
!197 = !{!"0x5448250.w16.b16", !186, i64 0}
!198 = !{!199, !199, i64 0}
!199 = !{!"0x4efd530.w8.b0", !200, i64 0}
!200 = !{!"0x4efd530.w16.b0", !201, i64 0}
!201 = !{!"0x4efd530.w32.b0", !202, i64 0}
!202 = !{!"0x4efd530.w64.b0", !203, i64 0}
!203 = !{!"0x4efd530.w128.b0", !204, i64 0}
!204 = !{!"0x4efd530.w256.b0", !205, i64 0}
!205 = !{!"0x4efd530.w512.b0", !206, i64 0}
!206 = !{!"0x4efd530.w1024.b0", !207, i64 0}
!207 = !{!"0x4efd530", !22, i64 0}
!208 = !{!209, !209, i64 0}
!209 = !{!"0x4efd530.w8.b8", !200, i64 0}
!210 = !{!211, !211, i64 0}
!211 = !{!"0x4efd530.w8.b16", !212, i64 0}
!212 = !{!"0x4efd530.w16.b16", !201, i64 0}
!213 = !{!214, !214, i64 0}
!214 = !{!"0x4efe430.w8.b0", !215, i64 0}
!215 = !{!"0x4efe430.w16.b0", !216, i64 0}
!216 = !{!"0x4efe430.w32.b0", !217, i64 0}
!217 = !{!"0x4efe430.w64.b0", !218, i64 0}
!218 = !{!"0x4efe430.w128.b0", !219, i64 0}
!219 = !{!"0x4efe430.w256.b0", !220, i64 0}
!220 = !{!"0x4efe430.w512.b0", !221, i64 0}
!221 = !{!"0x4efe430.w1024.b0", !222, i64 0}
!222 = !{!"0x4efe430", !22, i64 0}
!223 = !{!224, !224, i64 0}
!224 = !{!"0x4efe430.w8.b8", !215, i64 0}
!225 = !{!226, !226, i64 0}
!226 = !{!"0x4efe430.w8.b16", !227, i64 0}
!227 = !{!"0x4efe430.w16.b16", !216, i64 0}
!228 = !{!229, !229, i64 0}
!229 = !{!"0x241ae80.w16.b0", !230, i64 0}
!230 = !{!"0x241ae80.w32.b0", !231, i64 0}
!231 = !{!"0x241ae80.w64.b0", !232, i64 0}
!232 = !{!"0x241ae80.w128.b0", !233, i64 0}
!233 = !{!"0x241ae80.w256.b0", !234, i64 0}
!234 = !{!"0x241ae80.w512.b0", !235, i64 0}
!235 = !{!"0x241ae80.w1024.b0", !236, i64 0}
!236 = !{!"0x241ae80", !22, i64 0}
!237 = !{!238, !238, i64 0}
!238 = !{!"0x241ae80.w4.b16", !239, i64 0}
!239 = !{!"0x241ae80.w8.b16", !240, i64 0}
!240 = !{!"0x241ae80.w16.b16", !230, i64 0}
!241 = !{!242, !242, i64 0}
!242 = !{!"0x241ae80.w4.b20", !239, i64 0}
