; ModuleID = 'TVMMod'
source_filename = "TVMMod"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%0 = type { double }
%1 = type { i8*, %2, i32, %3, i64*, i64*, i64 }
%2 = type { i32, i32 }
%3 = type { i8, i8, i16 }

@__tvm_module_ctx = linkonce dllexport local_unnamed_addr global i8* null, align 8
@__TVMFuncCall = linkonce dllexport local_unnamed_addr global i32 (i8*, %0*, i32*, i32, %0*, i32*)* null, align 8
@__TVMBackendGetFuncFromEnv = linkonce dllexport local_unnamed_addr global i32 (i8*, i8*, i8**)* null, align 8
@__TVMAPISetLastError = linkonce dllexport local_unnamed_addr global void (i8*)* null, align 8
@.str = private constant [67 x i8] c"Assert fail: num_args == 8, default_function: num_args should be 8\00", align 1
@.str.1 = private constant [130 x i8] c"Assert fail: ph_0_code == 3 or ph_0_code == 13 or ph_0_code == 7 or ph_0_code == 4, default_function: Expect arg[0] to be pointer\00", align 1
@.str.2 = private constant [130 x i8] c"Assert fail: ph_3_code == 3 or ph_3_code == 13 or ph_3_code == 7 or ph_3_code == 4, default_function: Expect arg[1] to be pointer\00", align 1
@.str.3 = private constant [134 x i8] c"Assert fail: ph_10_code == 3 or ph_10_code == 13 or ph_10_code == 7 or ph_10_code == 4, default_function: Expect arg[2] to be pointer\00", align 1
@.str.4 = private constant [142 x i8] c"Assert fail: compute_code == 3 or compute_code == 13 or compute_code == 7 or compute_code == 4, default_function: Expect arg[3] to be pointer\00", align 1
@.str.5 = private constant [142 x i8] c"Assert fail: compute_code == 3 or compute_code == 13 or compute_code == 7 or compute_code == 4, default_function: Expect arg[4] to be pointer\00", align 1
@.str.6 = private constant [142 x i8] c"Assert fail: compute_code == 3 or compute_code == 13 or compute_code == 7 or compute_code == 4, default_function: Expect arg[5] to be pointer\00", align 1
@.str.7 = private constant [142 x i8] c"Assert fail: compute_code == 3 or compute_code == 13 or compute_code == 7 or compute_code == 4, default_function: Expect arg[6] to be pointer\00", align 1
@.str.8 = private constant [134 x i8] c"Assert fail: T_mod_code == 3 or T_mod_code == 13 or T_mod_code == 7 or T_mod_code == 4, default_function: Expect arg[7] to be pointer\00", align 1
@.str.9 = private constant [107 x i8] c"Assert fail: 3 == T.tvm_struct_get(ph_0, 0, 4, \22int32\22), default_function.ph_0.ndim is expected to equal 3\00", align 1
@.str.10 = private constant [235 x i8] c"Assert fail: T.tvm_struct_get(ph_0, 0, 5, \22uint8\22) == T.uint8(2) and T.tvm_struct_get(ph_0, 0, 6, \22uint8\22) == T.uint8(32) and T.tvm_struct_get(ph_0, 0, 7, \22uint16\22) == T.uint16(1), default_function.ph_0.dtype is expected to be float32\00", align 1
@.str.11 = private constant [193 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_0_shape[0]) == 13, Argument default_function.ph_0.shape[0] has an unsatisfied constraint: 13 == T.Cast(\22int32\22, default_function_ph_0_shape[0])\00", align 1
@.str.12 = private constant [191 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_0_shape[1]) == 5, Argument default_function.ph_0.shape[1] has an unsatisfied constraint: 5 == T.Cast(\22int32\22, default_function_ph_0_shape[1])\00", align 1
@.str.13 = private constant [193 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_0_shape[2]) == 16, Argument default_function.ph_0.shape[2] has an unsatisfied constraint: 16 == T.Cast(\22int32\22, default_function_ph_0_shape[2])\00", align 1
@.str.14 = private constant [249 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_ph_0_strides[2]) and 16 == T.Cast(\22int32\22, default_function_ph_0_strides[1]) and 80 == T.Cast(\22int32\22, default_function_ph_0_strides[0]), default_function.ph_0.strides: expected to be compact array\00", align 1
@.str.15 = private constant [196 x i8] c"Assert fail: T.uint64(0) == T.tvm_struct_get(ph_0, 0, 8, \22uint64\22), Argument default_function.ph_0.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(ph_0, 0, 8, \22uint64\22)\00", align 1
@.str.16 = private constant [176 x i8] c"Assert fail: T.tvm_struct_get(ph_0, 0, 10, \22int32\22) == 1, Argument default_function.ph_0.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(ph_0, 0, 10, \22int32\22)\00", align 1
@.str.17 = private constant [107 x i8] c"Assert fail: 3 == T.tvm_struct_get(ph_3, 0, 4, \22int32\22), default_function.ph_3.ndim is expected to equal 3\00", align 1
@.str.18 = private constant [235 x i8] c"Assert fail: T.tvm_struct_get(ph_3, 0, 5, \22uint8\22) == T.uint8(2) and T.tvm_struct_get(ph_3, 0, 6, \22uint8\22) == T.uint8(32) and T.tvm_struct_get(ph_3, 0, 7, \22uint16\22) == T.uint16(1), default_function.ph_3.dtype is expected to be float32\00", align 1
@.str.19 = private constant [193 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_3_shape[0]) == 13, Argument default_function.ph_3.shape[0] has an unsatisfied constraint: 13 == T.Cast(\22int32\22, default_function_ph_3_shape[0])\00", align 1
@.str.20 = private constant [193 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_3_shape[1]) == 16, Argument default_function.ph_3.shape[1] has an unsatisfied constraint: 16 == T.Cast(\22int32\22, default_function_ph_3_shape[1])\00", align 1
@.str.21 = private constant [191 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_3_shape[2]) == 5, Argument default_function.ph_3.shape[2] has an unsatisfied constraint: 5 == T.Cast(\22int32\22, default_function_ph_3_shape[2])\00", align 1
@.str.22 = private constant [248 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_ph_3_strides[2]) and 5 == T.Cast(\22int32\22, default_function_ph_3_strides[1]) and 80 == T.Cast(\22int32\22, default_function_ph_3_strides[0]), default_function.ph_3.strides: expected to be compact array\00", align 1
@.str.23 = private constant [196 x i8] c"Assert fail: T.uint64(0) == T.tvm_struct_get(ph_3, 0, 8, \22uint64\22), Argument default_function.ph_3.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(ph_3, 0, 8, \22uint64\22)\00", align 1
@.str.24 = private constant [176 x i8] c"Assert fail: T.tvm_struct_get(ph_3, 0, 10, \22int32\22) == 1, Argument default_function.ph_3.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(ph_3, 0, 10, \22int32\22)\00", align 1
@.str.25 = private constant [182 x i8] c"Assert fail: dev_id == T.tvm_struct_get(ph_3, 0, 9, \22int32\22), Argument default_function.ph_3.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(ph_3, 0, 9, \22int32\22)\00", align 1
@.str.26 = private constant [109 x i8] c"Assert fail: 3 == T.tvm_struct_get(ph_10, 0, 4, \22int32\22), default_function.ph_10.ndim is expected to equal 3\00", align 1
@.str.27 = private constant [239 x i8] c"Assert fail: T.tvm_struct_get(ph_10, 0, 5, \22uint8\22) == T.uint8(2) and T.tvm_struct_get(ph_10, 0, 6, \22uint8\22) == T.uint8(32) and T.tvm_struct_get(ph_10, 0, 7, \22uint16\22) == T.uint16(1), default_function.ph_10.dtype is expected to be float32\00", align 1
@.str.28 = private constant [196 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_10_shape[0]) == 13, Argument default_function.ph_10.shape[0] has an unsatisfied constraint: 13 == T.Cast(\22int32\22, default_function_ph_10_shape[0])\00", align 1
@.str.29 = private constant [194 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_10_shape[1]) == 5, Argument default_function.ph_10.shape[1] has an unsatisfied constraint: 5 == T.Cast(\22int32\22, default_function_ph_10_shape[1])\00", align 1
@.str.30 = private constant [194 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_ph_10_shape[2]) == 5, Argument default_function.ph_10.shape[2] has an unsatisfied constraint: 5 == T.Cast(\22int32\22, default_function_ph_10_shape[2])\00", align 1
@.str.31 = private constant [252 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_ph_10_strides[2]) and 5 == T.Cast(\22int32\22, default_function_ph_10_strides[1]) and 25 == T.Cast(\22int32\22, default_function_ph_10_strides[0]), default_function.ph_10.strides: expected to be compact array\00", align 1
@.str.32 = private constant [199 x i8] c"Assert fail: T.uint64(0) == T.tvm_struct_get(ph_10, 0, 8, \22uint64\22), Argument default_function.ph_10.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(ph_10, 0, 8, \22uint64\22)\00", align 1
@.str.33 = private constant [179 x i8] c"Assert fail: T.tvm_struct_get(ph_10, 0, 10, \22int32\22) == 1, Argument default_function.ph_10.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(ph_10, 0, 10, \22int32\22)\00", align 1
@.str.34 = private constant [185 x i8] c"Assert fail: dev_id == T.tvm_struct_get(ph_10, 0, 9, \22int32\22), Argument default_function.ph_10.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(ph_10, 0, 9, \22int32\22)\00", align 1
@.str.35 = private constant [113 x i8] c"Assert fail: 3 == T.tvm_struct_get(compute, 0, 4, \22int32\22), default_function.compute.ndim is expected to equal 3\00", align 1
@.str.36 = private constant [247 x i8] c"Assert fail: T.tvm_struct_get(compute, 0, 5, \22uint8\22) == T.uint8(2) and T.tvm_struct_get(compute, 0, 6, \22uint8\22) == T.uint8(32) and T.tvm_struct_get(compute, 0, 7, \22uint16\22) == T.uint16(1), default_function.compute.dtype is expected to be float32\00", align 1
@.str.37 = private constant [202 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_compute_shape[0]) == 13, Argument default_function.compute.shape[0] has an unsatisfied constraint: 13 == T.Cast(\22int32\22, default_function_compute_shape[0])\00", align 1
@.str.38 = private constant [200 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_compute_shape[1]) == 5, Argument default_function.compute.shape[1] has an unsatisfied constraint: 5 == T.Cast(\22int32\22, default_function_compute_shape[1])\00", align 1
@.str.39 = private constant [202 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_compute_shape[2]) == 16, Argument default_function.compute.shape[2] has an unsatisfied constraint: 16 == T.Cast(\22int32\22, default_function_compute_shape[2])\00", align 1
@.str.40 = private constant [261 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_compute_strides[2]) and 16 == T.Cast(\22int32\22, default_function_compute_strides[1]) and 80 == T.Cast(\22int32\22, default_function_compute_strides[0]), default_function.compute.strides: expected to be compact array\00", align 1
@.str.41 = private constant [205 x i8] c"Assert fail: T.uint64(0) == T.tvm_struct_get(compute, 0, 8, \22uint64\22), Argument default_function.compute.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(compute, 0, 8, \22uint64\22)\00", align 1
@.str.42 = private constant [185 x i8] c"Assert fail: T.tvm_struct_get(compute, 0, 10, \22int32\22) == 1, Argument default_function.compute.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(compute, 0, 10, \22int32\22)\00", align 1
@.str.43 = private constant [191 x i8] c"Assert fail: dev_id == T.tvm_struct_get(compute, 0, 9, \22int32\22), Argument default_function.compute.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(compute, 0, 9, \22int32\22)\00", align 1
@.str.44 = private constant [200 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_compute_shape[2]) == 5, Argument default_function.compute.shape[2] has an unsatisfied constraint: 5 == T.Cast(\22int32\22, default_function_compute_shape[2])\00", align 1
@.str.45 = private constant [260 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_compute_strides[2]) and 5 == T.Cast(\22int32\22, default_function_compute_strides[1]) and 25 == T.Cast(\22int32\22, default_function_compute_strides[0]), default_function.compute.strides: expected to be compact array\00", align 1
@.str.46 = private constant [109 x i8] c"Assert fail: 3 == T.tvm_struct_get(T_mod, 0, 4, \22int32\22), default_function.T_mod.ndim is expected to equal 3\00", align 1
@.str.47 = private constant [239 x i8] c"Assert fail: T.tvm_struct_get(T_mod, 0, 5, \22uint8\22) == T.uint8(2) and T.tvm_struct_get(T_mod, 0, 6, \22uint8\22) == T.uint8(32) and T.tvm_struct_get(T_mod, 0, 7, \22uint16\22) == T.uint16(1), default_function.T_mod.dtype is expected to be float32\00", align 1
@.str.48 = private constant [196 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_T_mod_shape[0]) == 13, Argument default_function.T_mod.shape[0] has an unsatisfied constraint: 13 == T.Cast(\22int32\22, default_function_T_mod_shape[0])\00", align 1
@.str.49 = private constant [194 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_T_mod_shape[1]) == 5, Argument default_function.T_mod.shape[1] has an unsatisfied constraint: 5 == T.Cast(\22int32\22, default_function_T_mod_shape[1])\00", align 1
@.str.50 = private constant [194 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_T_mod_shape[2]) == 5, Argument default_function.T_mod.shape[2] has an unsatisfied constraint: 5 == T.Cast(\22int32\22, default_function_T_mod_shape[2])\00", align 1
@.str.51 = private constant [252 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_T_mod_strides[2]) and 5 == T.Cast(\22int32\22, default_function_T_mod_strides[1]) and 25 == T.Cast(\22int32\22, default_function_T_mod_strides[0]), default_function.T_mod.strides: expected to be compact array\00", align 1
@.str.52 = private constant [199 x i8] c"Assert fail: T.uint64(0) == T.tvm_struct_get(T_mod, 0, 8, \22uint64\22), Argument default_function.T_mod.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_mod, 0, 8, \22uint64\22)\00", align 1
@.str.53 = private constant [179 x i8] c"Assert fail: T.tvm_struct_get(T_mod, 0, 10, \22int32\22) == 1, Argument default_function.T_mod.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_mod, 0, 10, \22int32\22)\00", align 1
@.str.54 = private constant [185 x i8] c"Assert fail: dev_id == T.tvm_struct_get(T_mod, 0, 9, \22int32\22), Argument default_function.T_mod.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_mod, 0, 9, \22int32\22)\00", align 1
@.tvm_func.default_function_kernel = internal unnamed_addr global i8* null, align 8
@.str.55 = private constant [24 x i8] c"default_function_kernel\00", align 1
@.str.56 = private constant [68 x i8] c"Assert fail: kernel_error_code == 0, Error executing compute kernel\00", align 1
@__tvm_main__ = weak dllexport local_unnamed_addr constant [17 x i8] c"default_function\00", align 1
@llvm.global_ctors = appending global [0 x { i32, void ()*, i8* }] zeroinitializer

define dllexport i32 @default_function(i8* noalias nocapture readonly %args, i32* noalias nocapture readonly %arg_type_ids, i32 %num_args, i8* noalias nocapture readnone %out_ret_value, i32* noalias nocapture readnone %out_ret_tcode, i8* noalias nocapture readnone %resource_handle) local_unnamed_addr #0 !dbg !5 {
entry:
  call void @llvm.dbg.value(metadata i8* %args, metadata !12, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i32* %arg_type_ids, metadata !13, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i32 %num_args, metadata !14, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i8* %out_ret_value, metadata !15, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i32* %out_ret_tcode, metadata !16, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i8* %resource_handle, metadata !17, metadata !DIExpression()), !dbg !18
  %stack_value_void_ptr241 = alloca [9 x %0], align 8, !dbg !18
  %stack_tcode242 = alloca [9 x i32], align 4, !dbg !18
  %stack_tcode242.sub = getelementptr inbounds [9 x i32], [9 x i32]* %stack_tcode242, i64 0, i64 0
  %stack_value = bitcast [9 x %0]* %stack_value_void_ptr241 to i8*, !dbg !18
  %0 = icmp eq i32 %num_args, 8, !dbg !18
  br i1 %0, label %assert_end, label %assert_fail, !dbg !18, !prof !19

assert_fail:                                      ; preds = %entry
  %1 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %1(i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end:                                       ; preds = %entry
  %ph_0.code = load i32, i32* %arg_type_ids, align 4, !dbg !18, !tbaa !23
  %2 = getelementptr inbounds i32, i32* %arg_type_ids, i64 1, !dbg !18
  %ph_3.code = load i32, i32* %2, align 4, !dbg !18, !tbaa !34
  %3 = getelementptr inbounds i32, i32* %arg_type_ids, i64 2, !dbg !18
  %ph_10.code = load i32, i32* %3, align 4, !dbg !18, !tbaa !36
  %4 = getelementptr inbounds i32, i32* %arg_type_ids, i64 3, !dbg !18
  %compute.code = load i32, i32* %4, align 4, !dbg !18, !tbaa !39
  %5 = getelementptr inbounds i32, i32* %arg_type_ids, i64 4, !dbg !18
  %compute.code1 = load i32, i32* %5, align 4, !dbg !18, !tbaa !41
  %6 = getelementptr inbounds i32, i32* %arg_type_ids, i64 5, !dbg !18
  %compute.code2 = load i32, i32* %6, align 4, !dbg !18, !tbaa !45
  %7 = getelementptr inbounds i32, i32* %arg_type_ids, i64 6, !dbg !18
  %compute.code3 = load i32, i32* %7, align 4, !dbg !18, !tbaa !47
  %8 = getelementptr inbounds i32, i32* %arg_type_ids, i64 7, !dbg !18
  %T_mod.code = load i32, i32* %8, align 4, !dbg !18, !tbaa !50
  %9 = bitcast i8* %args to %1**, !dbg !18
  %ph_0243 = load %1*, %1** %9, align 8, !dbg !18
  %10 = getelementptr inbounds i8, i8* %args, i64 8, !dbg !18
  %11 = bitcast i8* %10 to %1**, !dbg !18
  %ph_3244 = load %1*, %1** %11, align 8, !dbg !18
  %12 = getelementptr inbounds i8, i8* %args, i64 16, !dbg !18
  %13 = bitcast i8* %12 to %1**, !dbg !18
  %ph_10245 = load %1*, %1** %13, align 8, !dbg !18
  %14 = getelementptr inbounds i8, i8* %args, i64 24, !dbg !18
  %15 = bitcast i8* %14 to %1**, !dbg !18
  %compute246 = load %1*, %1** %15, align 8, !dbg !18
  %16 = getelementptr inbounds i8, i8* %args, i64 32, !dbg !18
  %17 = bitcast i8* %16 to %1**, !dbg !18
  %compute4247 = load %1*, %1** %17, align 8, !dbg !18
  %18 = getelementptr inbounds i8, i8* %args, i64 40, !dbg !18
  %19 = bitcast i8* %18 to %1**, !dbg !18
  %compute5248 = load %1*, %1** %19, align 8, !dbg !18
  %20 = getelementptr inbounds i8, i8* %args, i64 48, !dbg !18
  %21 = bitcast i8* %20 to %1**, !dbg !18
  %compute6249 = load %1*, %1** %21, align 8, !dbg !18
  %22 = getelementptr inbounds i8, i8* %args, i64 56, !dbg !18
  %23 = bitcast i8* %22 to %1**, !dbg !18
  %T_mod250 = load %1*, %1** %23, align 8, !dbg !18
  %24 = bitcast %1* %ph_0243 to float**, !dbg !18
  %ph_0_void_ptr251 = load float*, float** %24, align 8, !dbg !18
  %ptrint = ptrtoint float* %ph_0_void_ptr251 to i64, !dbg !18
  %maskedptr = and i64 %ptrint, 63, !dbg !18
  %maskcond = icmp eq i64 %maskedptr, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond), !dbg !18
  %25 = getelementptr inbounds %1, %1* %ph_0243, i64 0, i32 4, !dbg !18
  %default_function.ph_0.shape = load i64*, i64** %25, align 8, !dbg !18
  %26 = getelementptr inbounds %1, %1* %ph_0243, i64 0, i32 5, !dbg !18
  %default_function.ph_0.strides = load i64*, i64** %26, align 8, !dbg !18
  %27 = getelementptr inbounds %1, %1* %ph_0243, i64 0, i32 1, i32 1, !dbg !18
  %dev_id = load i32, i32* %27, align 4, !dbg !18
  %28 = bitcast %1* %ph_3244 to float**, !dbg !18
  %ph_3_void_ptr252 = load float*, float** %28, align 8, !dbg !18
  %ptrint9 = ptrtoint float* %ph_3_void_ptr252 to i64, !dbg !18
  %maskedptr10 = and i64 %ptrint9, 63, !dbg !18
  %maskcond11 = icmp eq i64 %maskedptr10, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond11), !dbg !18
  %29 = getelementptr inbounds %1, %1* %ph_3244, i64 0, i32 4, !dbg !18
  %default_function.ph_3.shape = load i64*, i64** %29, align 8, !dbg !18
  %30 = getelementptr inbounds %1, %1* %ph_3244, i64 0, i32 5, !dbg !18
  %default_function.ph_3.strides = load i64*, i64** %30, align 8, !dbg !18
  %31 = bitcast %1* %ph_10245 to float**, !dbg !18
  %ph_10_void_ptr253 = load float*, float** %31, align 8, !dbg !18
  %ptrint13 = ptrtoint float* %ph_10_void_ptr253 to i64, !dbg !18
  %maskedptr14 = and i64 %ptrint13, 63, !dbg !18
  %maskcond15 = icmp eq i64 %maskedptr14, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond15), !dbg !18
  %32 = getelementptr inbounds %1, %1* %ph_10245, i64 0, i32 4, !dbg !18
  %default_function.ph_10.shape = load i64*, i64** %32, align 8, !dbg !18
  %33 = getelementptr inbounds %1, %1* %ph_10245, i64 0, i32 5, !dbg !18
  %default_function.ph_10.strides = load i64*, i64** %33, align 8, !dbg !18
  %34 = bitcast %1* %compute246 to float**, !dbg !18
  %compute_void_ptr254 = load float*, float** %34, align 8, !dbg !18
  %ptrint17 = ptrtoint float* %compute_void_ptr254 to i64, !dbg !18
  %maskedptr18 = and i64 %ptrint17, 63, !dbg !18
  %maskcond19 = icmp eq i64 %maskedptr18, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond19), !dbg !18
  %35 = getelementptr inbounds %1, %1* %compute246, i64 0, i32 4, !dbg !18
  %default_function.compute.shape = load i64*, i64** %35, align 8, !dbg !18
  %36 = getelementptr inbounds %1, %1* %compute246, i64 0, i32 5, !dbg !18
  %default_function.compute.strides = load i64*, i64** %36, align 8, !dbg !18
  %37 = bitcast %1* %compute4247 to float**, !dbg !18
  %compute_void_ptr20255 = load float*, float** %37, align 8, !dbg !18
  %ptrint22 = ptrtoint float* %compute_void_ptr20255 to i64, !dbg !18
  %maskedptr23 = and i64 %ptrint22, 63, !dbg !18
  %maskcond24 = icmp eq i64 %maskedptr23, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond24), !dbg !18
  %38 = getelementptr inbounds %1, %1* %compute4247, i64 0, i32 4, !dbg !18
  %default_function.compute.shape25 = load i64*, i64** %38, align 8, !dbg !18
  %39 = getelementptr inbounds %1, %1* %compute4247, i64 0, i32 5, !dbg !18
  %default_function.compute.strides26 = load i64*, i64** %39, align 8, !dbg !18
  %40 = bitcast %1* %compute5248 to float**, !dbg !18
  %compute_void_ptr27256 = load float*, float** %40, align 8, !dbg !18
  %ptrint29 = ptrtoint float* %compute_void_ptr27256 to i64, !dbg !18
  %maskedptr30 = and i64 %ptrint29, 63, !dbg !18
  %maskcond31 = icmp eq i64 %maskedptr30, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond31), !dbg !18
  %41 = getelementptr inbounds %1, %1* %compute5248, i64 0, i32 4, !dbg !18
  %default_function.compute.shape32 = load i64*, i64** %41, align 8, !dbg !18
  %42 = getelementptr inbounds %1, %1* %compute5248, i64 0, i32 5, !dbg !18
  %default_function.compute.strides33 = load i64*, i64** %42, align 8, !dbg !18
  %43 = bitcast %1* %compute6249 to float**, !dbg !18
  %compute_void_ptr34257 = load float*, float** %43, align 8, !dbg !18
  %ptrint36 = ptrtoint float* %compute_void_ptr34257 to i64, !dbg !18
  %maskedptr37 = and i64 %ptrint36, 63, !dbg !18
  %maskcond38 = icmp eq i64 %maskedptr37, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond38), !dbg !18
  %44 = getelementptr inbounds %1, %1* %compute6249, i64 0, i32 4, !dbg !18
  %default_function.compute.shape39 = load i64*, i64** %44, align 8, !dbg !18
  %45 = getelementptr inbounds %1, %1* %compute6249, i64 0, i32 5, !dbg !18
  %default_function.compute.strides40 = load i64*, i64** %45, align 8, !dbg !18
  %46 = bitcast %1* %T_mod250 to float**, !dbg !18
  %T_mod_void_ptr258 = load float*, float** %46, align 8, !dbg !18
  %ptrint42 = ptrtoint float* %T_mod_void_ptr258 to i64, !dbg !18
  %maskedptr43 = and i64 %ptrint42, 63, !dbg !18
  %maskcond44 = icmp eq i64 %maskedptr43, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond44), !dbg !18
  %47 = getelementptr inbounds %1, %1* %T_mod250, i64 0, i32 4, !dbg !18
  %default_function.T_mod.shape = load i64*, i64** %47, align 8, !dbg !18
  %48 = getelementptr inbounds %1, %1* %T_mod250, i64 0, i32 5, !dbg !18
  %default_function.T_mod.strides = load i64*, i64** %48, align 8, !dbg !18
  switch i32 %ph_0.code, label %assert_fail45 [
    i32 13, label %assert_end46
    i32 7, label %assert_end46
    i32 4, label %assert_end46
    i32 3, label %assert_end46
  ], !dbg !18

assert_fail45:                                    ; preds = %assert_end
  %49 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %49(i8* getelementptr inbounds ([130 x i8], [130 x i8]* @.str.1, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end46:                                     ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  switch i32 %ph_3.code, label %assert_fail47 [
    i32 13, label %assert_end48
    i32 7, label %assert_end48
    i32 4, label %assert_end48
    i32 3, label %assert_end48
  ], !dbg !18

assert_fail47:                                    ; preds = %assert_end46
  %50 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %50(i8* getelementptr inbounds ([130 x i8], [130 x i8]* @.str.2, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end48:                                     ; preds = %assert_end46, %assert_end46, %assert_end46, %assert_end46
  switch i32 %ph_10.code, label %assert_fail49 [
    i32 13, label %assert_end50
    i32 7, label %assert_end50
    i32 4, label %assert_end50
    i32 3, label %assert_end50
  ], !dbg !18

assert_fail49:                                    ; preds = %assert_end48
  %51 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %51(i8* getelementptr inbounds ([134 x i8], [134 x i8]* @.str.3, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end50:                                     ; preds = %assert_end48, %assert_end48, %assert_end48, %assert_end48
  switch i32 %compute.code, label %assert_fail51 [
    i32 13, label %assert_end52
    i32 7, label %assert_end52
    i32 4, label %assert_end52
    i32 3, label %assert_end52
  ], !dbg !18

assert_fail51:                                    ; preds = %assert_end50
  %52 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %52(i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.4, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end52:                                     ; preds = %assert_end50, %assert_end50, %assert_end50, %assert_end50
  switch i32 %compute.code1, label %assert_fail53 [
    i32 13, label %assert_end54
    i32 7, label %assert_end54
    i32 4, label %assert_end54
    i32 3, label %assert_end54
  ], !dbg !18

assert_fail53:                                    ; preds = %assert_end52
  %53 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %53(i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.5, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end54:                                     ; preds = %assert_end52, %assert_end52, %assert_end52, %assert_end52
  switch i32 %compute.code2, label %assert_fail55 [
    i32 13, label %assert_end56
    i32 7, label %assert_end56
    i32 4, label %assert_end56
    i32 3, label %assert_end56
  ], !dbg !18

assert_fail55:                                    ; preds = %assert_end54
  %54 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %54(i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.6, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end56:                                     ; preds = %assert_end54, %assert_end54, %assert_end54, %assert_end54
  switch i32 %compute.code3, label %assert_fail57 [
    i32 13, label %assert_end58
    i32 7, label %assert_end58
    i32 4, label %assert_end58
    i32 3, label %assert_end58
  ], !dbg !18

assert_fail57:                                    ; preds = %assert_end56
  %55 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %55(i8* getelementptr inbounds ([142 x i8], [142 x i8]* @.str.7, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end58:                                     ; preds = %assert_end56, %assert_end56, %assert_end56, %assert_end56
  switch i32 %T_mod.code, label %assert_fail59 [
    i32 13, label %assert_end60
    i32 7, label %assert_end60
    i32 4, label %assert_end60
    i32 3, label %assert_end60
  ], !dbg !18

assert_fail59:                                    ; preds = %assert_end58
  %56 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %56(i8* getelementptr inbounds ([134 x i8], [134 x i8]* @.str.8, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end60:                                     ; preds = %assert_end58, %assert_end58, %assert_end58, %assert_end58
  %57 = getelementptr inbounds %1, %1* %ph_0243, i64 0, i32 2, !dbg !18
  %58 = load i32, i32* %57, align 4, !dbg !18
  %59 = icmp eq i32 %58, 3, !dbg !18
  br i1 %59, label %assert_end64, label %assert_fail61, !dbg !18, !prof !19

assert_fail61:                                    ; preds = %assert_end60
  %60 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %60(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.9, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end64:                                     ; preds = %assert_end60
  %61 = getelementptr inbounds %1, %1* %ph_0243, i64 0, i32 3, i32 2, !dbg !18
  %62 = load i16, i16* %61, align 2, !dbg !18
  %63 = icmp eq i16 %62, 1, !dbg !18
  %64 = getelementptr inbounds %1, %1* %ph_0243, i64 0, i32 3, i32 1, !dbg !18
  %65 = load i8, i8* %64, align 1, !dbg !18
  %66 = icmp eq i8 %65, 32, !dbg !18
  %67 = getelementptr inbounds %1, %1* %ph_0243, i64 0, i32 3, i32 0, !dbg !18
  %68 = load i8, i8* %67, align 1, !dbg !18
  %69 = icmp eq i8 %68, 2, !dbg !18
  %70 = and i1 %66, %69, !dbg !18
  %71 = and i1 %63, %70, !dbg !18
  br i1 %71, label %assert_end66, label %assert_fail65, !dbg !18, !prof !19

assert_fail65:                                    ; preds = %assert_end64
  %72 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %72(i8* getelementptr inbounds ([235 x i8], [235 x i8]* @.str.10, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end66:                                     ; preds = %assert_end64
  %73 = load i64, i64* %default_function.ph_0.shape, align 8, !dbg !18, !tbaa !52
  %74 = trunc i64 %73 to i32, !dbg !18
  %75 = icmp eq i32 %74, 13, !dbg !18
  br i1 %75, label %assert_end68, label %assert_fail67, !dbg !18, !prof !19

assert_fail67:                                    ; preds = %assert_end66
  %76 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %76(i8* getelementptr inbounds ([193 x i8], [193 x i8]* @.str.11, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end68:                                     ; preds = %assert_end66
  %77 = getelementptr inbounds i64, i64* %default_function.ph_0.shape, i64 1, !dbg !18
  %78 = load i64, i64* %77, align 8, !dbg !18, !tbaa !62
  %79 = trunc i64 %78 to i32, !dbg !18
  %80 = icmp eq i32 %79, 5, !dbg !18
  br i1 %80, label %assert_end70, label %assert_fail69, !dbg !18, !prof !19

assert_fail69:                                    ; preds = %assert_end68
  %81 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %81(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.12, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end70:                                     ; preds = %assert_end68
  %82 = getelementptr inbounds i64, i64* %default_function.ph_0.shape, i64 2, !dbg !18
  %83 = load i64, i64* %82, align 8, !dbg !18, !tbaa !64
  %84 = trunc i64 %83 to i32, !dbg !18
  %85 = icmp eq i32 %84, 16, !dbg !18
  br i1 %85, label %assert_end72, label %assert_fail71, !dbg !18, !prof !19

assert_fail71:                                    ; preds = %assert_end70
  %86 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %86(i8* getelementptr inbounds ([193 x i8], [193 x i8]* @.str.13, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end72:                                     ; preds = %assert_end70
  %87 = icmp eq i64* %default_function.ph_0.strides, null, !dbg !18
  br i1 %87, label %if_end, label %if_then, !dbg !18, !prof !67

if_then:                                          ; preds = %assert_end72
  %88 = load i64, i64* %default_function.ph_0.strides, align 8, !dbg !18, !tbaa !68
  %89 = trunc i64 %88 to i32, !dbg !18
  %90 = icmp eq i32 %89, 80, !dbg !18
  %91 = getelementptr inbounds i64, i64* %default_function.ph_0.strides, i64 1, !dbg !18
  %92 = load i64, i64* %91, align 8, !dbg !18, !tbaa !78
  %93 = trunc i64 %92 to i32, !dbg !18
  %94 = icmp eq i32 %93, 16, !dbg !18
  %95 = getelementptr inbounds i64, i64* %default_function.ph_0.strides, i64 2, !dbg !18
  %96 = load i64, i64* %95, align 8, !dbg !18, !tbaa !80
  %97 = trunc i64 %96 to i32, !dbg !18
  %98 = icmp eq i32 %97, 1, !dbg !18
  %99 = and i1 %94, %98, !dbg !18
  %100 = and i1 %90, %99, !dbg !18
  br i1 %100, label %if_end, label %assert_fail73, !dbg !18, !prof !19

if_end:                                           ; preds = %assert_end72, %if_then
  %101 = getelementptr inbounds %1, %1* %ph_0243, i64 0, i32 6, !dbg !18
  %102 = load i64, i64* %101, align 8, !dbg !18
  %103 = icmp eq i64 %102, 0, !dbg !18
  br i1 %103, label %assert_end76, label %assert_fail75, !dbg !18, !prof !19

assert_fail73:                                    ; preds = %if_then
  %104 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %104(i8* getelementptr inbounds ([249 x i8], [249 x i8]* @.str.14, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail75:                                    ; preds = %if_end
  %105 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %105(i8* getelementptr inbounds ([196 x i8], [196 x i8]* @.str.15, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end76:                                     ; preds = %if_end
  %106 = getelementptr inbounds %1, %1* %ph_0243, i64 0, i32 1, i32 0, !dbg !18
  %107 = load i32, i32* %106, align 4, !dbg !18
  %108 = icmp eq i32 %107, 1, !dbg !18
  br i1 %108, label %assert_end78, label %assert_fail77, !dbg !18, !prof !19

assert_fail77:                                    ; preds = %assert_end76
  %109 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %109(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.16, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end78:                                     ; preds = %assert_end76
  %110 = getelementptr inbounds %1, %1* %ph_3244, i64 0, i32 2, !dbg !18
  %111 = load i32, i32* %110, align 4, !dbg !18
  %112 = icmp eq i32 %111, 3, !dbg !18
  br i1 %112, label %assert_end82, label %assert_fail79, !dbg !18, !prof !19

assert_fail79:                                    ; preds = %assert_end78
  %113 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %113(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.17, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end82:                                     ; preds = %assert_end78
  %114 = getelementptr inbounds %1, %1* %ph_3244, i64 0, i32 3, i32 2, !dbg !18
  %115 = load i16, i16* %114, align 2, !dbg !18
  %116 = icmp eq i16 %115, 1, !dbg !18
  %117 = getelementptr inbounds %1, %1* %ph_3244, i64 0, i32 3, i32 1, !dbg !18
  %118 = load i8, i8* %117, align 1, !dbg !18
  %119 = icmp eq i8 %118, 32, !dbg !18
  %120 = getelementptr inbounds %1, %1* %ph_3244, i64 0, i32 3, i32 0, !dbg !18
  %121 = load i8, i8* %120, align 1, !dbg !18
  %122 = icmp eq i8 %121, 2, !dbg !18
  %123 = and i1 %119, %122, !dbg !18
  %124 = and i1 %116, %123, !dbg !18
  br i1 %124, label %assert_end84, label %assert_fail83, !dbg !18, !prof !19

assert_fail83:                                    ; preds = %assert_end82
  %125 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %125(i8* getelementptr inbounds ([235 x i8], [235 x i8]* @.str.18, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end84:                                     ; preds = %assert_end82
  %126 = load i64, i64* %default_function.ph_3.shape, align 8, !dbg !18, !tbaa !83
  %127 = trunc i64 %126 to i32, !dbg !18
  %128 = icmp eq i32 %127, 13, !dbg !18
  br i1 %128, label %assert_end86, label %assert_fail85, !dbg !18, !prof !19

assert_fail85:                                    ; preds = %assert_end84
  %129 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %129(i8* getelementptr inbounds ([193 x i8], [193 x i8]* @.str.19, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end86:                                     ; preds = %assert_end84
  %130 = getelementptr inbounds i64, i64* %default_function.ph_3.shape, i64 1, !dbg !18
  %131 = load i64, i64* %130, align 8, !dbg !18, !tbaa !93
  %132 = trunc i64 %131 to i32, !dbg !18
  %133 = icmp eq i32 %132, 16, !dbg !18
  br i1 %133, label %assert_end88, label %assert_fail87, !dbg !18, !prof !19

assert_fail87:                                    ; preds = %assert_end86
  %134 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %134(i8* getelementptr inbounds ([193 x i8], [193 x i8]* @.str.20, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end88:                                     ; preds = %assert_end86
  %135 = getelementptr inbounds i64, i64* %default_function.ph_3.shape, i64 2, !dbg !18
  %136 = load i64, i64* %135, align 8, !dbg !18, !tbaa !95
  %137 = trunc i64 %136 to i32, !dbg !18
  %138 = icmp eq i32 %137, 5, !dbg !18
  br i1 %138, label %assert_end90, label %assert_fail89, !dbg !18, !prof !19

assert_fail89:                                    ; preds = %assert_end88
  %139 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %139(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.21, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end90:                                     ; preds = %assert_end88
  %140 = icmp eq i64* %default_function.ph_3.strides, null, !dbg !18
  br i1 %140, label %if_end92, label %if_then91, !dbg !18, !prof !67

if_then91:                                        ; preds = %assert_end90
  %141 = load i64, i64* %default_function.ph_3.strides, align 8, !dbg !18, !tbaa !98
  %142 = trunc i64 %141 to i32, !dbg !18
  %143 = icmp eq i32 %142, 80, !dbg !18
  %144 = getelementptr inbounds i64, i64* %default_function.ph_3.strides, i64 1, !dbg !18
  %145 = load i64, i64* %144, align 8, !dbg !18, !tbaa !108
  %146 = trunc i64 %145 to i32, !dbg !18
  %147 = icmp eq i32 %146, 5, !dbg !18
  %148 = getelementptr inbounds i64, i64* %default_function.ph_3.strides, i64 2, !dbg !18
  %149 = load i64, i64* %148, align 8, !dbg !18, !tbaa !110
  %150 = trunc i64 %149 to i32, !dbg !18
  %151 = icmp eq i32 %150, 1, !dbg !18
  %152 = and i1 %147, %151, !dbg !18
  %153 = and i1 %143, %152, !dbg !18
  br i1 %153, label %if_end92, label %assert_fail93, !dbg !18, !prof !19

if_end92:                                         ; preds = %assert_end90, %if_then91
  %154 = getelementptr inbounds %1, %1* %ph_3244, i64 0, i32 6, !dbg !18
  %155 = load i64, i64* %154, align 8, !dbg !18
  %156 = icmp eq i64 %155, 0, !dbg !18
  br i1 %156, label %assert_end96, label %assert_fail95, !dbg !18, !prof !19

assert_fail93:                                    ; preds = %if_then91
  %157 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %157(i8* getelementptr inbounds ([248 x i8], [248 x i8]* @.str.22, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail95:                                    ; preds = %if_end92
  %158 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %158(i8* getelementptr inbounds ([196 x i8], [196 x i8]* @.str.23, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end96:                                     ; preds = %if_end92
  %159 = getelementptr inbounds %1, %1* %ph_3244, i64 0, i32 1, i32 0, !dbg !18
  %160 = load i32, i32* %159, align 4, !dbg !18
  %161 = icmp eq i32 %160, 1, !dbg !18
  br i1 %161, label %assert_end98, label %assert_fail97, !dbg !18, !prof !19

assert_fail97:                                    ; preds = %assert_end96
  %162 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %162(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.24, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end98:                                     ; preds = %assert_end96
  %163 = getelementptr inbounds %1, %1* %ph_3244, i64 0, i32 1, i32 1, !dbg !18
  %164 = load i32, i32* %163, align 4, !dbg !18
  %165 = icmp eq i32 %dev_id, %164, !dbg !18
  br i1 %165, label %assert_end100, label %assert_fail99, !dbg !18, !prof !19

assert_fail99:                                    ; preds = %assert_end98
  %166 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %166(i8* getelementptr inbounds ([182 x i8], [182 x i8]* @.str.25, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end100:                                    ; preds = %assert_end98
  %167 = getelementptr inbounds %1, %1* %ph_10245, i64 0, i32 2, !dbg !18
  %168 = load i32, i32* %167, align 4, !dbg !18
  %169 = icmp eq i32 %168, 3, !dbg !18
  br i1 %169, label %assert_end104, label %assert_fail101, !dbg !18, !prof !19

assert_fail101:                                   ; preds = %assert_end100
  %170 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %170(i8* getelementptr inbounds ([109 x i8], [109 x i8]* @.str.26, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end104:                                    ; preds = %assert_end100
  %171 = getelementptr inbounds %1, %1* %ph_10245, i64 0, i32 3, i32 2, !dbg !18
  %172 = load i16, i16* %171, align 2, !dbg !18
  %173 = icmp eq i16 %172, 1, !dbg !18
  %174 = getelementptr inbounds %1, %1* %ph_10245, i64 0, i32 3, i32 1, !dbg !18
  %175 = load i8, i8* %174, align 1, !dbg !18
  %176 = icmp eq i8 %175, 32, !dbg !18
  %177 = getelementptr inbounds %1, %1* %ph_10245, i64 0, i32 3, i32 0, !dbg !18
  %178 = load i8, i8* %177, align 1, !dbg !18
  %179 = icmp eq i8 %178, 2, !dbg !18
  %180 = and i1 %176, %179, !dbg !18
  %181 = and i1 %173, %180, !dbg !18
  br i1 %181, label %assert_end106, label %assert_fail105, !dbg !18, !prof !19

assert_fail105:                                   ; preds = %assert_end104
  %182 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %182(i8* getelementptr inbounds ([239 x i8], [239 x i8]* @.str.27, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end106:                                    ; preds = %assert_end104
  %183 = load i64, i64* %default_function.ph_10.shape, align 8, !dbg !18, !tbaa !113
  %184 = trunc i64 %183 to i32, !dbg !18
  %185 = icmp eq i32 %184, 13, !dbg !18
  br i1 %185, label %assert_end108, label %assert_fail107, !dbg !18, !prof !19

assert_fail107:                                   ; preds = %assert_end106
  %186 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %186(i8* getelementptr inbounds ([196 x i8], [196 x i8]* @.str.28, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end108:                                    ; preds = %assert_end106
  %187 = getelementptr inbounds i64, i64* %default_function.ph_10.shape, i64 1, !dbg !18
  %188 = load i64, i64* %187, align 8, !dbg !18, !tbaa !123
  %189 = trunc i64 %188 to i32, !dbg !18
  %190 = icmp eq i32 %189, 5, !dbg !18
  br i1 %190, label %assert_end110, label %assert_fail109, !dbg !18, !prof !19

assert_fail109:                                   ; preds = %assert_end108
  %191 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %191(i8* getelementptr inbounds ([194 x i8], [194 x i8]* @.str.29, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end110:                                    ; preds = %assert_end108
  %192 = getelementptr inbounds i64, i64* %default_function.ph_10.shape, i64 2, !dbg !18
  %193 = load i64, i64* %192, align 8, !dbg !18, !tbaa !125
  %194 = trunc i64 %193 to i32, !dbg !18
  %195 = icmp eq i32 %194, 5, !dbg !18
  br i1 %195, label %assert_end112, label %assert_fail111, !dbg !18, !prof !19

assert_fail111:                                   ; preds = %assert_end110
  %196 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %196(i8* getelementptr inbounds ([194 x i8], [194 x i8]* @.str.30, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end112:                                    ; preds = %assert_end110
  %197 = icmp eq i64* %default_function.ph_10.strides, null, !dbg !18
  br i1 %197, label %if_end114, label %if_then113, !dbg !18, !prof !67

if_then113:                                       ; preds = %assert_end112
  %198 = load i64, i64* %default_function.ph_10.strides, align 8, !dbg !18, !tbaa !128
  %199 = trunc i64 %198 to i32, !dbg !18
  %200 = icmp eq i32 %199, 25, !dbg !18
  %201 = getelementptr inbounds i64, i64* %default_function.ph_10.strides, i64 1, !dbg !18
  %202 = load i64, i64* %201, align 8, !dbg !18, !tbaa !138
  %203 = trunc i64 %202 to i32, !dbg !18
  %204 = icmp eq i32 %203, 5, !dbg !18
  %205 = getelementptr inbounds i64, i64* %default_function.ph_10.strides, i64 2, !dbg !18
  %206 = load i64, i64* %205, align 8, !dbg !18, !tbaa !140
  %207 = trunc i64 %206 to i32, !dbg !18
  %208 = icmp eq i32 %207, 1, !dbg !18
  %209 = and i1 %204, %208, !dbg !18
  %210 = and i1 %200, %209, !dbg !18
  br i1 %210, label %if_end114, label %assert_fail115, !dbg !18, !prof !19

if_end114:                                        ; preds = %assert_end112, %if_then113
  %211 = getelementptr inbounds %1, %1* %ph_10245, i64 0, i32 6, !dbg !18
  %212 = load i64, i64* %211, align 8, !dbg !18
  %213 = icmp eq i64 %212, 0, !dbg !18
  br i1 %213, label %assert_end118, label %assert_fail117, !dbg !18, !prof !19

assert_fail115:                                   ; preds = %if_then113
  %214 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %214(i8* getelementptr inbounds ([252 x i8], [252 x i8]* @.str.31, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail117:                                   ; preds = %if_end114
  %215 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %215(i8* getelementptr inbounds ([199 x i8], [199 x i8]* @.str.32, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end118:                                    ; preds = %if_end114
  %216 = getelementptr inbounds %1, %1* %ph_10245, i64 0, i32 1, i32 0, !dbg !18
  %217 = load i32, i32* %216, align 4, !dbg !18
  %218 = icmp eq i32 %217, 1, !dbg !18
  br i1 %218, label %assert_end120, label %assert_fail119, !dbg !18, !prof !19

assert_fail119:                                   ; preds = %assert_end118
  %219 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %219(i8* getelementptr inbounds ([179 x i8], [179 x i8]* @.str.33, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end120:                                    ; preds = %assert_end118
  %220 = getelementptr inbounds %1, %1* %ph_10245, i64 0, i32 1, i32 1, !dbg !18
  %221 = load i32, i32* %220, align 4, !dbg !18
  %222 = icmp eq i32 %dev_id, %221, !dbg !18
  br i1 %222, label %assert_end122, label %assert_fail121, !dbg !18, !prof !19

assert_fail121:                                   ; preds = %assert_end120
  %223 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %223(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.34, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end122:                                    ; preds = %assert_end120
  %224 = getelementptr inbounds %1, %1* %compute246, i64 0, i32 2, !dbg !18
  %225 = load i32, i32* %224, align 4, !dbg !18
  %226 = icmp eq i32 %225, 3, !dbg !18
  br i1 %226, label %assert_end126, label %assert_fail123, !dbg !18, !prof !19

assert_fail123:                                   ; preds = %assert_end122
  %227 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %227(i8* getelementptr inbounds ([113 x i8], [113 x i8]* @.str.35, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end126:                                    ; preds = %assert_end122
  %228 = getelementptr inbounds %1, %1* %compute246, i64 0, i32 3, i32 2, !dbg !18
  %229 = load i16, i16* %228, align 2, !dbg !18
  %230 = icmp eq i16 %229, 1, !dbg !18
  %231 = getelementptr inbounds %1, %1* %compute246, i64 0, i32 3, i32 1, !dbg !18
  %232 = load i8, i8* %231, align 1, !dbg !18
  %233 = icmp eq i8 %232, 32, !dbg !18
  %234 = getelementptr inbounds %1, %1* %compute246, i64 0, i32 3, i32 0, !dbg !18
  %235 = load i8, i8* %234, align 1, !dbg !18
  %236 = icmp eq i8 %235, 2, !dbg !18
  %237 = and i1 %233, %236, !dbg !18
  %238 = and i1 %230, %237, !dbg !18
  br i1 %238, label %assert_end128, label %assert_fail127, !dbg !18, !prof !19

assert_fail127:                                   ; preds = %assert_end126
  %239 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %239(i8* getelementptr inbounds ([247 x i8], [247 x i8]* @.str.36, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end128:                                    ; preds = %assert_end126
  %240 = load i64, i64* %default_function.compute.shape, align 8, !dbg !18, !tbaa !143
  %241 = trunc i64 %240 to i32, !dbg !18
  %242 = icmp eq i32 %241, 13, !dbg !18
  br i1 %242, label %assert_end130, label %assert_fail129, !dbg !18, !prof !19

assert_fail129:                                   ; preds = %assert_end128
  %243 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %243(i8* getelementptr inbounds ([202 x i8], [202 x i8]* @.str.37, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end130:                                    ; preds = %assert_end128
  %244 = getelementptr inbounds i64, i64* %default_function.compute.shape, i64 1, !dbg !18
  %245 = load i64, i64* %244, align 8, !dbg !18, !tbaa !153
  %246 = trunc i64 %245 to i32, !dbg !18
  %247 = icmp eq i32 %246, 5, !dbg !18
  br i1 %247, label %assert_end132, label %assert_fail131, !dbg !18, !prof !19

assert_fail131:                                   ; preds = %assert_end130
  %248 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %248(i8* getelementptr inbounds ([200 x i8], [200 x i8]* @.str.38, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end132:                                    ; preds = %assert_end130
  %249 = getelementptr inbounds i64, i64* %default_function.compute.shape, i64 2, !dbg !18
  %250 = load i64, i64* %249, align 8, !dbg !18, !tbaa !155
  %251 = trunc i64 %250 to i32, !dbg !18
  %252 = icmp eq i32 %251, 16, !dbg !18
  br i1 %252, label %assert_end134, label %assert_fail133, !dbg !18, !prof !19

assert_fail133:                                   ; preds = %assert_end132
  %253 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %253(i8* getelementptr inbounds ([202 x i8], [202 x i8]* @.str.39, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end134:                                    ; preds = %assert_end132
  %254 = icmp eq i64* %default_function.compute.strides, null, !dbg !18
  br i1 %254, label %if_end136, label %if_then135, !dbg !18, !prof !67

if_then135:                                       ; preds = %assert_end134
  %255 = load i64, i64* %default_function.compute.strides, align 8, !dbg !18, !tbaa !158
  %256 = trunc i64 %255 to i32, !dbg !18
  %257 = icmp eq i32 %256, 80, !dbg !18
  %258 = getelementptr inbounds i64, i64* %default_function.compute.strides, i64 1, !dbg !18
  %259 = load i64, i64* %258, align 8, !dbg !18, !tbaa !168
  %260 = trunc i64 %259 to i32, !dbg !18
  %261 = icmp eq i32 %260, 16, !dbg !18
  %262 = getelementptr inbounds i64, i64* %default_function.compute.strides, i64 2, !dbg !18
  %263 = load i64, i64* %262, align 8, !dbg !18, !tbaa !170
  %264 = trunc i64 %263 to i32, !dbg !18
  %265 = icmp eq i32 %264, 1, !dbg !18
  %266 = and i1 %261, %265, !dbg !18
  %267 = and i1 %257, %266, !dbg !18
  br i1 %267, label %if_end136, label %assert_fail137, !dbg !18, !prof !19

if_end136:                                        ; preds = %assert_end134, %if_then135
  %268 = getelementptr inbounds %1, %1* %compute246, i64 0, i32 6, !dbg !18
  %269 = load i64, i64* %268, align 8, !dbg !18
  %270 = icmp eq i64 %269, 0, !dbg !18
  br i1 %270, label %assert_end140, label %assert_fail139, !dbg !18, !prof !19

assert_fail137:                                   ; preds = %if_then135
  %271 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %271(i8* getelementptr inbounds ([261 x i8], [261 x i8]* @.str.40, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail139:                                   ; preds = %if_end136
  %272 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %272(i8* getelementptr inbounds ([205 x i8], [205 x i8]* @.str.41, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end140:                                    ; preds = %if_end136
  %273 = getelementptr inbounds %1, %1* %compute246, i64 0, i32 1, i32 0, !dbg !18
  %274 = load i32, i32* %273, align 4, !dbg !18
  %275 = icmp eq i32 %274, 1, !dbg !18
  br i1 %275, label %assert_end142, label %assert_fail141, !dbg !18, !prof !19

assert_fail141:                                   ; preds = %assert_end140
  %276 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %276(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.42, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end142:                                    ; preds = %assert_end140
  %277 = getelementptr inbounds %1, %1* %compute246, i64 0, i32 1, i32 1, !dbg !18
  %278 = load i32, i32* %277, align 4, !dbg !18
  %279 = icmp eq i32 %dev_id, %278, !dbg !18
  br i1 %279, label %assert_end144, label %assert_fail143, !dbg !18, !prof !19

assert_fail143:                                   ; preds = %assert_end142
  %280 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %280(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.43, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end144:                                    ; preds = %assert_end142
  %281 = getelementptr inbounds %1, %1* %compute4247, i64 0, i32 2, !dbg !18
  %282 = load i32, i32* %281, align 4, !dbg !18
  %283 = icmp eq i32 %282, 3, !dbg !18
  br i1 %283, label %assert_end148, label %assert_fail145, !dbg !18, !prof !19

assert_fail145:                                   ; preds = %assert_end144
  %284 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %284(i8* getelementptr inbounds ([113 x i8], [113 x i8]* @.str.35, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end148:                                    ; preds = %assert_end144
  %285 = getelementptr inbounds %1, %1* %compute4247, i64 0, i32 3, i32 2, !dbg !18
  %286 = load i16, i16* %285, align 2, !dbg !18
  %287 = icmp eq i16 %286, 1, !dbg !18
  %288 = getelementptr inbounds %1, %1* %compute4247, i64 0, i32 3, i32 1, !dbg !18
  %289 = load i8, i8* %288, align 1, !dbg !18
  %290 = icmp eq i8 %289, 32, !dbg !18
  %291 = getelementptr inbounds %1, %1* %compute4247, i64 0, i32 3, i32 0, !dbg !18
  %292 = load i8, i8* %291, align 1, !dbg !18
  %293 = icmp eq i8 %292, 2, !dbg !18
  %294 = and i1 %290, %293, !dbg !18
  %295 = and i1 %287, %294, !dbg !18
  br i1 %295, label %assert_end150, label %assert_fail149, !dbg !18, !prof !19

assert_fail149:                                   ; preds = %assert_end148
  %296 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %296(i8* getelementptr inbounds ([247 x i8], [247 x i8]* @.str.36, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end150:                                    ; preds = %assert_end148
  %297 = load i64, i64* %default_function.compute.shape25, align 8, !dbg !18, !tbaa !173
  %298 = trunc i64 %297 to i32, !dbg !18
  %299 = icmp eq i32 %298, 13, !dbg !18
  br i1 %299, label %assert_end152, label %assert_fail151, !dbg !18, !prof !19

assert_fail151:                                   ; preds = %assert_end150
  %300 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %300(i8* getelementptr inbounds ([202 x i8], [202 x i8]* @.str.37, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end152:                                    ; preds = %assert_end150
  %301 = getelementptr inbounds i64, i64* %default_function.compute.shape25, i64 1, !dbg !18
  %302 = load i64, i64* %301, align 8, !dbg !18, !tbaa !183
  %303 = trunc i64 %302 to i32, !dbg !18
  %304 = icmp eq i32 %303, 5, !dbg !18
  br i1 %304, label %assert_end154, label %assert_fail153, !dbg !18, !prof !19

assert_fail153:                                   ; preds = %assert_end152
  %305 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %305(i8* getelementptr inbounds ([200 x i8], [200 x i8]* @.str.38, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end154:                                    ; preds = %assert_end152
  %306 = getelementptr inbounds i64, i64* %default_function.compute.shape25, i64 2, !dbg !18
  %307 = load i64, i64* %306, align 8, !dbg !18, !tbaa !185
  %308 = trunc i64 %307 to i32, !dbg !18
  %309 = icmp eq i32 %308, 16, !dbg !18
  br i1 %309, label %assert_end156, label %assert_fail155, !dbg !18, !prof !19

assert_fail155:                                   ; preds = %assert_end154
  %310 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %310(i8* getelementptr inbounds ([202 x i8], [202 x i8]* @.str.39, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end156:                                    ; preds = %assert_end154
  %311 = icmp eq i64* %default_function.compute.strides26, null, !dbg !18
  br i1 %311, label %if_end158, label %if_then157, !dbg !18, !prof !67

if_then157:                                       ; preds = %assert_end156
  %312 = load i64, i64* %default_function.compute.strides26, align 8, !dbg !18, !tbaa !188
  %313 = trunc i64 %312 to i32, !dbg !18
  %314 = icmp eq i32 %313, 80, !dbg !18
  %315 = getelementptr inbounds i64, i64* %default_function.compute.strides26, i64 1, !dbg !18
  %316 = load i64, i64* %315, align 8, !dbg !18, !tbaa !198
  %317 = trunc i64 %316 to i32, !dbg !18
  %318 = icmp eq i32 %317, 16, !dbg !18
  %319 = getelementptr inbounds i64, i64* %default_function.compute.strides26, i64 2, !dbg !18
  %320 = load i64, i64* %319, align 8, !dbg !18, !tbaa !200
  %321 = trunc i64 %320 to i32, !dbg !18
  %322 = icmp eq i32 %321, 1, !dbg !18
  %323 = and i1 %318, %322, !dbg !18
  %324 = and i1 %314, %323, !dbg !18
  br i1 %324, label %if_end158, label %assert_fail159, !dbg !18, !prof !19

if_end158:                                        ; preds = %assert_end156, %if_then157
  %325 = getelementptr inbounds %1, %1* %compute4247, i64 0, i32 6, !dbg !18
  %326 = load i64, i64* %325, align 8, !dbg !18
  %327 = icmp eq i64 %326, 0, !dbg !18
  br i1 %327, label %assert_end162, label %assert_fail161, !dbg !18, !prof !19

assert_fail159:                                   ; preds = %if_then157
  %328 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %328(i8* getelementptr inbounds ([261 x i8], [261 x i8]* @.str.40, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail161:                                   ; preds = %if_end158
  %329 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %329(i8* getelementptr inbounds ([205 x i8], [205 x i8]* @.str.41, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end162:                                    ; preds = %if_end158
  %330 = getelementptr inbounds %1, %1* %compute4247, i64 0, i32 1, i32 0, !dbg !18
  %331 = load i32, i32* %330, align 4, !dbg !18
  %332 = icmp eq i32 %331, 1, !dbg !18
  br i1 %332, label %assert_end164, label %assert_fail163, !dbg !18, !prof !19

assert_fail163:                                   ; preds = %assert_end162
  %333 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %333(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.42, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end164:                                    ; preds = %assert_end162
  %334 = getelementptr inbounds %1, %1* %compute4247, i64 0, i32 1, i32 1, !dbg !18
  %335 = load i32, i32* %334, align 4, !dbg !18
  %336 = icmp eq i32 %dev_id, %335, !dbg !18
  br i1 %336, label %assert_end166, label %assert_fail165, !dbg !18, !prof !19

assert_fail165:                                   ; preds = %assert_end164
  %337 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %337(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.43, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end166:                                    ; preds = %assert_end164
  %338 = getelementptr inbounds %1, %1* %compute5248, i64 0, i32 2, !dbg !18
  %339 = load i32, i32* %338, align 4, !dbg !18
  %340 = icmp eq i32 %339, 3, !dbg !18
  br i1 %340, label %assert_end170, label %assert_fail167, !dbg !18, !prof !19

assert_fail167:                                   ; preds = %assert_end166
  %341 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %341(i8* getelementptr inbounds ([113 x i8], [113 x i8]* @.str.35, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end170:                                    ; preds = %assert_end166
  %342 = getelementptr inbounds %1, %1* %compute5248, i64 0, i32 3, i32 2, !dbg !18
  %343 = load i16, i16* %342, align 2, !dbg !18
  %344 = icmp eq i16 %343, 1, !dbg !18
  %345 = getelementptr inbounds %1, %1* %compute5248, i64 0, i32 3, i32 1, !dbg !18
  %346 = load i8, i8* %345, align 1, !dbg !18
  %347 = icmp eq i8 %346, 32, !dbg !18
  %348 = getelementptr inbounds %1, %1* %compute5248, i64 0, i32 3, i32 0, !dbg !18
  %349 = load i8, i8* %348, align 1, !dbg !18
  %350 = icmp eq i8 %349, 2, !dbg !18
  %351 = and i1 %347, %350, !dbg !18
  %352 = and i1 %344, %351, !dbg !18
  br i1 %352, label %assert_end172, label %assert_fail171, !dbg !18, !prof !19

assert_fail171:                                   ; preds = %assert_end170
  %353 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %353(i8* getelementptr inbounds ([247 x i8], [247 x i8]* @.str.36, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end172:                                    ; preds = %assert_end170
  %354 = load i64, i64* %default_function.compute.shape32, align 8, !dbg !18, !tbaa !203
  %355 = trunc i64 %354 to i32, !dbg !18
  %356 = icmp eq i32 %355, 13, !dbg !18
  br i1 %356, label %assert_end174, label %assert_fail173, !dbg !18, !prof !19

assert_fail173:                                   ; preds = %assert_end172
  %357 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %357(i8* getelementptr inbounds ([202 x i8], [202 x i8]* @.str.37, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end174:                                    ; preds = %assert_end172
  %358 = getelementptr inbounds i64, i64* %default_function.compute.shape32, i64 1, !dbg !18
  %359 = load i64, i64* %358, align 8, !dbg !18, !tbaa !213
  %360 = trunc i64 %359 to i32, !dbg !18
  %361 = icmp eq i32 %360, 5, !dbg !18
  br i1 %361, label %assert_end176, label %assert_fail175, !dbg !18, !prof !19

assert_fail175:                                   ; preds = %assert_end174
  %362 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %362(i8* getelementptr inbounds ([200 x i8], [200 x i8]* @.str.38, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end176:                                    ; preds = %assert_end174
  %363 = getelementptr inbounds i64, i64* %default_function.compute.shape32, i64 2, !dbg !18
  %364 = load i64, i64* %363, align 8, !dbg !18, !tbaa !215
  %365 = trunc i64 %364 to i32, !dbg !18
  %366 = icmp eq i32 %365, 16, !dbg !18
  br i1 %366, label %assert_end178, label %assert_fail177, !dbg !18, !prof !19

assert_fail177:                                   ; preds = %assert_end176
  %367 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %367(i8* getelementptr inbounds ([202 x i8], [202 x i8]* @.str.39, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end178:                                    ; preds = %assert_end176
  %368 = icmp eq i64* %default_function.compute.strides33, null, !dbg !18
  br i1 %368, label %if_end180, label %if_then179, !dbg !18, !prof !67

if_then179:                                       ; preds = %assert_end178
  %369 = load i64, i64* %default_function.compute.strides33, align 8, !dbg !18, !tbaa !218
  %370 = trunc i64 %369 to i32, !dbg !18
  %371 = icmp eq i32 %370, 80, !dbg !18
  %372 = getelementptr inbounds i64, i64* %default_function.compute.strides33, i64 1, !dbg !18
  %373 = load i64, i64* %372, align 8, !dbg !18, !tbaa !228
  %374 = trunc i64 %373 to i32, !dbg !18
  %375 = icmp eq i32 %374, 16, !dbg !18
  %376 = getelementptr inbounds i64, i64* %default_function.compute.strides33, i64 2, !dbg !18
  %377 = load i64, i64* %376, align 8, !dbg !18, !tbaa !230
  %378 = trunc i64 %377 to i32, !dbg !18
  %379 = icmp eq i32 %378, 1, !dbg !18
  %380 = and i1 %375, %379, !dbg !18
  %381 = and i1 %371, %380, !dbg !18
  br i1 %381, label %if_end180, label %assert_fail181, !dbg !18, !prof !19

if_end180:                                        ; preds = %assert_end178, %if_then179
  %382 = getelementptr inbounds %1, %1* %compute5248, i64 0, i32 6, !dbg !18
  %383 = load i64, i64* %382, align 8, !dbg !18
  %384 = icmp eq i64 %383, 0, !dbg !18
  br i1 %384, label %assert_end184, label %assert_fail183, !dbg !18, !prof !19

assert_fail181:                                   ; preds = %if_then179
  %385 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %385(i8* getelementptr inbounds ([261 x i8], [261 x i8]* @.str.40, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail183:                                   ; preds = %if_end180
  %386 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %386(i8* getelementptr inbounds ([205 x i8], [205 x i8]* @.str.41, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end184:                                    ; preds = %if_end180
  %387 = getelementptr inbounds %1, %1* %compute5248, i64 0, i32 1, i32 0, !dbg !18
  %388 = load i32, i32* %387, align 4, !dbg !18
  %389 = icmp eq i32 %388, 1, !dbg !18
  br i1 %389, label %assert_end186, label %assert_fail185, !dbg !18, !prof !19

assert_fail185:                                   ; preds = %assert_end184
  %390 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %390(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.42, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end186:                                    ; preds = %assert_end184
  %391 = getelementptr inbounds %1, %1* %compute5248, i64 0, i32 1, i32 1, !dbg !18
  %392 = load i32, i32* %391, align 4, !dbg !18
  %393 = icmp eq i32 %dev_id, %392, !dbg !18
  br i1 %393, label %assert_end188, label %assert_fail187, !dbg !18, !prof !19

assert_fail187:                                   ; preds = %assert_end186
  %394 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %394(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.43, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end188:                                    ; preds = %assert_end186
  %395 = getelementptr inbounds %1, %1* %compute6249, i64 0, i32 2, !dbg !18
  %396 = load i32, i32* %395, align 4, !dbg !18
  %397 = icmp eq i32 %396, 3, !dbg !18
  br i1 %397, label %assert_end192, label %assert_fail189, !dbg !18, !prof !19

assert_fail189:                                   ; preds = %assert_end188
  %398 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %398(i8* getelementptr inbounds ([113 x i8], [113 x i8]* @.str.35, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end192:                                    ; preds = %assert_end188
  %399 = getelementptr inbounds %1, %1* %compute6249, i64 0, i32 3, i32 2, !dbg !18
  %400 = load i16, i16* %399, align 2, !dbg !18
  %401 = icmp eq i16 %400, 1, !dbg !18
  %402 = getelementptr inbounds %1, %1* %compute6249, i64 0, i32 3, i32 1, !dbg !18
  %403 = load i8, i8* %402, align 1, !dbg !18
  %404 = icmp eq i8 %403, 32, !dbg !18
  %405 = getelementptr inbounds %1, %1* %compute6249, i64 0, i32 3, i32 0, !dbg !18
  %406 = load i8, i8* %405, align 1, !dbg !18
  %407 = icmp eq i8 %406, 2, !dbg !18
  %408 = and i1 %404, %407, !dbg !18
  %409 = and i1 %401, %408, !dbg !18
  br i1 %409, label %assert_end194, label %assert_fail193, !dbg !18, !prof !19

assert_fail193:                                   ; preds = %assert_end192
  %410 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %410(i8* getelementptr inbounds ([247 x i8], [247 x i8]* @.str.36, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end194:                                    ; preds = %assert_end192
  %411 = load i64, i64* %default_function.compute.shape39, align 8, !dbg !18, !tbaa !233
  %412 = trunc i64 %411 to i32, !dbg !18
  %413 = icmp eq i32 %412, 13, !dbg !18
  br i1 %413, label %assert_end196, label %assert_fail195, !dbg !18, !prof !19

assert_fail195:                                   ; preds = %assert_end194
  %414 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %414(i8* getelementptr inbounds ([202 x i8], [202 x i8]* @.str.37, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end196:                                    ; preds = %assert_end194
  %415 = getelementptr inbounds i64, i64* %default_function.compute.shape39, i64 1, !dbg !18
  %416 = load i64, i64* %415, align 8, !dbg !18, !tbaa !243
  %417 = trunc i64 %416 to i32, !dbg !18
  %418 = icmp eq i32 %417, 5, !dbg !18
  br i1 %418, label %assert_end198, label %assert_fail197, !dbg !18, !prof !19

assert_fail197:                                   ; preds = %assert_end196
  %419 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %419(i8* getelementptr inbounds ([200 x i8], [200 x i8]* @.str.38, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end198:                                    ; preds = %assert_end196
  %420 = getelementptr inbounds i64, i64* %default_function.compute.shape39, i64 2, !dbg !18
  %421 = load i64, i64* %420, align 8, !dbg !18, !tbaa !245
  %422 = trunc i64 %421 to i32, !dbg !18
  %423 = icmp eq i32 %422, 5, !dbg !18
  br i1 %423, label %assert_end200, label %assert_fail199, !dbg !18, !prof !19

assert_fail199:                                   ; preds = %assert_end198
  %424 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %424(i8* getelementptr inbounds ([200 x i8], [200 x i8]* @.str.44, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end200:                                    ; preds = %assert_end198
  %425 = icmp eq i64* %default_function.compute.strides40, null, !dbg !18
  br i1 %425, label %if_end202, label %if_then201, !dbg !18, !prof !67

if_then201:                                       ; preds = %assert_end200
  %426 = load i64, i64* %default_function.compute.strides40, align 8, !dbg !18, !tbaa !248
  %427 = trunc i64 %426 to i32, !dbg !18
  %428 = icmp eq i32 %427, 25, !dbg !18
  %429 = getelementptr inbounds i64, i64* %default_function.compute.strides40, i64 1, !dbg !18
  %430 = load i64, i64* %429, align 8, !dbg !18, !tbaa !258
  %431 = trunc i64 %430 to i32, !dbg !18
  %432 = icmp eq i32 %431, 5, !dbg !18
  %433 = getelementptr inbounds i64, i64* %default_function.compute.strides40, i64 2, !dbg !18
  %434 = load i64, i64* %433, align 8, !dbg !18, !tbaa !260
  %435 = trunc i64 %434 to i32, !dbg !18
  %436 = icmp eq i32 %435, 1, !dbg !18
  %437 = and i1 %432, %436, !dbg !18
  %438 = and i1 %428, %437, !dbg !18
  br i1 %438, label %if_end202, label %assert_fail203, !dbg !18, !prof !19

if_end202:                                        ; preds = %assert_end200, %if_then201
  %439 = getelementptr inbounds %1, %1* %compute6249, i64 0, i32 6, !dbg !18
  %440 = load i64, i64* %439, align 8, !dbg !18
  %441 = icmp eq i64 %440, 0, !dbg !18
  br i1 %441, label %assert_end206, label %assert_fail205, !dbg !18, !prof !19

assert_fail203:                                   ; preds = %if_then201
  %442 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %442(i8* getelementptr inbounds ([260 x i8], [260 x i8]* @.str.45, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail205:                                   ; preds = %if_end202
  %443 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %443(i8* getelementptr inbounds ([205 x i8], [205 x i8]* @.str.41, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end206:                                    ; preds = %if_end202
  %444 = getelementptr inbounds %1, %1* %compute6249, i64 0, i32 1, i32 0, !dbg !18
  %445 = load i32, i32* %444, align 4, !dbg !18
  %446 = icmp eq i32 %445, 1, !dbg !18
  br i1 %446, label %assert_end208, label %assert_fail207, !dbg !18, !prof !19

assert_fail207:                                   ; preds = %assert_end206
  %447 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %447(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.42, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end208:                                    ; preds = %assert_end206
  %448 = getelementptr inbounds %1, %1* %compute6249, i64 0, i32 1, i32 1, !dbg !18
  %449 = load i32, i32* %448, align 4, !dbg !18
  %450 = icmp eq i32 %dev_id, %449, !dbg !18
  br i1 %450, label %assert_end210, label %assert_fail209, !dbg !18, !prof !19

assert_fail209:                                   ; preds = %assert_end208
  %451 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %451(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.43, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end210:                                    ; preds = %assert_end208
  %452 = getelementptr inbounds %1, %1* %T_mod250, i64 0, i32 2, !dbg !18
  %453 = load i32, i32* %452, align 4, !dbg !18
  %454 = icmp eq i32 %453, 3, !dbg !18
  br i1 %454, label %assert_end214, label %assert_fail211, !dbg !18, !prof !19

assert_fail211:                                   ; preds = %assert_end210
  %455 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %455(i8* getelementptr inbounds ([109 x i8], [109 x i8]* @.str.46, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end214:                                    ; preds = %assert_end210
  %456 = getelementptr inbounds %1, %1* %T_mod250, i64 0, i32 3, i32 2, !dbg !18
  %457 = load i16, i16* %456, align 2, !dbg !18
  %458 = icmp eq i16 %457, 1, !dbg !18
  %459 = getelementptr inbounds %1, %1* %T_mod250, i64 0, i32 3, i32 1, !dbg !18
  %460 = load i8, i8* %459, align 1, !dbg !18
  %461 = icmp eq i8 %460, 32, !dbg !18
  %462 = getelementptr inbounds %1, %1* %T_mod250, i64 0, i32 3, i32 0, !dbg !18
  %463 = load i8, i8* %462, align 1, !dbg !18
  %464 = icmp eq i8 %463, 2, !dbg !18
  %465 = and i1 %461, %464, !dbg !18
  %466 = and i1 %458, %465, !dbg !18
  br i1 %466, label %assert_end216, label %assert_fail215, !dbg !18, !prof !19

assert_fail215:                                   ; preds = %assert_end214
  %467 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %467(i8* getelementptr inbounds ([239 x i8], [239 x i8]* @.str.47, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end216:                                    ; preds = %assert_end214
  %468 = load i64, i64* %default_function.T_mod.shape, align 8, !dbg !18, !tbaa !263
  %469 = trunc i64 %468 to i32, !dbg !18
  %470 = icmp eq i32 %469, 13, !dbg !18
  br i1 %470, label %assert_end218, label %assert_fail217, !dbg !18, !prof !19

assert_fail217:                                   ; preds = %assert_end216
  %471 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %471(i8* getelementptr inbounds ([196 x i8], [196 x i8]* @.str.48, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end218:                                    ; preds = %assert_end216
  %472 = getelementptr inbounds i64, i64* %default_function.T_mod.shape, i64 1, !dbg !18
  %473 = load i64, i64* %472, align 8, !dbg !18, !tbaa !273
  %474 = trunc i64 %473 to i32, !dbg !18
  %475 = icmp eq i32 %474, 5, !dbg !18
  br i1 %475, label %assert_end220, label %assert_fail219, !dbg !18, !prof !19

assert_fail219:                                   ; preds = %assert_end218
  %476 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %476(i8* getelementptr inbounds ([194 x i8], [194 x i8]* @.str.49, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end220:                                    ; preds = %assert_end218
  %477 = getelementptr inbounds i64, i64* %default_function.T_mod.shape, i64 2, !dbg !18
  %478 = load i64, i64* %477, align 8, !dbg !18, !tbaa !275
  %479 = trunc i64 %478 to i32, !dbg !18
  %480 = icmp eq i32 %479, 5, !dbg !18
  br i1 %480, label %assert_end222, label %assert_fail221, !dbg !18, !prof !19

assert_fail221:                                   ; preds = %assert_end220
  %481 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %481(i8* getelementptr inbounds ([194 x i8], [194 x i8]* @.str.50, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end222:                                    ; preds = %assert_end220
  %482 = icmp eq i64* %default_function.T_mod.strides, null, !dbg !18
  br i1 %482, label %if_end224, label %if_then223, !dbg !18, !prof !67

if_then223:                                       ; preds = %assert_end222
  %483 = load i64, i64* %default_function.T_mod.strides, align 8, !dbg !18, !tbaa !278
  %484 = trunc i64 %483 to i32, !dbg !18
  %485 = icmp eq i32 %484, 25, !dbg !18
  %486 = getelementptr inbounds i64, i64* %default_function.T_mod.strides, i64 1, !dbg !18
  %487 = load i64, i64* %486, align 8, !dbg !18, !tbaa !288
  %488 = trunc i64 %487 to i32, !dbg !18
  %489 = icmp eq i32 %488, 5, !dbg !18
  %490 = getelementptr inbounds i64, i64* %default_function.T_mod.strides, i64 2, !dbg !18
  %491 = load i64, i64* %490, align 8, !dbg !18, !tbaa !290
  %492 = trunc i64 %491 to i32, !dbg !18
  %493 = icmp eq i32 %492, 1, !dbg !18
  %494 = and i1 %489, %493, !dbg !18
  %495 = and i1 %485, %494, !dbg !18
  br i1 %495, label %if_end224, label %assert_fail225, !dbg !18, !prof !19

if_end224:                                        ; preds = %assert_end222, %if_then223
  %496 = getelementptr inbounds %1, %1* %T_mod250, i64 0, i32 6, !dbg !18
  %497 = load i64, i64* %496, align 8, !dbg !18
  %498 = icmp eq i64 %497, 0, !dbg !18
  br i1 %498, label %assert_end228, label %assert_fail227, !dbg !18, !prof !19

assert_fail225:                                   ; preds = %if_then223
  %499 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %499(i8* getelementptr inbounds ([252 x i8], [252 x i8]* @.str.51, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail227:                                   ; preds = %if_end224
  %500 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %500(i8* getelementptr inbounds ([199 x i8], [199 x i8]* @.str.52, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end228:                                    ; preds = %if_end224
  %501 = getelementptr inbounds %1, %1* %T_mod250, i64 0, i32 1, i32 0, !dbg !18
  %502 = load i32, i32* %501, align 4, !dbg !18
  %503 = icmp eq i32 %502, 1, !dbg !18
  br i1 %503, label %assert_end230, label %assert_fail229, !dbg !18, !prof !19

assert_fail229:                                   ; preds = %assert_end228
  %504 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %504(i8* getelementptr inbounds ([179 x i8], [179 x i8]* @.str.53, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end230:                                    ; preds = %assert_end228
  %505 = getelementptr inbounds %1, %1* %T_mod250, i64 0, i32 1, i32 1, !dbg !18
  %506 = load i32, i32* %505, align 4, !dbg !18
  %507 = icmp eq i32 %dev_id, %506, !dbg !18
  br i1 %507, label %assert_end232, label %assert_fail231, !dbg !18, !prof !19

assert_fail231:                                   ; preds = %assert_end230
  %508 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %508(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.54, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end232:                                    ; preds = %assert_end230
  %509 = call fastcc i32 @default_function_compute_(i8* nonnull %stack_value, float* %T_mod_void_ptr258, i32* nonnull %stack_tcode242.sub, float* %compute_void_ptr254, float* %compute_void_ptr20255, float* %compute_void_ptr27256, float* %compute_void_ptr34257, float* %ph_0_void_ptr251, float* %ph_10_void_ptr253, float* %ph_3_void_ptr252), !dbg !18
  ret i32 %509, !dbg !18
}

; Function Attrs: nounwind willreturn
declare void @llvm.assume(i1) #1

; Function Attrs: noinline
define internal fastcc i32 @default_function_compute_(i8* noalias %0, float* noalias align 64 %1, i32* noalias %2, float* noalias align 64 %3, float* noalias align 64 %4, float* noalias align 64 %5, float* noalias align 64 %6, float* noalias align 64 %7, float* noalias align 64 %8, float* noalias align 64 %9) unnamed_addr #2 {
entry:
  %10 = alloca i8*, align 8
  %11 = bitcast i8* %0 to %0*
  %12 = bitcast i8* %0 to float**
  store float* %1, float** %12, align 8
  %13 = getelementptr inbounds i8, i8* %0, i64 8
  %14 = bitcast i8* %13 to float**
  store float* %3, float** %14, align 8
  %15 = getelementptr inbounds i8, i8* %0, i64 16
  %16 = bitcast i8* %15 to float**
  store float* %4, float** %16, align 8
  %17 = getelementptr inbounds i8, i8* %0, i64 24
  %18 = bitcast i8* %17 to float**
  store float* %5, float** %18, align 8
  %19 = bitcast i32* %2 to <4 x i32>*
  store <4 x i32> <i32 3, i32 3, i32 3, i32 3>, <4 x i32>* %19, align 4, !tbaa !293
  %20 = getelementptr inbounds i8, i8* %0, i64 32
  %21 = bitcast i8* %20 to float**
  store float* %6, float** %21, align 8
  %22 = getelementptr inbounds i32, i32* %2, i64 4
  %23 = getelementptr inbounds i8, i8* %0, i64 40
  %24 = bitcast i8* %23 to float**
  store float* %7, float** %24, align 8
  %25 = getelementptr inbounds i8, i8* %0, i64 48
  %26 = bitcast i8* %25 to float**
  store float* %8, float** %26, align 8
  %27 = getelementptr inbounds i8, i8* %0, i64 56
  %28 = bitcast i8* %27 to float**
  store float* %9, float** %28, align 8
  %29 = bitcast i32* %22 to <4 x i32>*
  store <4 x i32> <i32 3, i32 3, i32 3, i32 3>, <4 x i32>* %29, align 4, !tbaa !302
  %30 = getelementptr inbounds i8, i8* %0, i64 64
  %31 = bitcast i8* %30 to %0*
  %32 = getelementptr inbounds i32, i32* %2, i64 8
  %33 = load i32 (i8*, %0*, i32*, i32, %0*, i32*)*, i32 (i8*, %0*, i32*, i32, %0*, i32*)** @__TVMFuncCall, align 8, !tbaa !20
  %34 = load i8*, i8** @.tvm_func.default_function_kernel, align 8
  %35 = icmp eq i8* %34, null
  br i1 %35, label %handle_init, label %handle_init_end, !prof !67

handle_init:                                      ; preds = %entry
  %36 = load i8*, i8** @__tvm_module_ctx, align 8, !tbaa !20
  %37 = load i32 (i8*, i8*, i8**)*, i32 (i8*, i8*, i8**)** @__TVMBackendGetFuncFromEnv, align 8, !tbaa !20
  %38 = call i32 %37(i8* %36, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.55, i64 0, i64 0), i8** nonnull %10)
  %39 = icmp eq i32 %38, 0
  br i1 %39, label %call_end, label %call_fail, !prof !19

handle_init_end:                                  ; preds = %entry, %call_end
  %40 = phi i8* [ %34, %entry ], [ %43, %call_end ]
  %41 = call i32 %33(i8* %40, %0* %11, i32* nonnull %2, i32 8, %0* nonnull %31, i32* nonnull %32)
  %42 = icmp eq i32 %41, 0
  br i1 %42, label %call_end2, label %call_fail, !prof !19

call_fail:                                        ; preds = %call_end2, %handle_init_end, %handle_init
  %merge = phi i32 [ %38, %handle_init ], [ %41, %handle_init_end ], [ 0, %call_end2 ]
  ret i32 %merge

call_end:                                         ; preds = %handle_init
  %43 = load i8*, i8** %10, align 8
  store i8* %43, i8** @.tvm_func.default_function_kernel, align 8
  br label %handle_init_end

call_end2:                                        ; preds = %handle_init_end
  %44 = bitcast i8* %30 to i64*
  %45 = load i64, i64* %44, align 8
  %kernel_error_code = trunc i64 %45 to i32
  %46 = icmp eq i32 %kernel_error_code, 0
  br i1 %46, label %call_fail, label %assert_fail, !prof !19

assert_fail:                                      ; preds = %call_end2
  %47 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !20
  call void %47(i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.56, i64 0, i64 0))
  ret i32 -1
}

; Function Attrs: nounwind readnone
define weak dso_local i16 @__truncsfhf2(float %a0) local_unnamed_addr #3 section ".text.tvm.fp16.conv" {
b0:
  %v0 = bitcast float %a0 to i32
  %v1 = and i32 %v0, 2147483647
  %v2 = add nsw i32 %v1, -947912704
  %v3 = add nsw i32 %v1, -1199570944
  %v4 = icmp ult i32 %v2, %v3
  br i1 %v4, label %b1, label %b5

b1:                                               ; preds = %b0
  %v5 = lshr i32 %v0, 13
  %v6 = and i32 %v5, 65535
  %v7 = add nuw nsw i32 %v6, -114688
  %v8 = and i32 %v0, 8191
  %v9 = icmp ugt i32 %v8, 4096
  br i1 %v9, label %b2, label %b3

b2:                                               ; preds = %b1
  %v10 = add nuw nsw i32 %v6, -114687
  br label %b13

b3:                                               ; preds = %b1
  %v11 = icmp eq i32 %v8, 4096
  br i1 %v11, label %b4, label %b13

b4:                                               ; preds = %b3
  %v12 = and i32 %v7, 65535
  %v13 = and i32 %v5, 1
  %v14 = add nuw nsw i32 %v12, %v13
  br label %b13

b5:                                               ; preds = %b0
  %v15 = icmp ugt i32 %v1, 2139095040
  br i1 %v15, label %b6, label %b7

b6:                                               ; preds = %b5
  %v16 = lshr i32 %v0, 13
  %v17 = and i32 %v16, 511
  %v18 = or i32 %v17, 32256
  br label %b13

b7:                                               ; preds = %b5
  %v19 = icmp ugt i32 %v1, 1199570943
  br i1 %v19, label %b13, label %b8

b8:                                               ; preds = %b7
  %v20 = icmp ult i32 %v1, 754974720
  br i1 %v20, label %b13, label %b9

b9:                                               ; preds = %b8
  %v21 = lshr i32 %v1, 23
  %v22 = sub nsw i32 113, %v21
  %v23 = and i32 %v0, 8388607
  %v24 = or i32 %v23, 8388608
  %v25 = add nsw i32 %v21, -81
  %v26 = shl i32 %v24, %v25
  %v27 = icmp ne i32 %v26, 0
  %v28 = lshr i32 %v24, %v22
  %v29 = zext i1 %v27 to i32
  %v30 = lshr i32 %v28, 13
  %v31 = and i32 %v28, 8191
  %v32 = or i32 %v31, %v29
  %v33 = icmp ugt i32 %v32, 4096
  br i1 %v33, label %b10, label %b11

b10:                                              ; preds = %b9
  %v34 = add nuw nsw i32 %v30, 1
  br label %b13

b11:                                              ; preds = %b9
  %v35 = icmp eq i32 %v32, 4096
  br i1 %v35, label %b12, label %b13

b12:                                              ; preds = %b11
  %v36 = and i32 %v30, 1
  %v37 = add nuw nsw i32 %v36, %v30
  br label %b13

b13:                                              ; preds = %b12, %b11, %b10, %b8, %b7, %b6, %b4, %b3, %b2
  %v38 = phi i32 [ %v18, %b6 ], [ %v10, %b2 ], [ %v14, %b4 ], [ %v7, %b3 ], [ 31744, %b7 ], [ 0, %b8 ], [ %v34, %b10 ], [ %v37, %b12 ], [ %v30, %b11 ]
  %v39 = lshr i32 %v0, 16
  %v40 = and i32 %v39, 32768
  %v41 = or i32 %v38, %v40
  %vlast = trunc i32 %v41 to i16
  ret i16 %vlast
}

; Function Attrs: nounwind readnone
define weak dso_local float @__extendhfsf2(i16 %a0) local_unnamed_addr #3 section ".text.tvm.fp16.conv" {
b0:
  %v1 = and i16 %a0, 32767
  %v2 = zext i16 %v1 to i32
  %v3 = add nsw i16 %v1, -1024
  %v4 = icmp ult i16 %v3, 30720
  br i1 %v4, label %b1, label %b2

b1:                                               ; preds = %b0
  %v5 = shl nuw nsw i32 %v2, 13
  %v6 = add nuw nsw i32 %v5, 939524096
  br label %b6

b2:                                               ; preds = %b0
  %v7 = icmp ugt i16 %v1, 31743
  br i1 %v7, label %b3, label %b4

b3:                                               ; preds = %b2
  %v8 = shl nuw nsw i32 %v2, 13
  %v9 = or i32 %v8, 2139095040
  br label %b6

b4:                                               ; preds = %b2
  %v10 = icmp eq i16 %v1, 0
  br i1 %v10, label %b6, label %b5

b5:                                               ; preds = %b4
  %v11 = icmp ult i16 %v1, 256
  %v12 = lshr i32 %v2, 8
  %v13 = select i1 %v11, i32 %v2, i32 %v12
  %v14 = select i1 %v11, i32 32, i32 24
  %v15 = icmp ult i32 %v13, 16
  %v16 = lshr i32 %v13, 4
  %v17 = add nsw i32 %v14, -4
  %v18 = select i1 %v15, i32 %v13, i32 %v16
  %v19 = select i1 %v15, i32 %v14, i32 %v17
  %v20 = icmp ult i32 %v18, 4
  %v21 = lshr i32 %v18, 2
  %v22 = add nsw i32 %v19, -2
  %v23 = select i1 %v20, i32 %v18, i32 %v21
  %v24 = select i1 %v20, i32 %v19, i32 %v22
  %v25 = icmp ult i32 %v23, 2
  %v26 = sub nsw i32 0, %v23
  %v27 = select i1 %v25, i32 %v26, i32 -2
  %v28 = add nsw i32 %v27, %v24
  %v29 = add nsw i32 %v28, -8
  %v30 = shl i32 %v2, %v29
  %v31 = xor i32 %v30, 8388608
  %v32 = shl i32 %v28, 23
  %v33 = sub i32 1124073472, %v32
  %v34 = or i32 %v31, %v33
  br label %b6

b6:                                               ; preds = %b5, %b4, %b3, %b1
  %v35 = phi i32 [ %v6, %b1 ], [ %v9, %b3 ], [ %v34, %b5 ], [ 0, %b4 ]
  %v36 = and i16 %a0, -32768
  %v37 = zext i16 %v36 to i32
  %v38 = shl nuw i32 %v37, 16
  %v39 = or i32 %v35, %v38
  %v40 = bitcast i32 %v39 to float
  ret float %v40
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.value(metadata, metadata, metadata) #4

attributes #0 = { "target-cpu"="generic" }
attributes #1 = { nounwind willreturn }
attributes #2 = { noinline "target-cpu"="generic" }
attributes #3 = { nounwind readnone "target-cpu"="generic" "target-features" }
attributes #4 = { nounwind readnone speculatable willreturn }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "TVM", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2)
!1 = !DIFile(filename: "main.tir", directory: ".")
!2 = !{}
!3 = !{i32 2, !"tvm_target", !"llvm -mtriple=x86_64-pc-linux-gnu"}
!4 = !{i32 4, !"Debug Info Version", i32 3}
!5 = distinct !DISubprogram(name: "main.tir", scope: !1, file: !1, type: !6, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !11)
!6 = !DISubroutineType(types: !7)
!7 = !{!8, !9, !10, !8, !9, !10, !9}
!8 = !DIBasicType(name: "int32", size: 32, encoding: DW_ATE_signed)
!9 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null)
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8)
!11 = !{!12, !13, !14, !15, !16, !17}
!12 = !DILocalVariable(name: "arg1", arg: 1, scope: !5, file: !1, type: !9)
!13 = !DILocalVariable(name: "arg2", arg: 2, scope: !5, file: !1, type: !10)
!14 = !DILocalVariable(name: "arg3", arg: 3, scope: !5, file: !1, type: !8)
!15 = !DILocalVariable(name: "arg4", arg: 4, scope: !5, file: !1, type: !9)
!16 = !DILocalVariable(name: "arg5", arg: 5, scope: !5, file: !1, type: !10)
!17 = !DILocalVariable(name: "arg6", arg: 6, scope: !5, file: !1, type: !9)
!18 = !DILocation(line: 0, scope: !5)
!19 = !{!"branch_weights", i32 1048576, i32 1}
!20 = !{!21, !21, i64 0}
!21 = !{!"ctx_ptr", !22, i64 0}
!22 = !{!"tvm-tbaa"}
!23 = !{!24, !24, i64 0}
!24 = !{!"0x4322da0.w4.b0", !25, i64 0}
!25 = !{!"0x4322da0.w8.b0", !26, i64 0}
!26 = !{!"0x4322da0.w16.b0", !27, i64 0}
!27 = !{!"0x4322da0.w32.b0", !28, i64 0}
!28 = !{!"0x4322da0.w64.b0", !29, i64 0}
!29 = !{!"0x4322da0.w128.b0", !30, i64 0}
!30 = !{!"0x4322da0.w256.b0", !31, i64 0}
!31 = !{!"0x4322da0.w512.b0", !32, i64 0}
!32 = !{!"0x4322da0.w1024.b0", !33, i64 0}
!33 = !{!"0x4322da0", !22, i64 0}
!34 = !{!35, !35, i64 0}
!35 = !{!"0x4322da0.w4.b4", !25, i64 0}
!36 = !{!37, !37, i64 0}
!37 = !{!"0x4322da0.w4.b8", !38, i64 0}
!38 = !{!"0x4322da0.w8.b8", !26, i64 0}
!39 = !{!40, !40, i64 0}
!40 = !{!"0x4322da0.w4.b12", !38, i64 0}
!41 = !{!42, !42, i64 0}
!42 = !{!"0x4322da0.w4.b16", !43, i64 0}
!43 = !{!"0x4322da0.w8.b16", !44, i64 0}
!44 = !{!"0x4322da0.w16.b16", !27, i64 0}
!45 = !{!46, !46, i64 0}
!46 = !{!"0x4322da0.w4.b20", !43, i64 0}
!47 = !{!48, !48, i64 0}
!48 = !{!"0x4322da0.w4.b24", !49, i64 0}
!49 = !{!"0x4322da0.w8.b24", !44, i64 0}
!50 = !{!51, !51, i64 0}
!51 = !{!"0x4322da0.w4.b28", !49, i64 0}
!52 = !{!53, !53, i64 0}
!53 = !{!"0x361ba40.w8.b0", !54, i64 0}
!54 = !{!"0x361ba40.w16.b0", !55, i64 0}
!55 = !{!"0x361ba40.w32.b0", !56, i64 0}
!56 = !{!"0x361ba40.w64.b0", !57, i64 0}
!57 = !{!"0x361ba40.w128.b0", !58, i64 0}
!58 = !{!"0x361ba40.w256.b0", !59, i64 0}
!59 = !{!"0x361ba40.w512.b0", !60, i64 0}
!60 = !{!"0x361ba40.w1024.b0", !61, i64 0}
!61 = !{!"0x361ba40", !22, i64 0}
!62 = !{!63, !63, i64 0}
!63 = !{!"0x361ba40.w8.b8", !54, i64 0}
!64 = !{!65, !65, i64 0}
!65 = !{!"0x361ba40.w8.b16", !66, i64 0}
!66 = !{!"0x361ba40.w16.b16", !55, i64 0}
!67 = !{!"branch_weights", i32 1, i32 1048576}
!68 = !{!69, !69, i64 0}
!69 = !{!"0x3d41d20.w8.b0", !70, i64 0}
!70 = !{!"0x3d41d20.w16.b0", !71, i64 0}
!71 = !{!"0x3d41d20.w32.b0", !72, i64 0}
!72 = !{!"0x3d41d20.w64.b0", !73, i64 0}
!73 = !{!"0x3d41d20.w128.b0", !74, i64 0}
!74 = !{!"0x3d41d20.w256.b0", !75, i64 0}
!75 = !{!"0x3d41d20.w512.b0", !76, i64 0}
!76 = !{!"0x3d41d20.w1024.b0", !77, i64 0}
!77 = !{!"0x3d41d20", !22, i64 0}
!78 = !{!79, !79, i64 0}
!79 = !{!"0x3d41d20.w8.b8", !70, i64 0}
!80 = !{!81, !81, i64 0}
!81 = !{!"0x3d41d20.w8.b16", !82, i64 0}
!82 = !{!"0x3d41d20.w16.b16", !71, i64 0}
!83 = !{!84, !84, i64 0}
!84 = !{!"0x3c1e2a0.w8.b0", !85, i64 0}
!85 = !{!"0x3c1e2a0.w16.b0", !86, i64 0}
!86 = !{!"0x3c1e2a0.w32.b0", !87, i64 0}
!87 = !{!"0x3c1e2a0.w64.b0", !88, i64 0}
!88 = !{!"0x3c1e2a0.w128.b0", !89, i64 0}
!89 = !{!"0x3c1e2a0.w256.b0", !90, i64 0}
!90 = !{!"0x3c1e2a0.w512.b0", !91, i64 0}
!91 = !{!"0x3c1e2a0.w1024.b0", !92, i64 0}
!92 = !{!"0x3c1e2a0", !22, i64 0}
!93 = !{!94, !94, i64 0}
!94 = !{!"0x3c1e2a0.w8.b8", !85, i64 0}
!95 = !{!96, !96, i64 0}
!96 = !{!"0x3c1e2a0.w8.b16", !97, i64 0}
!97 = !{!"0x3c1e2a0.w16.b16", !86, i64 0}
!98 = !{!99, !99, i64 0}
!99 = !{!"0x3c7f0e0.w8.b0", !100, i64 0}
!100 = !{!"0x3c7f0e0.w16.b0", !101, i64 0}
!101 = !{!"0x3c7f0e0.w32.b0", !102, i64 0}
!102 = !{!"0x3c7f0e0.w64.b0", !103, i64 0}
!103 = !{!"0x3c7f0e0.w128.b0", !104, i64 0}
!104 = !{!"0x3c7f0e0.w256.b0", !105, i64 0}
!105 = !{!"0x3c7f0e0.w512.b0", !106, i64 0}
!106 = !{!"0x3c7f0e0.w1024.b0", !107, i64 0}
!107 = !{!"0x3c7f0e0", !22, i64 0}
!108 = !{!109, !109, i64 0}
!109 = !{!"0x3c7f0e0.w8.b8", !100, i64 0}
!110 = !{!111, !111, i64 0}
!111 = !{!"0x3c7f0e0.w8.b16", !112, i64 0}
!112 = !{!"0x3c7f0e0.w16.b16", !101, i64 0}
!113 = !{!114, !114, i64 0}
!114 = !{!"0x44245e0.w8.b0", !115, i64 0}
!115 = !{!"0x44245e0.w16.b0", !116, i64 0}
!116 = !{!"0x44245e0.w32.b0", !117, i64 0}
!117 = !{!"0x44245e0.w64.b0", !118, i64 0}
!118 = !{!"0x44245e0.w128.b0", !119, i64 0}
!119 = !{!"0x44245e0.w256.b0", !120, i64 0}
!120 = !{!"0x44245e0.w512.b0", !121, i64 0}
!121 = !{!"0x44245e0.w1024.b0", !122, i64 0}
!122 = !{!"0x44245e0", !22, i64 0}
!123 = !{!124, !124, i64 0}
!124 = !{!"0x44245e0.w8.b8", !115, i64 0}
!125 = !{!126, !126, i64 0}
!126 = !{!"0x44245e0.w8.b16", !127, i64 0}
!127 = !{!"0x44245e0.w16.b16", !116, i64 0}
!128 = !{!129, !129, i64 0}
!129 = !{!"0x3c0dc40.w8.b0", !130, i64 0}
!130 = !{!"0x3c0dc40.w16.b0", !131, i64 0}
!131 = !{!"0x3c0dc40.w32.b0", !132, i64 0}
!132 = !{!"0x3c0dc40.w64.b0", !133, i64 0}
!133 = !{!"0x3c0dc40.w128.b0", !134, i64 0}
!134 = !{!"0x3c0dc40.w256.b0", !135, i64 0}
!135 = !{!"0x3c0dc40.w512.b0", !136, i64 0}
!136 = !{!"0x3c0dc40.w1024.b0", !137, i64 0}
!137 = !{!"0x3c0dc40", !22, i64 0}
!138 = !{!139, !139, i64 0}
!139 = !{!"0x3c0dc40.w8.b8", !130, i64 0}
!140 = !{!141, !141, i64 0}
!141 = !{!"0x3c0dc40.w8.b16", !142, i64 0}
!142 = !{!"0x3c0dc40.w16.b16", !131, i64 0}
!143 = !{!144, !144, i64 0}
!144 = !{!"0x3cfd080.w8.b0", !145, i64 0}
!145 = !{!"0x3cfd080.w16.b0", !146, i64 0}
!146 = !{!"0x3cfd080.w32.b0", !147, i64 0}
!147 = !{!"0x3cfd080.w64.b0", !148, i64 0}
!148 = !{!"0x3cfd080.w128.b0", !149, i64 0}
!149 = !{!"0x3cfd080.w256.b0", !150, i64 0}
!150 = !{!"0x3cfd080.w512.b0", !151, i64 0}
!151 = !{!"0x3cfd080.w1024.b0", !152, i64 0}
!152 = !{!"0x3cfd080", !22, i64 0}
!153 = !{!154, !154, i64 0}
!154 = !{!"0x3cfd080.w8.b8", !145, i64 0}
!155 = !{!156, !156, i64 0}
!156 = !{!"0x3cfd080.w8.b16", !157, i64 0}
!157 = !{!"0x3cfd080.w16.b16", !146, i64 0}
!158 = !{!159, !159, i64 0}
!159 = !{!"0x3c21ec0.w8.b0", !160, i64 0}
!160 = !{!"0x3c21ec0.w16.b0", !161, i64 0}
!161 = !{!"0x3c21ec0.w32.b0", !162, i64 0}
!162 = !{!"0x3c21ec0.w64.b0", !163, i64 0}
!163 = !{!"0x3c21ec0.w128.b0", !164, i64 0}
!164 = !{!"0x3c21ec0.w256.b0", !165, i64 0}
!165 = !{!"0x3c21ec0.w512.b0", !166, i64 0}
!166 = !{!"0x3c21ec0.w1024.b0", !167, i64 0}
!167 = !{!"0x3c21ec0", !22, i64 0}
!168 = !{!169, !169, i64 0}
!169 = !{!"0x3c21ec0.w8.b8", !160, i64 0}
!170 = !{!171, !171, i64 0}
!171 = !{!"0x3c21ec0.w8.b16", !172, i64 0}
!172 = !{!"0x3c21ec0.w16.b16", !161, i64 0}
!173 = !{!174, !174, i64 0}
!174 = !{!"0x3d05450.w8.b0", !175, i64 0}
!175 = !{!"0x3d05450.w16.b0", !176, i64 0}
!176 = !{!"0x3d05450.w32.b0", !177, i64 0}
!177 = !{!"0x3d05450.w64.b0", !178, i64 0}
!178 = !{!"0x3d05450.w128.b0", !179, i64 0}
!179 = !{!"0x3d05450.w256.b0", !180, i64 0}
!180 = !{!"0x3d05450.w512.b0", !181, i64 0}
!181 = !{!"0x3d05450.w1024.b0", !182, i64 0}
!182 = !{!"0x3d05450", !22, i64 0}
!183 = !{!184, !184, i64 0}
!184 = !{!"0x3d05450.w8.b8", !175, i64 0}
!185 = !{!186, !186, i64 0}
!186 = !{!"0x3d05450.w8.b16", !187, i64 0}
!187 = !{!"0x3d05450.w16.b16", !176, i64 0}
!188 = !{!189, !189, i64 0}
!189 = !{!"0x3d059b0.w8.b0", !190, i64 0}
!190 = !{!"0x3d059b0.w16.b0", !191, i64 0}
!191 = !{!"0x3d059b0.w32.b0", !192, i64 0}
!192 = !{!"0x3d059b0.w64.b0", !193, i64 0}
!193 = !{!"0x3d059b0.w128.b0", !194, i64 0}
!194 = !{!"0x3d059b0.w256.b0", !195, i64 0}
!195 = !{!"0x3d059b0.w512.b0", !196, i64 0}
!196 = !{!"0x3d059b0.w1024.b0", !197, i64 0}
!197 = !{!"0x3d059b0", !22, i64 0}
!198 = !{!199, !199, i64 0}
!199 = !{!"0x3d059b0.w8.b8", !190, i64 0}
!200 = !{!201, !201, i64 0}
!201 = !{!"0x3d059b0.w8.b16", !202, i64 0}
!202 = !{!"0x3d059b0.w16.b16", !191, i64 0}
!203 = !{!204, !204, i64 0}
!204 = !{!"0x43dc900.w8.b0", !205, i64 0}
!205 = !{!"0x43dc900.w16.b0", !206, i64 0}
!206 = !{!"0x43dc900.w32.b0", !207, i64 0}
!207 = !{!"0x43dc900.w64.b0", !208, i64 0}
!208 = !{!"0x43dc900.w128.b0", !209, i64 0}
!209 = !{!"0x43dc900.w256.b0", !210, i64 0}
!210 = !{!"0x43dc900.w512.b0", !211, i64 0}
!211 = !{!"0x43dc900.w1024.b0", !212, i64 0}
!212 = !{!"0x43dc900", !22, i64 0}
!213 = !{!214, !214, i64 0}
!214 = !{!"0x43dc900.w8.b8", !205, i64 0}
!215 = !{!216, !216, i64 0}
!216 = !{!"0x43dc900.w8.b16", !217, i64 0}
!217 = !{!"0x43dc900.w16.b16", !206, i64 0}
!218 = !{!219, !219, i64 0}
!219 = !{!"0x43dcdd0.w8.b0", !220, i64 0}
!220 = !{!"0x43dcdd0.w16.b0", !221, i64 0}
!221 = !{!"0x43dcdd0.w32.b0", !222, i64 0}
!222 = !{!"0x43dcdd0.w64.b0", !223, i64 0}
!223 = !{!"0x43dcdd0.w128.b0", !224, i64 0}
!224 = !{!"0x43dcdd0.w256.b0", !225, i64 0}
!225 = !{!"0x43dcdd0.w512.b0", !226, i64 0}
!226 = !{!"0x43dcdd0.w1024.b0", !227, i64 0}
!227 = !{!"0x43dcdd0", !22, i64 0}
!228 = !{!229, !229, i64 0}
!229 = !{!"0x43dcdd0.w8.b8", !220, i64 0}
!230 = !{!231, !231, i64 0}
!231 = !{!"0x43dcdd0.w8.b16", !232, i64 0}
!232 = !{!"0x43dcdd0.w16.b16", !221, i64 0}
!233 = !{!234, !234, i64 0}
!234 = !{!"0x4324fb0.w8.b0", !235, i64 0}
!235 = !{!"0x4324fb0.w16.b0", !236, i64 0}
!236 = !{!"0x4324fb0.w32.b0", !237, i64 0}
!237 = !{!"0x4324fb0.w64.b0", !238, i64 0}
!238 = !{!"0x4324fb0.w128.b0", !239, i64 0}
!239 = !{!"0x4324fb0.w256.b0", !240, i64 0}
!240 = !{!"0x4324fb0.w512.b0", !241, i64 0}
!241 = !{!"0x4324fb0.w1024.b0", !242, i64 0}
!242 = !{!"0x4324fb0", !22, i64 0}
!243 = !{!244, !244, i64 0}
!244 = !{!"0x4324fb0.w8.b8", !235, i64 0}
!245 = !{!246, !246, i64 0}
!246 = !{!"0x4324fb0.w8.b16", !247, i64 0}
!247 = !{!"0x4324fb0.w16.b16", !236, i64 0}
!248 = !{!249, !249, i64 0}
!249 = !{!"0x4325510.w8.b0", !250, i64 0}
!250 = !{!"0x4325510.w16.b0", !251, i64 0}
!251 = !{!"0x4325510.w32.b0", !252, i64 0}
!252 = !{!"0x4325510.w64.b0", !253, i64 0}
!253 = !{!"0x4325510.w128.b0", !254, i64 0}
!254 = !{!"0x4325510.w256.b0", !255, i64 0}
!255 = !{!"0x4325510.w512.b0", !256, i64 0}
!256 = !{!"0x4325510.w1024.b0", !257, i64 0}
!257 = !{!"0x4325510", !22, i64 0}
!258 = !{!259, !259, i64 0}
!259 = !{!"0x4325510.w8.b8", !250, i64 0}
!260 = !{!261, !261, i64 0}
!261 = !{!"0x4325510.w8.b16", !262, i64 0}
!262 = !{!"0x4325510.w16.b16", !251, i64 0}
!263 = !{!264, !264, i64 0}
!264 = !{!"0x3c17ed0.w8.b0", !265, i64 0}
!265 = !{!"0x3c17ed0.w16.b0", !266, i64 0}
!266 = !{!"0x3c17ed0.w32.b0", !267, i64 0}
!267 = !{!"0x3c17ed0.w64.b0", !268, i64 0}
!268 = !{!"0x3c17ed0.w128.b0", !269, i64 0}
!269 = !{!"0x3c17ed0.w256.b0", !270, i64 0}
!270 = !{!"0x3c17ed0.w512.b0", !271, i64 0}
!271 = !{!"0x3c17ed0.w1024.b0", !272, i64 0}
!272 = !{!"0x3c17ed0", !22, i64 0}
!273 = !{!274, !274, i64 0}
!274 = !{!"0x3c17ed0.w8.b8", !265, i64 0}
!275 = !{!276, !276, i64 0}
!276 = !{!"0x3c17ed0.w8.b16", !277, i64 0}
!277 = !{!"0x3c17ed0.w16.b16", !266, i64 0}
!278 = !{!279, !279, i64 0}
!279 = !{!"0x3d3fd00.w8.b0", !280, i64 0}
!280 = !{!"0x3d3fd00.w16.b0", !281, i64 0}
!281 = !{!"0x3d3fd00.w32.b0", !282, i64 0}
!282 = !{!"0x3d3fd00.w64.b0", !283, i64 0}
!283 = !{!"0x3d3fd00.w128.b0", !284, i64 0}
!284 = !{!"0x3d3fd00.w256.b0", !285, i64 0}
!285 = !{!"0x3d3fd00.w512.b0", !286, i64 0}
!286 = !{!"0x3d3fd00.w1024.b0", !287, i64 0}
!287 = !{!"0x3d3fd00", !22, i64 0}
!288 = !{!289, !289, i64 0}
!289 = !{!"0x3d3fd00.w8.b8", !280, i64 0}
!290 = !{!291, !291, i64 0}
!291 = !{!"0x3d3fd00.w8.b16", !292, i64 0}
!292 = !{!"0x3d3fd00.w16.b16", !281, i64 0}
!293 = !{!294, !294, i64 0}
!294 = !{!"0x4326ea0.w16.b0", !295, i64 0}
!295 = !{!"0x4326ea0.w32.b0", !296, i64 0}
!296 = !{!"0x4326ea0.w64.b0", !297, i64 0}
!297 = !{!"0x4326ea0.w128.b0", !298, i64 0}
!298 = !{!"0x4326ea0.w256.b0", !299, i64 0}
!299 = !{!"0x4326ea0.w512.b0", !300, i64 0}
!300 = !{!"0x4326ea0.w1024.b0", !301, i64 0}
!301 = !{!"0x4326ea0", !22, i64 0}
!302 = !{!303, !303, i64 0}
!303 = !{!"0x4326ea0.w16.b16", !295, i64 0}
