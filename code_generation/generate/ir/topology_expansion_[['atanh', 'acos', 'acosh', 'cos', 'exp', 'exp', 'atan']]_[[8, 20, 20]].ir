# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((8, 20, 20), "float32"), compute: T.Buffer((8, 20, 20), "float32"), compute_1: T.Buffer((8, 20, 20), "float32"), compute_2: T.Buffer((8, 20, 20), "float32"), compute_3: T.Buffer((8, 20, 20), "float32"), compute_4: T.Buffer((8, 20, 20), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        compute_5 = T.allocate([3200], "float32", "global")
        ph_0_1 = T.Buffer((3200,), data=ph_0.data)
        for i0_i1_fused_i2_fused in T.parallel(3200):
            compute_6 = T.Buffer((3200,), data=compute.data)
            compute_6[i0_i1_fused_i2_fused] = T.atanh(ph_0_1[i0_i1_fused_i2_fused])
        for i0_i1_fused_i2_fused in T.parallel(3200):
            compute_6 = T.Buffer((3200,), data=compute_1.data)
            compute_6[i0_i1_fused_i2_fused] = T.acosh(T.acos(ph_0_1[i0_i1_fused_i2_fused]))
        for i0_i1_fused in T.parallel(160):
            for i2 in range(20):
                cse_var_1: T.int32 = i0_i1_fused * 20 + i2
                compute_6 = T.Buffer((3200,), data=compute_2.data)
                compute_6[cse_var_1] = T.cos(ph_0_1[cse_var_1])
        compute_6 = T.Buffer((3200,), data=compute_5)
        for i0_i1_fused_i2_fused in T.parallel(3200):
            compute_6[i0_i1_fused_i2_fused] = T.exp(ph_0_1[i0_i1_fused_i2_fused])
        for i0_i1_fused_i2_fused in T.parallel(3200):
            compute_7 = T.Buffer((3200,), data=compute_3.data)
            compute_7[i0_i1_fused_i2_fused] = T.exp(compute_6[i0_i1_fused_i2_fused])
        for i0_i1_fused_i2_fused in T.parallel(3200):
            compute_7 = T.Buffer((3200,), data=compute_4.data)
            compute_7[i0_i1_fused_i2_fused] = T.atan(compute_6[i0_i1_fused_i2_fused])