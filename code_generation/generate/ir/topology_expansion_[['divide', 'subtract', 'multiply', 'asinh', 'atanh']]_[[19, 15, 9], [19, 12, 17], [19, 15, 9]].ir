# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((19, 15, 9), "float32"), ph_3: T.Buffer((19, 15, 9), "float32"), T_divide: T.Buffer((19, 15, 9), "float32"), compute: T.Buffer((19, 15, 9), "float32"), compute_1: T.Buffer((19, 15, 9), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        ph_0_1 = T.Buffer((2565,), data=ph_0.data)
        ph_3_1 = T.Buffer((2565,), data=ph_3.data)
        for ax0_ax1_fused_ax2_fused in T.parallel(2565):
            T_divide_1 = T.Buffer((2565,), data=T_divide.data)
            T_divide_1[ax0_ax1_fused_ax2_fused] = ph_0_1[ax0_ax1_fused_ax2_fused] / ph_3_1[ax0_ax1_fused_ax2_fused]
        for i0_i1_fused in T.parallel(285):
            for i2 in range(9):
                cse_var_1: T.int32 = i0_i1_fused * 9 + i2
                compute_2 = T.Buffer((2565,), data=compute.data)
                compute_2[cse_var_1] = T.asinh(ph_0_1[cse_var_1] * (ph_0_1[cse_var_1] - ph_3_1[cse_var_1]))
        for i0_i1_fused_i2_fused in T.parallel(2565):
            compute_2 = T.Buffer((2565,), data=compute_1.data)
            compute_2[i0_i1_fused_i2_fused] = T.atanh(ph_0_1[i0_i1_fused_i2_fused] * (ph_0_1[i0_i1_fused_i2_fused] - ph_3_1[i0_i1_fused_i2_fused]))