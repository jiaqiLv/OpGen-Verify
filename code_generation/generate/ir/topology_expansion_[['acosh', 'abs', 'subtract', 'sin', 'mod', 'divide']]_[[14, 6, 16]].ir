# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((14, 6, 16), "float32"), compute: T.Buffer((14, 6, 16), "float32"), T_subtract: T.Buffer((14, 6, 16), "float32"), T_divide: T.Buffer((14, 6, 16), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        ph_0_1 = T.Buffer((1344,), data=ph_0.data)
        for i0_i1_fused in T.parallel(84):
            for i2 in range(16):
                cse_var_1: T.int32 = i0_i1_fused * 16 + i2
                compute_1 = T.Buffer((1344,), data=compute.data)
                compute_1[cse_var_1] = T.acosh(ph_0_1[cse_var_1])
        for ax0_ax1_fused in T.parallel(84):
            for ax2 in range(16):
                cse_var_2: T.int32 = ax0_ax1_fused * 16 + ax2
                T_subtract_1 = T.Buffer((1344,), data=T_subtract.data)
                T_subtract_1[cse_var_2] = T.fabs(ph_0_1[cse_var_2]) - ph_0_1[cse_var_2]
        for ax0_ax1_fused_ax2_fused in T.parallel(1344):
            T_divide_1 = T.Buffer((1344,), data=T_divide.data)
            T_divide_1[ax0_ax1_fused_ax2_fused] = T.truncmod(ph_0_1[ax0_ax1_fused_ax2_fused], T.sin(ph_0_1[ax0_ax1_fused_ax2_fused])) / ph_0_1[ax0_ax1_fused_ax2_fused]