# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((19, 20, 10), "float32"), compute: T.Buffer((19, 20, 10), "float32"), T_subtract: T.Buffer((19, 20, 10), "float32"), T_mod: T.Buffer((19, 20, 10), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        ph_0_1 = T.Buffer((3800,), data=ph_0.data)
        for i0_i1_fused_i2_fused in T.parallel(3800):
            compute_1 = T.Buffer((3800,), data=compute.data)
            compute_1[i0_i1_fused_i2_fused] = T.exp(ph_0_1[i0_i1_fused_i2_fused])
        for ax0_ax1_fused_ax2_fused in T.parallel(3800):
            T_subtract_1 = T.Buffer((3800,), data=T_subtract.data)
            T_subtract_1[ax0_ax1_fused_ax2_fused] = T.acos(ph_0_1[ax0_ax1_fused_ax2_fused]) - ph_0_1[ax0_ax1_fused_ax2_fused]
        for ax0_ax1_fused_ax2_fused in T.parallel(3800):
            T_mod_1 = T.Buffer((3800,), data=T_mod.data)
            T_mod_1[ax0_ax1_fused_ax2_fused] = T.truncmod(ph_0_1[ax0_ax1_fused_ax2_fused], T.fabs(ph_0_1[ax0_ax1_fused_ax2_fused]))