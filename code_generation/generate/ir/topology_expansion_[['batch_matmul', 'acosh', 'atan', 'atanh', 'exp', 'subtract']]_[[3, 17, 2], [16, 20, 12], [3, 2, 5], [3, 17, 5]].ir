# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((3, 17, 2), "float32"), ph_3: T.Buffer((3, 2, 5), "float32"), ph_9: T.Buffer((3, 17, 5), "float32"), compute: T.Buffer((3, 17, 2), "float32"), compute_1: T.Buffer((3, 17, 2), "float32"), compute_2: T.Buffer((3, 17, 2), "float32"), T_subtract: T.Buffer((3, 17, 5), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        auto_scheduler_layout_transform = T.allocate([30], "float32", "global")
        ph_0_1 = T.Buffer((102,), data=ph_0.data)
        for i0_i1_fused_i2_fused in T.parallel(102):
            compute_3 = T.Buffer((102,), data=compute.data)
            compute_3[i0_i1_fused_i2_fused] = T.acosh(ph_0_1[i0_i1_fused_i2_fused])
        for i0_i1_fused_i2_fused in T.parallel(102):
            compute_3 = T.Buffer((102,), data=compute_1.data)
            compute_3[i0_i1_fused_i2_fused] = T.atanh(T.atan(ph_0_1[i0_i1_fused_i2_fused]))
        for i0_i1_fused_i2_fused in T.parallel(102):
            compute_3 = T.Buffer((102,), data=compute_2.data)
            compute_3[i0_i1_fused_i2_fused] = T.exp(T.atan(ph_0_1[i0_i1_fused_i2_fused]))
        auto_scheduler_layout_transform_1 = T.Buffer((30,), data=auto_scheduler_layout_transform)
        for ax0_ax1_fused_ax2_fused in T.parallel(5):
            for ax8, ax12 in T.grid(2, 3):
                ph_3_1 = T.Buffer((30,), data=ph_3.data)
                auto_scheduler_layout_transform_1[ax0_ax1_fused_ax2_fused * 6 + ax8 * 3 + ax12] = ph_3_1[ax12 * 10 + ax8 * 5 + ax0_ax1_fused_ax2_fused]
        for ax0_outer_outer_ax1_outer_outer_fused_ax2_outer_outer_fused_ax0_outer_inner_fused_ax1_outer_inner_fused_ax2_outer_inner_fused in T.parallel(5):
            T_batch_matmul_NN = T.allocate([51], "float32", "global")
            T_batch_matmul_NN_1 = T.Buffer((51,), data=T_batch_matmul_NN)
            for i_outer_inner_init, b_inner_init in T.grid(17, 3):
                T_batch_matmul_NN_1[b_inner_init * 17 + i_outer_inner_init] = T.float32(0)
            for k_outer, i_outer_inner, b_inner in T.grid(2, 17, 3):
                cse_var_1: T.int32 = b_inner * 17 + i_outer_inner
                T_batch_matmul_NN_1[cse_var_1] = T_batch_matmul_NN_1[cse_var_1] + ph_0_1[b_inner * 34 + i_outer_inner * 2 + k_outer] * auto_scheduler_layout_transform_1[ax0_outer_outer_ax1_outer_outer_fused_ax2_outer_outer_fused_ax0_outer_inner_fused_ax1_outer_inner_fused_ax2_outer_inner_fused * 6 + k_outer * 3 + b_inner]
            for ax0_inner, ax1_inner in T.grid(3, 17):
                cse_var_2: T.int32 = ax0_inner * 85 + ax1_inner * 5 + ax0_outer_outer_ax1_outer_outer_fused_ax2_outer_outer_fused_ax0_outer_inner_fused_ax1_outer_inner_fused_ax2_outer_inner_fused
                T_subtract_1 = T.Buffer((255,), data=T_subtract.data)
                ph_9_1 = T.Buffer((255,), data=ph_9.data)
                T_subtract_1[cse_var_2] = T_batch_matmul_NN_1[ax0_inner * 17 + ax1_inner] - ph_9_1[cse_var_2]