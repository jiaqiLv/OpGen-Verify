# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((95, 37, 86), "float32"), T_add: T.Buffer((95, 37, 86), "float32"), compute: T.Buffer((95, 37, 86), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        ph_0_1 = T.Buffer((302290,), data=ph_0.data)
        for ax0_ax1_fused in T.parallel(3515):
            compute_1 = T.allocate([1], "float32", "global")
            for ax2 in range(86):
                cse_var_1: T.int32 = ax0_ax1_fused * 86 + ax2
                compute_2 = T.Buffer((1,), data=compute_1, align=4)
                compute_2[0] = T.exp(ph_0_1[cse_var_1])
                T_add_1 = T.Buffer((302290,), data=T_add.data)
                T_add_1[cse_var_1] = ph_0_1[cse_var_1] + (ph_0_1[cse_var_1] - compute_2[0] + ph_0_1[cse_var_1])
        for i0_i1_fused_i2_fused in T.parallel(302290):
            compute_1 = T.Buffer((302290,), data=compute.data)
            compute_1[i0_i1_fused_i2_fused] = T.sin(T.acosh(ph_0_1[i0_i1_fused_i2_fused]))