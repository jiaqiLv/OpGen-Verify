# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((1, 13, 12), "float32"), T_add: T.Buffer((1, 13, 12), "float32"), compute: T.Buffer((1, 13, 12), "float32"), T_subtract: T.Buffer((1, 13, 12), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        ph_0_1 = T.Buffer((156,), data=ph_0.data)
        for ax0_ax1_fused in T.parallel(13):
            for ax2 in range(12):
                cse_var_1: T.int32 = ax0_ax1_fused * 12 + ax2
                T_add_1 = T.Buffer((156,), data=T_add.data)
                T_add_1[cse_var_1] = ph_0_1[cse_var_1] - T.atanh(ph_0_1[cse_var_1]) + ph_0_1[cse_var_1]
        for i1, i2 in T.grid(13, 12):
            cse_var_2: T.int32 = i1 * 12 + i2
            compute_1 = T.Buffer((156,), data=compute.data)
            compute_1[cse_var_2] = T.cos(ph_0_1[cse_var_2])
        for ax0_ax1_fused_ax2_fused in T.parallel(156):
            T_subtract_1 = T.Buffer((156,), data=T_subtract.data)
            T_subtract_1[ax0_ax1_fused_ax2_fused] = T.sin(ph_0_1[ax0_ax1_fused_ax2_fused]) - ph_0_1[ax0_ax1_fused_ax2_fused]