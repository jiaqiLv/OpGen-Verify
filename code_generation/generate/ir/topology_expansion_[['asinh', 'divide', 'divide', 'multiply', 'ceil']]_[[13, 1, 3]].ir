# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((13, 1, 3), "float32"), T_multiply: T.Buffer((13, 1, 3), "float32"), compute: T.Buffer((13, 1, 3), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        ph_0_1 = T.Buffer((39,), data=ph_0.data)
        for ax0_ax1_fused_ax2_fused in T.parallel(39):
            T_multiply_1 = T.Buffer((39,), data=T_multiply.data)
            T_multiply_1[ax0_ax1_fused_ax2_fused] = ph_0_1[ax0_ax1_fused_ax2_fused] * (ph_0_1[ax0_ax1_fused_ax2_fused] / T.asinh(ph_0_1[ax0_ax1_fused_ax2_fused]) / ph_0_1[ax0_ax1_fused_ax2_fused])
        for i0 in T.parallel(13):
            for i2 in range(3):
                cse_var_1: T.int32 = i0 * 3 + i2
                compute_1 = T.Buffer((39,), data=compute.data)
                compute_1[cse_var_1] = T.ceil(ph_0_1[cse_var_1])