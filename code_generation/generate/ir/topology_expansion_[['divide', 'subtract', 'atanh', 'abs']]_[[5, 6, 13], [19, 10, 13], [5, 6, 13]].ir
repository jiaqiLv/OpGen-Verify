# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((5, 6, 13), "float32"), ph_3: T.Buffer((5, 6, 13), "float32"), T_divide: T.Buffer((5, 6, 13), "float32"), T_subtract: T.Buffer((5, 6, 13), "float32"), compute: T.Buffer((5, 6, 13), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        ph_0_1 = T.Buffer((390,), data=ph_0.data)
        ph_3_1 = T.Buffer((390,), data=ph_3.data)
        for ax0_ax1_fused in T.parallel(30):
            for ax2 in range(13):
                cse_var_1: T.int32 = ax0_ax1_fused * 13 + ax2
                T_divide_1 = T.Buffer((390,), data=T_divide.data)
                T_divide_1[cse_var_1] = ph_0_1[cse_var_1] / ph_3_1[cse_var_1]
        for ax0 in T.parallel(5):
            for ax1, ax2 in T.grid(6, 13):
                cse_var_2: T.int32 = ax0 * 78 + ax1 * 13 + ax2
                T_subtract_1 = T.Buffer((390,), data=T_subtract.data)
                T_subtract_1[cse_var_2] = ph_0_1[cse_var_2] - ph_3_1[cse_var_2]
        for i0_i1_fused_i2_fused in T.parallel(390):
            compute_1 = T.Buffer((390,), data=compute.data)
            compute_1[i0_i1_fused_i2_fused] = T.fabs(T.atanh(ph_0_1[i0_i1_fused_i2_fused]))