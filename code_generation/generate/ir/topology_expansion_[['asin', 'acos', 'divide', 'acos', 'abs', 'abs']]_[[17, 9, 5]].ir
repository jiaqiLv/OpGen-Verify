# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((17, 9, 5), "float32"), compute: T.Buffer((17, 9, 5), "float32"), T_divide: T.Buffer((17, 9, 5), "float32"), compute_1: T.Buffer((17, 9, 5), "float32"), compute_2: T.Buffer((17, 9, 5), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        ph_0_1 = T.Buffer((765,), data=ph_0.data)
        for i0_i1_fused_i2_fused in T.parallel(765):
            compute_3 = T.Buffer((765,), data=compute.data)
            compute_3[i0_i1_fused_i2_fused] = T.asin(ph_0_1[i0_i1_fused_i2_fused])
        for ax0 in T.parallel(17):
            for ax1, ax2 in T.grid(9, 5):
                cse_var_1: T.int32 = ax0 * 45 + ax1 * 5 + ax2
                T_divide_1 = T.Buffer((765,), data=T_divide.data)
                T_divide_1[cse_var_1] = T.acos(ph_0_1[cse_var_1]) / ph_0_1[cse_var_1]
        for i0_i1_fused in T.parallel(153):
            for i2 in range(5):
                cse_var_2: T.int32 = i0_i1_fused * 5 + i2
                compute_3 = T.Buffer((765,), data=compute_1.data)
                compute_3[cse_var_2] = T.acos(ph_0_1[cse_var_2])
        for i0_i1_fused_i2_fused in T.parallel(765):
            compute_3 = T.Buffer((765,), data=compute_2.data)
            compute_3[i0_i1_fused_i2_fused] = T.fabs(T.fabs(ph_0_1[i0_i1_fused_i2_fused]))