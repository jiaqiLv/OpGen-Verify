# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((13, 20, 9), "float32"), ph_3: T.Buffer((13, 20, 9), "float32"), compute: T.Buffer((13, 20, 9), "float32"), T_subtract: T.Buffer((13, 20, 9), "float32"), compute_1: T.Buffer((13, 20, 9), "float32"), T_mod: T.Buffer((13, 20, 9), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        ph_0_1 = T.Buffer((2340,), data=ph_0.data)
        for i0_i1_fused_i2_fused in T.parallel(2340):
            compute_2 = T.Buffer((2340,), data=compute.data)
            compute_2[i0_i1_fused_i2_fused] = T.exp(ph_0_1[i0_i1_fused_i2_fused])
        for ax0 in T.parallel(13):
            for ax1, ax2 in T.grid(20, 9):
                cse_var_1: T.int32 = ax0 * 180 + ax1 * 9 + ax2
                T_subtract_1 = T.Buffer((2340,), data=T_subtract.data)
                T_subtract_1[cse_var_1] = T.sin(ph_0_1[cse_var_1]) - ph_0_1[cse_var_1]
        for i0_i1_fused_i2_fused in T.parallel(2340):
            compute_2 = T.Buffer((2340,), data=compute_1.data)
            compute_2[i0_i1_fused_i2_fused] = T.fabs(T.sin(ph_0_1[i0_i1_fused_i2_fused]))
        for ax0_ax1_fused_ax2_fused in T.parallel(2340):
            T_mod_1 = T.Buffer((2340,), data=T_mod.data)
            ph_3_1 = T.Buffer((2340,), data=ph_3.data)
            T_mod_1[ax0_ax1_fused_ax2_fused] = T.truncmod(T.truncmod(ph_0_1[ax0_ax1_fused_ax2_fused], ph_3_1[ax0_ax1_fused_ax2_fused]), ph_0_1[ax0_ax1_fused_ax2_fused])