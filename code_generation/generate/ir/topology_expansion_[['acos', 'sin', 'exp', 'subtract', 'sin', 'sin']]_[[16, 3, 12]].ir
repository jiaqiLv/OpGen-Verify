# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((16, 3, 12), "float32"), compute: T.Buffer((16, 3, 12), "float32"), T_subtract: T.Buffer((16, 3, 12), "float32"), compute_1: T.Buffer((16, 3, 12), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        ph_0_1 = T.Buffer((576,), data=ph_0.data)
        for i0_i1_fused_i2_fused in T.parallel(576):
            compute_2 = T.Buffer((576,), data=compute.data)
            compute_2[i0_i1_fused_i2_fused] = T.acos(ph_0_1[i0_i1_fused_i2_fused])
        for ax0 in T.parallel(16):
            compute_2 = T.allocate([1], "float32", "global")
            for ax1, ax2 in T.grid(3, 12):
                cse_var_1: T.int32 = ax0 * 36 + ax1 * 12 + ax2
                compute_3 = T.Buffer((1,), data=compute_2, align=4)
                compute_3[0] = T.exp(T.sin(ph_0_1[cse_var_1]))
                T_subtract_1 = T.Buffer((576,), data=T_subtract.data)
                T_subtract_1[cse_var_1] = ph_0_1[cse_var_1] - compute_3[0]
        for i0_i1_fused_i2_fused in T.parallel(576):
            compute_2 = T.Buffer((576,), data=compute_1.data)
            compute_2[i0_i1_fused_i2_fused] = T.sin(T.sin(ph_0_1[i0_i1_fused_i2_fused]))