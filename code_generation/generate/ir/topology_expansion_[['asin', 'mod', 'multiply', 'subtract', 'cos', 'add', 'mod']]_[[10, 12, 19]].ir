# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((10, 12, 19), "float32"), T_subtract: T.Buffer((10, 12, 19), "float32"), T_add: T.Buffer((10, 12, 19), "float32"), T_mod: T.Buffer((10, 12, 19), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        ph_0_1 = T.Buffer((2280,), data=ph_0.data)
        for ax0_ax1_fused_ax2_fused in T.parallel(2280):
            T_subtract_1 = T.Buffer((2280,), data=T_subtract.data)
            T_subtract_1[ax0_ax1_fused_ax2_fused] = ph_0_1[ax0_ax1_fused_ax2_fused] - T.truncmod(ph_0_1[ax0_ax1_fused_ax2_fused], T.asin(ph_0_1[ax0_ax1_fused_ax2_fused])) * ph_0_1[ax0_ax1_fused_ax2_fused]
        for ax0_ax1_fused_ax2_fused in T.parallel(2280):
            T_add_1 = T.Buffer((2280,), data=T_add.data)
            T_add_1[ax0_ax1_fused_ax2_fused] = T.cos(ph_0_1[ax0_ax1_fused_ax2_fused]) + ph_0_1[ax0_ax1_fused_ax2_fused]
        for ax0 in T.parallel(10):
            for ax1, ax2 in T.grid(12, 19):
                cse_var_1: T.int32 = ax0 * 228 + ax1 * 19 + ax2
                T_mod_1 = T.Buffer((2280,), data=T_mod.data)
                T_mod_1[cse_var_1] = T.truncmod(T.cos(ph_0_1[cse_var_1]), ph_0_1[cse_var_1])