# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((20, 15, 1), "float32"), compute: T.Buffer((20, 15, 1), "float32"), compute_1: T.Buffer((20, 15, 1), "float32"), compute_2: T.Buffer((20, 15, 1), "float32"), compute_3: T.Buffer((20, 15, 1), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        ph_0_1 = T.Buffer((300,), data=ph_0.data)
        for i0 in T.parallel(20):
            for i1 in range(15):
                cse_var_1: T.int32 = i0 * 15 + i1
                compute_4 = T.Buffer((300,), data=compute.data)
                compute_4[cse_var_1] = T.cos(ph_0_1[cse_var_1])
        for i0_i1_fused in T.parallel(300):
            compute_4 = T.allocate([1], "float32", "global")
            compute_5 = T.Buffer((1,), data=compute_4, align=4)
            compute_5[0] = T.exp(ph_0_1[i0_i1_fused])
            compute_6 = T.Buffer((300,), data=compute_1.data)
            compute_6[i0_i1_fused] = T.atanh(compute_5[0])
        for i0_i1_fused_i2_fused in T.parallel(300):
            compute_4 = T.Buffer((300,), data=compute_2.data)
            compute_4[i0_i1_fused_i2_fused] = T.asin(ph_0_1[i0_i1_fused_i2_fused])
        for i0_i1_fused_i2_fused in T.parallel(300):
            compute_4 = T.Buffer((300,), data=compute_3.data)
            compute_4[i0_i1_fused_i2_fused] = T.asin(ph_0_1[i0_i1_fused_i2_fused])