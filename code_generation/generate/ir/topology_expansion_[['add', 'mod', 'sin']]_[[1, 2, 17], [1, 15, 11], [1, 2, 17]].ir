# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((1, 2, 17), "float32"), ph_3: T.Buffer((1, 2, 17), "float32"), T_add: T.Buffer((1, 2, 17), "float32"), T_mod: T.Buffer((1, 2, 17), "float32"), compute: T.Buffer((1, 2, 17), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        ph_0_1 = T.Buffer((34,), data=ph_0.data)
        ph_3_1 = T.Buffer((34,), data=ph_3.data)
        for ax1, ax2 in T.grid(2, 17):
            cse_var_1: T.int32 = ax1 * 17 + ax2
            T_add_1 = T.Buffer((34,), data=T_add.data)
            T_add_1[cse_var_1] = ph_0_1[cse_var_1] + ph_3_1[cse_var_1]
        for ax1, ax2 in T.grid(2, 17):
            cse_var_2: T.int32 = ax1 * 17 + ax2
            T_mod_1 = T.Buffer((34,), data=T_mod.data)
            T_mod_1[cse_var_2] = T.truncmod(ph_0_1[cse_var_2], ph_3_1[cse_var_2])
        for i0_i1_fused_i2_fused in T.parallel(34):
            compute_1 = T.Buffer((34,), data=compute.data)
            compute_1[i0_i1_fused_i2_fused] = T.sin(ph_0_1[i0_i1_fused_i2_fused])