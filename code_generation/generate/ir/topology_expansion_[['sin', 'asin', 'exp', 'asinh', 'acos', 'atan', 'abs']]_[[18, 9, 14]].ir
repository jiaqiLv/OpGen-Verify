# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((18, 9, 14), "float32"), compute: T.Buffer((18, 9, 14), "float32"), compute_1: T.Buffer((18, 9, 14), "float32"), compute_2: T.Buffer((18, 9, 14), "float32"), compute_3: T.Buffer((18, 9, 14), "float32"), compute_4: T.Buffer((18, 9, 14), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        ph_0_1 = T.Buffer((2268,), data=ph_0.data)
        for i0_i1_fused in T.parallel(162):
            for i2 in range(14):
                cse_var_1: T.int32 = i0_i1_fused * 14 + i2
                compute_5 = T.Buffer((2268,), data=compute.data)
                compute_5[cse_var_1] = T.sin(ph_0_1[cse_var_1])
        for i0_i1_fused_i2_fused in T.parallel(2268):
            compute_5 = T.Buffer((2268,), data=compute_1.data)
            compute_5[i0_i1_fused_i2_fused] = T.exp(T.asin(ph_0_1[i0_i1_fused_i2_fused]))
        for i0_i1_fused_i2_fused in T.parallel(2268):
            compute_5 = T.Buffer((2268,), data=compute_2.data)
            compute_5[i0_i1_fused_i2_fused] = T.asinh(ph_0_1[i0_i1_fused_i2_fused])
        for i0_i1_fused_i2_fused in T.parallel(2268):
            compute_5 = T.Buffer((2268,), data=compute_3.data)
            compute_5[i0_i1_fused_i2_fused] = T.atan(T.acos(ph_0_1[i0_i1_fused_i2_fused]))
        for i0_i1_fused_i2_fused in T.parallel(2268):
            compute_5 = T.Buffer((2268,), data=compute_4.data)
            compute_5[i0_i1_fused_i2_fused] = T.fabs(T.acos(ph_0_1[i0_i1_fused_i2_fused]))