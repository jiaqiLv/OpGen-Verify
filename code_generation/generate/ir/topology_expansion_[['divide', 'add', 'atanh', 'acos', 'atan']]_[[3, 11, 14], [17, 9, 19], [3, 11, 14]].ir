# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((3, 11, 14), "float32"), ph_3: T.Buffer((3, 11, 14), "float32"), T_divide: T.Buffer((3, 11, 14), "float32"), T_add: T.Buffer((3, 11, 14), "float32"), compute: T.Buffer((3, 11, 14), "float32"), compute_1: T.Buffer((3, 11, 14), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        ph_0_1 = T.Buffer((462,), data=ph_0.data)
        ph_3_1 = T.Buffer((462,), data=ph_3.data)
        for ax0_ax1_fused_ax2_fused in T.parallel(462):
            T_divide_1 = T.Buffer((462,), data=T_divide.data)
            T_divide_1[ax0_ax1_fused_ax2_fused] = ph_0_1[ax0_ax1_fused_ax2_fused] / ph_3_1[ax0_ax1_fused_ax2_fused]
        for ax0 in T.parallel(3):
            for ax1, ax2 in T.grid(11, 14):
                cse_var_1: T.int32 = ax0 * 154 + ax1 * 14 + ax2
                T_add_1 = T.Buffer((462,), data=T_add.data)
                T_add_1[cse_var_1] = ph_0_1[cse_var_1] + ph_3_1[cse_var_1]
        for i0_i1_fused_i2_fused in T.parallel(462):
            compute_2 = T.Buffer((462,), data=compute.data)
            compute_2[i0_i1_fused_i2_fused] = T.acos(T.atanh(ph_0_1[i0_i1_fused_i2_fused]))
        for i0 in T.parallel(3):
            for i1, i2 in T.grid(11, 14):
                cse_var_2: T.int32 = i0 * 154 + i1 * 14 + i2
                compute_2 = T.Buffer((462,), data=compute_1.data)
                compute_2[cse_var_2] = T.atan(T.atanh(ph_0_1[cse_var_2]))