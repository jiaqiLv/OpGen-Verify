# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((17, 13, 18), "float32"), compute: T.Buffer((17, 13, 18), "float32"), compute_1: T.Buffer((17, 13, 18), "float32"), compute_2: T.Buffer((17, 13, 18), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        ph_0_1 = T.Buffer((3978,), data=ph_0.data)
        for i0 in T.parallel(17):
            for i1, i2 in T.grid(13, 18):
                cse_var_1: T.int32 = i0 * 234 + i1 * 18 + i2
                compute_3 = T.Buffer((3978,), data=compute.data)
                compute_3[cse_var_1] = T.acosh(ph_0_1[cse_var_1] + T.ceil(ph_0_1[cse_var_1]))
        for i0 in T.parallel(17):
            for i1, i2 in T.grid(13, 18):
                cse_var_2: T.int32 = i0 * 234 + i1 * 18 + i2
                compute_3 = T.Buffer((3978,), data=compute_1.data)
                compute_3[cse_var_2] = T.ceil(ph_0_1[cse_var_2])
        for i0_i1_fused_i2_fused in T.parallel(3978):
            compute_3 = T.Buffer((3978,), data=compute_2.data)
            compute_3[i0_i1_fused_i2_fused] = T.asinh(T.cos(ph_0_1[i0_i1_fused_i2_fused]))