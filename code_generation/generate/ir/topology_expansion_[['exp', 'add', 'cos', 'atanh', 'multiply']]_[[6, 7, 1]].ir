# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((6, 7, 1), "float32"), compute: T.Buffer((6, 7, 1), "float32"), T_multiply: T.Buffer((6, 7, 1), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        ph_0_1 = T.Buffer((42,), data=ph_0.data)
        for i0 in T.parallel(6):
            compute_1 = T.allocate([1], "float32", "global")
            for i1 in range(7):
                cse_var_1: T.int32 = i0 * 7 + i1
                compute_2 = T.Buffer((1,), data=compute_1, align=4)
                compute_2[0] = T.exp(ph_0_1[cse_var_1])
                compute_3 = T.Buffer((42,), data=compute.data)
                compute_3[cse_var_1] = T.cos(ph_0_1[cse_var_1] + compute_2[0])
        for ax0 in T.parallel(6):
            for ax1 in range(7):
                cse_var_2: T.int32 = ax0 * 7 + ax1
                T_multiply_1 = T.Buffer((42,), data=T_multiply.data)
                T_multiply_1[cse_var_2] = ph_0_1[cse_var_2] * T.atanh(ph_0_1[cse_var_2])