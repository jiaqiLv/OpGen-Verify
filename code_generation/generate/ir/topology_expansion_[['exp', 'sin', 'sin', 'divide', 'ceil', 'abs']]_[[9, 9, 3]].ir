# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((9, 9, 3), "float32"), compute: T.Buffer((9, 9, 3), "float32"), T_divide: T.Buffer((9, 9, 3), "float32"), compute_1: T.Buffer((9, 9, 3), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        ph_0_1 = T.Buffer((243,), data=ph_0.data)
        for i0_i1_fused_i2_fused in T.parallel(243):
            compute_2 = T.Buffer((243,), data=compute.data)
            compute_2[i0_i1_fused_i2_fused] = T.exp(ph_0_1[i0_i1_fused_i2_fused])
        for ax0_ax1_fused in T.parallel(81):
            for ax2 in range(3):
                cse_var_1: T.int32 = ax0_ax1_fused * 3 + ax2
                T_divide_1 = T.Buffer((243,), data=T_divide.data)
                T_divide_1[cse_var_1] = ph_0_1[cse_var_1] / T.sin(T.sin(ph_0_1[cse_var_1]))
        for i0_i1_fused_i2_fused in T.parallel(243):
            compute_2 = T.Buffer((243,), data=compute_1.data)
            compute_2[i0_i1_fused_i2_fused] = T.fabs(T.ceil(ph_0_1[i0_i1_fused_i2_fused]))