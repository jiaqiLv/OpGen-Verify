# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((15, 8, 3), "float32"), ph_3: T.Buffer((15, 8, 3), "float32"), T_mod: T.Buffer((15, 8, 3), "float32"), compute: T.Buffer((15, 8, 3), "float32"), compute_1: T.Buffer((15, 8, 3), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        ph_0_1 = T.Buffer((360,), data=ph_0.data)
        for ax0 in T.parallel(15):
            for ax1, ax2 in T.grid(8, 3):
                cse_var_1: T.int32 = ax0 * 24 + ax1 * 3 + ax2
                T_mod_1 = T.Buffer((360,), data=T_mod.data)
                ph_3_1 = T.Buffer((360,), data=ph_3.data)
                T_mod_1[cse_var_1] = T.truncmod(ph_0_1[cse_var_1], ph_3_1[cse_var_1])
        for i0_i1_fused_i2_fused in T.parallel(360):
            compute_2 = T.Buffer((360,), data=compute.data)
            compute_2[i0_i1_fused_i2_fused] = T.ceil(ph_0_1[i0_i1_fused_i2_fused] - T.asinh(ph_0_1[i0_i1_fused_i2_fused]))
        for i0 in T.parallel(15):
            for i1, i2 in T.grid(8, 3):
                cse_var_2: T.int32 = i0 * 24 + i1 * 3 + i2
                compute_2 = T.Buffer((360,), data=compute_1.data)
                compute_2[cse_var_2] = T.asin(ph_0_1[cse_var_2] - T.asinh(ph_0_1[cse_var_2]))