# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((4, 2, 4), "float32"), ph_3: T.Buffer((4, 2, 4), "float32"), T_multiply: T.Buffer((4, 2, 4), "float32"), T_subtract: T.Buffer((4, 2, 4), "float32"), compute: T.Buffer((4, 2, 4), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        ph_0_1 = T.Buffer((32,), data=ph_0.data)
        for ax0_ax1_fused_ax2_fused in T.parallel(32):
            T_multiply_1 = T.Buffer((32,), data=T_multiply.data)
            ph_3_1 = T.Buffer((32,), data=ph_3.data)
            T_multiply_1[ax0_ax1_fused_ax2_fused] = ph_0_1[ax0_ax1_fused_ax2_fused] * ph_3_1[ax0_ax1_fused_ax2_fused]
        for ax0_ax1_fused in T.parallel(8):
            for ax2 in range(4):
                cse_var_1: T.int32 = ax0_ax1_fused * 4 + ax2
                T_subtract_1 = T.Buffer((32,), data=T_subtract.data)
                T_subtract_1[cse_var_1] = T.truncmod(ph_0_1[cse_var_1], T.atanh(ph_0_1[cse_var_1])) - ph_0_1[cse_var_1]
        for i0 in T.parallel(4):
            for i1, i2 in T.grid(2, 4):
                cse_var_2: T.int32 = i0 * 8 + i1 * 4 + i2
                compute_1 = T.Buffer((32,), data=compute.data)
                compute_1[cse_var_2] = T.acosh(T.truncmod(ph_0_1[cse_var_2], T.atanh(ph_0_1[cse_var_2])))