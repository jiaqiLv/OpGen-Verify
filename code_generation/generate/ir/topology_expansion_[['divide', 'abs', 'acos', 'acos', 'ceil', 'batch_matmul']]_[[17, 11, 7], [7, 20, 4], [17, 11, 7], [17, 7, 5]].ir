# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((17, 11, 7), "float32"), ph_3: T.Buffer((17, 11, 7), "float32"), ph_9: T.Buffer((17, 7, 5), "float32"), compute: T.Buffer((17, 11, 7), "float32"), compute_1: T.Buffer((17, 11, 7), "float32"), compute_2: T.Buffer((17, 11, 7), "float32"), T_batch_matmul_NN: T.Buffer((17, 11, 5), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        auto_scheduler_layout_transform = T.allocate([595], "float32", "global")
        ph_0_1 = T.Buffer((1309,), data=ph_0.data)
        for i0_i1_fused_i2_fused in T.parallel(1309):
            compute_3 = T.Buffer((1309,), data=compute.data)
            compute_3[i0_i1_fused_i2_fused] = T.fabs(ph_0_1[i0_i1_fused_i2_fused])
        for i0_i1_fused_i2_fused in T.parallel(1309):
            compute_3 = T.Buffer((1309,), data=compute_1.data)
            compute_3[i0_i1_fused_i2_fused] = T.acos(T.acos(ph_0_1[i0_i1_fused_i2_fused]))
        for i0_i1_fused_i2_fused in T.parallel(1309):
            compute_3 = T.Buffer((1309,), data=compute_2.data)
            compute_3[i0_i1_fused_i2_fused] = T.ceil(T.acos(ph_0_1[i0_i1_fused_i2_fused]))
        auto_scheduler_layout_transform_1 = T.Buffer((595,), data=auto_scheduler_layout_transform)
        for ax6, ax7, ax8 in T.grid(5, 7, 17):
            ph_9_1 = T.Buffer((595,), data=ph_9.data)
            auto_scheduler_layout_transform_1[ax6 * 119 + ax7 * 17 + ax8] = ph_9_1[ax8 * 35 + ax7 * 5 + ax6]
        T_batch_matmul_NN_1 = T.Buffer((935,), data=T_batch_matmul_NN.data)
        for i_outer_inner_init, j_outer_inner_init, b_inner_init in T.grid(11, 5, 17):
            T_batch_matmul_NN_1[b_inner_init * 55 + i_outer_inner_init * 5 + j_outer_inner_init] = T.float32(0)
        for i_outer_inner, j_outer_inner, k_inner, b_inner in T.grid(11, 5, 7, 17):
            cse_var_2: T.int32 = b_inner * 77 + i_outer_inner * 7 + k_inner
            cse_var_1: T.int32 = b_inner * 55 + i_outer_inner * 5 + j_outer_inner
            ph_3_1 = T.Buffer((1309,), data=ph_3.data)
            T_batch_matmul_NN_1[cse_var_1] = T_batch_matmul_NN_1[cse_var_1] + ph_0_1[cse_var_2] / ph_3_1[cse_var_2] * auto_scheduler_layout_transform_1[j_outer_inner * 119 + k_inner * 17 + b_inner]