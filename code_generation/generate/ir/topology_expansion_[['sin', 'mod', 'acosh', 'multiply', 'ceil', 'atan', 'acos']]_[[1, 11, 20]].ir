# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((1, 11, 20), "float32"), T_multiply: T.Buffer((1, 11, 20), "float32"), compute: T.Buffer((1, 11, 20), "float32"), compute_1: T.Buffer((1, 11, 20), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        ph_0_1 = T.Buffer((220,), data=ph_0.data)
        for ax0_ax1_fused_ax2_fused in T.parallel(220):
            T_multiply_1 = T.Buffer((220,), data=T_multiply.data)
            T_multiply_1[ax0_ax1_fused_ax2_fused] = ph_0_1[ax0_ax1_fused_ax2_fused] * T.acosh(T.truncmod(ph_0_1[ax0_ax1_fused_ax2_fused], T.sin(ph_0_1[ax0_ax1_fused_ax2_fused])))
        for i0_i1_fused in T.parallel(11):
            for i2 in range(20):
                cse_var_1: T.int32 = i0_i1_fused * 20 + i2
                compute_2 = T.Buffer((220,), data=compute.data)
                compute_2[cse_var_1] = T.atan(T.ceil(ph_0_1[cse_var_1]))
        for i1, i2 in T.grid(11, 20):
            cse_var_2: T.int32 = i1 * 20 + i2
            compute_2 = T.Buffer((220,), data=compute_1.data)
            compute_2[cse_var_2] = T.acos(T.ceil(ph_0_1[cse_var_2]))