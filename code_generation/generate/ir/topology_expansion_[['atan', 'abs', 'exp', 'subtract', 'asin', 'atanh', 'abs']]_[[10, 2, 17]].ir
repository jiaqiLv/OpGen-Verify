# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((10, 2, 17), "float32"), compute: T.Buffer((10, 2, 17), "float32"), T_subtract: T.Buffer((10, 2, 17), "float32"), compute_1: T.Buffer((10, 2, 17), "float32"), compute_2: T.Buffer((10, 2, 17), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        ph_0_1 = T.Buffer((340,), data=ph_0.data)
        for i0_i1_fused in T.parallel(20):
            for i2 in range(17):
                cse_var_1: T.int32 = i0_i1_fused * 17 + i2
                compute_3 = T.Buffer((340,), data=compute.data)
                compute_3[cse_var_1] = T.atan(ph_0_1[cse_var_1])
        for ax0 in T.parallel(10):
            compute_3 = T.allocate([34], "float32", "global")
            compute_4 = T.Buffer((34,), data=compute_3)
            for i1, i2 in T.grid(2, 17):
                cse_var_2: T.int32 = i1 * 17
                compute_4[cse_var_2 + i2] = T.exp(T.fabs(ph_0_1[ax0 * 34 + cse_var_2 + i2]))
            for ax1, ax2 in T.grid(2, 17):
                cse_var_4: T.int32 = ax1 * 17
                cse_var_3: T.int32 = ax0 * 34 + cse_var_4 + ax2
                T_subtract_1 = T.Buffer((340,), data=T_subtract.data)
                T_subtract_1[cse_var_3] = ph_0_1[cse_var_3] - compute_4[cse_var_4 + ax2]
        for i0_i1_fused_i2_fused in T.parallel(340):
            compute_3 = T.Buffer((340,), data=compute_1.data)
            compute_3[i0_i1_fused_i2_fused] = T.atanh(T.asin(ph_0_1[i0_i1_fused_i2_fused]))
        for i0_i1_fused in T.parallel(20):
            for i2 in range(17):
                cse_var_5: T.int32 = i0_i1_fused * 17 + i2
                compute_3 = T.Buffer((340,), data=compute_2.data)
                compute_3[cse_var_5] = T.fabs(T.asin(ph_0_1[cse_var_5]))