# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((18, 19, 14), "float32"), compute: T.Buffer((18, 19, 14), "float32"), T_multiply: T.Buffer((18, 19, 14), "float32"), T_add: T.Buffer((18, 19, 14), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        ph_0_1 = T.Buffer((4788,), data=ph_0.data)
        for i0_i1_fused in T.parallel(342):
            for i2 in range(14):
                cse_var_1: T.int32 = i0_i1_fused * 14 + i2
                compute_1 = T.Buffer((4788,), data=compute.data)
                compute_1[cse_var_1] = T.asinh(ph_0_1[cse_var_1])
        for ax0 in T.parallel(18):
            for ax1, ax2 in T.grid(19, 14):
                cse_var_2: T.int32 = ax0 * 266 + ax1 * 14 + ax2
                T_multiply_1 = T.Buffer((4788,), data=T_multiply.data)
                T_multiply_1[cse_var_2] = ph_0_1[cse_var_2] / (ph_0_1[cse_var_2] / T.acosh(T.asinh(ph_0_1[cse_var_2]))) * ph_0_1[cse_var_2]
        for ax0_ax1_fused_ax2_fused in T.parallel(4788):
            T_add_1 = T.Buffer((4788,), data=T_add.data)
            T_add_1[ax0_ax1_fused_ax2_fused] = ph_0_1[ax0_ax1_fused_ax2_fused] / (ph_0_1[ax0_ax1_fused_ax2_fused] / T.acosh(T.asinh(ph_0_1[ax0_ax1_fused_ax2_fused]))) + ph_0_1[ax0_ax1_fused_ax2_fused]