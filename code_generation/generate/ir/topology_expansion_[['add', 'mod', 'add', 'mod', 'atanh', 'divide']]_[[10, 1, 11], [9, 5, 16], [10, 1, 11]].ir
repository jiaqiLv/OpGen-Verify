# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((10, 1, 11), "float32"), ph_3: T.Buffer((10, 1, 11), "float32"), T_mod: T.Buffer((10, 1, 11), "float32"), compute: T.Buffer((10, 1, 11), "float32"), T_divide: T.Buffer((10, 1, 11), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        ph_0_1 = T.Buffer((110,), data=ph_0.data)
        ph_3_1 = T.Buffer((110,), data=ph_3.data)
        for ax0_ax1_fused in T.parallel(10):
            for ax2 in range(11):
                cse_var_1: T.int32 = ax0_ax1_fused * 11 + ax2
                T_mod_1 = T.Buffer((110,), data=T_mod.data)
                T_mod_1[cse_var_1] = T.truncmod(ph_0_1[cse_var_1] + T.truncmod(ph_0_1[cse_var_1], ph_3_1[cse_var_1]), ph_0_1[cse_var_1])
        for i0_i1_fused_i2_fused in T.parallel(110):
            compute_1 = T.Buffer((110,), data=compute.data)
            compute_1[i0_i1_fused_i2_fused] = T.atanh(ph_0_1[i0_i1_fused_i2_fused] + T.truncmod(ph_0_1[i0_i1_fused_i2_fused], ph_3_1[i0_i1_fused_i2_fused]))
        for ax0_ax1_fused_ax2_fused in T.parallel(110):
            T_divide_1 = T.Buffer((110,), data=T_divide.data)
            T_divide_1[ax0_ax1_fused_ax2_fused] = (ph_0_1[ax0_ax1_fused_ax2_fused] + ph_3_1[ax0_ax1_fused_ax2_fused]) / ph_0_1[ax0_ax1_fused_ax2_fused]