# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((18, 16, 16), "float32"), compute: T.Buffer((18, 16, 16), "float32"), T_multiply: T.Buffer((18, 16, 16), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        ph_0_1 = T.Buffer((4608,), data=ph_0.data)
        for i0_i1_fused in T.parallel(288):
            for i2 in range(16):
                cse_var_1: T.int32 = i0_i1_fused * 16 + i2
                compute_1 = T.Buffer((4608,), data=compute.data)
                compute_1[cse_var_1] = T.atanh(ph_0_1[cse_var_1])
        for ax0 in T.parallel(18):
            for ax1, ax2 in T.grid(16, 16):
                cse_var_2: T.int32 = ax0 * 256 + ax1 * 16 + ax2
                T_multiply_1 = T.Buffer((4608,), data=T_multiply.data)
                T_multiply_1[cse_var_2] = ph_0_1[cse_var_2] * T.acosh(T.atan(ph_0_1[cse_var_2]))