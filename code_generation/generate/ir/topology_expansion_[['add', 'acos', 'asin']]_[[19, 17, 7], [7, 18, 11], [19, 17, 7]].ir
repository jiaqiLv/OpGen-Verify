# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((19, 17, 7), "float32"), ph_3: T.Buffer((19, 17, 7), "float32"), T_add: T.Buffer((19, 17, 7), "float32"), compute: T.Buffer((19, 17, 7), "float32"), compute_1: T.Buffer((19, 17, 7), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        ph_0_1 = T.Buffer((2261,), data=ph_0.data)
        for ax0_ax1_fused in T.parallel(323):
            for ax2 in range(7):
                cse_var_1: T.int32 = ax0_ax1_fused * 7 + ax2
                T_add_1 = T.Buffer((2261,), data=T_add.data)
                ph_3_1 = T.Buffer((2261,), data=ph_3.data)
                T_add_1[cse_var_1] = ph_0_1[cse_var_1] + ph_3_1[cse_var_1]
        for i0_i1_fused_i2_fused in T.parallel(2261):
            compute_2 = T.Buffer((2261,), data=compute.data)
            compute_2[i0_i1_fused_i2_fused] = T.acos(ph_0_1[i0_i1_fused_i2_fused])
        for i0_i1_fused_i2_fused in T.parallel(2261):
            compute_2 = T.Buffer((2261,), data=compute_1.data)
            compute_2[i0_i1_fused_i2_fused] = T.asin(ph_0_1[i0_i1_fused_i2_fused])