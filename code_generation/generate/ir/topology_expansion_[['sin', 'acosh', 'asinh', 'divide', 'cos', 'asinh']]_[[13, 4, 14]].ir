# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((13, 4, 14), "float32"), compute: T.Buffer((13, 4, 14), "float32"), T_divide: T.Buffer((13, 4, 14), "float32"), compute_1: T.Buffer((13, 4, 14), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        ph_0_1 = T.Buffer((728,), data=ph_0.data)
        for i0_i1_fused_i2_fused in T.parallel(728):
            compute_2 = T.Buffer((728,), data=compute.data)
            compute_2[i0_i1_fused_i2_fused] = T.sin(ph_0_1[i0_i1_fused_i2_fused])
        for ax0_ax1_fused_ax2_fused in T.parallel(728):
            T_divide_1 = T.Buffer((728,), data=T_divide.data)
            T_divide_1[ax0_ax1_fused_ax2_fused] = ph_0_1[ax0_ax1_fused_ax2_fused] / T.asinh(T.acosh(ph_0_1[ax0_ax1_fused_ax2_fused]))
        for i0_i1_fused_i2_fused in T.parallel(728):
            compute_2 = T.Buffer((728,), data=compute_1.data)
            compute_2[i0_i1_fused_i2_fused] = T.asinh(T.cos(ph_0_1[i0_i1_fused_i2_fused]))