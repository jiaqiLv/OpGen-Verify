# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((10, 18, 20), "float32"), ph_3: T.Buffer((10, 18, 20), "float32"), T_mod: T.Buffer((10, 18, 20), "float32"), T_add: T.Buffer((10, 18, 20), "float32"), T_multiply: T.Buffer((10, 18, 20), "float32"), T_multiply_1: T.Buffer((10, 18, 20), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        ph_0_1 = T.Buffer((3600,), data=ph_0.data)
        ph_3_1 = T.Buffer((3600,), data=ph_3.data)
        for ax0_ax1_fused in T.parallel(180):
            for ax2 in range(20):
                cse_var_1: T.int32 = ax0_ax1_fused * 20 + ax2
                T_mod_1 = T.Buffer((3600,), data=T_mod.data)
                T_mod_1[cse_var_1] = T.truncmod(ph_0_1[cse_var_1], ph_3_1[cse_var_1])
        for ax0_ax1_fused_ax2_fused in T.parallel(3600):
            T_add_1 = T.Buffer((3600,), data=T_add.data)
            T_add_1[ax0_ax1_fused_ax2_fused] = ph_0_1[ax0_ax1_fused_ax2_fused] + ph_3_1[ax0_ax1_fused_ax2_fused]
        for ax0_ax1_fused_ax2_fused in T.parallel(3600):
            T_multiply_2 = T.Buffer((3600,), data=T_multiply.data)
            T_multiply_2[ax0_ax1_fused_ax2_fused] = T.cos(ph_0_1[ax0_ax1_fused_ax2_fused]) * ph_0_1[ax0_ax1_fused_ax2_fused]
        for ax0_ax1_fused_ax2_fused in T.parallel(3600):
            T_multiply_2 = T.Buffer((3600,), data=T_multiply_1.data)
            T_multiply_2[ax0_ax1_fused_ax2_fused] = T.cos(ph_0_1[ax0_ax1_fused_ax2_fused]) * ph_0_1[ax0_ax1_fused_ax2_fused]