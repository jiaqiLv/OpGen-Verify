# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((20, 8, 8), "float32"), compute: T.Buffer((20, 8, 8), "float32"), T_batch_matmul_NN: T.Buffer((20, 8, 8), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        auto_scheduler_layout_transform = T.allocate([1280], "float32", "global")
        ph_0_1 = T.Buffer((1280,), data=ph_0.data)
        for i0_i1_fused_i2_fused in T.parallel(1280):
            compute_1 = T.Buffer((1280,), data=compute.data)
            compute_1[i0_i1_fused_i2_fused] = T.asinh(T.truncmod(ph_0_1[i0_i1_fused_i2_fused], T.ceil(ph_0_1[i0_i1_fused_i2_fused])))
        auto_scheduler_layout_transform_1 = T.Buffer((1280,), data=auto_scheduler_layout_transform)
        for ax0_ax1_fused_ax2_fused in T.parallel(5):
            for ax4, ax5, ax6, ax7, ax8 in T.grid(4, 2, 8, 2, 2):
                cse_var_1: T.int32 = ax0_ax1_fused_ax2_fused * 256
                auto_scheduler_layout_transform_1[cse_var_1 + ax4 * 64 + ax5 * 32 + ax6 * 4 + ax7 * 2 + ax8] = T.atan(ph_0_1[cse_var_1 + ax5 * 128 + ax8 * 64 + ax4 * 16 + ax7 * 8 + ax6])
        for b_outer_outer_outer_i_outer_outer_outer_fused_j_outer_outer_outer_fused_b_outer_outer_inner_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused in T.parallel(10):
            T_batch_matmul_NN_1 = T.Buffer((1280,), data=T_batch_matmul_NN.data)
            for b_outer_inner_init, i_outer_inner_init, j_outer_inner_init, b_inner_init, i_inner_init in T.grid(2, 2, 8, 2, 2):
                T_batch_matmul_NN_1[b_outer_outer_outer_i_outer_outer_outer_fused_j_outer_outer_outer_fused_b_outer_outer_inner_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused % 5 * 256 + b_outer_inner_init * 128 + b_inner_init * 64 + b_outer_outer_outer_i_outer_outer_outer_fused_j_outer_outer_outer_fused_b_outer_outer_inner_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused // 5 * 32 + i_outer_inner_init * 16 + i_inner_init * 8 + j_outer_inner_init] = T.float32(0)
            for k_outer, b_outer_inner, i_outer_inner, j_outer_inner, k_inner, b_inner, i_inner in T.grid(4, 2, 2, 8, 2, 2, 2):
                cse_var_3: T.int32 = b_outer_outer_outer_i_outer_outer_outer_fused_j_outer_outer_outer_fused_b_outer_outer_inner_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused % 5 * 256
                cse_var_4: T.int32 = cse_var_3 + b_outer_inner * 128 + b_inner * 64 + b_outer_outer_outer_i_outer_outer_outer_fused_j_outer_outer_outer_fused_b_outer_outer_inner_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused // 5 * 32 + i_outer_inner * 16 + i_inner * 8
                cse_var_2: T.int32 = cse_var_4 + j_outer_inner
                T_batch_matmul_NN_1[cse_var_2] = T_batch_matmul_NN_1[cse_var_2] + ph_0_1[cse_var_4 + k_outer * 2 + k_inner] * auto_scheduler_layout_transform_1[cse_var_3 + k_outer * 64 + b_outer_inner * 32 + j_outer_inner * 4 + k_inner * 2 + b_inner]