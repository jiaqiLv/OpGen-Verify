# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((3, 14, 11), "float32"), ph_3: T.Buffer((3, 14, 11), "float32"), T_subtract: T.Buffer((3, 14, 11), "float32"), compute: T.Buffer((3, 14, 11), "float32"), compute_1: T.Buffer((3, 14, 11), "float32"), compute_2: T.Buffer((3, 14, 11), "float32"), compute_3: T.Buffer((3, 14, 11), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        compute_4 = T.allocate([462], "float32", "global")
        compute_5 = T.Buffer((462,), data=compute_4)
        ph_0_1 = T.Buffer((462,), data=ph_0.data)
        for i0_i1_fused in T.parallel(42):
            for i2 in range(11):
                cse_var_1: T.int32 = i0_i1_fused * 11 + i2
                compute_5[cse_var_1] = T.exp(ph_0_1[cse_var_1])
        for i0_i1_fused_i2_fused in T.parallel(462):
            compute_6 = T.Buffer((462,), data=compute.data)
            compute_6[i0_i1_fused_i2_fused] = T.acos(compute_5[i0_i1_fused_i2_fused])
        for i0_i1_fused_i2_fused in T.parallel(462):
            compute_6 = T.Buffer((462,), data=compute_1.data)
            compute_6[i0_i1_fused_i2_fused] = T.exp(compute_5[i0_i1_fused_i2_fused])
        ph_3_1 = T.Buffer((462,), data=ph_3.data)
        for ax0_ax1_fused_ax2_fused in T.parallel(462):
            T_subtract_1 = T.Buffer((462,), data=T_subtract.data)
            T_subtract_1[ax0_ax1_fused_ax2_fused] = ph_0_1[ax0_ax1_fused_ax2_fused] - ph_3_1[ax0_ax1_fused_ax2_fused]
        for i0_i1_fused_i2_fused in T.parallel(462):
            compute_6 = T.Buffer((462,), data=compute_2.data)
            compute_6[i0_i1_fused_i2_fused] = T.ceil(T.truncmod(ph_0_1[i0_i1_fused_i2_fused], ph_3_1[i0_i1_fused_i2_fused]))
        for i0_i1_fused_i2_fused in T.parallel(462):
            compute_6 = T.Buffer((462,), data=compute_3.data)
            compute_6[i0_i1_fused_i2_fused] = T.sin(T.truncmod(ph_0_1[i0_i1_fused_i2_fused], ph_3_1[i0_i1_fused_i2_fused]))