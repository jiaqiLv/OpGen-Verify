# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((18, 19, 1), "float32"), compute: T.Buffer((18, 19, 1), "float32"), T_add: T.Buffer((18, 19, 1), "float32"), T_subtract: T.Buffer((18, 19, 1), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        ph_0_1 = T.Buffer((342,), data=ph_0.data)
        for i0_i1_fused_i2_fused in T.parallel(342):
            compute_1 = T.Buffer((342,), data=compute.data)
            compute_1[i0_i1_fused_i2_fused] = T.exp(ph_0_1[i0_i1_fused_i2_fused])
        for ax0 in T.parallel(18):
            for ax1 in range(19):
                cse_var_1: T.int32 = ax0 * 19 + ax1
                T_add_1 = T.Buffer((342,), data=T_add.data)
                T_add_1[cse_var_1] = T.ceil(ph_0_1[cse_var_1]) + ph_0_1[cse_var_1]
        for ax0_ax1_fused_ax2_fused in T.parallel(342):
            T_subtract_1 = T.Buffer((342,), data=T_subtract.data)
            T_subtract_1[ax0_ax1_fused_ax2_fused] = ph_0_1[ax0_ax1_fused_ax2_fused] - T.cos(ph_0_1[ax0_ax1_fused_ax2_fused])