void default_function_kernel(float* T_fast_erf, float* data);
void default_function_kernel(float* T_fast_erf, float* data) {
  #pragma omp parallel for
  for (int32_t ax0 = 0; ax0 < 99; ++ax0) {
    for (int32_t ax1 = 0; ax1 < 65; ++ax1) {
      for (int32_t ax2 = 0; ax2 < 85; ++ax2) {
        for (int32_t ax3 = 0; ax3 < 74; ++ax3) {
          T_fast_erf[((((ax0 * 408850) + (ax1 * 6290)) + (ax2 * 74)) + ax3)] = ((max(min(data[((((ax0 * 408850) + (ax1 * 6290)) + (ax2 * 74)) + ax3)], 4.000000e+00f), -4.000000e+00f) * (((max(min(data[((((ax0 * 408850) + (ax1 * 6290)) + (ax2 * 74)) + ax3)], 4.000000e+00f), -4.000000e+00f) * max(min(data[((((ax0 * 408850) + (ax1 * 6290)) + (ax2 * 74)) + ax3)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(data[((((ax0 * 408850) + (ax1 * 6290)) + (ax2 * 74)) + ax3)], 4.000000e+00f), -4.000000e+00f) * max(min(data[((((ax0 * 408850) + (ax1 * 6290)) + (ax2 * 74)) + ax3)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(data[((((ax0 * 408850) + (ax1 * 6290)) + (ax2 * 74)) + ax3)], 4.000000e+00f), -4.000000e+00f) * max(min(data[((((ax0 * 408850) + (ax1 * 6290)) + (ax2 * 74)) + ax3)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(data[((((ax0 * 408850) + (ax1 * 6290)) + (ax2 * 74)) + ax3)], 4.000000e+00f), -4.000000e+00f) * max(min(data[((((ax0 * 408850) + (ax1 * 6290)) + (ax2 * 74)) + ax3)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(data[((((ax0 * 408850) + (ax1 * 6290)) + (ax2 * 74)) + ax3)], 4.000000e+00f), -4.000000e+00f) * max(min(data[((((ax0 * 408850) + (ax1 * 6290)) + (ax2 * 74)) + ax3)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(data[((((ax0 * 408850) + (ax1 * 6290)) + (ax2 * 74)) + ax3)], 4.000000e+00f), -4.000000e+00f) * max(min(data[((((ax0 * 408850) + (ax1 * 6290)) + (ax2 * 74)) + ax3)], 4.000000e+00f), -4.000000e+00f)) * -2.726142e-10f) + 2.770681e-08f)) + -2.101024e-06f)) + -5.692506e-05f)) + -7.349906e-04f)) + -2.954600e-03f)) + -1.609603e-02f)) / (((max(min(data[((((ax0 * 408850) + (ax1 * 6290)) + (ax2 * 74)) + ax3)], 4.000000e+00f), -4.000000e+00f) * max(min(data[((((ax0 * 408850) + (ax1 * 6290)) + (ax2 * 74)) + ax3)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(data[((((ax0 * 408850) + (ax1 * 6290)) + (ax2 * 74)) + ax3)], 4.000000e+00f), -4.000000e+00f) * max(min(data[((((ax0 * 408850) + (ax1 * 6290)) + (ax2 * 74)) + ax3)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(data[((((ax0 * 408850) + (ax1 * 6290)) + (ax2 * 74)) + ax3)], 4.000000e+00f), -4.000000e+00f) * max(min(data[((((ax0 * 408850) + (ax1 * 6290)) + (ax2 * 74)) + ax3)], 4.000000e+00f), -4.000000e+00f)) * (((max(min(data[((((ax0 * 408850) + (ax1 * 6290)) + (ax2 * 74)) + ax3)], 4.000000e+00f), -4.000000e+00f) * max(min(data[((((ax0 * 408850) + (ax1 * 6290)) + (ax2 * 74)) + ax3)], 4.000000e+00f), -4.000000e+00f)) * -1.456607e-05f) + -2.133740e-04f)) + -1.682827e-03f)) + -7.373329e-03f)) + -1.426474e-02f));
        }
      }
    }
  }
}

