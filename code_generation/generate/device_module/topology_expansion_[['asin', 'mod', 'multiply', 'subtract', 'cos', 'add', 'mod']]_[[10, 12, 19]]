void default_function_kernel(float* T_add, float* T_mod, float* T_subtract, float* ph_0);
void default_function_kernel(float* T_add, float* T_mod, float* T_subtract, float* ph_0) {
  #pragma omp parallel for
  for (int32_t ax0_ax1_fused_ax2_fused = 0; ax0_ax1_fused_ax2_fused < 2280; ++ax0_ax1_fused_ax2_fused) {
    T_subtract[ax0_ax1_fused_ax2_fused] = (ph_0[ax0_ax1_fused_ax2_fused] - (fmodf(ph_0[ax0_ax1_fused_ax2_fused], asinf(ph_0[ax0_ax1_fused_ax2_fused])) * ph_0[ax0_ax1_fused_ax2_fused]));
  }
  #pragma omp parallel for
  for (int32_t ax0_ax1_fused_ax2_fused_1 = 0; ax0_ax1_fused_ax2_fused_1 < 2280; ++ax0_ax1_fused_ax2_fused_1) {
    T_add[ax0_ax1_fused_ax2_fused_1] = (cosf(ph_0[ax0_ax1_fused_ax2_fused_1]) + ph_0[ax0_ax1_fused_ax2_fused_1]);
  }
  #pragma omp parallel for
  for (int32_t ax0 = 0; ax0 < 10; ++ax0) {
    for (int32_t ax1 = 0; ax1 < 12; ++ax1) {
      for (int32_t ax2 = 0; ax2 < 19; ++ax2) {
        T_mod[(((ax0 * 228) + (ax1 * 19)) + ax2)] = fmodf(cosf(ph_0[(((ax0 * 228) + (ax1 * 19)) + ax2)]), ph_0[(((ax0 * 228) + (ax1 * 19)) + ax2)]);
      }
    }
  }
}

