void default_function_kernel(float* T_mod, float* compute, float* compute_1, float* ph_0);
void default_function_kernel(float* T_mod, float* compute, float* compute_1, float* ph_0) {
  #pragma omp parallel for
  for (int32_t i0_i1_fused_i2_fused = 0; i0_i1_fused_i2_fused < 243; ++i0_i1_fused_i2_fused) {
    compute[i0_i1_fused_i2_fused] = fabsf(ph_0[i0_i1_fused_i2_fused]);
  }
  #pragma omp parallel for
  for (int32_t i0_i1_fused_i2_fused_1 = 0; i0_i1_fused_i2_fused_1 < 243; ++i0_i1_fused_i2_fused_1) {
    compute_1[i0_i1_fused_i2_fused_1] = sinf((ph_0[i0_i1_fused_i2_fused_1] / (ph_0[i0_i1_fused_i2_fused_1] - fmodf(asinf(ph_0[i0_i1_fused_i2_fused_1]), ph_0[i0_i1_fused_i2_fused_1]))));
  }
  #pragma omp parallel for
  for (int32_t ax0_ax1_fused = 0; ax0_ax1_fused < 81; ++ax0_ax1_fused) {
    for (int32_t ax2 = 0; ax2 < 3; ++ax2) {
      T_mod[((ax0_ax1_fused * 3) + ax2)] = fmodf((ph_0[((ax0_ax1_fused * 3) + ax2)] / (ph_0[((ax0_ax1_fused * 3) + ax2)] - fmodf(asinf(ph_0[((ax0_ax1_fused * 3) + ax2)]), ph_0[((ax0_ax1_fused * 3) + ax2)]))), ph_0[((ax0_ax1_fused * 3) + ax2)]);
    }
  }
}

