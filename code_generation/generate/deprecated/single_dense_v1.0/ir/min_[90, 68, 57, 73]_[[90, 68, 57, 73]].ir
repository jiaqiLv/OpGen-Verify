# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(data: T.Buffer((90, 68, 57, 73), "float32"), data_red: T.Buffer((), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        data_red_rf = T.allocate([636633], "float32", "global")
        data_red_rf_1 = T.Buffer((636633,), data=data_red_rf)
        for k0_k1_fused_k2_fused_k3_fused_outer in T.parallel(636633):
            data_red_rf_1[k0_k1_fused_k2_fused_k3_fused_outer] = T.float32(3.4028234663852886e+38)
            for k0_k1_fused_k2_fused_k3_fused_inner in range(40):
                data_1 = T.Buffer((25465320,), data=data.data)
                data_red_rf_1[k0_k1_fused_k2_fused_k3_fused_outer] = T.min(data_red_rf_1[k0_k1_fused_k2_fused_k3_fused_outer], data_1[k0_k1_fused_k2_fused_k3_fused_outer * 40 + k0_k1_fused_k2_fused_k3_fused_inner])
        data_red_1 = T.Buffer((1,), data=data_red.data)
        data_red_1[0] = T.float32(3.4028234663852886e+38)
        for k0_k1_fused_k2_fused_k3_fused_outer_v in range(636633):
            data_red_1[0] = T.min(data_red_1[0], data_red_rf_1[k0_k1_fused_k2_fused_k3_fused_outer_v])