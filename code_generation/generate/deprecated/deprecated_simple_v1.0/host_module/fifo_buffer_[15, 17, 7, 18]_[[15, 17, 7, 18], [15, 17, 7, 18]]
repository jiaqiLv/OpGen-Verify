; ModuleID = 'TVMMod'
source_filename = "TVMMod"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%0 = type { double }
%1 = type { i8*, %2, i32, %3, i64*, i64*, i64 }
%2 = type { i32, i32 }
%3 = type { i8, i8, i16 }

@__tvm_module_ctx = linkonce dllexport local_unnamed_addr global i8* null, align 8
@__TVMFuncCall = linkonce dllexport local_unnamed_addr global i32 (i8*, %0*, i32*, i32, %0*, i32*)* null, align 8
@__TVMBackendGetFuncFromEnv = linkonce dllexport local_unnamed_addr global i32 (i8*, i8*, i8**)* null, align 8
@__TVMAPISetLastError = linkonce dllexport local_unnamed_addr global void (i8*)* null, align 8
@.str = private constant [67 x i8] c"Assert fail: num_args == 3, default_function: num_args should be 3\00", align 1
@.str.1 = private constant [130 x i8] c"Assert fail: data_code == 3 or data_code == 13 or data_code == 7 or data_code == 4, default_function: Expect arg[0] to be pointer\00", align 1
@.str.2 = private constant [138 x i8] c"Assert fail: buffer_code == 3 or buffer_code == 13 or buffer_code == 7 or buffer_code == 4, default_function: Expect arg[1] to be pointer\00", align 1
@.str.3 = private constant [154 x i8] c"Assert fail: new_buffer_code == 3 or new_buffer_code == 13 or new_buffer_code == 7 or new_buffer_code == 4, default_function: Expect arg[2] to be pointer\00", align 1
@.str.4 = private constant [107 x i8] c"Assert fail: 4 == T.tvm_struct_get(data, 0, 4, \22int32\22), default_function.data.ndim is expected to equal 4\00", align 1
@.str.5 = private constant [235 x i8] c"Assert fail: T.tvm_struct_get(data, 0, 5, \22uint8\22) == T.uint8(2) and T.tvm_struct_get(data, 0, 6, \22uint8\22) == T.uint8(32) and T.tvm_struct_get(data, 0, 7, \22uint16\22) == T.uint16(1), default_function.data.dtype is expected to be float32\00", align 1
@.str.6 = private constant [193 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_data_shape[0]) == 15, Argument default_function.data.shape[0] has an unsatisfied constraint: 15 == T.Cast(\22int32\22, default_function_data_shape[0])\00", align 1
@.str.7 = private constant [193 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_data_shape[1]) == 17, Argument default_function.data.shape[1] has an unsatisfied constraint: 17 == T.Cast(\22int32\22, default_function_data_shape[1])\00", align 1
@.str.8 = private constant [191 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_data_shape[2]) == 7, Argument default_function.data.shape[2] has an unsatisfied constraint: 7 == T.Cast(\22int32\22, default_function_data_shape[2])\00", align 1
@.str.9 = private constant [193 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_data_shape[3]) == 18, Argument default_function.data.shape[3] has an unsatisfied constraint: 18 == T.Cast(\22int32\22, default_function_data_shape[3])\00", align 1
@.str.10 = private constant [312 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_data_strides[3]) and 18 == T.Cast(\22int32\22, default_function_data_strides[2]) and 126 == T.Cast(\22int32\22, default_function_data_strides[1]) and 2142 == T.Cast(\22int32\22, default_function_data_strides[0]), default_function.data.strides: expected to be compact array\00", align 1
@.str.11 = private constant [196 x i8] c"Assert fail: T.uint64(0) == T.tvm_struct_get(data, 0, 8, \22uint64\22), Argument default_function.data.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(data, 0, 8, \22uint64\22)\00", align 1
@.str.12 = private constant [176 x i8] c"Assert fail: T.tvm_struct_get(data, 0, 10, \22int32\22) == 1, Argument default_function.data.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(data, 0, 10, \22int32\22)\00", align 1
@.str.13 = private constant [111 x i8] c"Assert fail: 4 == T.tvm_struct_get(buffer, 0, 4, \22int32\22), default_function.buffer.ndim is expected to equal 4\00", align 1
@.str.14 = private constant [243 x i8] c"Assert fail: T.tvm_struct_get(buffer, 0, 5, \22uint8\22) == T.uint8(2) and T.tvm_struct_get(buffer, 0, 6, \22uint8\22) == T.uint8(32) and T.tvm_struct_get(buffer, 0, 7, \22uint16\22) == T.uint16(1), default_function.buffer.dtype is expected to be float32\00", align 1
@.str.15 = private constant [199 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_buffer_shape[0]) == 15, Argument default_function.buffer.shape[0] has an unsatisfied constraint: 15 == T.Cast(\22int32\22, default_function_buffer_shape[0])\00", align 1
@.str.16 = private constant [199 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_buffer_shape[1]) == 17, Argument default_function.buffer.shape[1] has an unsatisfied constraint: 17 == T.Cast(\22int32\22, default_function_buffer_shape[1])\00", align 1
@.str.17 = private constant [197 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_buffer_shape[2]) == 7, Argument default_function.buffer.shape[2] has an unsatisfied constraint: 7 == T.Cast(\22int32\22, default_function_buffer_shape[2])\00", align 1
@.str.18 = private constant [199 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_buffer_shape[3]) == 18, Argument default_function.buffer.shape[3] has an unsatisfied constraint: 18 == T.Cast(\22int32\22, default_function_buffer_shape[3])\00", align 1
@.str.19 = private constant [322 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_buffer_strides[3]) and 18 == T.Cast(\22int32\22, default_function_buffer_strides[2]) and 126 == T.Cast(\22int32\22, default_function_buffer_strides[1]) and 2142 == T.Cast(\22int32\22, default_function_buffer_strides[0]), default_function.buffer.strides: expected to be compact array\00", align 1
@.str.20 = private constant [202 x i8] c"Assert fail: T.uint64(0) == T.tvm_struct_get(buffer, 0, 8, \22uint64\22), Argument default_function.buffer.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(buffer, 0, 8, \22uint64\22)\00", align 1
@.str.21 = private constant [182 x i8] c"Assert fail: T.tvm_struct_get(buffer, 0, 10, \22int32\22) == 1, Argument default_function.buffer.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(buffer, 0, 10, \22int32\22)\00", align 1
@.str.22 = private constant [188 x i8] c"Assert fail: dev_id == T.tvm_struct_get(buffer, 0, 9, \22int32\22), Argument default_function.buffer.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(buffer, 0, 9, \22int32\22)\00", align 1
@.str.23 = private constant [119 x i8] c"Assert fail: 4 == T.tvm_struct_get(new_buffer, 0, 4, \22int32\22), default_function.new_buffer.ndim is expected to equal 4\00", align 1
@.str.24 = private constant [259 x i8] c"Assert fail: T.tvm_struct_get(new_buffer, 0, 5, \22uint8\22) == T.uint8(2) and T.tvm_struct_get(new_buffer, 0, 6, \22uint8\22) == T.uint8(32) and T.tvm_struct_get(new_buffer, 0, 7, \22uint16\22) == T.uint16(1), default_function.new_buffer.dtype is expected to be float32\00", align 1
@.str.25 = private constant [211 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_new_buffer_shape[0]) == 15, Argument default_function.new_buffer.shape[0] has an unsatisfied constraint: 15 == T.Cast(\22int32\22, default_function_new_buffer_shape[0])\00", align 1
@.str.26 = private constant [211 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_new_buffer_shape[1]) == 17, Argument default_function.new_buffer.shape[1] has an unsatisfied constraint: 17 == T.Cast(\22int32\22, default_function_new_buffer_shape[1])\00", align 1
@.str.27 = private constant [209 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_new_buffer_shape[2]) == 7, Argument default_function.new_buffer.shape[2] has an unsatisfied constraint: 7 == T.Cast(\22int32\22, default_function_new_buffer_shape[2])\00", align 1
@.str.28 = private constant [211 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_new_buffer_shape[3]) == 18, Argument default_function.new_buffer.shape[3] has an unsatisfied constraint: 18 == T.Cast(\22int32\22, default_function_new_buffer_shape[3])\00", align 1
@.str.29 = private constant [342 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_new_buffer_strides[3]) and 18 == T.Cast(\22int32\22, default_function_new_buffer_strides[2]) and 126 == T.Cast(\22int32\22, default_function_new_buffer_strides[1]) and 2142 == T.Cast(\22int32\22, default_function_new_buffer_strides[0]), default_function.new_buffer.strides: expected to be compact array\00", align 1
@.str.30 = private constant [214 x i8] c"Assert fail: T.uint64(0) == T.tvm_struct_get(new_buffer, 0, 8, \22uint64\22), Argument default_function.new_buffer.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(new_buffer, 0, 8, \22uint64\22)\00", align 1
@.str.31 = private constant [194 x i8] c"Assert fail: T.tvm_struct_get(new_buffer, 0, 10, \22int32\22) == 1, Argument default_function.new_buffer.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(new_buffer, 0, 10, \22int32\22)\00", align 1
@.str.32 = private constant [200 x i8] c"Assert fail: dev_id == T.tvm_struct_get(new_buffer, 0, 9, \22int32\22), Argument default_function.new_buffer.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(new_buffer, 0, 9, \22int32\22)\00", align 1
@.tvm_func.default_function_kernel = internal unnamed_addr global i8* null, align 8
@.str.33 = private constant [24 x i8] c"default_function_kernel\00", align 1
@.str.34 = private constant [68 x i8] c"Assert fail: kernel_error_code == 0, Error executing compute kernel\00", align 1
@__tvm_main__ = weak dllexport local_unnamed_addr constant [17 x i8] c"default_function\00", align 1
@llvm.global_ctors = appending global [0 x { i32, void ()*, i8* }] zeroinitializer

define dllexport i32 @default_function(i8* noalias nocapture readonly %args, i32* noalias nocapture readonly %arg_type_ids, i32 %num_args, i8* noalias nocapture readnone %out_ret_value, i32* noalias nocapture readnone %out_ret_tcode, i8* noalias nocapture readnone %resource_handle) local_unnamed_addr #0 !dbg !5 {
entry:
  call void @llvm.dbg.value(metadata i8* %args, metadata !12, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i32* %arg_type_ids, metadata !13, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i32 %num_args, metadata !14, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i8* %out_ret_value, metadata !15, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i32* %out_ret_tcode, metadata !16, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i8* %resource_handle, metadata !17, metadata !DIExpression()), !dbg !18
  %stack_value_void_ptr86 = alloca [3 x %0], align 8, !dbg !18
  %stack_tcode87 = alloca [3 x i32], align 4, !dbg !18
  %stack_tcode87.sub = getelementptr inbounds [3 x i32], [3 x i32]* %stack_tcode87, i64 0, i64 0
  %stack_value = bitcast [3 x %0]* %stack_value_void_ptr86 to i8*, !dbg !18
  %0 = icmp eq i32 %num_args, 3, !dbg !18
  br i1 %0, label %assert_end, label %assert_fail, !dbg !18, !prof !19

assert_fail:                                      ; preds = %entry
  %1 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %1(i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end:                                       ; preds = %entry
  %data.code = load i32, i32* %arg_type_ids, align 4, !dbg !18, !tbaa !23
  %2 = getelementptr inbounds i32, i32* %arg_type_ids, i64 1, !dbg !18
  %buffer.code = load i32, i32* %2, align 4, !dbg !18, !tbaa !34
  %3 = getelementptr inbounds i32, i32* %arg_type_ids, i64 2, !dbg !18
  %new_buffer.code = load i32, i32* %3, align 4, !dbg !18, !tbaa !36
  %4 = bitcast i8* %args to %1**, !dbg !18
  %data88 = load %1*, %1** %4, align 8, !dbg !18
  %5 = getelementptr inbounds i8, i8* %args, i64 8, !dbg !18
  %6 = bitcast i8* %5 to %1**, !dbg !18
  %buffer89 = load %1*, %1** %6, align 8, !dbg !18
  %7 = getelementptr inbounds i8, i8* %args, i64 16, !dbg !18
  %8 = bitcast i8* %7 to %1**, !dbg !18
  %new_buffer90 = load %1*, %1** %8, align 8, !dbg !18
  %9 = bitcast %1* %data88 to float**, !dbg !18
  %data_void_ptr91 = load float*, float** %9, align 8, !dbg !18
  %ptrint = ptrtoint float* %data_void_ptr91 to i64, !dbg !18
  %maskedptr = and i64 %ptrint, 63, !dbg !18
  %maskcond = icmp eq i64 %maskedptr, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond), !dbg !18
  %10 = getelementptr inbounds %1, %1* %data88, i64 0, i32 4, !dbg !18
  %default_function.data.shape = load i64*, i64** %10, align 8, !dbg !18
  %11 = getelementptr inbounds %1, %1* %data88, i64 0, i32 5, !dbg !18
  %default_function.data.strides = load i64*, i64** %11, align 8, !dbg !18
  %12 = getelementptr inbounds %1, %1* %data88, i64 0, i32 1, i32 1, !dbg !18
  %dev_id = load i32, i32* %12, align 4, !dbg !18
  %13 = bitcast %1* %buffer89 to i64*, !dbg !18
  %buffer_void_ptr9293 = load i64, i64* %13, align 8, !dbg !18
  %maskedptr4 = and i64 %buffer_void_ptr9293, 63, !dbg !18
  %maskcond5 = icmp eq i64 %maskedptr4, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond5), !dbg !18
  %14 = getelementptr inbounds %1, %1* %buffer89, i64 0, i32 4, !dbg !18
  %default_function.buffer.shape = load i64*, i64** %14, align 8, !dbg !18
  %15 = getelementptr inbounds %1, %1* %buffer89, i64 0, i32 5, !dbg !18
  %default_function.buffer.strides = load i64*, i64** %15, align 8, !dbg !18
  %16 = bitcast %1* %new_buffer90 to float**, !dbg !18
  %new_buffer_void_ptr94 = load float*, float** %16, align 8, !dbg !18
  %ptrint7 = ptrtoint float* %new_buffer_void_ptr94 to i64, !dbg !18
  %maskedptr8 = and i64 %ptrint7, 63, !dbg !18
  %maskcond9 = icmp eq i64 %maskedptr8, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond9), !dbg !18
  %17 = getelementptr inbounds %1, %1* %new_buffer90, i64 0, i32 4, !dbg !18
  %default_function.new_buffer.shape = load i64*, i64** %17, align 8, !dbg !18
  %18 = getelementptr inbounds %1, %1* %new_buffer90, i64 0, i32 5, !dbg !18
  %default_function.new_buffer.strides = load i64*, i64** %18, align 8, !dbg !18
  switch i32 %data.code, label %assert_fail10 [
    i32 13, label %assert_end11
    i32 7, label %assert_end11
    i32 4, label %assert_end11
    i32 3, label %assert_end11
  ], !dbg !18

assert_fail10:                                    ; preds = %assert_end
  %19 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %19(i8* getelementptr inbounds ([130 x i8], [130 x i8]* @.str.1, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end11:                                     ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  switch i32 %buffer.code, label %assert_fail12 [
    i32 13, label %assert_end13
    i32 7, label %assert_end13
    i32 4, label %assert_end13
    i32 3, label %assert_end13
  ], !dbg !18

assert_fail12:                                    ; preds = %assert_end11
  %20 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %20(i8* getelementptr inbounds ([138 x i8], [138 x i8]* @.str.2, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end13:                                     ; preds = %assert_end11, %assert_end11, %assert_end11, %assert_end11
  switch i32 %new_buffer.code, label %assert_fail14 [
    i32 13, label %assert_end15
    i32 7, label %assert_end15
    i32 4, label %assert_end15
    i32 3, label %assert_end15
  ], !dbg !18

assert_fail14:                                    ; preds = %assert_end13
  %21 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %21(i8* getelementptr inbounds ([154 x i8], [154 x i8]* @.str.3, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end15:                                     ; preds = %assert_end13, %assert_end13, %assert_end13, %assert_end13
  %22 = getelementptr inbounds %1, %1* %data88, i64 0, i32 2, !dbg !18
  %23 = load i32, i32* %22, align 4, !dbg !18
  %24 = icmp eq i32 %23, 4, !dbg !18
  br i1 %24, label %assert_end19, label %assert_fail16, !dbg !18, !prof !19

assert_fail16:                                    ; preds = %assert_end15
  %25 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %25(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.4, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end19:                                     ; preds = %assert_end15
  %26 = getelementptr inbounds %1, %1* %data88, i64 0, i32 3, i32 2, !dbg !18
  %27 = load i16, i16* %26, align 2, !dbg !18
  %28 = icmp eq i16 %27, 1, !dbg !18
  %29 = getelementptr inbounds %1, %1* %data88, i64 0, i32 3, i32 1, !dbg !18
  %30 = load i8, i8* %29, align 1, !dbg !18
  %31 = icmp eq i8 %30, 32, !dbg !18
  %32 = getelementptr inbounds %1, %1* %data88, i64 0, i32 3, i32 0, !dbg !18
  %33 = load i8, i8* %32, align 1, !dbg !18
  %34 = icmp eq i8 %33, 2, !dbg !18
  %35 = and i1 %31, %34, !dbg !18
  %36 = and i1 %28, %35, !dbg !18
  br i1 %36, label %assert_end21, label %assert_fail20, !dbg !18, !prof !19

assert_fail20:                                    ; preds = %assert_end19
  %37 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %37(i8* getelementptr inbounds ([235 x i8], [235 x i8]* @.str.5, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end21:                                     ; preds = %assert_end19
  %38 = load i64, i64* %default_function.data.shape, align 8, !dbg !18, !tbaa !39
  %39 = trunc i64 %38 to i32, !dbg !18
  %40 = icmp eq i32 %39, 15, !dbg !18
  br i1 %40, label %assert_end23, label %assert_fail22, !dbg !18, !prof !19

assert_fail22:                                    ; preds = %assert_end21
  %41 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %41(i8* getelementptr inbounds ([193 x i8], [193 x i8]* @.str.6, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end23:                                     ; preds = %assert_end21
  %42 = getelementptr inbounds i64, i64* %default_function.data.shape, i64 1, !dbg !18
  %43 = load i64, i64* %42, align 8, !dbg !18, !tbaa !49
  %44 = trunc i64 %43 to i32, !dbg !18
  %45 = icmp eq i32 %44, 17, !dbg !18
  br i1 %45, label %assert_end25, label %assert_fail24, !dbg !18, !prof !19

assert_fail24:                                    ; preds = %assert_end23
  %46 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %46(i8* getelementptr inbounds ([193 x i8], [193 x i8]* @.str.7, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end25:                                     ; preds = %assert_end23
  %47 = getelementptr inbounds i64, i64* %default_function.data.shape, i64 2, !dbg !18
  %48 = load i64, i64* %47, align 8, !dbg !18, !tbaa !51
  %49 = trunc i64 %48 to i32, !dbg !18
  %50 = icmp eq i32 %49, 7, !dbg !18
  br i1 %50, label %assert_end27, label %assert_fail26, !dbg !18, !prof !19

assert_fail26:                                    ; preds = %assert_end25
  %51 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %51(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.8, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end27:                                     ; preds = %assert_end25
  %52 = getelementptr inbounds i64, i64* %default_function.data.shape, i64 3, !dbg !18
  %53 = load i64, i64* %52, align 8, !dbg !18, !tbaa !54
  %54 = trunc i64 %53 to i32, !dbg !18
  %55 = icmp eq i32 %54, 18, !dbg !18
  br i1 %55, label %assert_end29, label %assert_fail28, !dbg !18, !prof !19

assert_fail28:                                    ; preds = %assert_end27
  %56 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %56(i8* getelementptr inbounds ([193 x i8], [193 x i8]* @.str.9, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end29:                                     ; preds = %assert_end27
  %57 = icmp eq i64* %default_function.data.strides, null, !dbg !18
  br i1 %57, label %if_end, label %if_then, !dbg !18, !prof !56

if_then:                                          ; preds = %assert_end29
  %58 = bitcast i64* %default_function.data.strides to <4 x i64>*, !dbg !18
  %59 = load <4 x i64>, <4 x i64>* %58, align 8, !dbg !18, !tbaa !57
  %60 = trunc <4 x i64> %59 to <4 x i32>, !dbg !18
  %61 = icmp eq <4 x i32> %60, <i32 2142, i32 126, i32 18, i32 1>, !dbg !18
  %rdx.shuf101 = shufflevector <4 x i1> %61, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>, !dbg !18
  %bin.rdx102 = and <4 x i1> %61, %rdx.shuf101, !dbg !18
  %rdx.shuf103 = shufflevector <4 x i1> %bin.rdx102, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>, !dbg !18
  %bin.rdx104 = and <4 x i1> %bin.rdx102, %rdx.shuf103, !dbg !18
  %62 = extractelement <4 x i1> %bin.rdx104, i32 0, !dbg !18
  br i1 %62, label %if_end, label %assert_fail30, !dbg !18, !prof !19

if_end:                                           ; preds = %assert_end29, %if_then
  %63 = getelementptr inbounds %1, %1* %data88, i64 0, i32 6, !dbg !18
  %64 = load i64, i64* %63, align 8, !dbg !18
  %65 = icmp eq i64 %64, 0, !dbg !18
  br i1 %65, label %assert_end33, label %assert_fail32, !dbg !18, !prof !19

assert_fail30:                                    ; preds = %if_then
  %66 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %66(i8* getelementptr inbounds ([312 x i8], [312 x i8]* @.str.10, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail32:                                    ; preds = %if_end
  %67 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %67(i8* getelementptr inbounds ([196 x i8], [196 x i8]* @.str.11, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end33:                                     ; preds = %if_end
  %68 = getelementptr inbounds %1, %1* %data88, i64 0, i32 1, i32 0, !dbg !18
  %69 = load i32, i32* %68, align 4, !dbg !18
  %70 = icmp eq i32 %69, 1, !dbg !18
  br i1 %70, label %assert_end35, label %assert_fail34, !dbg !18, !prof !19

assert_fail34:                                    ; preds = %assert_end33
  %71 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %71(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.12, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end35:                                     ; preds = %assert_end33
  %72 = getelementptr inbounds %1, %1* %buffer89, i64 0, i32 2, !dbg !18
  %73 = load i32, i32* %72, align 4, !dbg !18
  %74 = icmp eq i32 %73, 4, !dbg !18
  br i1 %74, label %assert_end39, label %assert_fail36, !dbg !18, !prof !19

assert_fail36:                                    ; preds = %assert_end35
  %75 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %75(i8* getelementptr inbounds ([111 x i8], [111 x i8]* @.str.13, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end39:                                     ; preds = %assert_end35
  %76 = getelementptr inbounds %1, %1* %buffer89, i64 0, i32 3, i32 2, !dbg !18
  %77 = load i16, i16* %76, align 2, !dbg !18
  %78 = icmp eq i16 %77, 1, !dbg !18
  %79 = getelementptr inbounds %1, %1* %buffer89, i64 0, i32 3, i32 1, !dbg !18
  %80 = load i8, i8* %79, align 1, !dbg !18
  %81 = icmp eq i8 %80, 32, !dbg !18
  %82 = getelementptr inbounds %1, %1* %buffer89, i64 0, i32 3, i32 0, !dbg !18
  %83 = load i8, i8* %82, align 1, !dbg !18
  %84 = icmp eq i8 %83, 2, !dbg !18
  %85 = and i1 %81, %84, !dbg !18
  %86 = and i1 %78, %85, !dbg !18
  br i1 %86, label %assert_end41, label %assert_fail40, !dbg !18, !prof !19

assert_fail40:                                    ; preds = %assert_end39
  %87 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %87(i8* getelementptr inbounds ([243 x i8], [243 x i8]* @.str.14, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end41:                                     ; preds = %assert_end39
  %88 = load i64, i64* %default_function.buffer.shape, align 8, !dbg !18, !tbaa !65
  %89 = trunc i64 %88 to i32, !dbg !18
  %90 = icmp eq i32 %89, 15, !dbg !18
  br i1 %90, label %assert_end43, label %assert_fail42, !dbg !18, !prof !19

assert_fail42:                                    ; preds = %assert_end41
  %91 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %91(i8* getelementptr inbounds ([199 x i8], [199 x i8]* @.str.15, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end43:                                     ; preds = %assert_end41
  %92 = getelementptr inbounds i64, i64* %default_function.buffer.shape, i64 1, !dbg !18
  %93 = load i64, i64* %92, align 8, !dbg !18, !tbaa !75
  %94 = trunc i64 %93 to i32, !dbg !18
  %95 = icmp eq i32 %94, 17, !dbg !18
  br i1 %95, label %assert_end45, label %assert_fail44, !dbg !18, !prof !19

assert_fail44:                                    ; preds = %assert_end43
  %96 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %96(i8* getelementptr inbounds ([199 x i8], [199 x i8]* @.str.16, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end45:                                     ; preds = %assert_end43
  %97 = getelementptr inbounds i64, i64* %default_function.buffer.shape, i64 2, !dbg !18
  %98 = load i64, i64* %97, align 8, !dbg !18, !tbaa !77
  %99 = trunc i64 %98 to i32, !dbg !18
  %100 = icmp eq i32 %99, 7, !dbg !18
  br i1 %100, label %assert_end47, label %assert_fail46, !dbg !18, !prof !19

assert_fail46:                                    ; preds = %assert_end45
  %101 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %101(i8* getelementptr inbounds ([197 x i8], [197 x i8]* @.str.17, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end47:                                     ; preds = %assert_end45
  %102 = getelementptr inbounds i64, i64* %default_function.buffer.shape, i64 3, !dbg !18
  %103 = load i64, i64* %102, align 8, !dbg !18, !tbaa !80
  %104 = trunc i64 %103 to i32, !dbg !18
  %105 = icmp eq i32 %104, 18, !dbg !18
  br i1 %105, label %assert_end49, label %assert_fail48, !dbg !18, !prof !19

assert_fail48:                                    ; preds = %assert_end47
  %106 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %106(i8* getelementptr inbounds ([199 x i8], [199 x i8]* @.str.18, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end49:                                     ; preds = %assert_end47
  %107 = icmp eq i64* %default_function.buffer.strides, null, !dbg !18
  br i1 %107, label %if_end51, label %if_then50, !dbg !18, !prof !56

if_then50:                                        ; preds = %assert_end49
  %108 = bitcast i64* %default_function.buffer.strides to <4 x i64>*, !dbg !18
  %109 = load <4 x i64>, <4 x i64>* %108, align 8, !dbg !18, !tbaa !82
  %110 = trunc <4 x i64> %109 to <4 x i32>, !dbg !18
  %111 = icmp eq <4 x i32> %110, <i32 2142, i32 126, i32 18, i32 1>, !dbg !18
  %rdx.shuf97 = shufflevector <4 x i1> %111, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>, !dbg !18
  %bin.rdx98 = and <4 x i1> %111, %rdx.shuf97, !dbg !18
  %rdx.shuf99 = shufflevector <4 x i1> %bin.rdx98, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>, !dbg !18
  %bin.rdx100 = and <4 x i1> %bin.rdx98, %rdx.shuf99, !dbg !18
  %112 = extractelement <4 x i1> %bin.rdx100, i32 0, !dbg !18
  br i1 %112, label %if_end51, label %assert_fail52, !dbg !18, !prof !19

if_end51:                                         ; preds = %assert_end49, %if_then50
  %113 = getelementptr inbounds %1, %1* %buffer89, i64 0, i32 6, !dbg !18
  %114 = load i64, i64* %113, align 8, !dbg !18
  %115 = icmp eq i64 %114, 0, !dbg !18
  br i1 %115, label %assert_end55, label %assert_fail54, !dbg !18, !prof !19

assert_fail52:                                    ; preds = %if_then50
  %116 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %116(i8* getelementptr inbounds ([322 x i8], [322 x i8]* @.str.19, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail54:                                    ; preds = %if_end51
  %117 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %117(i8* getelementptr inbounds ([202 x i8], [202 x i8]* @.str.20, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end55:                                     ; preds = %if_end51
  %118 = getelementptr inbounds %1, %1* %buffer89, i64 0, i32 1, i32 0, !dbg !18
  %119 = load i32, i32* %118, align 4, !dbg !18
  %120 = icmp eq i32 %119, 1, !dbg !18
  br i1 %120, label %assert_end57, label %assert_fail56, !dbg !18, !prof !19

assert_fail56:                                    ; preds = %assert_end55
  %121 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %121(i8* getelementptr inbounds ([182 x i8], [182 x i8]* @.str.21, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end57:                                     ; preds = %assert_end55
  %122 = getelementptr inbounds %1, %1* %buffer89, i64 0, i32 1, i32 1, !dbg !18
  %123 = load i32, i32* %122, align 4, !dbg !18
  %124 = icmp eq i32 %dev_id, %123, !dbg !18
  br i1 %124, label %assert_end59, label %assert_fail58, !dbg !18, !prof !19

assert_fail58:                                    ; preds = %assert_end57
  %125 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %125(i8* getelementptr inbounds ([188 x i8], [188 x i8]* @.str.22, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end59:                                     ; preds = %assert_end57
  %126 = getelementptr inbounds %1, %1* %new_buffer90, i64 0, i32 2, !dbg !18
  %127 = load i32, i32* %126, align 4, !dbg !18
  %128 = icmp eq i32 %127, 4, !dbg !18
  br i1 %128, label %assert_end63, label %assert_fail60, !dbg !18, !prof !19

assert_fail60:                                    ; preds = %assert_end59
  %129 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %129(i8* getelementptr inbounds ([119 x i8], [119 x i8]* @.str.23, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end63:                                     ; preds = %assert_end59
  %130 = getelementptr inbounds %1, %1* %new_buffer90, i64 0, i32 3, i32 2, !dbg !18
  %131 = load i16, i16* %130, align 2, !dbg !18
  %132 = icmp eq i16 %131, 1, !dbg !18
  %133 = getelementptr inbounds %1, %1* %new_buffer90, i64 0, i32 3, i32 1, !dbg !18
  %134 = load i8, i8* %133, align 1, !dbg !18
  %135 = icmp eq i8 %134, 32, !dbg !18
  %136 = getelementptr inbounds %1, %1* %new_buffer90, i64 0, i32 3, i32 0, !dbg !18
  %137 = load i8, i8* %136, align 1, !dbg !18
  %138 = icmp eq i8 %137, 2, !dbg !18
  %139 = and i1 %135, %138, !dbg !18
  %140 = and i1 %132, %139, !dbg !18
  br i1 %140, label %assert_end65, label %assert_fail64, !dbg !18, !prof !19

assert_fail64:                                    ; preds = %assert_end63
  %141 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %141(i8* getelementptr inbounds ([259 x i8], [259 x i8]* @.str.24, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end65:                                     ; preds = %assert_end63
  %142 = load i64, i64* %default_function.new_buffer.shape, align 8, !dbg !18, !tbaa !90
  %143 = trunc i64 %142 to i32, !dbg !18
  %144 = icmp eq i32 %143, 15, !dbg !18
  br i1 %144, label %assert_end67, label %assert_fail66, !dbg !18, !prof !19

assert_fail66:                                    ; preds = %assert_end65
  %145 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %145(i8* getelementptr inbounds ([211 x i8], [211 x i8]* @.str.25, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end67:                                     ; preds = %assert_end65
  %146 = getelementptr inbounds i64, i64* %default_function.new_buffer.shape, i64 1, !dbg !18
  %147 = load i64, i64* %146, align 8, !dbg !18, !tbaa !100
  %148 = trunc i64 %147 to i32, !dbg !18
  %149 = icmp eq i32 %148, 17, !dbg !18
  br i1 %149, label %assert_end69, label %assert_fail68, !dbg !18, !prof !19

assert_fail68:                                    ; preds = %assert_end67
  %150 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %150(i8* getelementptr inbounds ([211 x i8], [211 x i8]* @.str.26, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end69:                                     ; preds = %assert_end67
  %151 = getelementptr inbounds i64, i64* %default_function.new_buffer.shape, i64 2, !dbg !18
  %152 = load i64, i64* %151, align 8, !dbg !18, !tbaa !102
  %153 = trunc i64 %152 to i32, !dbg !18
  %154 = icmp eq i32 %153, 7, !dbg !18
  br i1 %154, label %assert_end71, label %assert_fail70, !dbg !18, !prof !19

assert_fail70:                                    ; preds = %assert_end69
  %155 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %155(i8* getelementptr inbounds ([209 x i8], [209 x i8]* @.str.27, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end71:                                     ; preds = %assert_end69
  %156 = getelementptr inbounds i64, i64* %default_function.new_buffer.shape, i64 3, !dbg !18
  %157 = load i64, i64* %156, align 8, !dbg !18, !tbaa !105
  %158 = trunc i64 %157 to i32, !dbg !18
  %159 = icmp eq i32 %158, 18, !dbg !18
  br i1 %159, label %assert_end73, label %assert_fail72, !dbg !18, !prof !19

assert_fail72:                                    ; preds = %assert_end71
  %160 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %160(i8* getelementptr inbounds ([211 x i8], [211 x i8]* @.str.28, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end73:                                     ; preds = %assert_end71
  %161 = icmp eq i64* %default_function.new_buffer.strides, null, !dbg !18
  br i1 %161, label %if_end75, label %if_then74, !dbg !18, !prof !56

if_then74:                                        ; preds = %assert_end73
  %162 = bitcast i64* %default_function.new_buffer.strides to <4 x i64>*, !dbg !18
  %163 = load <4 x i64>, <4 x i64>* %162, align 8, !dbg !18, !tbaa !107
  %164 = trunc <4 x i64> %163 to <4 x i32>, !dbg !18
  %165 = icmp eq <4 x i32> %164, <i32 2142, i32 126, i32 18, i32 1>, !dbg !18
  %rdx.shuf = shufflevector <4 x i1> %165, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>, !dbg !18
  %bin.rdx = and <4 x i1> %165, %rdx.shuf, !dbg !18
  %rdx.shuf95 = shufflevector <4 x i1> %bin.rdx, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>, !dbg !18
  %bin.rdx96 = and <4 x i1> %bin.rdx, %rdx.shuf95, !dbg !18
  %166 = extractelement <4 x i1> %bin.rdx96, i32 0, !dbg !18
  br i1 %166, label %if_end75, label %assert_fail76, !dbg !18, !prof !19

if_end75:                                         ; preds = %assert_end73, %if_then74
  %167 = getelementptr inbounds %1, %1* %new_buffer90, i64 0, i32 6, !dbg !18
  %168 = load i64, i64* %167, align 8, !dbg !18
  %169 = icmp eq i64 %168, 0, !dbg !18
  br i1 %169, label %assert_end79, label %assert_fail78, !dbg !18, !prof !19

assert_fail76:                                    ; preds = %if_then74
  %170 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %170(i8* getelementptr inbounds ([342 x i8], [342 x i8]* @.str.29, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail78:                                    ; preds = %if_end75
  %171 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %171(i8* getelementptr inbounds ([214 x i8], [214 x i8]* @.str.30, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end79:                                     ; preds = %if_end75
  %172 = getelementptr inbounds %1, %1* %new_buffer90, i64 0, i32 1, i32 0, !dbg !18
  %173 = load i32, i32* %172, align 4, !dbg !18
  %174 = icmp eq i32 %173, 1, !dbg !18
  br i1 %174, label %assert_end81, label %assert_fail80, !dbg !18, !prof !19

assert_fail80:                                    ; preds = %assert_end79
  %175 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %175(i8* getelementptr inbounds ([194 x i8], [194 x i8]* @.str.31, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end81:                                     ; preds = %assert_end79
  %176 = getelementptr inbounds %1, %1* %new_buffer90, i64 0, i32 1, i32 1, !dbg !18
  %177 = load i32, i32* %176, align 4, !dbg !18
  %178 = icmp eq i32 %dev_id, %177, !dbg !18
  br i1 %178, label %assert_end83, label %assert_fail82, !dbg !18, !prof !19

assert_fail82:                                    ; preds = %assert_end81
  %179 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %179(i8* getelementptr inbounds ([200 x i8], [200 x i8]* @.str.32, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end83:                                     ; preds = %assert_end81
  %180 = call fastcc i32 @default_function_compute_(i8* nonnull %stack_value, float* %data_void_ptr91, i32* nonnull %stack_tcode87.sub, float* %new_buffer_void_ptr94), !dbg !18
  ret i32 %180, !dbg !18
}

; Function Attrs: nounwind willreturn
declare void @llvm.assume(i1) #1

; Function Attrs: noinline
define internal fastcc i32 @default_function_compute_(i8* noalias %0, float* noalias align 64 %1, i32* noalias %2, float* noalias align 64 %3) unnamed_addr #2 {
entry:
  %4 = alloca i8*, align 8
  %5 = bitcast i8* %0 to %0*
  %6 = bitcast i8* %0 to float**
  store float* %1, float** %6, align 8
  store i32 3, i32* %2, align 4, !tbaa !115
  %7 = getelementptr inbounds i8, i8* %0, i64 8
  %8 = bitcast i8* %7 to float**
  store float* %3, float** %8, align 8
  %9 = getelementptr inbounds i32, i32* %2, i64 1
  store i32 3, i32* %9, align 4, !tbaa !126
  %10 = getelementptr inbounds i8, i8* %0, i64 16
  %11 = bitcast i8* %10 to %0*
  %12 = getelementptr inbounds i32, i32* %2, i64 2
  %13 = load i32 (i8*, %0*, i32*, i32, %0*, i32*)*, i32 (i8*, %0*, i32*, i32, %0*, i32*)** @__TVMFuncCall, align 8, !tbaa !20
  %14 = load i8*, i8** @.tvm_func.default_function_kernel, align 8
  %15 = icmp eq i8* %14, null
  br i1 %15, label %handle_init, label %handle_init_end, !prof !56

handle_init:                                      ; preds = %entry
  %16 = load i8*, i8** @__tvm_module_ctx, align 8, !tbaa !20
  %17 = load i32 (i8*, i8*, i8**)*, i32 (i8*, i8*, i8**)** @__TVMBackendGetFuncFromEnv, align 8, !tbaa !20
  %18 = call i32 %17(i8* %16, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.33, i64 0, i64 0), i8** nonnull %4)
  %19 = icmp eq i32 %18, 0
  br i1 %19, label %call_end, label %call_fail, !prof !19

handle_init_end:                                  ; preds = %entry, %call_end
  %20 = phi i8* [ %14, %entry ], [ %23, %call_end ]
  %21 = call i32 %13(i8* %20, %0* %5, i32* nonnull %2, i32 2, %0* nonnull %11, i32* nonnull %12)
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %call_end2, label %call_fail, !prof !19

call_fail:                                        ; preds = %call_end2, %handle_init_end, %handle_init
  %merge = phi i32 [ %18, %handle_init ], [ %21, %handle_init_end ], [ 0, %call_end2 ]
  ret i32 %merge

call_end:                                         ; preds = %handle_init
  %23 = load i8*, i8** %4, align 8
  store i8* %23, i8** @.tvm_func.default_function_kernel, align 8
  br label %handle_init_end

call_end2:                                        ; preds = %handle_init_end
  %24 = bitcast i8* %10 to i64*
  %25 = load i64, i64* %24, align 8
  %kernel_error_code = trunc i64 %25 to i32
  %26 = icmp eq i32 %kernel_error_code, 0
  br i1 %26, label %call_fail, label %assert_fail, !prof !19

assert_fail:                                      ; preds = %call_end2
  %27 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !20
  call void %27(i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.34, i64 0, i64 0))
  ret i32 -1
}

; Function Attrs: nounwind readnone
define weak dso_local i16 @__truncsfhf2(float %a0) local_unnamed_addr #3 section ".text.tvm.fp16.conv" {
b0:
  %v0 = bitcast float %a0 to i32
  %v1 = and i32 %v0, 2147483647
  %v2 = add nsw i32 %v1, -947912704
  %v3 = add nsw i32 %v1, -1199570944
  %v4 = icmp ult i32 %v2, %v3
  br i1 %v4, label %b1, label %b5

b1:                                               ; preds = %b0
  %v5 = lshr i32 %v0, 13
  %v6 = and i32 %v5, 65535
  %v7 = add nuw nsw i32 %v6, -114688
  %v8 = and i32 %v0, 8191
  %v9 = icmp ugt i32 %v8, 4096
  br i1 %v9, label %b2, label %b3

b2:                                               ; preds = %b1
  %v10 = add nuw nsw i32 %v6, -114687
  br label %b13

b3:                                               ; preds = %b1
  %v11 = icmp eq i32 %v8, 4096
  br i1 %v11, label %b4, label %b13

b4:                                               ; preds = %b3
  %v12 = and i32 %v7, 65535
  %v13 = and i32 %v5, 1
  %v14 = add nuw nsw i32 %v12, %v13
  br label %b13

b5:                                               ; preds = %b0
  %v15 = icmp ugt i32 %v1, 2139095040
  br i1 %v15, label %b6, label %b7

b6:                                               ; preds = %b5
  %v16 = lshr i32 %v0, 13
  %v17 = and i32 %v16, 511
  %v18 = or i32 %v17, 32256
  br label %b13

b7:                                               ; preds = %b5
  %v19 = icmp ugt i32 %v1, 1199570943
  br i1 %v19, label %b13, label %b8

b8:                                               ; preds = %b7
  %v20 = icmp ult i32 %v1, 754974720
  br i1 %v20, label %b13, label %b9

b9:                                               ; preds = %b8
  %v21 = lshr i32 %v1, 23
  %v22 = sub nsw i32 113, %v21
  %v23 = and i32 %v0, 8388607
  %v24 = or i32 %v23, 8388608
  %v25 = add nsw i32 %v21, -81
  %v26 = shl i32 %v24, %v25
  %v27 = icmp ne i32 %v26, 0
  %v28 = lshr i32 %v24, %v22
  %v29 = zext i1 %v27 to i32
  %v30 = lshr i32 %v28, 13
  %v31 = and i32 %v28, 8191
  %v32 = or i32 %v31, %v29
  %v33 = icmp ugt i32 %v32, 4096
  br i1 %v33, label %b10, label %b11

b10:                                              ; preds = %b9
  %v34 = add nuw nsw i32 %v30, 1
  br label %b13

b11:                                              ; preds = %b9
  %v35 = icmp eq i32 %v32, 4096
  br i1 %v35, label %b12, label %b13

b12:                                              ; preds = %b11
  %v36 = and i32 %v30, 1
  %v37 = add nuw nsw i32 %v36, %v30
  br label %b13

b13:                                              ; preds = %b12, %b11, %b10, %b8, %b7, %b6, %b4, %b3, %b2
  %v38 = phi i32 [ %v18, %b6 ], [ %v10, %b2 ], [ %v14, %b4 ], [ %v7, %b3 ], [ 31744, %b7 ], [ 0, %b8 ], [ %v34, %b10 ], [ %v37, %b12 ], [ %v30, %b11 ]
  %v39 = lshr i32 %v0, 16
  %v40 = and i32 %v39, 32768
  %v41 = or i32 %v38, %v40
  %vlast = trunc i32 %v41 to i16
  ret i16 %vlast
}

; Function Attrs: nounwind readnone
define weak dso_local float @__extendhfsf2(i16 %a0) local_unnamed_addr #3 section ".text.tvm.fp16.conv" {
b0:
  %v1 = and i16 %a0, 32767
  %v2 = zext i16 %v1 to i32
  %v3 = add nsw i16 %v1, -1024
  %v4 = icmp ult i16 %v3, 30720
  br i1 %v4, label %b1, label %b2

b1:                                               ; preds = %b0
  %v5 = shl nuw nsw i32 %v2, 13
  %v6 = add nuw nsw i32 %v5, 939524096
  br label %b6

b2:                                               ; preds = %b0
  %v7 = icmp ugt i16 %v1, 31743
  br i1 %v7, label %b3, label %b4

b3:                                               ; preds = %b2
  %v8 = shl nuw nsw i32 %v2, 13
  %v9 = or i32 %v8, 2139095040
  br label %b6

b4:                                               ; preds = %b2
  %v10 = icmp eq i16 %v1, 0
  br i1 %v10, label %b6, label %b5

b5:                                               ; preds = %b4
  %v11 = icmp ult i16 %v1, 256
  %v12 = lshr i32 %v2, 8
  %v13 = select i1 %v11, i32 %v2, i32 %v12
  %v14 = select i1 %v11, i32 32, i32 24
  %v15 = icmp ult i32 %v13, 16
  %v16 = lshr i32 %v13, 4
  %v17 = add nsw i32 %v14, -4
  %v18 = select i1 %v15, i32 %v13, i32 %v16
  %v19 = select i1 %v15, i32 %v14, i32 %v17
  %v20 = icmp ult i32 %v18, 4
  %v21 = lshr i32 %v18, 2
  %v22 = add nsw i32 %v19, -2
  %v23 = select i1 %v20, i32 %v18, i32 %v21
  %v24 = select i1 %v20, i32 %v19, i32 %v22
  %v25 = icmp ult i32 %v23, 2
  %v26 = sub nsw i32 0, %v23
  %v27 = select i1 %v25, i32 %v26, i32 -2
  %v28 = add nsw i32 %v27, %v24
  %v29 = add nsw i32 %v28, -8
  %v30 = shl i32 %v2, %v29
  %v31 = xor i32 %v30, 8388608
  %v32 = shl i32 %v28, 23
  %v33 = sub i32 1124073472, %v32
  %v34 = or i32 %v31, %v33
  br label %b6

b6:                                               ; preds = %b5, %b4, %b3, %b1
  %v35 = phi i32 [ %v6, %b1 ], [ %v9, %b3 ], [ %v34, %b5 ], [ 0, %b4 ]
  %v36 = and i16 %a0, -32768
  %v37 = zext i16 %v36 to i32
  %v38 = shl nuw i32 %v37, 16
  %v39 = or i32 %v35, %v38
  %v40 = bitcast i32 %v39 to float
  ret float %v40
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.value(metadata, metadata, metadata) #4

attributes #0 = { "target-cpu"="generic" }
attributes #1 = { nounwind willreturn }
attributes #2 = { noinline "target-cpu"="generic" }
attributes #3 = { nounwind readnone "target-cpu"="generic" "target-features" }
attributes #4 = { nounwind readnone speculatable willreturn }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "TVM", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2)
!1 = !DIFile(filename: "main.tir", directory: ".")
!2 = !{}
!3 = !{i32 2, !"tvm_target", !"llvm -mtriple=x86_64-pc-linux-gnu"}
!4 = !{i32 4, !"Debug Info Version", i32 3}
!5 = distinct !DISubprogram(name: "main.tir", scope: !1, file: !1, type: !6, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !11)
!6 = !DISubroutineType(types: !7)
!7 = !{!8, !9, !10, !8, !9, !10, !9}
!8 = !DIBasicType(name: "int32", size: 32, encoding: DW_ATE_signed)
!9 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null)
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8)
!11 = !{!12, !13, !14, !15, !16, !17}
!12 = !DILocalVariable(name: "arg1", arg: 1, scope: !5, file: !1, type: !9)
!13 = !DILocalVariable(name: "arg2", arg: 2, scope: !5, file: !1, type: !10)
!14 = !DILocalVariable(name: "arg3", arg: 3, scope: !5, file: !1, type: !8)
!15 = !DILocalVariable(name: "arg4", arg: 4, scope: !5, file: !1, type: !9)
!16 = !DILocalVariable(name: "arg5", arg: 5, scope: !5, file: !1, type: !10)
!17 = !DILocalVariable(name: "arg6", arg: 6, scope: !5, file: !1, type: !9)
!18 = !DILocation(line: 0, scope: !5)
!19 = !{!"branch_weights", i32 1048576, i32 1}
!20 = !{!21, !21, i64 0}
!21 = !{!"ctx_ptr", !22, i64 0}
!22 = !{!"tvm-tbaa"}
!23 = !{!24, !24, i64 0}
!24 = !{!"0x7f6e0000b170.w4.b0", !25, i64 0}
!25 = !{!"0x7f6e0000b170.w8.b0", !26, i64 0}
!26 = !{!"0x7f6e0000b170.w16.b0", !27, i64 0}
!27 = !{!"0x7f6e0000b170.w32.b0", !28, i64 0}
!28 = !{!"0x7f6e0000b170.w64.b0", !29, i64 0}
!29 = !{!"0x7f6e0000b170.w128.b0", !30, i64 0}
!30 = !{!"0x7f6e0000b170.w256.b0", !31, i64 0}
!31 = !{!"0x7f6e0000b170.w512.b0", !32, i64 0}
!32 = !{!"0x7f6e0000b170.w1024.b0", !33, i64 0}
!33 = !{!"0x7f6e0000b170", !22, i64 0}
!34 = !{!35, !35, i64 0}
!35 = !{!"0x7f6e0000b170.w4.b4", !25, i64 0}
!36 = !{!37, !37, i64 0}
!37 = !{!"0x7f6e0000b170.w4.b8", !38, i64 0}
!38 = !{!"0x7f6e0000b170.w8.b8", !26, i64 0}
!39 = !{!40, !40, i64 0}
!40 = !{!"0x392f130.w8.b0", !41, i64 0}
!41 = !{!"0x392f130.w16.b0", !42, i64 0}
!42 = !{!"0x392f130.w32.b0", !43, i64 0}
!43 = !{!"0x392f130.w64.b0", !44, i64 0}
!44 = !{!"0x392f130.w128.b0", !45, i64 0}
!45 = !{!"0x392f130.w256.b0", !46, i64 0}
!46 = !{!"0x392f130.w512.b0", !47, i64 0}
!47 = !{!"0x392f130.w1024.b0", !48, i64 0}
!48 = !{!"0x392f130", !22, i64 0}
!49 = !{!50, !50, i64 0}
!50 = !{!"0x392f130.w8.b8", !41, i64 0}
!51 = !{!52, !52, i64 0}
!52 = !{!"0x392f130.w8.b16", !53, i64 0}
!53 = !{!"0x392f130.w16.b16", !42, i64 0}
!54 = !{!55, !55, i64 0}
!55 = !{!"0x392f130.w8.b24", !53, i64 0}
!56 = !{!"branch_weights", i32 1, i32 1048576}
!57 = !{!58, !58, i64 0}
!58 = !{!"0x3187330.w32.b0", !59, i64 0}
!59 = !{!"0x3187330.w64.b0", !60, i64 0}
!60 = !{!"0x3187330.w128.b0", !61, i64 0}
!61 = !{!"0x3187330.w256.b0", !62, i64 0}
!62 = !{!"0x3187330.w512.b0", !63, i64 0}
!63 = !{!"0x3187330.w1024.b0", !64, i64 0}
!64 = !{!"0x3187330", !22, i64 0}
!65 = !{!66, !66, i64 0}
!66 = !{!"0x3c0b010.w8.b0", !67, i64 0}
!67 = !{!"0x3c0b010.w16.b0", !68, i64 0}
!68 = !{!"0x3c0b010.w32.b0", !69, i64 0}
!69 = !{!"0x3c0b010.w64.b0", !70, i64 0}
!70 = !{!"0x3c0b010.w128.b0", !71, i64 0}
!71 = !{!"0x3c0b010.w256.b0", !72, i64 0}
!72 = !{!"0x3c0b010.w512.b0", !73, i64 0}
!73 = !{!"0x3c0b010.w1024.b0", !74, i64 0}
!74 = !{!"0x3c0b010", !22, i64 0}
!75 = !{!76, !76, i64 0}
!76 = !{!"0x3c0b010.w8.b8", !67, i64 0}
!77 = !{!78, !78, i64 0}
!78 = !{!"0x3c0b010.w8.b16", !79, i64 0}
!79 = !{!"0x3c0b010.w16.b16", !68, i64 0}
!80 = !{!81, !81, i64 0}
!81 = !{!"0x3c0b010.w8.b24", !79, i64 0}
!82 = !{!83, !83, i64 0}
!83 = !{!"0x34fa8e0.w32.b0", !84, i64 0}
!84 = !{!"0x34fa8e0.w64.b0", !85, i64 0}
!85 = !{!"0x34fa8e0.w128.b0", !86, i64 0}
!86 = !{!"0x34fa8e0.w256.b0", !87, i64 0}
!87 = !{!"0x34fa8e0.w512.b0", !88, i64 0}
!88 = !{!"0x34fa8e0.w1024.b0", !89, i64 0}
!89 = !{!"0x34fa8e0", !22, i64 0}
!90 = !{!91, !91, i64 0}
!91 = !{!"0x38113d0.w8.b0", !92, i64 0}
!92 = !{!"0x38113d0.w16.b0", !93, i64 0}
!93 = !{!"0x38113d0.w32.b0", !94, i64 0}
!94 = !{!"0x38113d0.w64.b0", !95, i64 0}
!95 = !{!"0x38113d0.w128.b0", !96, i64 0}
!96 = !{!"0x38113d0.w256.b0", !97, i64 0}
!97 = !{!"0x38113d0.w512.b0", !98, i64 0}
!98 = !{!"0x38113d0.w1024.b0", !99, i64 0}
!99 = !{!"0x38113d0", !22, i64 0}
!100 = !{!101, !101, i64 0}
!101 = !{!"0x38113d0.w8.b8", !92, i64 0}
!102 = !{!103, !103, i64 0}
!103 = !{!"0x38113d0.w8.b16", !104, i64 0}
!104 = !{!"0x38113d0.w16.b16", !93, i64 0}
!105 = !{!106, !106, i64 0}
!106 = !{!"0x38113d0.w8.b24", !104, i64 0}
!107 = !{!108, !108, i64 0}
!108 = !{!"0x34c8850.w32.b0", !109, i64 0}
!109 = !{!"0x34c8850.w64.b0", !110, i64 0}
!110 = !{!"0x34c8850.w128.b0", !111, i64 0}
!111 = !{!"0x34c8850.w256.b0", !112, i64 0}
!112 = !{!"0x34c8850.w512.b0", !113, i64 0}
!113 = !{!"0x34c8850.w1024.b0", !114, i64 0}
!114 = !{!"0x34c8850", !22, i64 0}
!115 = !{!116, !116, i64 0}
!116 = !{!"0x3aa8ed0.w4.b0", !117, i64 0}
!117 = !{!"0x3aa8ed0.w8.b0", !118, i64 0}
!118 = !{!"0x3aa8ed0.w16.b0", !119, i64 0}
!119 = !{!"0x3aa8ed0.w32.b0", !120, i64 0}
!120 = !{!"0x3aa8ed0.w64.b0", !121, i64 0}
!121 = !{!"0x3aa8ed0.w128.b0", !122, i64 0}
!122 = !{!"0x3aa8ed0.w256.b0", !123, i64 0}
!123 = !{!"0x3aa8ed0.w512.b0", !124, i64 0}
!124 = !{!"0x3aa8ed0.w1024.b0", !125, i64 0}
!125 = !{!"0x3aa8ed0", !22, i64 0}
!126 = !{!127, !127, i64 0}
!127 = !{!"0x3aa8ed0.w4.b4", !117, i64 0}
