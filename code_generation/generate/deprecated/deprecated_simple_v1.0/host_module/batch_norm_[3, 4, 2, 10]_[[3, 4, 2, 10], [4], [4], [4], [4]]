; ModuleID = 'TVMMod'
source_filename = "TVMMod"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%0 = type { double }
%1 = type { i8*, %2, i32, %3, i64*, i64*, i64 }
%2 = type { i32, i32 }
%3 = type { i8, i8, i16 }

@__tvm_module_ctx = linkonce dllexport local_unnamed_addr global i8* null, align 8
@__TVMFuncCall = linkonce dllexport local_unnamed_addr global i32 (i8*, %0*, i32*, i32, %0*, i32*)* null, align 8
@__TVMBackendGetFuncFromEnv = linkonce dllexport local_unnamed_addr global i32 (i8*, i8*, i8**)* null, align 8
@__TVMAPISetLastError = linkonce dllexport local_unnamed_addr global void (i8*)* null, align 8
@.str = private constant [67 x i8] c"Assert fail: num_args == 6, default_function: num_args should be 6\00", align 1
@.str.1 = private constant [130 x i8] c"Assert fail: data_code == 3 or data_code == 13 or data_code == 7 or data_code == 4, default_function: Expect arg[0] to be pointer\00", align 1
@.str.2 = private constant [134 x i8] c"Assert fail: gamma_code == 3 or gamma_code == 13 or gamma_code == 7 or gamma_code == 4, default_function: Expect arg[1] to be pointer\00", align 1
@.str.3 = private constant [130 x i8] c"Assert fail: beta_code == 3 or beta_code == 13 or beta_code == 7 or beta_code == 4, default_function: Expect arg[2] to be pointer\00", align 1
@.str.4 = private constant [158 x i8] c"Assert fail: moving_mean_code == 3 or moving_mean_code == 13 or moving_mean_code == 7 or moving_mean_code == 4, default_function: Expect arg[3] to be pointer\00", align 1
@.str.5 = private constant [154 x i8] c"Assert fail: moving_var_code == 3 or moving_var_code == 13 or moving_var_code == 7 or moving_var_code == 4, default_function: Expect arg[4] to be pointer\00", align 1
@.str.6 = private constant [146 x i8] c"Assert fail: T_divide_code == 3 or T_divide_code == 13 or T_divide_code == 7 or T_divide_code == 4, default_function: Expect arg[5] to be pointer\00", align 1
@.str.7 = private constant [107 x i8] c"Assert fail: 4 == T.tvm_struct_get(data, 0, 4, \22int32\22), default_function.data.ndim is expected to equal 4\00", align 1
@.str.8 = private constant [235 x i8] c"Assert fail: T.tvm_struct_get(data, 0, 5, \22uint8\22) == T.uint8(2) and T.tvm_struct_get(data, 0, 6, \22uint8\22) == T.uint8(32) and T.tvm_struct_get(data, 0, 7, \22uint16\22) == T.uint16(1), default_function.data.dtype is expected to be float32\00", align 1
@.str.9 = private constant [191 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_data_shape[0]) == 3, Argument default_function.data.shape[0] has an unsatisfied constraint: 3 == T.Cast(\22int32\22, default_function_data_shape[0])\00", align 1
@.str.10 = private constant [191 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_data_shape[1]) == 4, Argument default_function.data.shape[1] has an unsatisfied constraint: 4 == T.Cast(\22int32\22, default_function_data_shape[1])\00", align 1
@.str.11 = private constant [191 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_data_shape[2]) == 2, Argument default_function.data.shape[2] has an unsatisfied constraint: 2 == T.Cast(\22int32\22, default_function_data_shape[2])\00", align 1
@.str.12 = private constant [193 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_data_shape[3]) == 10, Argument default_function.data.shape[3] has an unsatisfied constraint: 10 == T.Cast(\22int32\22, default_function_data_shape[3])\00", align 1
@.str.13 = private constant [309 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_data_strides[3]) and 10 == T.Cast(\22int32\22, default_function_data_strides[2]) and 20 == T.Cast(\22int32\22, default_function_data_strides[1]) and 80 == T.Cast(\22int32\22, default_function_data_strides[0]), default_function.data.strides: expected to be compact array\00", align 1
@.str.14 = private constant [196 x i8] c"Assert fail: T.uint64(0) == T.tvm_struct_get(data, 0, 8, \22uint64\22), Argument default_function.data.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(data, 0, 8, \22uint64\22)\00", align 1
@.str.15 = private constant [176 x i8] c"Assert fail: T.tvm_struct_get(data, 0, 10, \22int32\22) == 1, Argument default_function.data.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(data, 0, 10, \22int32\22)\00", align 1
@.str.16 = private constant [109 x i8] c"Assert fail: 1 == T.tvm_struct_get(gamma, 0, 4, \22int32\22), default_function.gamma.ndim is expected to equal 1\00", align 1
@.str.17 = private constant [239 x i8] c"Assert fail: T.tvm_struct_get(gamma, 0, 5, \22uint8\22) == T.uint8(2) and T.tvm_struct_get(gamma, 0, 6, \22uint8\22) == T.uint8(32) and T.tvm_struct_get(gamma, 0, 7, \22uint16\22) == T.uint16(1), default_function.gamma.dtype is expected to be float32\00", align 1
@.str.18 = private constant [194 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_gamma_shape[0]) == 4, Argument default_function.gamma.shape[0] has an unsatisfied constraint: 4 == T.Cast(\22int32\22, default_function_gamma_shape[0])\00", align 1
@.str.19 = private constant [131 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_gamma_strides[0]), default_function.gamma.strides: expected to be compact array\00", align 1
@.str.20 = private constant [199 x i8] c"Assert fail: T.uint64(0) == T.tvm_struct_get(gamma, 0, 8, \22uint64\22), Argument default_function.gamma.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(gamma, 0, 8, \22uint64\22)\00", align 1
@.str.21 = private constant [179 x i8] c"Assert fail: T.tvm_struct_get(gamma, 0, 10, \22int32\22) == 1, Argument default_function.gamma.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(gamma, 0, 10, \22int32\22)\00", align 1
@.str.22 = private constant [185 x i8] c"Assert fail: dev_id == T.tvm_struct_get(gamma, 0, 9, \22int32\22), Argument default_function.gamma.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(gamma, 0, 9, \22int32\22)\00", align 1
@.str.23 = private constant [107 x i8] c"Assert fail: 1 == T.tvm_struct_get(beta, 0, 4, \22int32\22), default_function.beta.ndim is expected to equal 1\00", align 1
@.str.24 = private constant [235 x i8] c"Assert fail: T.tvm_struct_get(beta, 0, 5, \22uint8\22) == T.uint8(2) and T.tvm_struct_get(beta, 0, 6, \22uint8\22) == T.uint8(32) and T.tvm_struct_get(beta, 0, 7, \22uint16\22) == T.uint16(1), default_function.beta.dtype is expected to be float32\00", align 1
@.str.25 = private constant [191 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_beta_shape[0]) == 4, Argument default_function.beta.shape[0] has an unsatisfied constraint: 4 == T.Cast(\22int32\22, default_function_beta_shape[0])\00", align 1
@.str.26 = private constant [129 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_beta_strides[0]), default_function.beta.strides: expected to be compact array\00", align 1
@.str.27 = private constant [196 x i8] c"Assert fail: T.uint64(0) == T.tvm_struct_get(beta, 0, 8, \22uint64\22), Argument default_function.beta.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(beta, 0, 8, \22uint64\22)\00", align 1
@.str.28 = private constant [176 x i8] c"Assert fail: T.tvm_struct_get(beta, 0, 10, \22int32\22) == 1, Argument default_function.beta.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(beta, 0, 10, \22int32\22)\00", align 1
@.str.29 = private constant [182 x i8] c"Assert fail: dev_id == T.tvm_struct_get(beta, 0, 9, \22int32\22), Argument default_function.beta.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(beta, 0, 9, \22int32\22)\00", align 1
@.str.30 = private constant [121 x i8] c"Assert fail: 1 == T.tvm_struct_get(moving_mean, 0, 4, \22int32\22), default_function.moving_mean.ndim is expected to equal 1\00", align 1
@.str.31 = private constant [263 x i8] c"Assert fail: T.tvm_struct_get(moving_mean, 0, 5, \22uint8\22) == T.uint8(2) and T.tvm_struct_get(moving_mean, 0, 6, \22uint8\22) == T.uint8(32) and T.tvm_struct_get(moving_mean, 0, 7, \22uint16\22) == T.uint16(1), default_function.moving_mean.dtype is expected to be float32\00", align 1
@.str.32 = private constant [212 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_moving_mean_shape[0]) == 4, Argument default_function.moving_mean.shape[0] has an unsatisfied constraint: 4 == T.Cast(\22int32\22, default_function_moving_mean_shape[0])\00", align 1
@.str.33 = private constant [143 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_moving_mean_strides[0]), default_function.moving_mean.strides: expected to be compact array\00", align 1
@.str.34 = private constant [217 x i8] c"Assert fail: T.uint64(0) == T.tvm_struct_get(moving_mean, 0, 8, \22uint64\22), Argument default_function.moving_mean.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(moving_mean, 0, 8, \22uint64\22)\00", align 1
@.str.35 = private constant [197 x i8] c"Assert fail: T.tvm_struct_get(moving_mean, 0, 10, \22int32\22) == 1, Argument default_function.moving_mean.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(moving_mean, 0, 10, \22int32\22)\00", align 1
@.str.36 = private constant [203 x i8] c"Assert fail: dev_id == T.tvm_struct_get(moving_mean, 0, 9, \22int32\22), Argument default_function.moving_mean.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(moving_mean, 0, 9, \22int32\22)\00", align 1
@.str.37 = private constant [119 x i8] c"Assert fail: 1 == T.tvm_struct_get(moving_var, 0, 4, \22int32\22), default_function.moving_var.ndim is expected to equal 1\00", align 1
@.str.38 = private constant [259 x i8] c"Assert fail: T.tvm_struct_get(moving_var, 0, 5, \22uint8\22) == T.uint8(2) and T.tvm_struct_get(moving_var, 0, 6, \22uint8\22) == T.uint8(32) and T.tvm_struct_get(moving_var, 0, 7, \22uint16\22) == T.uint16(1), default_function.moving_var.dtype is expected to be float32\00", align 1
@.str.39 = private constant [209 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_moving_var_shape[0]) == 4, Argument default_function.moving_var.shape[0] has an unsatisfied constraint: 4 == T.Cast(\22int32\22, default_function_moving_var_shape[0])\00", align 1
@.str.40 = private constant [141 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_moving_var_strides[0]), default_function.moving_var.strides: expected to be compact array\00", align 1
@.str.41 = private constant [214 x i8] c"Assert fail: T.uint64(0) == T.tvm_struct_get(moving_var, 0, 8, \22uint64\22), Argument default_function.moving_var.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(moving_var, 0, 8, \22uint64\22)\00", align 1
@.str.42 = private constant [194 x i8] c"Assert fail: T.tvm_struct_get(moving_var, 0, 10, \22int32\22) == 1, Argument default_function.moving_var.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(moving_var, 0, 10, \22int32\22)\00", align 1
@.str.43 = private constant [200 x i8] c"Assert fail: dev_id == T.tvm_struct_get(moving_var, 0, 9, \22int32\22), Argument default_function.moving_var.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(moving_var, 0, 9, \22int32\22)\00", align 1
@.str.44 = private constant [115 x i8] c"Assert fail: 4 == T.tvm_struct_get(T_divide, 0, 4, \22int32\22), default_function.T_divide.ndim is expected to equal 4\00", align 1
@.str.45 = private constant [251 x i8] c"Assert fail: T.tvm_struct_get(T_divide, 0, 5, \22uint8\22) == T.uint8(2) and T.tvm_struct_get(T_divide, 0, 6, \22uint8\22) == T.uint8(32) and T.tvm_struct_get(T_divide, 0, 7, \22uint16\22) == T.uint16(1), default_function.T_divide.dtype is expected to be float32\00", align 1
@.str.46 = private constant [203 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_T_divide_shape[0]) == 3, Argument default_function.T_divide.shape[0] has an unsatisfied constraint: 3 == T.Cast(\22int32\22, default_function_T_divide_shape[0])\00", align 1
@.str.47 = private constant [203 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_T_divide_shape[1]) == 4, Argument default_function.T_divide.shape[1] has an unsatisfied constraint: 4 == T.Cast(\22int32\22, default_function_T_divide_shape[1])\00", align 1
@.str.48 = private constant [203 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_T_divide_shape[2]) == 2, Argument default_function.T_divide.shape[2] has an unsatisfied constraint: 2 == T.Cast(\22int32\22, default_function_T_divide_shape[2])\00", align 1
@.str.49 = private constant [205 x i8] c"Assert fail: T.Cast(\22int32\22, default_function_T_divide_shape[3]) == 10, Argument default_function.T_divide.shape[3] has an unsatisfied constraint: 10 == T.Cast(\22int32\22, default_function_T_divide_shape[3])\00", align 1
@.str.50 = private constant [329 x i8] c"Assert fail: 1 == T.Cast(\22int32\22, default_function_T_divide_strides[3]) and 10 == T.Cast(\22int32\22, default_function_T_divide_strides[2]) and 20 == T.Cast(\22int32\22, default_function_T_divide_strides[1]) and 80 == T.Cast(\22int32\22, default_function_T_divide_strides[0]), default_function.T_divide.strides: expected to be compact array\00", align 1
@.str.51 = private constant [208 x i8] c"Assert fail: T.uint64(0) == T.tvm_struct_get(T_divide, 0, 8, \22uint64\22), Argument default_function.T_divide.byte_offset has an unsatisfied constraint: T.uint64(0) == T.tvm_struct_get(T_divide, 0, 8, \22uint64\22)\00", align 1
@.str.52 = private constant [188 x i8] c"Assert fail: T.tvm_struct_get(T_divide, 0, 10, \22int32\22) == 1, Argument default_function.T_divide.device_type has an unsatisfied constraint: 1 == T.tvm_struct_get(T_divide, 0, 10, \22int32\22)\00", align 1
@.str.53 = private constant [194 x i8] c"Assert fail: dev_id == T.tvm_struct_get(T_divide, 0, 9, \22int32\22), Argument default_function.T_divide.device_id has an unsatisfied constraint: dev_id == T.tvm_struct_get(T_divide, 0, 9, \22int32\22)\00", align 1
@.tvm_func.default_function_kernel = internal unnamed_addr global i8* null, align 8
@.str.54 = private constant [24 x i8] c"default_function_kernel\00", align 1
@.str.55 = private constant [68 x i8] c"Assert fail: kernel_error_code == 0, Error executing compute kernel\00", align 1
@__tvm_main__ = weak dllexport local_unnamed_addr constant [17 x i8] c"default_function\00", align 1
@llvm.global_ctors = appending global [0 x { i32, void ()*, i8* }] zeroinitializer

define dllexport i32 @default_function(i8* noalias nocapture readonly %args, i32* noalias nocapture readonly %arg_type_ids, i32 %num_args, i8* noalias nocapture readnone %out_ret_value, i32* noalias nocapture readnone %out_ret_tcode, i8* noalias nocapture readnone %resource_handle) local_unnamed_addr #0 !dbg !5 {
entry:
  call void @llvm.dbg.value(metadata i8* %args, metadata !12, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i32* %arg_type_ids, metadata !13, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i32 %num_args, metadata !14, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i8* %out_ret_value, metadata !15, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i32* %out_ret_tcode, metadata !16, metadata !DIExpression()), !dbg !18
  call void @llvm.dbg.value(metadata i8* %resource_handle, metadata !17, metadata !DIExpression()), !dbg !18
  %stack_value_void_ptr154 = alloca [5 x %0], align 8, !dbg !18
  %stack_tcode155 = alloca [5 x i32], align 4, !dbg !18
  %stack_tcode155.sub = getelementptr inbounds [5 x i32], [5 x i32]* %stack_tcode155, i64 0, i64 0
  %stack_value = bitcast [5 x %0]* %stack_value_void_ptr154 to i8*, !dbg !18
  %0 = icmp eq i32 %num_args, 6, !dbg !18
  br i1 %0, label %assert_end, label %assert_fail, !dbg !18, !prof !19

assert_fail:                                      ; preds = %entry
  %1 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %1(i8* getelementptr inbounds ([67 x i8], [67 x i8]* @.str, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end:                                       ; preds = %entry
  %data.code = load i32, i32* %arg_type_ids, align 4, !dbg !18, !tbaa !23
  %2 = getelementptr inbounds i32, i32* %arg_type_ids, i64 1, !dbg !18
  %gamma.code = load i32, i32* %2, align 4, !dbg !18, !tbaa !34
  %3 = getelementptr inbounds i32, i32* %arg_type_ids, i64 2, !dbg !18
  %beta.code = load i32, i32* %3, align 4, !dbg !18, !tbaa !36
  %4 = getelementptr inbounds i32, i32* %arg_type_ids, i64 3, !dbg !18
  %moving_mean.code = load i32, i32* %4, align 4, !dbg !18, !tbaa !39
  %5 = getelementptr inbounds i32, i32* %arg_type_ids, i64 4, !dbg !18
  %moving_var.code = load i32, i32* %5, align 4, !dbg !18, !tbaa !41
  %6 = getelementptr inbounds i32, i32* %arg_type_ids, i64 5, !dbg !18
  %T_divide.code = load i32, i32* %6, align 4, !dbg !18, !tbaa !45
  %7 = bitcast i8* %args to %1**, !dbg !18
  %data156 = load %1*, %1** %7, align 8, !dbg !18
  %8 = getelementptr inbounds i8, i8* %args, i64 8, !dbg !18
  %9 = bitcast i8* %8 to %1**, !dbg !18
  %gamma157 = load %1*, %1** %9, align 8, !dbg !18
  %10 = getelementptr inbounds i8, i8* %args, i64 16, !dbg !18
  %11 = bitcast i8* %10 to %1**, !dbg !18
  %beta158 = load %1*, %1** %11, align 8, !dbg !18
  %12 = getelementptr inbounds i8, i8* %args, i64 24, !dbg !18
  %13 = bitcast i8* %12 to %1**, !dbg !18
  %moving_mean159 = load %1*, %1** %13, align 8, !dbg !18
  %14 = getelementptr inbounds i8, i8* %args, i64 32, !dbg !18
  %15 = bitcast i8* %14 to %1**, !dbg !18
  %moving_var160 = load %1*, %1** %15, align 8, !dbg !18
  %16 = getelementptr inbounds i8, i8* %args, i64 40, !dbg !18
  %17 = bitcast i8* %16 to %1**, !dbg !18
  %T_divide161 = load %1*, %1** %17, align 8, !dbg !18
  %18 = bitcast %1* %data156 to float**, !dbg !18
  %data_void_ptr162 = load float*, float** %18, align 8, !dbg !18
  %ptrint = ptrtoint float* %data_void_ptr162 to i64, !dbg !18
  %maskedptr = and i64 %ptrint, 63, !dbg !18
  %maskcond = icmp eq i64 %maskedptr, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond), !dbg !18
  %19 = getelementptr inbounds %1, %1* %data156, i64 0, i32 4, !dbg !18
  %default_function.data.shape = load i64*, i64** %19, align 8, !dbg !18
  %20 = getelementptr inbounds %1, %1* %data156, i64 0, i32 5, !dbg !18
  %default_function.data.strides = load i64*, i64** %20, align 8, !dbg !18
  %21 = getelementptr inbounds %1, %1* %data156, i64 0, i32 1, i32 1, !dbg !18
  %dev_id = load i32, i32* %21, align 4, !dbg !18
  %22 = bitcast %1* %gamma157 to i64*, !dbg !18
  %gamma_void_ptr163164 = load i64, i64* %22, align 8, !dbg !18
  %maskedptr4 = and i64 %gamma_void_ptr163164, 63, !dbg !18
  %maskcond5 = icmp eq i64 %maskedptr4, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond5), !dbg !18
  %23 = getelementptr inbounds %1, %1* %gamma157, i64 0, i32 4, !dbg !18
  %default_function.gamma.shape = load i64*, i64** %23, align 8, !dbg !18
  %24 = getelementptr inbounds %1, %1* %gamma157, i64 0, i32 5, !dbg !18
  %default_function.gamma.strides = load i64*, i64** %24, align 8, !dbg !18
  %25 = bitcast %1* %beta158 to i64*, !dbg !18
  %beta_void_ptr165166 = load i64, i64* %25, align 8, !dbg !18
  %maskedptr8 = and i64 %beta_void_ptr165166, 63, !dbg !18
  %maskcond9 = icmp eq i64 %maskedptr8, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond9), !dbg !18
  %26 = getelementptr inbounds %1, %1* %beta158, i64 0, i32 4, !dbg !18
  %default_function.beta.shape = load i64*, i64** %26, align 8, !dbg !18
  %27 = getelementptr inbounds %1, %1* %beta158, i64 0, i32 5, !dbg !18
  %default_function.beta.strides = load i64*, i64** %27, align 8, !dbg !18
  %28 = bitcast %1* %moving_mean159 to float**, !dbg !18
  %moving_mean_void_ptr167 = load float*, float** %28, align 8, !dbg !18
  %ptrint11 = ptrtoint float* %moving_mean_void_ptr167 to i64, !dbg !18
  %maskedptr12 = and i64 %ptrint11, 63, !dbg !18
  %maskcond13 = icmp eq i64 %maskedptr12, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond13), !dbg !18
  %29 = getelementptr inbounds %1, %1* %moving_mean159, i64 0, i32 4, !dbg !18
  %default_function.moving_mean.shape = load i64*, i64** %29, align 8, !dbg !18
  %30 = getelementptr inbounds %1, %1* %moving_mean159, i64 0, i32 5, !dbg !18
  %default_function.moving_mean.strides = load i64*, i64** %30, align 8, !dbg !18
  %31 = bitcast %1* %moving_var160 to float**, !dbg !18
  %moving_var_void_ptr168 = load float*, float** %31, align 8, !dbg !18
  %ptrint15 = ptrtoint float* %moving_var_void_ptr168 to i64, !dbg !18
  %maskedptr16 = and i64 %ptrint15, 63, !dbg !18
  %maskcond17 = icmp eq i64 %maskedptr16, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond17), !dbg !18
  %32 = getelementptr inbounds %1, %1* %moving_var160, i64 0, i32 4, !dbg !18
  %default_function.moving_var.shape = load i64*, i64** %32, align 8, !dbg !18
  %33 = getelementptr inbounds %1, %1* %moving_var160, i64 0, i32 5, !dbg !18
  %default_function.moving_var.strides = load i64*, i64** %33, align 8, !dbg !18
  %34 = bitcast %1* %T_divide161 to float**, !dbg !18
  %T_divide_void_ptr169 = load float*, float** %34, align 8, !dbg !18
  %ptrint19 = ptrtoint float* %T_divide_void_ptr169 to i64, !dbg !18
  %maskedptr20 = and i64 %ptrint19, 63, !dbg !18
  %maskcond21 = icmp eq i64 %maskedptr20, 0, !dbg !18
  tail call void @llvm.assume(i1 %maskcond21), !dbg !18
  %35 = getelementptr inbounds %1, %1* %T_divide161, i64 0, i32 4, !dbg !18
  %default_function.T_divide.shape = load i64*, i64** %35, align 8, !dbg !18
  %36 = getelementptr inbounds %1, %1* %T_divide161, i64 0, i32 5, !dbg !18
  %default_function.T_divide.strides = load i64*, i64** %36, align 8, !dbg !18
  switch i32 %data.code, label %assert_fail22 [
    i32 13, label %assert_end23
    i32 7, label %assert_end23
    i32 4, label %assert_end23
    i32 3, label %assert_end23
  ], !dbg !18

assert_fail22:                                    ; preds = %assert_end
  %37 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %37(i8* getelementptr inbounds ([130 x i8], [130 x i8]* @.str.1, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end23:                                     ; preds = %assert_end, %assert_end, %assert_end, %assert_end
  switch i32 %gamma.code, label %assert_fail24 [
    i32 13, label %assert_end25
    i32 7, label %assert_end25
    i32 4, label %assert_end25
    i32 3, label %assert_end25
  ], !dbg !18

assert_fail24:                                    ; preds = %assert_end23
  %38 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %38(i8* getelementptr inbounds ([134 x i8], [134 x i8]* @.str.2, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end25:                                     ; preds = %assert_end23, %assert_end23, %assert_end23, %assert_end23
  switch i32 %beta.code, label %assert_fail26 [
    i32 13, label %assert_end27
    i32 7, label %assert_end27
    i32 4, label %assert_end27
    i32 3, label %assert_end27
  ], !dbg !18

assert_fail26:                                    ; preds = %assert_end25
  %39 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %39(i8* getelementptr inbounds ([130 x i8], [130 x i8]* @.str.3, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end27:                                     ; preds = %assert_end25, %assert_end25, %assert_end25, %assert_end25
  switch i32 %moving_mean.code, label %assert_fail28 [
    i32 13, label %assert_end29
    i32 7, label %assert_end29
    i32 4, label %assert_end29
    i32 3, label %assert_end29
  ], !dbg !18

assert_fail28:                                    ; preds = %assert_end27
  %40 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %40(i8* getelementptr inbounds ([158 x i8], [158 x i8]* @.str.4, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end29:                                     ; preds = %assert_end27, %assert_end27, %assert_end27, %assert_end27
  switch i32 %moving_var.code, label %assert_fail30 [
    i32 13, label %assert_end31
    i32 7, label %assert_end31
    i32 4, label %assert_end31
    i32 3, label %assert_end31
  ], !dbg !18

assert_fail30:                                    ; preds = %assert_end29
  %41 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %41(i8* getelementptr inbounds ([154 x i8], [154 x i8]* @.str.5, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end31:                                     ; preds = %assert_end29, %assert_end29, %assert_end29, %assert_end29
  switch i32 %T_divide.code, label %assert_fail32 [
    i32 13, label %assert_end33
    i32 7, label %assert_end33
    i32 4, label %assert_end33
    i32 3, label %assert_end33
  ], !dbg !18

assert_fail32:                                    ; preds = %assert_end31
  %42 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %42(i8* getelementptr inbounds ([146 x i8], [146 x i8]* @.str.6, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end33:                                     ; preds = %assert_end31, %assert_end31, %assert_end31, %assert_end31
  %43 = getelementptr inbounds %1, %1* %data156, i64 0, i32 2, !dbg !18
  %44 = load i32, i32* %43, align 4, !dbg !18
  %45 = icmp eq i32 %44, 4, !dbg !18
  br i1 %45, label %assert_end37, label %assert_fail34, !dbg !18, !prof !19

assert_fail34:                                    ; preds = %assert_end33
  %46 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %46(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.7, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end37:                                     ; preds = %assert_end33
  %47 = getelementptr inbounds %1, %1* %data156, i64 0, i32 3, i32 2, !dbg !18
  %48 = load i16, i16* %47, align 2, !dbg !18
  %49 = icmp eq i16 %48, 1, !dbg !18
  %50 = getelementptr inbounds %1, %1* %data156, i64 0, i32 3, i32 1, !dbg !18
  %51 = load i8, i8* %50, align 1, !dbg !18
  %52 = icmp eq i8 %51, 32, !dbg !18
  %53 = getelementptr inbounds %1, %1* %data156, i64 0, i32 3, i32 0, !dbg !18
  %54 = load i8, i8* %53, align 1, !dbg !18
  %55 = icmp eq i8 %54, 2, !dbg !18
  %56 = and i1 %52, %55, !dbg !18
  %57 = and i1 %49, %56, !dbg !18
  br i1 %57, label %assert_end39, label %assert_fail38, !dbg !18, !prof !19

assert_fail38:                                    ; preds = %assert_end37
  %58 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %58(i8* getelementptr inbounds ([235 x i8], [235 x i8]* @.str.8, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end39:                                     ; preds = %assert_end37
  %59 = load i64, i64* %default_function.data.shape, align 8, !dbg !18, !tbaa !47
  %60 = trunc i64 %59 to i32, !dbg !18
  %61 = icmp eq i32 %60, 3, !dbg !18
  br i1 %61, label %assert_end41, label %assert_fail40, !dbg !18, !prof !19

assert_fail40:                                    ; preds = %assert_end39
  %62 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %62(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.9, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end41:                                     ; preds = %assert_end39
  %63 = getelementptr inbounds i64, i64* %default_function.data.shape, i64 1, !dbg !18
  %64 = load i64, i64* %63, align 8, !dbg !18, !tbaa !57
  %65 = trunc i64 %64 to i32, !dbg !18
  %66 = icmp eq i32 %65, 4, !dbg !18
  br i1 %66, label %assert_end43, label %assert_fail42, !dbg !18, !prof !19

assert_fail42:                                    ; preds = %assert_end41
  %67 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %67(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.10, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end43:                                     ; preds = %assert_end41
  %68 = getelementptr inbounds i64, i64* %default_function.data.shape, i64 2, !dbg !18
  %69 = load i64, i64* %68, align 8, !dbg !18, !tbaa !59
  %70 = trunc i64 %69 to i32, !dbg !18
  %71 = icmp eq i32 %70, 2, !dbg !18
  br i1 %71, label %assert_end45, label %assert_fail44, !dbg !18, !prof !19

assert_fail44:                                    ; preds = %assert_end43
  %72 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %72(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.11, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end45:                                     ; preds = %assert_end43
  %73 = getelementptr inbounds i64, i64* %default_function.data.shape, i64 3, !dbg !18
  %74 = load i64, i64* %73, align 8, !dbg !18, !tbaa !62
  %75 = trunc i64 %74 to i32, !dbg !18
  %76 = icmp eq i32 %75, 10, !dbg !18
  br i1 %76, label %assert_end47, label %assert_fail46, !dbg !18, !prof !19

assert_fail46:                                    ; preds = %assert_end45
  %77 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %77(i8* getelementptr inbounds ([193 x i8], [193 x i8]* @.str.12, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end47:                                     ; preds = %assert_end45
  %78 = icmp eq i64* %default_function.data.strides, null, !dbg !18
  br i1 %78, label %if_end, label %if_then, !dbg !18, !prof !64

if_then:                                          ; preds = %assert_end47
  %79 = bitcast i64* %default_function.data.strides to <4 x i64>*, !dbg !18
  %80 = load <4 x i64>, <4 x i64>* %79, align 8, !dbg !18, !tbaa !65
  %81 = trunc <4 x i64> %80 to <4 x i32>, !dbg !18
  %82 = icmp eq <4 x i32> %81, <i32 80, i32 20, i32 10, i32 1>, !dbg !18
  %rdx.shuf172 = shufflevector <4 x i1> %82, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>, !dbg !18
  %bin.rdx173 = and <4 x i1> %82, %rdx.shuf172, !dbg !18
  %rdx.shuf174 = shufflevector <4 x i1> %bin.rdx173, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>, !dbg !18
  %bin.rdx175 = and <4 x i1> %bin.rdx173, %rdx.shuf174, !dbg !18
  %83 = extractelement <4 x i1> %bin.rdx175, i32 0, !dbg !18
  br i1 %83, label %if_end, label %assert_fail48, !dbg !18, !prof !19

if_end:                                           ; preds = %assert_end47, %if_then
  %84 = getelementptr inbounds %1, %1* %data156, i64 0, i32 6, !dbg !18
  %85 = load i64, i64* %84, align 8, !dbg !18
  %86 = icmp eq i64 %85, 0, !dbg !18
  br i1 %86, label %assert_end51, label %assert_fail50, !dbg !18, !prof !19

assert_fail48:                                    ; preds = %if_then
  %87 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %87(i8* getelementptr inbounds ([309 x i8], [309 x i8]* @.str.13, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail50:                                    ; preds = %if_end
  %88 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %88(i8* getelementptr inbounds ([196 x i8], [196 x i8]* @.str.14, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end51:                                     ; preds = %if_end
  %89 = getelementptr inbounds %1, %1* %data156, i64 0, i32 1, i32 0, !dbg !18
  %90 = load i32, i32* %89, align 4, !dbg !18
  %91 = icmp eq i32 %90, 1, !dbg !18
  br i1 %91, label %assert_end53, label %assert_fail52, !dbg !18, !prof !19

assert_fail52:                                    ; preds = %assert_end51
  %92 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %92(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.15, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end53:                                     ; preds = %assert_end51
  %93 = getelementptr inbounds %1, %1* %gamma157, i64 0, i32 2, !dbg !18
  %94 = load i32, i32* %93, align 4, !dbg !18
  %95 = icmp eq i32 %94, 1, !dbg !18
  br i1 %95, label %assert_end57, label %assert_fail54, !dbg !18, !prof !19

assert_fail54:                                    ; preds = %assert_end53
  %96 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %96(i8* getelementptr inbounds ([109 x i8], [109 x i8]* @.str.16, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end57:                                     ; preds = %assert_end53
  %97 = getelementptr inbounds %1, %1* %gamma157, i64 0, i32 3, i32 2, !dbg !18
  %98 = load i16, i16* %97, align 2, !dbg !18
  %99 = icmp eq i16 %98, 1, !dbg !18
  %100 = getelementptr inbounds %1, %1* %gamma157, i64 0, i32 3, i32 1, !dbg !18
  %101 = load i8, i8* %100, align 1, !dbg !18
  %102 = icmp eq i8 %101, 32, !dbg !18
  %103 = getelementptr inbounds %1, %1* %gamma157, i64 0, i32 3, i32 0, !dbg !18
  %104 = load i8, i8* %103, align 1, !dbg !18
  %105 = icmp eq i8 %104, 2, !dbg !18
  %106 = and i1 %102, %105, !dbg !18
  %107 = and i1 %99, %106, !dbg !18
  br i1 %107, label %assert_end59, label %assert_fail58, !dbg !18, !prof !19

assert_fail58:                                    ; preds = %assert_end57
  %108 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %108(i8* getelementptr inbounds ([239 x i8], [239 x i8]* @.str.17, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end59:                                     ; preds = %assert_end57
  %109 = load i64, i64* %default_function.gamma.shape, align 8, !dbg !18, !tbaa !73
  %110 = trunc i64 %109 to i32, !dbg !18
  %111 = icmp eq i32 %110, 4, !dbg !18
  br i1 %111, label %assert_end61, label %assert_fail60, !dbg !18, !prof !19

assert_fail60:                                    ; preds = %assert_end59
  %112 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %112(i8* getelementptr inbounds ([194 x i8], [194 x i8]* @.str.18, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end61:                                     ; preds = %assert_end59
  %113 = icmp eq i64* %default_function.gamma.strides, null, !dbg !18
  br i1 %113, label %if_end63, label %if_then62, !dbg !18, !prof !64

if_then62:                                        ; preds = %assert_end61
  %114 = load i64, i64* %default_function.gamma.strides, align 8, !dbg !18, !tbaa !83
  %115 = trunc i64 %114 to i32, !dbg !18
  %116 = icmp eq i32 %115, 1, !dbg !18
  br i1 %116, label %if_end63, label %assert_fail64, !dbg !18, !prof !19

if_end63:                                         ; preds = %assert_end61, %if_then62
  %117 = getelementptr inbounds %1, %1* %gamma157, i64 0, i32 6, !dbg !18
  %118 = load i64, i64* %117, align 8, !dbg !18
  %119 = icmp eq i64 %118, 0, !dbg !18
  br i1 %119, label %assert_end67, label %assert_fail66, !dbg !18, !prof !19

assert_fail64:                                    ; preds = %if_then62
  %120 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %120(i8* getelementptr inbounds ([131 x i8], [131 x i8]* @.str.19, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail66:                                    ; preds = %if_end63
  %121 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %121(i8* getelementptr inbounds ([199 x i8], [199 x i8]* @.str.20, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end67:                                     ; preds = %if_end63
  %122 = getelementptr inbounds %1, %1* %gamma157, i64 0, i32 1, i32 0, !dbg !18
  %123 = load i32, i32* %122, align 4, !dbg !18
  %124 = icmp eq i32 %123, 1, !dbg !18
  br i1 %124, label %assert_end69, label %assert_fail68, !dbg !18, !prof !19

assert_fail68:                                    ; preds = %assert_end67
  %125 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %125(i8* getelementptr inbounds ([179 x i8], [179 x i8]* @.str.21, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end69:                                     ; preds = %assert_end67
  %126 = getelementptr inbounds %1, %1* %gamma157, i64 0, i32 1, i32 1, !dbg !18
  %127 = load i32, i32* %126, align 4, !dbg !18
  %128 = icmp eq i32 %dev_id, %127, !dbg !18
  br i1 %128, label %assert_end71, label %assert_fail70, !dbg !18, !prof !19

assert_fail70:                                    ; preds = %assert_end69
  %129 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %129(i8* getelementptr inbounds ([185 x i8], [185 x i8]* @.str.22, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end71:                                     ; preds = %assert_end69
  %130 = getelementptr inbounds %1, %1* %beta158, i64 0, i32 2, !dbg !18
  %131 = load i32, i32* %130, align 4, !dbg !18
  %132 = icmp eq i32 %131, 1, !dbg !18
  br i1 %132, label %assert_end75, label %assert_fail72, !dbg !18, !prof !19

assert_fail72:                                    ; preds = %assert_end71
  %133 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %133(i8* getelementptr inbounds ([107 x i8], [107 x i8]* @.str.23, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end75:                                     ; preds = %assert_end71
  %134 = getelementptr inbounds %1, %1* %beta158, i64 0, i32 3, i32 2, !dbg !18
  %135 = load i16, i16* %134, align 2, !dbg !18
  %136 = icmp eq i16 %135, 1, !dbg !18
  %137 = getelementptr inbounds %1, %1* %beta158, i64 0, i32 3, i32 1, !dbg !18
  %138 = load i8, i8* %137, align 1, !dbg !18
  %139 = icmp eq i8 %138, 32, !dbg !18
  %140 = getelementptr inbounds %1, %1* %beta158, i64 0, i32 3, i32 0, !dbg !18
  %141 = load i8, i8* %140, align 1, !dbg !18
  %142 = icmp eq i8 %141, 2, !dbg !18
  %143 = and i1 %139, %142, !dbg !18
  %144 = and i1 %136, %143, !dbg !18
  br i1 %144, label %assert_end77, label %assert_fail76, !dbg !18, !prof !19

assert_fail76:                                    ; preds = %assert_end75
  %145 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %145(i8* getelementptr inbounds ([235 x i8], [235 x i8]* @.str.24, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end77:                                     ; preds = %assert_end75
  %146 = load i64, i64* %default_function.beta.shape, align 8, !dbg !18, !tbaa !93
  %147 = trunc i64 %146 to i32, !dbg !18
  %148 = icmp eq i32 %147, 4, !dbg !18
  br i1 %148, label %assert_end79, label %assert_fail78, !dbg !18, !prof !19

assert_fail78:                                    ; preds = %assert_end77
  %149 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %149(i8* getelementptr inbounds ([191 x i8], [191 x i8]* @.str.25, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end79:                                     ; preds = %assert_end77
  %150 = icmp eq i64* %default_function.beta.strides, null, !dbg !18
  br i1 %150, label %if_end81, label %if_then80, !dbg !18, !prof !64

if_then80:                                        ; preds = %assert_end79
  %151 = load i64, i64* %default_function.beta.strides, align 8, !dbg !18, !tbaa !103
  %152 = trunc i64 %151 to i32, !dbg !18
  %153 = icmp eq i32 %152, 1, !dbg !18
  br i1 %153, label %if_end81, label %assert_fail82, !dbg !18, !prof !19

if_end81:                                         ; preds = %assert_end79, %if_then80
  %154 = getelementptr inbounds %1, %1* %beta158, i64 0, i32 6, !dbg !18
  %155 = load i64, i64* %154, align 8, !dbg !18
  %156 = icmp eq i64 %155, 0, !dbg !18
  br i1 %156, label %assert_end85, label %assert_fail84, !dbg !18, !prof !19

assert_fail82:                                    ; preds = %if_then80
  %157 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %157(i8* getelementptr inbounds ([129 x i8], [129 x i8]* @.str.26, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail84:                                    ; preds = %if_end81
  %158 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %158(i8* getelementptr inbounds ([196 x i8], [196 x i8]* @.str.27, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end85:                                     ; preds = %if_end81
  %159 = getelementptr inbounds %1, %1* %beta158, i64 0, i32 1, i32 0, !dbg !18
  %160 = load i32, i32* %159, align 4, !dbg !18
  %161 = icmp eq i32 %160, 1, !dbg !18
  br i1 %161, label %assert_end87, label %assert_fail86, !dbg !18, !prof !19

assert_fail86:                                    ; preds = %assert_end85
  %162 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %162(i8* getelementptr inbounds ([176 x i8], [176 x i8]* @.str.28, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end87:                                     ; preds = %assert_end85
  %163 = getelementptr inbounds %1, %1* %beta158, i64 0, i32 1, i32 1, !dbg !18
  %164 = load i32, i32* %163, align 4, !dbg !18
  %165 = icmp eq i32 %dev_id, %164, !dbg !18
  br i1 %165, label %assert_end89, label %assert_fail88, !dbg !18, !prof !19

assert_fail88:                                    ; preds = %assert_end87
  %166 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %166(i8* getelementptr inbounds ([182 x i8], [182 x i8]* @.str.29, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end89:                                     ; preds = %assert_end87
  %167 = getelementptr inbounds %1, %1* %moving_mean159, i64 0, i32 2, !dbg !18
  %168 = load i32, i32* %167, align 4, !dbg !18
  %169 = icmp eq i32 %168, 1, !dbg !18
  br i1 %169, label %assert_end93, label %assert_fail90, !dbg !18, !prof !19

assert_fail90:                                    ; preds = %assert_end89
  %170 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %170(i8* getelementptr inbounds ([121 x i8], [121 x i8]* @.str.30, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end93:                                     ; preds = %assert_end89
  %171 = getelementptr inbounds %1, %1* %moving_mean159, i64 0, i32 3, i32 2, !dbg !18
  %172 = load i16, i16* %171, align 2, !dbg !18
  %173 = icmp eq i16 %172, 1, !dbg !18
  %174 = getelementptr inbounds %1, %1* %moving_mean159, i64 0, i32 3, i32 1, !dbg !18
  %175 = load i8, i8* %174, align 1, !dbg !18
  %176 = icmp eq i8 %175, 32, !dbg !18
  %177 = getelementptr inbounds %1, %1* %moving_mean159, i64 0, i32 3, i32 0, !dbg !18
  %178 = load i8, i8* %177, align 1, !dbg !18
  %179 = icmp eq i8 %178, 2, !dbg !18
  %180 = and i1 %176, %179, !dbg !18
  %181 = and i1 %173, %180, !dbg !18
  br i1 %181, label %assert_end95, label %assert_fail94, !dbg !18, !prof !19

assert_fail94:                                    ; preds = %assert_end93
  %182 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %182(i8* getelementptr inbounds ([263 x i8], [263 x i8]* @.str.31, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end95:                                     ; preds = %assert_end93
  %183 = load i64, i64* %default_function.moving_mean.shape, align 8, !dbg !18, !tbaa !113
  %184 = trunc i64 %183 to i32, !dbg !18
  %185 = icmp eq i32 %184, 4, !dbg !18
  br i1 %185, label %assert_end97, label %assert_fail96, !dbg !18, !prof !19

assert_fail96:                                    ; preds = %assert_end95
  %186 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %186(i8* getelementptr inbounds ([212 x i8], [212 x i8]* @.str.32, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end97:                                     ; preds = %assert_end95
  %187 = icmp eq i64* %default_function.moving_mean.strides, null, !dbg !18
  br i1 %187, label %if_end99, label %if_then98, !dbg !18, !prof !64

if_then98:                                        ; preds = %assert_end97
  %188 = load i64, i64* %default_function.moving_mean.strides, align 8, !dbg !18, !tbaa !123
  %189 = trunc i64 %188 to i32, !dbg !18
  %190 = icmp eq i32 %189, 1, !dbg !18
  br i1 %190, label %if_end99, label %assert_fail100, !dbg !18, !prof !19

if_end99:                                         ; preds = %assert_end97, %if_then98
  %191 = getelementptr inbounds %1, %1* %moving_mean159, i64 0, i32 6, !dbg !18
  %192 = load i64, i64* %191, align 8, !dbg !18
  %193 = icmp eq i64 %192, 0, !dbg !18
  br i1 %193, label %assert_end103, label %assert_fail102, !dbg !18, !prof !19

assert_fail100:                                   ; preds = %if_then98
  %194 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %194(i8* getelementptr inbounds ([143 x i8], [143 x i8]* @.str.33, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail102:                                   ; preds = %if_end99
  %195 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %195(i8* getelementptr inbounds ([217 x i8], [217 x i8]* @.str.34, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end103:                                    ; preds = %if_end99
  %196 = getelementptr inbounds %1, %1* %moving_mean159, i64 0, i32 1, i32 0, !dbg !18
  %197 = load i32, i32* %196, align 4, !dbg !18
  %198 = icmp eq i32 %197, 1, !dbg !18
  br i1 %198, label %assert_end105, label %assert_fail104, !dbg !18, !prof !19

assert_fail104:                                   ; preds = %assert_end103
  %199 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %199(i8* getelementptr inbounds ([197 x i8], [197 x i8]* @.str.35, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end105:                                    ; preds = %assert_end103
  %200 = getelementptr inbounds %1, %1* %moving_mean159, i64 0, i32 1, i32 1, !dbg !18
  %201 = load i32, i32* %200, align 4, !dbg !18
  %202 = icmp eq i32 %dev_id, %201, !dbg !18
  br i1 %202, label %assert_end107, label %assert_fail106, !dbg !18, !prof !19

assert_fail106:                                   ; preds = %assert_end105
  %203 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %203(i8* getelementptr inbounds ([203 x i8], [203 x i8]* @.str.36, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end107:                                    ; preds = %assert_end105
  %204 = getelementptr inbounds %1, %1* %moving_var160, i64 0, i32 2, !dbg !18
  %205 = load i32, i32* %204, align 4, !dbg !18
  %206 = icmp eq i32 %205, 1, !dbg !18
  br i1 %206, label %assert_end111, label %assert_fail108, !dbg !18, !prof !19

assert_fail108:                                   ; preds = %assert_end107
  %207 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %207(i8* getelementptr inbounds ([119 x i8], [119 x i8]* @.str.37, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end111:                                    ; preds = %assert_end107
  %208 = getelementptr inbounds %1, %1* %moving_var160, i64 0, i32 3, i32 2, !dbg !18
  %209 = load i16, i16* %208, align 2, !dbg !18
  %210 = icmp eq i16 %209, 1, !dbg !18
  %211 = getelementptr inbounds %1, %1* %moving_var160, i64 0, i32 3, i32 1, !dbg !18
  %212 = load i8, i8* %211, align 1, !dbg !18
  %213 = icmp eq i8 %212, 32, !dbg !18
  %214 = getelementptr inbounds %1, %1* %moving_var160, i64 0, i32 3, i32 0, !dbg !18
  %215 = load i8, i8* %214, align 1, !dbg !18
  %216 = icmp eq i8 %215, 2, !dbg !18
  %217 = and i1 %213, %216, !dbg !18
  %218 = and i1 %210, %217, !dbg !18
  br i1 %218, label %assert_end113, label %assert_fail112, !dbg !18, !prof !19

assert_fail112:                                   ; preds = %assert_end111
  %219 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %219(i8* getelementptr inbounds ([259 x i8], [259 x i8]* @.str.38, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end113:                                    ; preds = %assert_end111
  %220 = load i64, i64* %default_function.moving_var.shape, align 8, !dbg !18, !tbaa !133
  %221 = trunc i64 %220 to i32, !dbg !18
  %222 = icmp eq i32 %221, 4, !dbg !18
  br i1 %222, label %assert_end115, label %assert_fail114, !dbg !18, !prof !19

assert_fail114:                                   ; preds = %assert_end113
  %223 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %223(i8* getelementptr inbounds ([209 x i8], [209 x i8]* @.str.39, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end115:                                    ; preds = %assert_end113
  %224 = icmp eq i64* %default_function.moving_var.strides, null, !dbg !18
  br i1 %224, label %if_end117, label %if_then116, !dbg !18, !prof !64

if_then116:                                       ; preds = %assert_end115
  %225 = load i64, i64* %default_function.moving_var.strides, align 8, !dbg !18, !tbaa !143
  %226 = trunc i64 %225 to i32, !dbg !18
  %227 = icmp eq i32 %226, 1, !dbg !18
  br i1 %227, label %if_end117, label %assert_fail118, !dbg !18, !prof !19

if_end117:                                        ; preds = %assert_end115, %if_then116
  %228 = getelementptr inbounds %1, %1* %moving_var160, i64 0, i32 6, !dbg !18
  %229 = load i64, i64* %228, align 8, !dbg !18
  %230 = icmp eq i64 %229, 0, !dbg !18
  br i1 %230, label %assert_end121, label %assert_fail120, !dbg !18, !prof !19

assert_fail118:                                   ; preds = %if_then116
  %231 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %231(i8* getelementptr inbounds ([141 x i8], [141 x i8]* @.str.40, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail120:                                   ; preds = %if_end117
  %232 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %232(i8* getelementptr inbounds ([214 x i8], [214 x i8]* @.str.41, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end121:                                    ; preds = %if_end117
  %233 = getelementptr inbounds %1, %1* %moving_var160, i64 0, i32 1, i32 0, !dbg !18
  %234 = load i32, i32* %233, align 4, !dbg !18
  %235 = icmp eq i32 %234, 1, !dbg !18
  br i1 %235, label %assert_end123, label %assert_fail122, !dbg !18, !prof !19

assert_fail122:                                   ; preds = %assert_end121
  %236 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %236(i8* getelementptr inbounds ([194 x i8], [194 x i8]* @.str.42, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end123:                                    ; preds = %assert_end121
  %237 = getelementptr inbounds %1, %1* %moving_var160, i64 0, i32 1, i32 1, !dbg !18
  %238 = load i32, i32* %237, align 4, !dbg !18
  %239 = icmp eq i32 %dev_id, %238, !dbg !18
  br i1 %239, label %assert_end125, label %assert_fail124, !dbg !18, !prof !19

assert_fail124:                                   ; preds = %assert_end123
  %240 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %240(i8* getelementptr inbounds ([200 x i8], [200 x i8]* @.str.43, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end125:                                    ; preds = %assert_end123
  %241 = getelementptr inbounds %1, %1* %T_divide161, i64 0, i32 2, !dbg !18
  %242 = load i32, i32* %241, align 4, !dbg !18
  %243 = icmp eq i32 %242, 4, !dbg !18
  br i1 %243, label %assert_end129, label %assert_fail126, !dbg !18, !prof !19

assert_fail126:                                   ; preds = %assert_end125
  %244 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %244(i8* getelementptr inbounds ([115 x i8], [115 x i8]* @.str.44, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end129:                                    ; preds = %assert_end125
  %245 = getelementptr inbounds %1, %1* %T_divide161, i64 0, i32 3, i32 2, !dbg !18
  %246 = load i16, i16* %245, align 2, !dbg !18
  %247 = icmp eq i16 %246, 1, !dbg !18
  %248 = getelementptr inbounds %1, %1* %T_divide161, i64 0, i32 3, i32 1, !dbg !18
  %249 = load i8, i8* %248, align 1, !dbg !18
  %250 = icmp eq i8 %249, 32, !dbg !18
  %251 = getelementptr inbounds %1, %1* %T_divide161, i64 0, i32 3, i32 0, !dbg !18
  %252 = load i8, i8* %251, align 1, !dbg !18
  %253 = icmp eq i8 %252, 2, !dbg !18
  %254 = and i1 %250, %253, !dbg !18
  %255 = and i1 %247, %254, !dbg !18
  br i1 %255, label %assert_end131, label %assert_fail130, !dbg !18, !prof !19

assert_fail130:                                   ; preds = %assert_end129
  %256 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %256(i8* getelementptr inbounds ([251 x i8], [251 x i8]* @.str.45, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end131:                                    ; preds = %assert_end129
  %257 = load i64, i64* %default_function.T_divide.shape, align 8, !dbg !18, !tbaa !153
  %258 = trunc i64 %257 to i32, !dbg !18
  %259 = icmp eq i32 %258, 3, !dbg !18
  br i1 %259, label %assert_end133, label %assert_fail132, !dbg !18, !prof !19

assert_fail132:                                   ; preds = %assert_end131
  %260 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %260(i8* getelementptr inbounds ([203 x i8], [203 x i8]* @.str.46, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end133:                                    ; preds = %assert_end131
  %261 = getelementptr inbounds i64, i64* %default_function.T_divide.shape, i64 1, !dbg !18
  %262 = load i64, i64* %261, align 8, !dbg !18, !tbaa !163
  %263 = trunc i64 %262 to i32, !dbg !18
  %264 = icmp eq i32 %263, 4, !dbg !18
  br i1 %264, label %assert_end135, label %assert_fail134, !dbg !18, !prof !19

assert_fail134:                                   ; preds = %assert_end133
  %265 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %265(i8* getelementptr inbounds ([203 x i8], [203 x i8]* @.str.47, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end135:                                    ; preds = %assert_end133
  %266 = getelementptr inbounds i64, i64* %default_function.T_divide.shape, i64 2, !dbg !18
  %267 = load i64, i64* %266, align 8, !dbg !18, !tbaa !165
  %268 = trunc i64 %267 to i32, !dbg !18
  %269 = icmp eq i32 %268, 2, !dbg !18
  br i1 %269, label %assert_end137, label %assert_fail136, !dbg !18, !prof !19

assert_fail136:                                   ; preds = %assert_end135
  %270 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %270(i8* getelementptr inbounds ([203 x i8], [203 x i8]* @.str.48, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end137:                                    ; preds = %assert_end135
  %271 = getelementptr inbounds i64, i64* %default_function.T_divide.shape, i64 3, !dbg !18
  %272 = load i64, i64* %271, align 8, !dbg !18, !tbaa !168
  %273 = trunc i64 %272 to i32, !dbg !18
  %274 = icmp eq i32 %273, 10, !dbg !18
  br i1 %274, label %assert_end139, label %assert_fail138, !dbg !18, !prof !19

assert_fail138:                                   ; preds = %assert_end137
  %275 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %275(i8* getelementptr inbounds ([205 x i8], [205 x i8]* @.str.49, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end139:                                    ; preds = %assert_end137
  %276 = icmp eq i64* %default_function.T_divide.strides, null, !dbg !18
  br i1 %276, label %if_end141, label %if_then140, !dbg !18, !prof !64

if_then140:                                       ; preds = %assert_end139
  %277 = bitcast i64* %default_function.T_divide.strides to <4 x i64>*, !dbg !18
  %278 = load <4 x i64>, <4 x i64>* %277, align 8, !dbg !18, !tbaa !170
  %279 = trunc <4 x i64> %278 to <4 x i32>, !dbg !18
  %280 = icmp eq <4 x i32> %279, <i32 80, i32 20, i32 10, i32 1>, !dbg !18
  %rdx.shuf = shufflevector <4 x i1> %280, <4 x i1> undef, <4 x i32> <i32 2, i32 3, i32 undef, i32 undef>, !dbg !18
  %bin.rdx = and <4 x i1> %280, %rdx.shuf, !dbg !18
  %rdx.shuf170 = shufflevector <4 x i1> %bin.rdx, <4 x i1> undef, <4 x i32> <i32 1, i32 undef, i32 undef, i32 undef>, !dbg !18
  %bin.rdx171 = and <4 x i1> %bin.rdx, %rdx.shuf170, !dbg !18
  %281 = extractelement <4 x i1> %bin.rdx171, i32 0, !dbg !18
  br i1 %281, label %if_end141, label %assert_fail142, !dbg !18, !prof !19

if_end141:                                        ; preds = %assert_end139, %if_then140
  %282 = getelementptr inbounds %1, %1* %T_divide161, i64 0, i32 6, !dbg !18
  %283 = load i64, i64* %282, align 8, !dbg !18
  %284 = icmp eq i64 %283, 0, !dbg !18
  br i1 %284, label %assert_end145, label %assert_fail144, !dbg !18, !prof !19

assert_fail142:                                   ; preds = %if_then140
  %285 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %285(i8* getelementptr inbounds ([329 x i8], [329 x i8]* @.str.50, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_fail144:                                   ; preds = %if_end141
  %286 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %286(i8* getelementptr inbounds ([208 x i8], [208 x i8]* @.str.51, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end145:                                    ; preds = %if_end141
  %287 = getelementptr inbounds %1, %1* %T_divide161, i64 0, i32 1, i32 0, !dbg !18
  %288 = load i32, i32* %287, align 4, !dbg !18
  %289 = icmp eq i32 %288, 1, !dbg !18
  br i1 %289, label %assert_end147, label %assert_fail146, !dbg !18, !prof !19

assert_fail146:                                   ; preds = %assert_end145
  %290 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %290(i8* getelementptr inbounds ([188 x i8], [188 x i8]* @.str.52, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end147:                                    ; preds = %assert_end145
  %291 = getelementptr inbounds %1, %1* %T_divide161, i64 0, i32 1, i32 1, !dbg !18
  %292 = load i32, i32* %291, align 4, !dbg !18
  %293 = icmp eq i32 %dev_id, %292, !dbg !18
  br i1 %293, label %assert_end149, label %assert_fail148, !dbg !18, !prof !19

assert_fail148:                                   ; preds = %assert_end147
  %294 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !dbg !18, !tbaa !20
  tail call void %294(i8* getelementptr inbounds ([194 x i8], [194 x i8]* @.str.53, i64 0, i64 0)), !dbg !18
  ret i32 -1, !dbg !18

assert_end149:                                    ; preds = %assert_end147
  %295 = call fastcc i32 @default_function_compute_(i8* nonnull %stack_value, float* %T_divide_void_ptr169, i32* nonnull %stack_tcode155.sub, float* %data_void_ptr162, float* %moving_mean_void_ptr167, float* %moving_var_void_ptr168), !dbg !18
  ret i32 %295, !dbg !18
}

; Function Attrs: nounwind willreturn
declare void @llvm.assume(i1) #1

; Function Attrs: noinline
define internal fastcc i32 @default_function_compute_(i8* noalias %0, float* noalias align 64 %1, i32* noalias %2, float* noalias align 64 %3, float* noalias align 64 %4, float* noalias align 64 %5) unnamed_addr #2 {
entry:
  %6 = alloca i8*, align 8
  %7 = bitcast i8* %0 to %0*
  %8 = bitcast i8* %0 to float**
  store float* %1, float** %8, align 8
  %9 = getelementptr inbounds i8, i8* %0, i64 8
  %10 = bitcast i8* %9 to float**
  store float* %3, float** %10, align 8
  %11 = getelementptr inbounds i8, i8* %0, i64 16
  %12 = bitcast i8* %11 to float**
  store float* %4, float** %12, align 8
  %13 = getelementptr inbounds i8, i8* %0, i64 24
  %14 = bitcast i8* %13 to float**
  store float* %5, float** %14, align 8
  %15 = bitcast i32* %2 to <4 x i32>*
  store <4 x i32> <i32 3, i32 3, i32 3, i32 3>, <4 x i32>* %15, align 4, !tbaa !178
  %16 = getelementptr inbounds i8, i8* %0, i64 32
  %17 = bitcast i8* %16 to %0*
  %18 = getelementptr inbounds i32, i32* %2, i64 4
  %19 = load i32 (i8*, %0*, i32*, i32, %0*, i32*)*, i32 (i8*, %0*, i32*, i32, %0*, i32*)** @__TVMFuncCall, align 8, !tbaa !20
  %20 = load i8*, i8** @.tvm_func.default_function_kernel, align 8
  %21 = icmp eq i8* %20, null
  br i1 %21, label %handle_init, label %handle_init_end, !prof !64

handle_init:                                      ; preds = %entry
  %22 = load i8*, i8** @__tvm_module_ctx, align 8, !tbaa !20
  %23 = load i32 (i8*, i8*, i8**)*, i32 (i8*, i8*, i8**)** @__TVMBackendGetFuncFromEnv, align 8, !tbaa !20
  %24 = call i32 %23(i8* %22, i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.54, i64 0, i64 0), i8** nonnull %6)
  %25 = icmp eq i32 %24, 0
  br i1 %25, label %call_end, label %call_fail, !prof !19

handle_init_end:                                  ; preds = %entry, %call_end
  %26 = phi i8* [ %20, %entry ], [ %29, %call_end ]
  %27 = call i32 %19(i8* %26, %0* %7, i32* nonnull %2, i32 4, %0* nonnull %17, i32* nonnull %18)
  %28 = icmp eq i32 %27, 0
  br i1 %28, label %call_end2, label %call_fail, !prof !19

call_fail:                                        ; preds = %call_end2, %handle_init_end, %handle_init
  %merge = phi i32 [ %24, %handle_init ], [ %27, %handle_init_end ], [ 0, %call_end2 ]
  ret i32 %merge

call_end:                                         ; preds = %handle_init
  %29 = load i8*, i8** %6, align 8
  store i8* %29, i8** @.tvm_func.default_function_kernel, align 8
  br label %handle_init_end

call_end2:                                        ; preds = %handle_init_end
  %30 = bitcast i8* %16 to i64*
  %31 = load i64, i64* %30, align 8
  %kernel_error_code = trunc i64 %31 to i32
  %32 = icmp eq i32 %kernel_error_code, 0
  br i1 %32, label %call_fail, label %assert_fail, !prof !19

assert_fail:                                      ; preds = %call_end2
  %33 = load void (i8*)*, void (i8*)** @__TVMAPISetLastError, align 8, !tbaa !20
  call void %33(i8* getelementptr inbounds ([68 x i8], [68 x i8]* @.str.55, i64 0, i64 0))
  ret i32 -1
}

; Function Attrs: nounwind readnone
define weak dso_local i16 @__truncsfhf2(float %a0) local_unnamed_addr #3 section ".text.tvm.fp16.conv" {
b0:
  %v0 = bitcast float %a0 to i32
  %v1 = and i32 %v0, 2147483647
  %v2 = add nsw i32 %v1, -947912704
  %v3 = add nsw i32 %v1, -1199570944
  %v4 = icmp ult i32 %v2, %v3
  br i1 %v4, label %b1, label %b5

b1:                                               ; preds = %b0
  %v5 = lshr i32 %v0, 13
  %v6 = and i32 %v5, 65535
  %v7 = add nuw nsw i32 %v6, -114688
  %v8 = and i32 %v0, 8191
  %v9 = icmp ugt i32 %v8, 4096
  br i1 %v9, label %b2, label %b3

b2:                                               ; preds = %b1
  %v10 = add nuw nsw i32 %v6, -114687
  br label %b13

b3:                                               ; preds = %b1
  %v11 = icmp eq i32 %v8, 4096
  br i1 %v11, label %b4, label %b13

b4:                                               ; preds = %b3
  %v12 = and i32 %v7, 65535
  %v13 = and i32 %v5, 1
  %v14 = add nuw nsw i32 %v12, %v13
  br label %b13

b5:                                               ; preds = %b0
  %v15 = icmp ugt i32 %v1, 2139095040
  br i1 %v15, label %b6, label %b7

b6:                                               ; preds = %b5
  %v16 = lshr i32 %v0, 13
  %v17 = and i32 %v16, 511
  %v18 = or i32 %v17, 32256
  br label %b13

b7:                                               ; preds = %b5
  %v19 = icmp ugt i32 %v1, 1199570943
  br i1 %v19, label %b13, label %b8

b8:                                               ; preds = %b7
  %v20 = icmp ult i32 %v1, 754974720
  br i1 %v20, label %b13, label %b9

b9:                                               ; preds = %b8
  %v21 = lshr i32 %v1, 23
  %v22 = sub nsw i32 113, %v21
  %v23 = and i32 %v0, 8388607
  %v24 = or i32 %v23, 8388608
  %v25 = add nsw i32 %v21, -81
  %v26 = shl i32 %v24, %v25
  %v27 = icmp ne i32 %v26, 0
  %v28 = lshr i32 %v24, %v22
  %v29 = zext i1 %v27 to i32
  %v30 = lshr i32 %v28, 13
  %v31 = and i32 %v28, 8191
  %v32 = or i32 %v31, %v29
  %v33 = icmp ugt i32 %v32, 4096
  br i1 %v33, label %b10, label %b11

b10:                                              ; preds = %b9
  %v34 = add nuw nsw i32 %v30, 1
  br label %b13

b11:                                              ; preds = %b9
  %v35 = icmp eq i32 %v32, 4096
  br i1 %v35, label %b12, label %b13

b12:                                              ; preds = %b11
  %v36 = and i32 %v30, 1
  %v37 = add nuw nsw i32 %v36, %v30
  br label %b13

b13:                                              ; preds = %b12, %b11, %b10, %b8, %b7, %b6, %b4, %b3, %b2
  %v38 = phi i32 [ %v18, %b6 ], [ %v10, %b2 ], [ %v14, %b4 ], [ %v7, %b3 ], [ 31744, %b7 ], [ 0, %b8 ], [ %v34, %b10 ], [ %v37, %b12 ], [ %v30, %b11 ]
  %v39 = lshr i32 %v0, 16
  %v40 = and i32 %v39, 32768
  %v41 = or i32 %v38, %v40
  %vlast = trunc i32 %v41 to i16
  ret i16 %vlast
}

; Function Attrs: nounwind readnone
define weak dso_local float @__extendhfsf2(i16 %a0) local_unnamed_addr #3 section ".text.tvm.fp16.conv" {
b0:
  %v1 = and i16 %a0, 32767
  %v2 = zext i16 %v1 to i32
  %v3 = add nsw i16 %v1, -1024
  %v4 = icmp ult i16 %v3, 30720
  br i1 %v4, label %b1, label %b2

b1:                                               ; preds = %b0
  %v5 = shl nuw nsw i32 %v2, 13
  %v6 = add nuw nsw i32 %v5, 939524096
  br label %b6

b2:                                               ; preds = %b0
  %v7 = icmp ugt i16 %v1, 31743
  br i1 %v7, label %b3, label %b4

b3:                                               ; preds = %b2
  %v8 = shl nuw nsw i32 %v2, 13
  %v9 = or i32 %v8, 2139095040
  br label %b6

b4:                                               ; preds = %b2
  %v10 = icmp eq i16 %v1, 0
  br i1 %v10, label %b6, label %b5

b5:                                               ; preds = %b4
  %v11 = icmp ult i16 %v1, 256
  %v12 = lshr i32 %v2, 8
  %v13 = select i1 %v11, i32 %v2, i32 %v12
  %v14 = select i1 %v11, i32 32, i32 24
  %v15 = icmp ult i32 %v13, 16
  %v16 = lshr i32 %v13, 4
  %v17 = add nsw i32 %v14, -4
  %v18 = select i1 %v15, i32 %v13, i32 %v16
  %v19 = select i1 %v15, i32 %v14, i32 %v17
  %v20 = icmp ult i32 %v18, 4
  %v21 = lshr i32 %v18, 2
  %v22 = add nsw i32 %v19, -2
  %v23 = select i1 %v20, i32 %v18, i32 %v21
  %v24 = select i1 %v20, i32 %v19, i32 %v22
  %v25 = icmp ult i32 %v23, 2
  %v26 = sub nsw i32 0, %v23
  %v27 = select i1 %v25, i32 %v26, i32 -2
  %v28 = add nsw i32 %v27, %v24
  %v29 = add nsw i32 %v28, -8
  %v30 = shl i32 %v2, %v29
  %v31 = xor i32 %v30, 8388608
  %v32 = shl i32 %v28, 23
  %v33 = sub i32 1124073472, %v32
  %v34 = or i32 %v31, %v33
  br label %b6

b6:                                               ; preds = %b5, %b4, %b3, %b1
  %v35 = phi i32 [ %v6, %b1 ], [ %v9, %b3 ], [ %v34, %b5 ], [ 0, %b4 ]
  %v36 = and i16 %a0, -32768
  %v37 = zext i16 %v36 to i32
  %v38 = shl nuw i32 %v37, 16
  %v39 = or i32 %v35, %v38
  %v40 = bitcast i32 %v39 to float
  ret float %v40
}

; Function Attrs: nounwind readnone speculatable willreturn
declare void @llvm.dbg.value(metadata, metadata, metadata) #4

attributes #0 = { "target-cpu"="generic" }
attributes #1 = { nounwind willreturn }
attributes #2 = { noinline "target-cpu"="generic" }
attributes #3 = { nounwind readnone "target-cpu"="generic" "target-features" }
attributes #4 = { nounwind readnone speculatable willreturn }

!llvm.dbg.cu = !{!0}
!llvm.module.flags = !{!3, !4}

!0 = distinct !DICompileUnit(language: DW_LANG_C, file: !1, producer: "TVM", isOptimized: false, runtimeVersion: 0, emissionKind: FullDebug, enums: !2)
!1 = !DIFile(filename: "main.tir", directory: ".")
!2 = !{}
!3 = !{i32 2, !"tvm_target", !"llvm -mtriple=x86_64-pc-linux-gnu"}
!4 = !{i32 4, !"Debug Info Version", i32 3}
!5 = distinct !DISubprogram(name: "main.tir", scope: !1, file: !1, type: !6, spFlags: DISPFlagLocalToUnit | DISPFlagDefinition | DISPFlagOptimized, unit: !0, retainedNodes: !11)
!6 = !DISubroutineType(types: !7)
!7 = !{!8, !9, !10, !8, !9, !10, !9}
!8 = !DIBasicType(name: "int32", size: 32, encoding: DW_ATE_signed)
!9 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: null)
!10 = !DIDerivedType(tag: DW_TAG_pointer_type, baseType: !8)
!11 = !{!12, !13, !14, !15, !16, !17}
!12 = !DILocalVariable(name: "arg1", arg: 1, scope: !5, file: !1, type: !9)
!13 = !DILocalVariable(name: "arg2", arg: 2, scope: !5, file: !1, type: !10)
!14 = !DILocalVariable(name: "arg3", arg: 3, scope: !5, file: !1, type: !8)
!15 = !DILocalVariable(name: "arg4", arg: 4, scope: !5, file: !1, type: !9)
!16 = !DILocalVariable(name: "arg5", arg: 5, scope: !5, file: !1, type: !10)
!17 = !DILocalVariable(name: "arg6", arg: 6, scope: !5, file: !1, type: !9)
!18 = !DILocation(line: 0, scope: !5)
!19 = !{!"branch_weights", i32 1048576, i32 1}
!20 = !{!21, !21, i64 0}
!21 = !{!"ctx_ptr", !22, i64 0}
!22 = !{!"tvm-tbaa"}
!23 = !{!24, !24, i64 0}
!24 = !{!"0x2553520.w4.b0", !25, i64 0}
!25 = !{!"0x2553520.w8.b0", !26, i64 0}
!26 = !{!"0x2553520.w16.b0", !27, i64 0}
!27 = !{!"0x2553520.w32.b0", !28, i64 0}
!28 = !{!"0x2553520.w64.b0", !29, i64 0}
!29 = !{!"0x2553520.w128.b0", !30, i64 0}
!30 = !{!"0x2553520.w256.b0", !31, i64 0}
!31 = !{!"0x2553520.w512.b0", !32, i64 0}
!32 = !{!"0x2553520.w1024.b0", !33, i64 0}
!33 = !{!"0x2553520", !22, i64 0}
!34 = !{!35, !35, i64 0}
!35 = !{!"0x2553520.w4.b4", !25, i64 0}
!36 = !{!37, !37, i64 0}
!37 = !{!"0x2553520.w4.b8", !38, i64 0}
!38 = !{!"0x2553520.w8.b8", !26, i64 0}
!39 = !{!40, !40, i64 0}
!40 = !{!"0x2553520.w4.b12", !38, i64 0}
!41 = !{!42, !42, i64 0}
!42 = !{!"0x2553520.w4.b16", !43, i64 0}
!43 = !{!"0x2553520.w8.b16", !44, i64 0}
!44 = !{!"0x2553520.w16.b16", !27, i64 0}
!45 = !{!46, !46, i64 0}
!46 = !{!"0x2553520.w4.b20", !43, i64 0}
!47 = !{!48, !48, i64 0}
!48 = !{!"0x42db4f0.w8.b0", !49, i64 0}
!49 = !{!"0x42db4f0.w16.b0", !50, i64 0}
!50 = !{!"0x42db4f0.w32.b0", !51, i64 0}
!51 = !{!"0x42db4f0.w64.b0", !52, i64 0}
!52 = !{!"0x42db4f0.w128.b0", !53, i64 0}
!53 = !{!"0x42db4f0.w256.b0", !54, i64 0}
!54 = !{!"0x42db4f0.w512.b0", !55, i64 0}
!55 = !{!"0x42db4f0.w1024.b0", !56, i64 0}
!56 = !{!"0x42db4f0", !22, i64 0}
!57 = !{!58, !58, i64 0}
!58 = !{!"0x42db4f0.w8.b8", !49, i64 0}
!59 = !{!60, !60, i64 0}
!60 = !{!"0x42db4f0.w8.b16", !61, i64 0}
!61 = !{!"0x42db4f0.w16.b16", !50, i64 0}
!62 = !{!63, !63, i64 0}
!63 = !{!"0x42db4f0.w8.b24", !61, i64 0}
!64 = !{!"branch_weights", i32 1, i32 1048576}
!65 = !{!66, !66, i64 0}
!66 = !{!"0x46953c0.w32.b0", !67, i64 0}
!67 = !{!"0x46953c0.w64.b0", !68, i64 0}
!68 = !{!"0x46953c0.w128.b0", !69, i64 0}
!69 = !{!"0x46953c0.w256.b0", !70, i64 0}
!70 = !{!"0x46953c0.w512.b0", !71, i64 0}
!71 = !{!"0x46953c0.w1024.b0", !72, i64 0}
!72 = !{!"0x46953c0", !22, i64 0}
!73 = !{!74, !74, i64 0}
!74 = !{!"0x457cd30.w8.b0", !75, i64 0}
!75 = !{!"0x457cd30.w16.b0", !76, i64 0}
!76 = !{!"0x457cd30.w32.b0", !77, i64 0}
!77 = !{!"0x457cd30.w64.b0", !78, i64 0}
!78 = !{!"0x457cd30.w128.b0", !79, i64 0}
!79 = !{!"0x457cd30.w256.b0", !80, i64 0}
!80 = !{!"0x457cd30.w512.b0", !81, i64 0}
!81 = !{!"0x457cd30.w1024.b0", !82, i64 0}
!82 = !{!"0x457cd30", !22, i64 0}
!83 = !{!84, !84, i64 0}
!84 = !{!"0x45a1440.w8.b0", !85, i64 0}
!85 = !{!"0x45a1440.w16.b0", !86, i64 0}
!86 = !{!"0x45a1440.w32.b0", !87, i64 0}
!87 = !{!"0x45a1440.w64.b0", !88, i64 0}
!88 = !{!"0x45a1440.w128.b0", !89, i64 0}
!89 = !{!"0x45a1440.w256.b0", !90, i64 0}
!90 = !{!"0x45a1440.w512.b0", !91, i64 0}
!91 = !{!"0x45a1440.w1024.b0", !92, i64 0}
!92 = !{!"0x45a1440", !22, i64 0}
!93 = !{!94, !94, i64 0}
!94 = !{!"0x445f120.w8.b0", !95, i64 0}
!95 = !{!"0x445f120.w16.b0", !96, i64 0}
!96 = !{!"0x445f120.w32.b0", !97, i64 0}
!97 = !{!"0x445f120.w64.b0", !98, i64 0}
!98 = !{!"0x445f120.w128.b0", !99, i64 0}
!99 = !{!"0x445f120.w256.b0", !100, i64 0}
!100 = !{!"0x445f120.w512.b0", !101, i64 0}
!101 = !{!"0x445f120.w1024.b0", !102, i64 0}
!102 = !{!"0x445f120", !22, i64 0}
!103 = !{!104, !104, i64 0}
!104 = !{!"0x4314050.w8.b0", !105, i64 0}
!105 = !{!"0x4314050.w16.b0", !106, i64 0}
!106 = !{!"0x4314050.w32.b0", !107, i64 0}
!107 = !{!"0x4314050.w64.b0", !108, i64 0}
!108 = !{!"0x4314050.w128.b0", !109, i64 0}
!109 = !{!"0x4314050.w256.b0", !110, i64 0}
!110 = !{!"0x4314050.w512.b0", !111, i64 0}
!111 = !{!"0x4314050.w1024.b0", !112, i64 0}
!112 = !{!"0x4314050", !22, i64 0}
!113 = !{!114, !114, i64 0}
!114 = !{!"0x4b89670.w8.b0", !115, i64 0}
!115 = !{!"0x4b89670.w16.b0", !116, i64 0}
!116 = !{!"0x4b89670.w32.b0", !117, i64 0}
!117 = !{!"0x4b89670.w64.b0", !118, i64 0}
!118 = !{!"0x4b89670.w128.b0", !119, i64 0}
!119 = !{!"0x4b89670.w256.b0", !120, i64 0}
!120 = !{!"0x4b89670.w512.b0", !121, i64 0}
!121 = !{!"0x4b89670.w1024.b0", !122, i64 0}
!122 = !{!"0x4b89670", !22, i64 0}
!123 = !{!124, !124, i64 0}
!124 = !{!"0x45e6060.w8.b0", !125, i64 0}
!125 = !{!"0x45e6060.w16.b0", !126, i64 0}
!126 = !{!"0x45e6060.w32.b0", !127, i64 0}
!127 = !{!"0x45e6060.w64.b0", !128, i64 0}
!128 = !{!"0x45e6060.w128.b0", !129, i64 0}
!129 = !{!"0x45e6060.w256.b0", !130, i64 0}
!130 = !{!"0x45e6060.w512.b0", !131, i64 0}
!131 = !{!"0x45e6060.w1024.b0", !132, i64 0}
!132 = !{!"0x45e6060", !22, i64 0}
!133 = !{!134, !134, i64 0}
!134 = !{!"0x4ab9070.w8.b0", !135, i64 0}
!135 = !{!"0x4ab9070.w16.b0", !136, i64 0}
!136 = !{!"0x4ab9070.w32.b0", !137, i64 0}
!137 = !{!"0x4ab9070.w64.b0", !138, i64 0}
!138 = !{!"0x4ab9070.w128.b0", !139, i64 0}
!139 = !{!"0x4ab9070.w256.b0", !140, i64 0}
!140 = !{!"0x4ab9070.w512.b0", !141, i64 0}
!141 = !{!"0x4ab9070.w1024.b0", !142, i64 0}
!142 = !{!"0x4ab9070", !22, i64 0}
!143 = !{!144, !144, i64 0}
!144 = !{!"0x42e3d40.w8.b0", !145, i64 0}
!145 = !{!"0x42e3d40.w16.b0", !146, i64 0}
!146 = !{!"0x42e3d40.w32.b0", !147, i64 0}
!147 = !{!"0x42e3d40.w64.b0", !148, i64 0}
!148 = !{!"0x42e3d40.w128.b0", !149, i64 0}
!149 = !{!"0x42e3d40.w256.b0", !150, i64 0}
!150 = !{!"0x42e3d40.w512.b0", !151, i64 0}
!151 = !{!"0x42e3d40.w1024.b0", !152, i64 0}
!152 = !{!"0x42e3d40", !22, i64 0}
!153 = !{!154, !154, i64 0}
!154 = !{!"0x4ab85e0.w8.b0", !155, i64 0}
!155 = !{!"0x4ab85e0.w16.b0", !156, i64 0}
!156 = !{!"0x4ab85e0.w32.b0", !157, i64 0}
!157 = !{!"0x4ab85e0.w64.b0", !158, i64 0}
!158 = !{!"0x4ab85e0.w128.b0", !159, i64 0}
!159 = !{!"0x4ab85e0.w256.b0", !160, i64 0}
!160 = !{!"0x4ab85e0.w512.b0", !161, i64 0}
!161 = !{!"0x4ab85e0.w1024.b0", !162, i64 0}
!162 = !{!"0x4ab85e0", !22, i64 0}
!163 = !{!164, !164, i64 0}
!164 = !{!"0x4ab85e0.w8.b8", !155, i64 0}
!165 = !{!166, !166, i64 0}
!166 = !{!"0x4ab85e0.w8.b16", !167, i64 0}
!167 = !{!"0x4ab85e0.w16.b16", !156, i64 0}
!168 = !{!169, !169, i64 0}
!169 = !{!"0x4ab85e0.w8.b24", !167, i64 0}
!170 = !{!171, !171, i64 0}
!171 = !{!"0x4225490.w32.b0", !172, i64 0}
!172 = !{!"0x4225490.w64.b0", !173, i64 0}
!173 = !{!"0x4225490.w128.b0", !174, i64 0}
!174 = !{!"0x4225490.w256.b0", !175, i64 0}
!175 = !{!"0x4225490.w512.b0", !176, i64 0}
!176 = !{!"0x4225490.w1024.b0", !177, i64 0}
!177 = !{!"0x4225490", !22, i64 0}
!178 = !{!179, !179, i64 0}
!179 = !{!"0x2541b30.w16.b0", !180, i64 0}
!180 = !{!"0x2541b30.w32.b0", !181, i64 0}
!181 = !{!"0x2541b30.w64.b0", !182, i64 0}
!182 = !{!"0x2541b30.w128.b0", !183, i64 0}
!183 = !{!"0x2541b30.w256.b0", !184, i64 0}
!184 = !{!"0x2541b30.w512.b0", !185, i64 0}
!185 = !{!"0x2541b30.w1024.b0", !186, i64 0}
!186 = !{!"0x2541b30", !22, i64 0}
