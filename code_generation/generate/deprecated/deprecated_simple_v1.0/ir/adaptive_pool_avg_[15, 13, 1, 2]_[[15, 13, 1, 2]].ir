# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(data: T.Buffer((15, 13, 1, 2), "float32"), adaptive_pool_avg: T.Buffer((15, 13, 8, 8), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        for ax0_ax1_fused in T.parallel(195):
            adaptive_pool_sum = T.allocate([8], "float32", "global")
            for ax2 in range(8):
                adaptive_pool_sum_1 = T.Buffer((8,), data=adaptive_pool_sum, align=32)
                for ax3 in range(8):
                    adaptive_pool_sum_1[ax3] = T.float32(0)
                    for rv0, rv1 in T.grid(T.Let(T.Select((ax2 + 1) % 8 == 0, cse_var_1, cse_var_1 + 1), where={cse_var_1: (ax2 + 1) // 8}), T.Let(T.Select((ax3 * 2 + 2) % 8 == 0, cse_var_2, cse_var_2 + 1) - ax3 // 4, where={cse_var_2: (ax3 + 1) // 4})):
                        cse_var_1 = T.int32()
                        cse_var_2 = T.int32()
                        data_1 = T.Buffer((390,), data=data.data)
                        adaptive_pool_sum_1[ax3] = adaptive_pool_sum_1[ax3] + data_1[ax0_ax1_fused * 2 + rv0 * 2 + ax3 // 4 + rv1]
                for ax3 in range(8):
                    cse_var_5: T.int32 = ax2 + 1
                    cse_var_4: T.int32 = cse_var_5 // 8
                    cse_var_3: T.int32 = (ax3 + 1) // 4
                    adaptive_pool_avg_1 = T.Buffer((12480,), data=adaptive_pool_avg.data)
                    adaptive_pool_avg_1[ax0_ax1_fused * 64 + ax2 * 8 + ax3] = adaptive_pool_sum_1[ax3] / (T.Cast("float32", T.Select(cse_var_5 % 8 == 0, cse_var_4, cse_var_4 + 1)) * T.Cast("float32", T.Select((ax3 * 2 + 2) % 8 == 0, cse_var_3, cse_var_3 + 1) - ax3 // 4))