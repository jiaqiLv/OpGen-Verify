# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(data: T.Buffer((16, 8, 7), "float32"), pool_max: T.Buffer((16, 8, 4), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        for ax0 in T.parallel(16):
            pad_temp = T.allocate([72], "float32", "global")
            pad_temp_1 = T.Buffer((72,), data=pad_temp)
            for ax1, ax2_s in T.grid(8, 9):
                data_1 = T.Buffer((896,), data=data.data)
                pad_temp_1[ax1 * 9 + ax2_s] = T.if_then_else(1 <= ax2_s and ax2_s < 8, data_1[ax0 * 56 + ax1 * 7 + ax2_s - 1], T.float32(-3.4028234663852886e+38))
            for ax1, ax2 in T.grid(8, 4):
                pool_max_1 = T.Buffer((512,), data=pool_max.data)
                pool_max_1[ax0 * 32 + ax1 * 4 + ax2] = T.float32(-3.4028234663852886e+38)
                for rv0 in range(3):
                    cse_var_1: T.int32 = ax0 * 32 + ax1 * 4 + ax2
                    pool_max_1[cse_var_1] = T.max(pool_max_1[cse_var_1], pad_temp_1[ax1 * 9 + ax2 * 2 + rv0])