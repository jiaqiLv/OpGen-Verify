# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(data: T.Buffer((13, 19, 16, 3), "float32"), adaptive_pool_max: T.Buffer((13, 19, 8, 8), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        for ax0 in T.parallel(13):
            for ax1, ax2, ax3 in T.grid(19, 8, 8):
                adaptive_pool_max_1 = T.Buffer((15808,), data=adaptive_pool_max.data)
                adaptive_pool_max_1[ax0 * 1216 + ax1 * 64 + ax2 * 8 + ax3] = T.float32(-3.4028234663852886e+38)
                for rv0, rv1 in T.grid(2, T.Let(T.Let(T.Let(T.Select(cse_var_3 % 8 == 0, cse_var_1, cse_var_1 + 1) - cse_var_2 // 8, where={cse_var_1: cse_var_3 // 8}), where={cse_var_3: cse_var_2 + 3}), where={cse_var_2: ax3 * 3})):
                    cse_var_2 = T.int32()
                    cse_var_3 = T.int32()
                    cse_var_1 = T.int32()
                    cse_var_4: T.int32 = ax0 * 1216 + ax1 * 64 + ax2 * 8 + ax3
                    data_1 = T.Buffer((11856,), data=data.data)
                    adaptive_pool_max_1[cse_var_4] = T.max(adaptive_pool_max_1[cse_var_4], data_1[ax0 * 912 + ax1 * 48 + ax2 * 6 + rv0 * 3 + ax3 * 3 // 8 + rv1])