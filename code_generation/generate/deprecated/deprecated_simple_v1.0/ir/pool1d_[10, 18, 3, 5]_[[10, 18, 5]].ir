# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(data: T.Buffer((10, 18, 5), "float32"), pool_max: T.Buffer((10, 18, 3), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        for ax0 in T.parallel(10):
            pad_temp = T.allocate([3], "float32", "global")
            for ax1, ax2 in T.grid(18, 3):
                pad_temp_1 = T.Buffer((3,), data=pad_temp, align=8)
                for ax1_ax2_fused_s in range(3):
                    cse_var_1: T.int32 = ax2 * 2
                    data_1 = T.Buffer((900,), data=data.data)
                    pad_temp_1[ax1_ax2_fused_s] = T.if_then_else(1 <= cse_var_1 + ax1_ax2_fused_s and ax1_ax2_fused_s // 2 + ax2 < 3, data_1[ax0 * 90 + ax1 * 5 + cse_var_1 + ax1_ax2_fused_s - 1], T.float32(-3.4028234663852886e+38))
                pool_max_1 = T.Buffer((540,), data=pool_max.data)
                pool_max_1[ax0 * 54 + ax1 * 3 + ax2] = T.float32(-3.4028234663852886e+38)
                for rv0 in range(3):
                    cse_var_2: T.int32 = ax0 * 54 + ax1 * 3 + ax2
                    pool_max_1[cse_var_2] = T.max(pool_max_1[cse_var_2], pad_temp_1[rv0])