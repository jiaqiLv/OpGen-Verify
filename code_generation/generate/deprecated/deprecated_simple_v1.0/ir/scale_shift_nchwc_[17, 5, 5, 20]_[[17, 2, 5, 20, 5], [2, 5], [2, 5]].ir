# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(data: T.Buffer((17, 2, 5, 20, 5), "float32"), Scale: T.Buffer((2, 5), "float32"), Shift: T.Buffer((2, 5), "float32"), ScaleShift: T.Buffer((17, 2, 5, 20, 5), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        for b_outer_outer_outer_cc_outer_outer_outer_fused_i_outer_outer_outer_fused_j_outer_outer_outer_fused_cb_outer_outer_outer_fused in T.parallel(850):
            for j_outer_outer_inner, cc_inner in T.grid(10, 2):
                cse_var_3: T.int32 = b_outer_outer_outer_cc_outer_outer_outer_fused_i_outer_outer_outer_fused_j_outer_outer_outer_fused_cb_outer_outer_outer_fused % 5
                cse_var_2: T.int32 = cc_inner * 5 + cse_var_3
                cse_var_1: T.int32 = b_outer_outer_outer_cc_outer_outer_outer_fused_i_outer_outer_outer_fused_j_outer_outer_outer_fused_cb_outer_outer_outer_fused // 50 * 1000 + cc_inner * 500 + b_outer_outer_outer_cc_outer_outer_outer_fused_i_outer_outer_outer_fused_j_outer_outer_outer_fused_cb_outer_outer_outer_fused % 50 // 5 * 50 + j_outer_outer_inner * 5 + cse_var_3
                ScaleShift_1 = T.Buffer((17000,), data=ScaleShift.data)
                data_1 = T.Buffer((17000,), data=data.data)
                Scale_1 = T.Buffer((10,), data=Scale.data)
                Shift_1 = T.Buffer((10,), data=Shift.data)
                ScaleShift_1[cse_var_1] = data_1[cse_var_1] * Scale_1[cse_var_2] + Shift_1[cse_var_2]