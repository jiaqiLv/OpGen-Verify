# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(data: T.Buffer((8, 14, 15, 9), "float32"), compute: T.Buffer((8, 14, 15, 9), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        for i0_outer_outer_outer_i1_outer_outer_outer_fused_i2_outer_outer_outer_fused_i3_outer_outer_outer_fused_i0_outer_outer_inner_fused_i1_outer_outer_inner_fused in T.parallel(72):
            T_softmax_maxelem = T.allocate([210], "float32", "global")
            compute_1 = T.allocate([210], "float32", "global")
            T_softmax_maxelem_1 = T.Buffer((210,), data=T_softmax_maxelem)
            data_1 = T.Buffer((15120,), data=data.data)
            for i1, i2 in T.grid(14, 15):
                T_softmax_maxelem_1[i1 * 15 + i2] = T.float32(-3.4028234663852886e+38)
                for k in range(9):
                    cse_var_1: T.int32 = i1 * 15 + i2
                    T_softmax_maxelem_1[cse_var_1] = T.max(T_softmax_maxelem_1[cse_var_1], data_1[i0_outer_outer_outer_i1_outer_outer_outer_fused_i2_outer_outer_outer_fused_i3_outer_outer_outer_fused_i0_outer_outer_inner_fused_i1_outer_outer_inner_fused // 9 * 1890 + i1 * 135 + i2 * 9 + k])
            compute_2 = T.Buffer((210,), data=compute_1)
            for i1, i2 in T.grid(14, 15):
                compute_2[i1 * 15 + i2] = T.float32(0)
                for k in range(9):
                    cse_var_2: T.int32 = i1 * 15 + i2
                    compute_2[cse_var_2] = compute_2[cse_var_2] + T.exp(data_1[i0_outer_outer_outer_i1_outer_outer_outer_fused_i2_outer_outer_outer_fused_i3_outer_outer_outer_fused_i0_outer_outer_inner_fused_i1_outer_outer_inner_fused // 9 * 1890 + i1 * 135 + i2 * 9 + k] - T_softmax_maxelem_1[cse_var_2])
            for i2_outer_inner, i1_inner in T.grid(15, 14):
                cse_var_4: T.int32 = i1_inner * 15 + i2_outer_inner
                cse_var_3: T.int32 = i0_outer_outer_outer_i1_outer_outer_outer_fused_i2_outer_outer_outer_fused_i3_outer_outer_outer_fused_i0_outer_outer_inner_fused_i1_outer_outer_inner_fused // 9 * 1890 + i1_inner * 135 + i2_outer_inner * 9 + i0_outer_outer_outer_i1_outer_outer_outer_fused_i2_outer_outer_outer_fused_i3_outer_outer_outer_fused_i0_outer_outer_inner_fused_i1_outer_outer_inner_fused % 9
                compute_3 = T.Buffer((15120,), data=compute.data)
                compute_3[cse_var_3] = data_1[cse_var_3] - T_softmax_maxelem_1[cse_var_4] - T.log(compute_2[cse_var_4])