# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(data: T.Buffer((6, 14, 3, 13), "float32"), T_softmax_norm: T.Buffer((6, 14, 3, 13), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        for i0 in T.parallel(6):
            T_softmax_exp = T.allocate([546], "float32", "global")
            T_softmax_maxelem = T.allocate([1], "float32", "global")
            T_softmax_expsum = T.allocate([1], "float32", "global")
            T_softmax_exp_1 = T.Buffer((546,), data=T_softmax_exp)
            for i1, i2, i3 in T.grid(14, 3, 13):
                cse_var_2: T.int32 = i1 * 39
                cse_var_1: T.int32 = i2 * 13
                T_softmax_maxelem_1 = T.Buffer((1,), data=T_softmax_maxelem, align=4)
                T_softmax_maxelem_1[0] = T.float32(-3.4028234663852886e+38)
                data_1 = T.Buffer((3276,), data=data.data)
                for k in range(13):
                    T_softmax_maxelem_1[0] = T.max(T_softmax_maxelem_1[0], data_1[i0 * 546 + cse_var_2 + cse_var_1 + k])
                T_softmax_exp_1[cse_var_2 + cse_var_1 + i3] = T.exp(data_1[i0 * 546 + cse_var_2 + cse_var_1 + i3] - T_softmax_maxelem_1[0])
            for i1, i2, i3 in T.grid(14, 3, 13):
                cse_var_4: T.int32 = i1 * 39
                cse_var_3: T.int32 = i2 * 13
                T_softmax_expsum_1 = T.Buffer((1,), data=T_softmax_expsum, align=4)
                T_softmax_expsum_1[0] = T.float32(0)
                for k in range(13):
                    T_softmax_expsum_1[0] = T_softmax_expsum_1[0] + T_softmax_exp_1[cse_var_4 + cse_var_3 + k]
                T_softmax_norm_1 = T.Buffer((3276,), data=T_softmax_norm.data)
                T_softmax_norm_1[i0 * 546 + cse_var_4 + cse_var_3 + i3] = T_softmax_exp_1[cse_var_4 + cse_var_3 + i3] / T_softmax_expsum_1[0]