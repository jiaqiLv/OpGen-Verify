# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(data: T.Buffer((6, 5, 11, 17), "float32"), Scale: T.Buffer((5,), "float32"), Shift: T.Buffer((5,), "float32"), ScaleShift: T.Buffer((6, 5, 11, 17), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        for b_outer_outer_outer_c_outer_outer_outer_fused_i_outer_outer_outer_fused_j_outer_outer_outer_fused_b_outer_outer_inner_fused in T.parallel(6):
            for j_outer_outer_inner, i_outer_inner, c_inner in T.grid(17, 11, 5):
                cse_var_1: T.int32 = b_outer_outer_outer_c_outer_outer_outer_fused_i_outer_outer_outer_fused_j_outer_outer_outer_fused_b_outer_outer_inner_fused * 935 + c_inner * 187 + i_outer_inner * 17 + j_outer_outer_inner
                ScaleShift_1 = T.Buffer((5610,), data=ScaleShift.data)
                data_1 = T.Buffer((5610,), data=data.data)
                ScaleShift_1[cse_var_1] = data_1[cse_var_1] * Scale[c_inner] + Shift[c_inner]