# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(data: T.Buffer((6, 15, 18, 1), "float32"), weight: T.Buffer((1,), "float32"), T_cast: T.Buffer((6, 15, 18, 1), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        for ax0 in T.parallel(6):
            T_multiply_red = T.allocate([18], "float32", "global")
            T_multiply_red_1 = T.Buffer((18,), data=T_multiply_red)
            data_1 = T.Buffer((1620,), data=data.data)
            for ax1 in range(18):
                T_multiply_red_1[ax1] = T.float32(0)
                for k1 in range(15):
                    cse_var_1: T.int32 = ax0 * 270 + k1 * 18 + ax1
                    T_multiply_red_1[ax1] = T_multiply_red_1[ax1] + data_1[cse_var_1] * data_1[cse_var_1]
            for ax1, ax2 in T.grid(15, 18):
                cse_var_2: T.int32 = ax0 * 270 + ax1 * 18 + ax2
                T_cast_1 = T.Buffer((1620,), data=T_cast.data)
                T_cast_1[cse_var_2] = data_1[cse_var_2] * weight[ax1] * T.rsqrt(T_multiply_red_1[ax2] * T.float32(0.066666666666666666) + T.float32(1.0000000000000001e-05))