# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(data: T.Buffer((13, 15, 9, 27), "float32"), pool_max: T.Buffer((13, 15, 5, 14), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        for ax0_ax1_fused_ax2_fused in T.parallel(975):
            pad_temp = T.allocate([9], "float32", "global")
            for ax3 in range(14):
                pad_temp_1 = T.Buffer((9,), data=pad_temp, align=32)
                for ax2_ax3_fused_s in range(9):
                    cse_var_4: T.int32 = ax0_ax1_fused_ax2_fused % 5
                    cse_var_3: T.int32 = ax2_ax3_fused_s // 3
                    cse_var_2: T.int32 = ax3 * 2
                    cse_var_1: T.int32 = ax2_ax3_fused_s % 3
                    data_1 = T.Buffer((47385,), data=data.data)
                    pad_temp_1[ax2_ax3_fused_s] = T.if_then_else(1 <= cse_var_4 * 2 + cse_var_3 and ax2_ax3_fused_s // 6 + cse_var_4 < 5 and 1 <= cse_var_2 + cse_var_1 and cse_var_1 // 2 + ax3 < 14, data_1[ax0_ax1_fused_ax2_fused // 5 * 243 + cse_var_4 * 54 + cse_var_3 * 27 + cse_var_2 + cse_var_1 - 28], T.float32(-3.4028234663852886e+38))
                pool_max_1 = T.Buffer((13650,), data=pool_max.data)
                pool_max_1[ax0_ax1_fused_ax2_fused * 14 + ax3] = T.float32(-3.4028234663852886e+38)
                for rv0, rv1 in T.grid(3, 3):
                    cse_var_5: T.int32 = ax0_ax1_fused_ax2_fused * 14 + ax3
                    pool_max_1[cse_var_5] = T.max(pool_max_1[cse_var_5], pad_temp_1[rv0 * 3 + rv1])