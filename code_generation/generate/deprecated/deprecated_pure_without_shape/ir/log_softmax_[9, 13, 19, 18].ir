# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(data: T.Buffer((9, 13, 19, 18), "float32"), compute: T.Buffer((9, 13, 19, 18), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        T_softmax_maxelem = T.allocate([2223], "float32", "global")
        compute_1 = T.allocate([2223], "float32", "global")
        T_softmax_maxelem_1 = T.Buffer((2223,), data=T_softmax_maxelem)
        data_1 = T.Buffer((40014,), data=data.data)
        for i0, i1, i2 in T.grid(9, 13, 19):
            T_softmax_maxelem_1[i0 * 247 + i1 * 19 + i2] = T.float32(-3.4028234663852886e+38)
            for k in range(18):
                cse_var_1: T.int32 = i0 * 247 + i1 * 19 + i2
                T_softmax_maxelem_1[cse_var_1] = T.max(T_softmax_maxelem_1[cse_var_1], data_1[i0 * 4446 + i1 * 342 + i2 * 18 + k])
        compute_2 = T.Buffer((2223,), data=compute_1)
        for i0, i1, i2 in T.grid(9, 13, 19):
            compute_2[i0 * 247 + i1 * 19 + i2] = T.float32(0)
            for k in range(18):
                cse_var_2: T.int32 = i0 * 247 + i1 * 19 + i2
                compute_2[cse_var_2] = compute_2[cse_var_2] + T.exp(data_1[i0 * 4446 + i1 * 342 + i2 * 18 + k] - T_softmax_maxelem_1[cse_var_2])
        for i3_outer_outer_inner, i0_outer_inner, i2_outer_inner, i3_outer_inner, i1_inner in T.grid(6, 9, 19, 3, 13):
            cse_var_4: T.int32 = i0_outer_inner * 247 + i1_inner * 19 + i2_outer_inner
            cse_var_3: T.int32 = i0_outer_inner * 4446 + i1_inner * 342 + i2_outer_inner * 18 + i3_outer_outer_inner * 3 + i3_outer_inner
            compute_3 = T.Buffer((40014,), data=compute.data)
            compute_3[cse_var_3] = data_1[cse_var_3] - T_softmax_maxelem_1[cse_var_4] - T.log(compute_2[cse_var_4])