# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(data: T.Buffer((18, 20, 8, 20), "float32"), T_divide: T.Buffer((18, 20, 8, 20), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        for ax0_ax1_fused in T.parallel(360):
            tensor = T.allocate([20], "float32", "global")
            for ax2 in range(8):
                tensor_1 = T.Buffer((20,), data=tensor)
                data_1 = T.Buffer((57600,), data=data.data)
                for ax3 in range(20):
                    cse_var_1: T.int32 = ax0_ax1_fused * 160 + ax2 * 20 + ax3
                    tensor_1[ax3] = T.float32(0)
                    tensor_1[ax3] = tensor_1[ax3] + data_1[cse_var_1] * data_1[cse_var_1]
                for ax3 in range(20):
                    cse_var_2: T.int32 = ax0_ax1_fused * 160 + ax2 * 20 + ax3
                    T_divide_1 = T.Buffer((57600,), data=T_divide.data)
                    T_divide_1[cse_var_2] = data_1[cse_var_2] / T.pow(T.float32(2) + T.float32(9.9999997473787516e-05) * tensor_1[ax3], T.float32(0.75))