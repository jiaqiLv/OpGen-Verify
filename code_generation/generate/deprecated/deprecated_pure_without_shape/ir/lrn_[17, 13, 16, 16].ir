# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(data: T.Buffer((17, 13, 16, 16), "float32"), T_divide: T.Buffer((17, 13, 16, 16), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        for ax0 in T.parallel(17):
            tensor = T.allocate([256], "float32", "global")
            for ax1 in range(13):
                tensor_1 = T.Buffer((256,), data=tensor)
                data_1 = T.Buffer((56576,), data=data.data)
                for ax2, ax3 in T.grid(16, 16):
                    cse_var_3: T.int32 = ax2 * 16
                    cse_var_2: T.int32 = cse_var_3 + ax3
                    cse_var_1: T.int32 = ax0 * 3328 + ax1 * 256 + cse_var_3 + ax3
                    tensor_1[cse_var_2] = T.float32(0)
                    tensor_1[cse_var_2] = tensor_1[cse_var_2] + data_1[cse_var_1] * data_1[cse_var_1]
                for ax2, ax3 in T.grid(16, 16):
                    cse_var_5: T.int32 = ax2 * 16
                    cse_var_4: T.int32 = ax0 * 3328 + ax1 * 256 + cse_var_5 + ax3
                    T_divide_1 = T.Buffer((56576,), data=T_divide.data)
                    T_divide_1[cse_var_4] = data_1[cse_var_4] / T.pow(T.float32(2) + T.float32(9.9999997473787516e-05) * tensor_1[cse_var_5 + ax3], T.float32(0.75))