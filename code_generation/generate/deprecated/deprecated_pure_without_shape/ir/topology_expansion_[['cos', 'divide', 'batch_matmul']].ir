# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((1, 4, 19), "float32"), ph_4: T.Buffer((1, 19, 1), "float32"), T_batch_matmul_NN: T.Buffer((1, 4, 1), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        T_batch_matmul_NN_rf = T.allocate([76], "float32", "global")
        T_batch_matmul_NN_rf_1 = T.Buffer((76,), data=T_batch_matmul_NN_rf)
        for b_i_fused_j_fused in T.parallel(4):
            for k_outer in range(19):
                cse_var_1: T.int32 = b_i_fused_j_fused * 19 + k_outer
                T_batch_matmul_NN_rf_1[cse_var_1] = T.float32(0)
                ph_0_1 = T.Buffer((76,), data=ph_0.data)
                ph_4_1 = T.Buffer((19,), data=ph_4.data)
                T_batch_matmul_NN_rf_1[cse_var_1] = T_batch_matmul_NN_rf_1[cse_var_1] + ph_0_1[cse_var_1] / T.cos(ph_0_1[cse_var_1]) * ph_4_1[k_outer]
        for ax0_ax1_fused_ax2_fused in T.parallel(4):
            T_batch_matmul_NN_1 = T.Buffer((4,), data=T_batch_matmul_NN.data)
            T_batch_matmul_NN_1[ax0_ax1_fused_ax2_fused] = T.float32(0)
            for k_outer_v in range(19):
                T_batch_matmul_NN_1[ax0_ax1_fused_ax2_fused] = T_batch_matmul_NN_1[ax0_ax1_fused_ax2_fused] + T_batch_matmul_NN_rf_1[ax0_ax1_fused_ax2_fused * 19 + k_outer_v]