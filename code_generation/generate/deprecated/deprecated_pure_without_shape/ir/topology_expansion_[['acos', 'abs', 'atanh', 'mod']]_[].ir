# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((4, 16, 7), "float32"), compute: T.Buffer((4, 16, 7), "float32"), T_mod: T.Buffer((4, 16, 7), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        ph_0_1 = T.Buffer((448,), data=ph_0.data)
        for i0 in T.parallel(4):
            for i1, i2 in T.grid(16, 7):
                cse_var_1: T.int32 = i0 * 112 + i1 * 7 + i2
                compute_1 = T.Buffer((448,), data=compute.data)
                compute_1[cse_var_1] = T.acos(ph_0_1[cse_var_1])
        for ax0_ax1_fused in T.parallel(64):
            for ax2 in range(7):
                cse_var_2: T.int32 = ax0_ax1_fused * 7 + ax2
                T_mod_1 = T.Buffer((448,), data=T_mod.data)
                T_mod_1[cse_var_2] = T.truncmod(ph_0_1[cse_var_2], T.atanh(T.fabs(ph_0_1[cse_var_2])))