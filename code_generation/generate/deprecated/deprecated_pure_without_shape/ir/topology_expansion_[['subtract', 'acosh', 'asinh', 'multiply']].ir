# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((17, 13, 18), "float32"), ph_3: T.Buffer((17, 13, 18), "float32"), T_subtract: T.Buffer((17, 13, 18), "float32"), compute: T.Buffer((17, 13, 18), "float32"), T_multiply: T.Buffer((17, 13, 18), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        ph_0_1 = T.Buffer((3978,), data=ph_0.data)
        for ax0_ax1_fused in T.parallel(221):
            for ax2 in range(18):
                cse_var_1: T.int32 = ax0_ax1_fused * 18 + ax2
                T_subtract_1 = T.Buffer((3978,), data=T_subtract.data)
                ph_3_1 = T.Buffer((3978,), data=ph_3.data)
                T_subtract_1[cse_var_1] = ph_0_1[cse_var_1] - ph_3_1[cse_var_1]
        for i0_i1_fused_i2_fused in T.parallel(3978):
            compute_1 = T.Buffer((3978,), data=compute.data)
            compute_1[i0_i1_fused_i2_fused] = T.acosh(ph_0_1[i0_i1_fused_i2_fused])
        for ax0_ax1_fused in T.parallel(221):
            for ax2 in range(18):
                cse_var_2: T.int32 = ax0_ax1_fused * 18 + ax2
                T_multiply_1 = T.Buffer((3978,), data=T_multiply.data)
                T_multiply_1[cse_var_2] = T.asinh(ph_0_1[cse_var_2]) * ph_0_1[cse_var_2]