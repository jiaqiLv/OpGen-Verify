# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(data: T.Buffer((7, 10, 6, 4, 16), "float32"), pool_max: T.Buffer((7, 10, 3, 2, 8), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        for ax0_ax1_fused_ax2_fused in T.parallel(210):
            pad_temp = T.allocate([27], "float32", "global")
            for ax3, ax4 in T.grid(2, 8):
                pad_temp_1 = T.Buffer((27,), data=pad_temp)
                for ax2, ax3_1, ax4_s in T.grid(3, 3, 3):
                    cse_var_1: T.int32 = ax4 * 2
                    data_1 = T.Buffer((26880,), data=data.data)
                    pad_temp_1[ax2 * 9 + ax3_1 * 3 + ax4_s] = T.if_then_else(1 <= ax0_ax1_fused_ax2_fused % 3 * 2 + ax2 and 1 <= ax3 * 2 + ax3_1 and 1 <= cse_var_1 + ax4_s, data_1[ax0_ax1_fused_ax2_fused * 128 + ax2 * 64 + ax3 * 32 + ax3_1 * 16 + cse_var_1 + ax4_s - 81], T.float32(-3.4028234663852886e+38))
                pool_max_1 = T.Buffer((3360,), data=pool_max.data)
                pool_max_1[ax0_ax1_fused_ax2_fused * 16 + ax3 * 8 + ax4] = T.float32(-3.4028234663852886e+38)
                for rv0, rv1, rv2 in T.grid(3, 3, 3):
                    cse_var_2: T.int32 = ax0_ax1_fused_ax2_fused * 16 + ax3 * 8 + ax4
                    pool_max_1[cse_var_2] = T.max(pool_max_1[cse_var_2], pad_temp_1[rv0 * 9 + rv1 * 3 + rv2])