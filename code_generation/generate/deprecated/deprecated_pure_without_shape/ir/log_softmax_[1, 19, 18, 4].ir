# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(data: T.Buffer((1, 19, 18, 4), "float32"), compute: T.Buffer((1, 19, 18, 4), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        for i0_outer_outer_outer_i1_outer_outer_outer_fused_i2_outer_outer_outer_fused_i3_outer_outer_outer_fused_i0_outer_outer_inner_fused_i1_outer_outer_inner_fused_i2_outer_outer_inner_fused in T.parallel(76):
            T_softmax_maxelem = T.allocate([9], "float32", "global")
            compute_1 = T.allocate([3], "float32", "global")
            T_softmax_maxelem_1 = T.Buffer((9,), data=T_softmax_maxelem, align=32)
            data_1 = T.Buffer((1368,), data=data.data)
            for i2 in range(9):
                T_softmax_maxelem_1[i2] = T.float32(-3.4028234663852886e+38)
                for k in range(4):
                    T_softmax_maxelem_1[i2] = T.max(T_softmax_maxelem_1[i2], data_1[i0_outer_outer_outer_i1_outer_outer_outer_fused_i2_outer_outer_outer_fused_i3_outer_outer_outer_fused_i0_outer_outer_inner_fused_i1_outer_outer_inner_fused_i2_outer_outer_inner_fused % 19 * 72 + i0_outer_outer_outer_i1_outer_outer_outer_fused_i2_outer_outer_outer_fused_i3_outer_outer_outer_fused_i0_outer_outer_inner_fused_i1_outer_outer_inner_fused_i2_outer_outer_inner_fused // 38 * 36 + i2 * 4 + k])
            for i2_outer_inner, i3_outer_inner in T.grid(3, 2):
                compute_2 = T.Buffer((3,), data=compute_1, align=8)
                for i2 in range(3):
                    compute_2[i2] = T.float32(0)
                    for k in range(4):
                        compute_2[i2] = compute_2[i2] + T.exp(data_1[i0_outer_outer_outer_i1_outer_outer_outer_fused_i2_outer_outer_outer_fused_i3_outer_outer_outer_fused_i0_outer_outer_inner_fused_i1_outer_outer_inner_fused_i2_outer_outer_inner_fused % 19 * 72 + i0_outer_outer_outer_i1_outer_outer_outer_fused_i2_outer_outer_outer_fused_i3_outer_outer_outer_fused_i0_outer_outer_inner_fused_i1_outer_outer_inner_fused_i2_outer_outer_inner_fused // 38 * 36 + i2_outer_inner * 12 + i2 * 4 + k] - T_softmax_maxelem_1[i2_outer_inner * 3 + i2])
                for i2_inner in range(3):
                    cse_var_1: T.int32 = i0_outer_outer_outer_i1_outer_outer_outer_fused_i2_outer_outer_outer_fused_i3_outer_outer_outer_fused_i0_outer_outer_inner_fused_i1_outer_outer_inner_fused_i2_outer_outer_inner_fused % 19 * 72 + i0_outer_outer_outer_i1_outer_outer_outer_fused_i2_outer_outer_outer_fused_i3_outer_outer_outer_fused_i0_outer_outer_inner_fused_i1_outer_outer_inner_fused_i2_outer_outer_inner_fused // 38 * 36 + i2_outer_inner * 12 + i2_inner * 4 + i0_outer_outer_outer_i1_outer_outer_outer_fused_i2_outer_outer_outer_fused_i3_outer_outer_outer_fused_i0_outer_outer_inner_fused_i1_outer_outer_inner_fused_i2_outer_outer_inner_fused % 38 // 19 * 2 + i3_outer_inner
                    compute_3 = T.Buffer((1368,), data=compute.data)
                    compute_3[cse_var_1] = data_1[cse_var_1] - T_softmax_maxelem_1[i2_outer_inner * 3 + i2_inner] - T.log(compute_2[i2_inner])