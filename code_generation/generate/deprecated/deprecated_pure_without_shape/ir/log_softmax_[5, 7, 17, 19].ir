# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(data: T.Buffer((5, 7, 17, 19), "float32"), compute: T.Buffer((5, 7, 17, 19), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        T_softmax_maxelem = T.allocate([595], "float32", "global")
        compute_1 = T.allocate([1], "float32", "global")
        T_softmax_maxelem_1 = T.Buffer((595,), data=T_softmax_maxelem)
        data_1 = T.Buffer((11305,), data=data.data)
        for i0, i1, i2 in T.grid(5, 7, 17):
            T_softmax_maxelem_1[i0 * 119 + i1 * 17 + i2] = T.float32(-3.4028234663852886e+38)
            for k in range(19):
                cse_var_1: T.int32 = i0 * 119 + i1 * 17 + i2
                T_softmax_maxelem_1[cse_var_1] = T.max(T_softmax_maxelem_1[cse_var_1], data_1[i0 * 2261 + i1 * 323 + i2 * 19 + k])
        for i1_outer_outer_inner, i2_outer_outer_inner, i0_outer_inner, i3_outer_inner in T.grid(7, 17, 5, 19):
            cse_var_2: T.int32 = i0_outer_inner * 2261 + i1_outer_outer_inner * 323 + i2_outer_outer_inner * 19 + i3_outer_inner
            compute_2 = T.Buffer((1,), data=compute_1, align=4)
            compute_2[0] = T.float32(0)
            for k in range(19):
                compute_2[0] = compute_2[0] + T.exp(data_1[i0_outer_inner * 2261 + i1_outer_outer_inner * 323 + i2_outer_outer_inner * 19 + k] - T_softmax_maxelem_1[i0_outer_inner * 119 + i1_outer_outer_inner * 17 + i2_outer_outer_inner])
            compute_3 = T.Buffer((11305,), data=compute.data)
            compute_3[cse_var_2] = data_1[cse_var_2] - T_softmax_maxelem_1[i0_outer_inner * 119 + i1_outer_outer_inner * 17 + i2_outer_outer_inner] - T.log(compute_2[0])