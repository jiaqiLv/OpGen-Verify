# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(data: T.Buffer((1, 11, 15, 13), "float32"), T_divide: T.Buffer((1, 11, 15, 13), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        tensor = T.allocate([195], "float32", "global")
        for ax1 in range(11):
            tensor_1 = T.Buffer((195,), data=tensor)
            data_1 = T.Buffer((2145,), data=data.data)
            for ax2, ax3 in T.grid(15, 13):
                cse_var_3: T.int32 = ax2 * 13
                cse_var_2: T.int32 = cse_var_3 + ax3
                cse_var_1: T.int32 = ax1 * 195 + cse_var_3 + ax3
                tensor_1[cse_var_2] = T.float32(0)
                tensor_1[cse_var_2] = tensor_1[cse_var_2] + data_1[cse_var_1] * data_1[cse_var_1]
            for ax2, ax3 in T.grid(15, 13):
                cse_var_5: T.int32 = ax2 * 13
                cse_var_4: T.int32 = ax1 * 195 + cse_var_5 + ax3
                T_divide_1 = T.Buffer((2145,), data=T_divide.data)
                T_divide_1[cse_var_4] = data_1[cse_var_4] / T.pow(T.float32(2) + T.float32(9.9999997473787516e-05) * tensor_1[cse_var_5 + ax3], T.float32(0.75))