# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(data: T.Buffer((2, 4, 17, 19), "float32"), weight: T.Buffer((19,), "float32"), T_cast: T.Buffer((2, 4, 17, 19), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        for ax0 in T.parallel(2):
            T_multiply_red = T.allocate([323], "float32", "global")
            T_multiply_red_1 = T.Buffer((323,), data=T_multiply_red)
            data_1 = T.Buffer((2584,), data=data.data)
            for ax1, ax2 in T.grid(17, 19):
                T_multiply_red_1[ax1 * 19 + ax2] = T.float32(0)
                for k1 in range(4):
                    cse_var_3: T.int32 = ax1 * 19
                    cse_var_2: T.int32 = cse_var_3 + ax2
                    cse_var_1: T.int32 = ax0 * 1292 + k1 * 323 + cse_var_3 + ax2
                    T_multiply_red_1[cse_var_2] = T_multiply_red_1[cse_var_2] + data_1[cse_var_1] * data_1[cse_var_1]
            for ax1, ax2, ax3 in T.grid(4, 17, 19):
                cse_var_5: T.int32 = ax2 * 19
                cse_var_4: T.int32 = ax0 * 1292 + ax1 * 323 + cse_var_5 + ax3
                T_cast_1 = T.Buffer((2584,), data=T_cast.data)
                T_cast_1[cse_var_4] = data_1[cse_var_4] * weight[ax1] * T.rsqrt(T_multiply_red_1[cse_var_5 + ax3] * T.float32(0.25) + T.float32(1.0000000000000001e-05))