# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(data: T.Buffer((1, 19, 19, 10), "float32"), Scale: T.Buffer((19,), "float32"), Shift: T.Buffer((19,), "float32"), ScaleShift: T.Buffer((1, 19, 19, 10), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        for b_outer_outer_outer_c_outer_outer_outer_fused_i_outer_outer_outer_fused_j_outer_outer_outer_fused_b_outer_outer_inner_fused_c_outer_outer_inner_fused_i_outer_outer_inner_fused in T.parallel(5):
            for j_outer_outer_inner, c_outer_inner, i_outer_inner in T.grid(2, 19, 19):
                cse_var_1: T.int32 = c_outer_inner * 190 + i_outer_inner * 10 + b_outer_outer_outer_c_outer_outer_outer_fused_i_outer_outer_outer_fused_j_outer_outer_outer_fused_b_outer_outer_inner_fused_c_outer_outer_inner_fused_i_outer_outer_inner_fused * 2 + j_outer_outer_inner
                ScaleShift_1 = T.Buffer((3610,), data=ScaleShift.data)
                data_1 = T.Buffer((3610,), data=data.data)
                ScaleShift_1[cse_var_1] = data_1[cse_var_1] * Scale[c_outer_inner] + Shift[c_outer_inner]