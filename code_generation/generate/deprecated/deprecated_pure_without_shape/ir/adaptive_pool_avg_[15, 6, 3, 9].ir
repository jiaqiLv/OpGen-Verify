# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(data: T.Buffer((15, 6, 3, 9), "float32"), adaptive_pool_avg: T.Buffer((15, 6, 8, 8), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        for ax0_ax1_fused_ax2_fused in T.parallel(720):
            adaptive_pool_sum = T.allocate([1], "float32", "global")
            for ax3 in range(8):
                cse_var_3: T.int32 = ax0_ax1_fused_ax2_fused % 8 * 3
                cse_var_4: T.int32 = cse_var_3 + 3
                cse_var_2: T.int32 = (ax3 * 9 + 9) // 8
                cse_var_1: T.int32 = cse_var_4 // 8
                adaptive_pool_sum_1 = T.Buffer((1,), data=adaptive_pool_sum, align=4)
                adaptive_pool_sum_1[0] = T.float32(0)
                for rv0, rv1 in T.grid(T.Select(cse_var_4 % 8 == 0, cse_var_1, cse_var_1 + 1) - cse_var_3 // 8, T.Select((ax3 + 1) % 8 == 0, cse_var_2, cse_var_2 + 1) - ax3):
                    data_1 = T.Buffer((2430,), data=data.data)
                    adaptive_pool_sum_1[0] = adaptive_pool_sum_1[0] + data_1[ax0_ax1_fused_ax2_fused // 8 * 27 + cse_var_3 // 8 * 9 + rv0 * 9 + ax3 + rv1]
                adaptive_pool_avg_1 = T.Buffer((5760,), data=adaptive_pool_avg.data)
                adaptive_pool_avg_1[ax0_ax1_fused_ax2_fused * 8 + ax3] = adaptive_pool_sum_1[0] / (T.Cast("float32", T.Select(cse_var_4 % 8 == 0, cse_var_1, cse_var_1 + 1) - cse_var_3 // 8) * T.Cast("float32", T.Select((ax3 + 1) % 8 == 0, cse_var_2, cse_var_2 + 1) - ax3))