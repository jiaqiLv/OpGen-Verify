# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((8, 2, 11), "float32"), ph_7: T.Buffer((8, 11, 1), "float32"), compute: T.Buffer((8, 2, 11), "float32"), compute_1: T.Buffer((8, 2, 11), "float32"), compute_2: T.Buffer((8, 2, 11), "float32"), T_batch_matmul_NN: T.Buffer((8, 2, 1), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        auto_scheduler_layout_transform = T.allocate([88], "float32", "global")
        ph_0_1 = T.Buffer((176,), data=ph_0.data)
        for i0_i1_fused_i2_fused in T.parallel(176):
            compute_3 = T.Buffer((176,), data=compute.data)
            compute_3[i0_i1_fused_i2_fused] = T.asinh(ph_0_1[i0_i1_fused_i2_fused])
        for i0_i1_fused_i2_fused in T.parallel(176):
            compute_3 = T.Buffer((176,), data=compute_1.data)
            compute_3[i0_i1_fused_i2_fused] = T.exp(T.acos(ph_0_1[i0_i1_fused_i2_fused]))
        for i0_i1_fused_i2_fused in T.parallel(176):
            compute_3 = T.Buffer((176,), data=compute_2.data)
            compute_3[i0_i1_fused_i2_fused] = T.cos(ph_0_1[i0_i1_fused_i2_fused])
        auto_scheduler_layout_transform_1 = T.Buffer((88,), data=auto_scheduler_layout_transform)
        for ax0_ax1_fused_ax2_fused in T.parallel(2):
            for ax5, ax7, ax8 in T.grid(2, 11, 2):
                cse_var_1: T.int32 = ax0_ax1_fused_ax2_fused * 44 + ax5 * 22
                ph_7_1 = T.Buffer((88,), data=ph_7.data)
                auto_scheduler_layout_transform_1[cse_var_1 + ax7 * 2 + ax8] = ph_7_1[cse_var_1 + ax8 * 11 + ax7]
        for b_outer_outer_outer_i_outer_outer_outer_fused_j_outer_outer_outer_fused_b_outer_outer_inner_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused in T.parallel(4):
            T_batch_matmul_NN_1 = T.Buffer((16,), data=T_batch_matmul_NN.data)
            for b_outer_inner_init, b_inner_init in T.grid(2, 2):
                T_batch_matmul_NN_1[b_outer_outer_outer_i_outer_outer_outer_fused_j_outer_outer_outer_fused_b_outer_outer_inner_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused % 2 * 8 + b_outer_inner_init * 4 + b_inner_init * 2 + b_outer_outer_outer_i_outer_outer_outer_fused_j_outer_outer_outer_fused_b_outer_outer_inner_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused // 2] = T.float32(0)
            for b_outer_inner, k_inner, b_inner in T.grid(2, 11, 2):
                cse_var_4: T.int32 = b_outer_outer_outer_i_outer_outer_outer_fused_j_outer_outer_outer_fused_b_outer_outer_inner_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused // 2
                cse_var_3: T.int32 = b_outer_outer_outer_i_outer_outer_outer_fused_j_outer_outer_outer_fused_b_outer_outer_inner_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused % 2
                cse_var_2: T.int32 = cse_var_3 * 8 + b_outer_inner * 4 + b_inner * 2 + cse_var_4
                T_batch_matmul_NN_1[cse_var_2] = T_batch_matmul_NN_1[cse_var_2] + T.sin(ph_0_1[cse_var_3 * 88 + b_outer_inner * 44 + b_inner * 22 + cse_var_4 * 11 + k_inner]) * auto_scheduler_layout_transform_1[cse_var_3 * 44 + b_outer_inner * 22 + k_inner * 2 + b_inner]