# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((19, 14, 19), "float32"), ph_3: T.Buffer((19, 14, 19), "float32"), T_multiply: T.Buffer((19, 14, 19), "float32"), compute: T.Buffer((19, 14, 19), "float32"), compute_1: T.Buffer((19, 14, 19), "float32"), compute_2: T.Buffer((19, 14, 19), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        compute_3 = T.allocate([5054], "float32", "global")
        ph_0_1 = T.Buffer((5054,), data=ph_0.data)
        for ax0_ax1_fused_ax2_fused in T.parallel(5054):
            T_multiply_1 = T.Buffer((5054,), data=T_multiply.data)
            ph_3_1 = T.Buffer((5054,), data=ph_3.data)
            T_multiply_1[ax0_ax1_fused_ax2_fused] = ph_0_1[ax0_ax1_fused_ax2_fused] * ph_3_1[ax0_ax1_fused_ax2_fused]
        for i0_i1_fused_i2_fused in T.parallel(5054):
            compute_4 = T.Buffer((5054,), data=compute.data)
            compute_4[i0_i1_fused_i2_fused] = T.cos(ph_0_1[i0_i1_fused_i2_fused])
        compute_4 = T.Buffer((5054,), data=compute_3)
        for i0_i1_fused in T.parallel(266):
            for i2 in range(19):
                cse_var_1: T.int32 = i0_i1_fused * 19 + i2
                compute_4[cse_var_1] = T.exp(ph_0_1[cse_var_1])
        for i0_i1_fused_i2_fused in T.parallel(5054):
            compute_5 = T.Buffer((5054,), data=compute_1.data)
            compute_5[i0_i1_fused_i2_fused] = T.exp(compute_4[i0_i1_fused_i2_fused])
        for i0_i1_fused in T.parallel(266):
            for i2 in range(19):
                cse_var_2: T.int32 = i0_i1_fused * 19 + i2
                compute_5 = T.Buffer((5054,), data=compute_2.data)
                compute_5[cse_var_2] = T.acos(compute_4[cse_var_2])