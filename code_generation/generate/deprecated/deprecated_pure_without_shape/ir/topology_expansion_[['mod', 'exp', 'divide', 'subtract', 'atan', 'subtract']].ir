# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((20, 14, 19), "float32"), ph_3: T.Buffer((20, 14, 19), "float32"), T_subtract: T.Buffer((20, 14, 19), "float32"), compute: T.Buffer((20, 14, 19), "float32"), T_subtract_1: T.Buffer((20, 14, 19), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        compute_1 = T.allocate([5320], "float32", "global")
        compute_2 = T.Buffer((5320,), data=compute_1)
        ph_0_1 = T.Buffer((5320,), data=ph_0.data)
        for i0_i1_fused_i2_fused in T.parallel(5320):
            compute_2[i0_i1_fused_i2_fused] = T.exp(ph_0_1[i0_i1_fused_i2_fused])
        for ax0_ax1_fused_ax2_fused in T.parallel(5320):
            T_subtract_2 = T.Buffer((5320,), data=T_subtract.data)
            T_subtract_2[ax0_ax1_fused_ax2_fused] = ph_0_1[ax0_ax1_fused_ax2_fused] / compute_2[ax0_ax1_fused_ax2_fused] - ph_0_1[ax0_ax1_fused_ax2_fused]
        for i0_i1_fused_i2_fused in T.parallel(5320):
            compute_3 = T.Buffer((5320,), data=compute.data)
            compute_3[i0_i1_fused_i2_fused] = T.atan(ph_0_1[i0_i1_fused_i2_fused] / compute_2[i0_i1_fused_i2_fused])
        for ax0_ax1_fused in T.parallel(280):
            for ax2 in range(19):
                cse_var_1: T.int32 = ax0_ax1_fused * 19 + ax2
                T_subtract_2 = T.Buffer((5320,), data=T_subtract_1.data)
                ph_3_1 = T.Buffer((5320,), data=ph_3.data)
                T_subtract_2[cse_var_1] = T.truncmod(ph_0_1[cse_var_1], ph_3_1[cse_var_1]) - ph_0_1[cse_var_1]