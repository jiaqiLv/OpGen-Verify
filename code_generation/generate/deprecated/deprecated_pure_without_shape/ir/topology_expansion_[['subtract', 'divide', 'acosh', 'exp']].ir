# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((2, 1, 1), "float32"), ph_3: T.Buffer((2, 1, 1), "float32"), T_subtract: T.Buffer((2, 1, 1), "float32"), T_divide: T.Buffer((2, 1, 1), "float32"), compute: T.Buffer((2, 1, 1), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        ph_0_1 = T.Buffer((2,), data=ph_0.data)
        ph_3_1 = T.Buffer((2,), data=ph_3.data)
        for ax0_ax1_fused in T.parallel(2):
            T_subtract_1 = T.Buffer((2,), data=T_subtract.data)
            T_subtract_1[ax0_ax1_fused] = ph_0_1[ax0_ax1_fused] - ph_3_1[ax0_ax1_fused]
        for ax0 in T.parallel(2):
            T_divide_1 = T.Buffer((2,), data=T_divide.data)
            T_divide_1[ax0] = ph_0_1[ax0] / ph_3_1[ax0]
        for i0_i1_fused_i2_fused in T.parallel(2):
            compute_1 = T.Buffer((2,), data=compute.data)
            compute_1[i0_i1_fused_i2_fused] = T.exp(T.acosh(ph_0_1[i0_i1_fused_i2_fused]))