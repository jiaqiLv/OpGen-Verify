# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((17, 7, 15), "float32"), ph_3: T.Buffer((17, 7, 15), "float32"), ph_6: T.Buffer((17, 15, 5), "float32"), T_mod: T.Buffer((17, 7, 15), "float32"), compute: T.Buffer((17, 7, 5), "float32"), compute_1: T.Buffer((17, 7, 15), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        auto_scheduler_layout_transform = T.allocate([1275], "float32", "global")
        T_batch_matmul_NN = T.allocate([595], "float32", "global")
        auto_scheduler_layout_transform_1 = T.Buffer((1275,), data=auto_scheduler_layout_transform)
        for ax4, ax5, ax9 in T.grid(17, 5, 15):
            cse_var_1: T.int32 = ax4 * 75
            ph_6_1 = T.Buffer((1275,), data=ph_6.data)
            auto_scheduler_layout_transform_1[cse_var_1 + ax5 * 15 + ax9] = ph_6_1[cse_var_1 + ax9 * 5 + ax5]
        T_batch_matmul_NN_1 = T.Buffer((595,), data=T_batch_matmul_NN)
        ph_0_1 = T.Buffer((1785,), data=ph_0.data)
        for b_outer_outer_inner, i_outer_outer_inner, j_outer_outer_inner in T.grid(17, 7, 5):
            T_batch_matmul_NN_1[b_outer_outer_inner * 35 + i_outer_outer_inner * 5 + j_outer_outer_inner] = T.float32(0)
            for k_inner in range(15):
                cse_var_2: T.int32 = b_outer_outer_inner * 35 + i_outer_outer_inner * 5 + j_outer_outer_inner
                T_batch_matmul_NN_1[cse_var_2] = T_batch_matmul_NN_1[cse_var_2] + ph_0_1[b_outer_outer_inner * 105 + i_outer_outer_inner * 15 + k_inner] * auto_scheduler_layout_transform_1[b_outer_outer_inner * 75 + j_outer_outer_inner * 15 + k_inner]
        for i0_inner, i1_inner, i2_inner_s in T.grid(17, 7, 5):
            cse_var_3: T.int32 = i0_inner * 35 + i1_inner * 5 + i2_inner_s
            compute_2 = T.Buffer((595,), data=compute.data)
            compute_2[cse_var_3] = T.atan(T_batch_matmul_NN_1[cse_var_3])
        ph_3_1 = T.Buffer((1785,), data=ph_3.data)
        for ax0_ax1_fused_ax2_fused in T.parallel(1785):
            T_mod_1 = T.Buffer((1785,), data=T_mod.data)
            T_mod_1[ax0_ax1_fused_ax2_fused] = T.truncmod(ph_0_1[ax0_ax1_fused_ax2_fused], ph_3_1[ax0_ax1_fused_ax2_fused])
        for i0_i1_fused_i2_fused in T.parallel(1785):
            compute_2 = T.Buffer((1785,), data=compute_1.data)
            compute_2[i0_i1_fused_i2_fused] = T.acosh(T.truncmod(ph_0_1[i0_i1_fused_i2_fused], ph_3_1[i0_i1_fused_i2_fused]))