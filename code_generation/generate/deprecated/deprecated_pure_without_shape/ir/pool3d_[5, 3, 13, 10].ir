# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(data: T.Buffer((5, 3, 13, 10, 16), "float32"), pool_max: T.Buffer((5, 3, 7, 5, 8), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        for ax0 in T.parallel(5):
            pad_temp = T.allocate([561], "float32", "global")
            for ax1, ax2 in T.grid(3, 7):
                pad_temp_1 = T.Buffer((561,), data=pad_temp)
                for ax2_1, ax3, ax4 in T.grid(3, 11, 17):
                    data_1 = T.Buffer((31200,), data=data.data)
                    pad_temp_1[ax2_1 * 187 + ax3 * 17 + ax4] = T.if_then_else(1 <= ax2 * 2 + ax2_1 and ax2_1 // 2 + ax2 < 7 and 1 <= ax3 and 1 <= ax4, data_1[ax0 * 6240 + ax1 * 2080 + ax2 * 320 + ax2_1 * 160 + ax3 * 16 + ax4 - 177], T.float32(-3.4028234663852886e+38))
                for ax3, ax4 in T.grid(5, 8):
                    pool_max_1 = T.Buffer((4200,), data=pool_max.data)
                    pool_max_1[ax0 * 840 + ax1 * 280 + ax2 * 40 + ax3 * 8 + ax4] = T.float32(-3.4028234663852886e+38)
                    for rv0, rv1, rv2 in T.grid(3, 3, 3):
                        cse_var_1: T.int32 = ax0 * 840 + ax1 * 280 + ax2 * 40 + ax3 * 8 + ax4
                        pool_max_1[cse_var_1] = T.max(pool_max_1[cse_var_1], pad_temp_1[rv0 * 187 + ax3 * 34 + rv1 * 17 + ax4 * 2 + rv2])