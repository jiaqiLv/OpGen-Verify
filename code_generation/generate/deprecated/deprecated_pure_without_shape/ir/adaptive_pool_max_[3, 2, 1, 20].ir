# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(data: T.Buffer((3, 2, 1, 20), "float32"), adaptive_pool_max: T.Buffer((3, 2, 8, 8), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        for ax0_ax1_fused in T.parallel(6):
            for ax2, ax3 in T.grid(8, 8):
                adaptive_pool_max_1 = T.Buffer((384,), data=adaptive_pool_max.data)
                adaptive_pool_max_1[ax0_ax1_fused * 64 + ax2 * 8 + ax3] = T.float32(-3.4028234663852886e+38)
                for rv0, rv1 in T.grid(T.Let(T.Select((ax2 + 1) % 8 == 0, cse_var_1, cse_var_1 + 1), where={cse_var_1: (ax2 + 1) // 8}), T.Let(T.Select((ax3 * 4 + 4) % 8 == 0, cse_var_2, cse_var_2 + 1) - ax3 * 20 // 8, where={cse_var_2: (ax3 * 5 + 5) // 2})):
                    cse_var_1 = T.int32()
                    cse_var_2 = T.int32()
                    cse_var_3: T.int32 = ax0_ax1_fused * 64 + ax2 * 8 + ax3
                    data_1 = T.Buffer((120,), data=data.data)
                    adaptive_pool_max_1[cse_var_3] = T.max(adaptive_pool_max_1[cse_var_3], data_1[ax0_ax1_fused * 20 + rv0 * 20 + ax3 * 20 // 8 + rv1])