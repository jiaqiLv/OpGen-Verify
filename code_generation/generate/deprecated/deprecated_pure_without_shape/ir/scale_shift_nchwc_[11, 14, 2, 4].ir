# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(data: T.Buffer((11, 2, 2, 4, 14), "float32"), Scale: T.Buffer((2, 14), "float32"), Shift: T.Buffer((2, 14), "float32"), ScaleShift: T.Buffer((11, 2, 2, 4, 14), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        for b_outer_outer_outer_cc_outer_outer_outer_fused_i_outer_outer_outer_fused_j_outer_outer_outer_fused_cb_outer_outer_outer_fused_b_outer_outer_inner_fused_cc_outer_outer_inner_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused_cb_outer_outer_inner_fused_b_outer_inner_fused_cc_outer_inner_fused_i_outer_inner_fused in T.parallel(56):
            for b_inner, j_inner in T.grid(11, 4):
                cse_var_4: T.int32 = b_outer_outer_outer_cc_outer_outer_outer_fused_i_outer_outer_outer_fused_j_outer_outer_outer_fused_cb_outer_outer_outer_fused_b_outer_outer_inner_fused_cc_outer_outer_inner_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused_cb_outer_outer_inner_fused_b_outer_inner_fused_cc_outer_inner_fused_i_outer_inner_fused % 4
                cse_var_3: T.int32 = b_outer_outer_outer_cc_outer_outer_outer_fused_i_outer_outer_outer_fused_j_outer_outer_outer_fused_cb_outer_outer_outer_fused_b_outer_outer_inner_fused_cc_outer_outer_inner_fused_i_outer_outer_inner_fused_j_outer_outer_inner_fused_cb_outer_outer_inner_fused_b_outer_inner_fused_cc_outer_inner_fused_i_outer_inner_fused // 4
                cse_var_2: T.int32 = cse_var_4 // 2 * 14 + cse_var_3
                cse_var_1: T.int32 = b_inner * 224 + cse_var_4 * 56 + j_inner * 14 + cse_var_3
                ScaleShift_1 = T.Buffer((2464,), data=ScaleShift.data)
                data_1 = T.Buffer((2464,), data=data.data)
                Scale_1 = T.Buffer((28,), data=Scale.data)
                Shift_1 = T.Buffer((28,), data=Shift.data)
                ScaleShift_1[cse_var_1] = data_1[cse_var_1] * Scale_1[cse_var_2] + Shift_1[cse_var_2]