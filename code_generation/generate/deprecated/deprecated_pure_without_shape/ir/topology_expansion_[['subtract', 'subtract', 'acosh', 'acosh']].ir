# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((6, 12, 7), "float32"), ph_3: T.Buffer((6, 12, 7), "float32"), T_subtract: T.Buffer((6, 12, 7), "float32"), T_subtract_1: T.Buffer((6, 12, 7), "float32"), compute: T.Buffer((6, 12, 7), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        ph_0_1 = T.Buffer((504,), data=ph_0.data)
        ph_3_1 = T.Buffer((504,), data=ph_3.data)
        for ax0 in T.parallel(6):
            for ax1, ax2 in T.grid(12, 7):
                cse_var_1: T.int32 = ax0 * 84 + ax1 * 7 + ax2
                T_subtract_2 = T.Buffer((504,), data=T_subtract.data)
                T_subtract_2[cse_var_1] = ph_0_1[cse_var_1] - ph_3_1[cse_var_1]
        for ax0_ax1_fused in T.parallel(72):
            for ax2 in range(7):
                cse_var_2: T.int32 = ax0_ax1_fused * 7 + ax2
                T_subtract_2 = T.Buffer((504,), data=T_subtract_1.data)
                T_subtract_2[cse_var_2] = ph_0_1[cse_var_2] - ph_3_1[cse_var_2]
        for i0_i1_fused_i2_fused in T.parallel(504):
            compute_1 = T.Buffer((504,), data=compute.data)
            compute_1[i0_i1_fused_i2_fused] = T.acosh(T.acosh(ph_0_1[i0_i1_fused_i2_fused]))