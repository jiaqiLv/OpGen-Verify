# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((18, 8, 6), "float32"), T_subtract: T.Buffer((18, 8, 6), "float32"), compute: T.Buffer((18, 8, 6), "float32"), compute_1: T.Buffer((18, 8, 6), "float32"), T_mod: T.Buffer((18, 8, 6), "float32"), compute_2: T.Buffer((18, 8, 6), "float32"), T_add: T.Buffer((18, 8, 6), "float32"), compute_3: T.Buffer((18, 8, 6), "float32"), compute_4: T.Buffer((18, 8, 6), "float32"), T_divide: T.Buffer((18, 8, 6), "float32"), compute_5: T.Buffer((18, 8, 6), "float32"), T_divide_1: T.Buffer((18, 8, 6), "float32"), compute_6: T.Buffer((18, 8, 6), "float32"), T_add_1: T.Buffer((18, 8, 6), "float32"), T_mod_1: T.Buffer((18, 8, 6), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        ph_0_1 = T.Buffer((864,), data=ph_0.data)
        for i0_i1_fused_i2_fused in T.parallel(864):
            compute_7 = T.Buffer((864,), data=compute.data)
            compute_7[i0_i1_fused_i2_fused] = T.atanh(T.cos(ph_0_1[i0_i1_fused_i2_fused]))
        for i0_i1_fused_i2_fused in T.parallel(864):
            compute_7 = T.Buffer((864,), data=compute_1.data)
            compute_7[i0_i1_fused_i2_fused] = T.acos(T.cos(ph_0_1[i0_i1_fused_i2_fused]))
        for ax0_ax1_fused_ax2_fused in T.parallel(864):
            T_mod_2 = T.Buffer((864,), data=T_mod.data)
            T_mod_2[ax0_ax1_fused_ax2_fused] = T.truncmod(T.acos(ph_0_1[ax0_ax1_fused_ax2_fused]), ph_0_1[ax0_ax1_fused_ax2_fused])
        for i0_i1_fused_i2_fused in T.parallel(864):
            compute_7 = T.Buffer((864,), data=compute_2.data)
            compute_7[i0_i1_fused_i2_fused] = T.atan(T.acos(ph_0_1[i0_i1_fused_i2_fused]))
        for ax0_ax1_fused_ax2_fused in T.parallel(864):
            T_add_2 = T.Buffer((864,), data=T_add.data)
            T_add_2[ax0_ax1_fused_ax2_fused] = T.asinh(T.acos(ph_0_1[ax0_ax1_fused_ax2_fused])) + T.acos(ph_0_1[ax0_ax1_fused_ax2_fused])
        for i0_i1_fused_i2_fused in T.parallel(864):
            compute_7 = T.Buffer((864,), data=compute_3.data)
            compute_7[i0_i1_fused_i2_fused] = T.acosh(T.asinh(T.acos(ph_0_1[i0_i1_fused_i2_fused])))
        for i0_i1_fused_i2_fused in T.parallel(864):
            compute_7 = T.Buffer((864,), data=compute_4.data)
            compute_7[i0_i1_fused_i2_fused] = T.asin(T.asinh(T.acos(ph_0_1[i0_i1_fused_i2_fused])))
        for ax0_ax1_fused_ax2_fused in T.parallel(864):
            T_divide_2 = T.Buffer((864,), data=T_divide.data)
            T_divide_2[ax0_ax1_fused_ax2_fused] = T.asinh(T.acos(ph_0_1[ax0_ax1_fused_ax2_fused])) / T.acos(ph_0_1[ax0_ax1_fused_ax2_fused])
        for i0_i1_fused_i2_fused in T.parallel(864):
            compute_7 = T.Buffer((864,), data=compute_5.data)
            compute_7[i0_i1_fused_i2_fused] = T.asin(T.asinh(T.acos(ph_0_1[i0_i1_fused_i2_fused])))
        for ax0_ax1_fused_ax2_fused in T.parallel(864):
            T_subtract_1 = T.Buffer((864,), data=T_subtract.data)
            T_subtract_1[ax0_ax1_fused_ax2_fused] = ph_0_1[ax0_ax1_fused_ax2_fused] - T.sin(ph_0_1[ax0_ax1_fused_ax2_fused] + T.acos(ph_0_1[ax0_ax1_fused_ax2_fused]))
        for ax0 in T.parallel(18):
            for ax1, ax2 in T.grid(8, 6):
                cse_var_1: T.int32 = ax0 * 48 + ax1 * 6 + ax2
                T_divide_2 = T.Buffer((864,), data=T_divide_1.data)
                T_divide_2[cse_var_1] = T.sin(ph_0_1[cse_var_1] + T.acos(ph_0_1[cse_var_1])) / ph_0_1[cse_var_1]
        for i0_i1_fused_i2_fused in T.parallel(864):
            compute_7 = T.Buffer((864,), data=compute_6.data)
            compute_7[i0_i1_fused_i2_fused] = T.acos(T.sin(ph_0_1[i0_i1_fused_i2_fused] + T.acos(ph_0_1[i0_i1_fused_i2_fused])))
        for ax0_ax1_fused_ax2_fused in T.parallel(864):
            T_add_2 = T.Buffer((864,), data=T_add_1.data)
            T_add_2[ax0_ax1_fused_ax2_fused] = T.sin(ph_0_1[ax0_ax1_fused_ax2_fused] + T.acos(ph_0_1[ax0_ax1_fused_ax2_fused])) + ph_0_1[ax0_ax1_fused_ax2_fused]
        for ax0_ax1_fused_ax2_fused in T.parallel(864):
            T_mod_2 = T.Buffer((864,), data=T_mod_1.data)
            T_mod_2[ax0_ax1_fused_ax2_fused] = T.truncmod(T.sin(ph_0_1[ax0_ax1_fused_ax2_fused] + T.acos(ph_0_1[ax0_ax1_fused_ax2_fused])), ph_0_1[ax0_ax1_fused_ax2_fused])