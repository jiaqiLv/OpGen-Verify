# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(data: T.Buffer((6, 4, 4, 1), "float32"), compute: T.Buffer((6, 4, 4, 1), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        for i0 in T.parallel(6):
            T_softmax_maxelem = T.allocate([16], "float32", "global")
            compute_1 = T.allocate([4], "float32", "global")
            T_softmax_maxelem_1 = T.Buffer((16,), data=T_softmax_maxelem)
            data_1 = T.Buffer((96,), data=data.data)
            for i1, i2 in T.grid(4, 4):
                cse_var_2: T.int32 = i1 * 4
                cse_var_1: T.int32 = cse_var_2 + i2
                T_softmax_maxelem_1[cse_var_1] = T.float32(-3.4028234663852886e+38)
                T_softmax_maxelem_1[cse_var_1] = T.max(T_softmax_maxelem_1[cse_var_1], data_1[i0 * 16 + cse_var_2 + i2])
            for i1 in range(4):
                compute_2 = T.Buffer((4,), data=compute_1, align=16)
                for i2 in range(4):
                    cse_var_3: T.int32 = i1 * 4
                    compute_2[i2] = T.float32(0)
                    compute_2[i2] = compute_2[i2] + T.exp(data_1[i0 * 16 + cse_var_3 + i2] - T_softmax_maxelem_1[cse_var_3 + i2])
                for i2 in range(4):
                    cse_var_5: T.int32 = i1 * 4
                    cse_var_4: T.int32 = i0 * 16 + cse_var_5 + i2
                    compute_3 = T.Buffer((96,), data=compute.data)
                    compute_3[cse_var_4] = data_1[cse_var_4] - T_softmax_maxelem_1[cse_var_5 + i2] - T.log(compute_2[i2])