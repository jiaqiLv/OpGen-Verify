# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((17, 20, 14), "float32"), compute: T.Buffer((17, 20, 14), "float32"), T_mod: T.Buffer((17, 20, 14), "float32"), compute_1: T.Buffer((17, 20, 14), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        compute_2 = T.allocate([4760], "float32", "global")
        ph_0_1 = T.Buffer((4760,), data=ph_0.data)
        for i0_i1_fused_i2_fused in T.parallel(4760):
            compute_3 = T.Buffer((4760,), data=compute.data)
            compute_3[i0_i1_fused_i2_fused] = T.fabs(ph_0_1[i0_i1_fused_i2_fused])
        compute_3 = T.Buffer((4760,), data=compute_2)
        for i0_i1_fused_i2_fused in T.parallel(4760):
            compute_3[i0_i1_fused_i2_fused] = T.exp(ph_0_1[i0_i1_fused_i2_fused])
        for ax0_ax1_fused_ax2_fused in T.parallel(4760):
            T_mod_1 = T.Buffer((4760,), data=T_mod.data)
            T_mod_1[ax0_ax1_fused_ax2_fused] = T.truncmod(compute_3[ax0_ax1_fused_ax2_fused], ph_0_1[ax0_ax1_fused_ax2_fused])
        for i0 in T.parallel(17):
            for i1, i2 in T.grid(20, 14):
                cse_var_1: T.int32 = i0 * 280 + i1 * 14 + i2
                compute_4 = T.Buffer((4760,), data=compute_1.data)
                compute_4[cse_var_1] = T.acos(ph_0_1[cse_var_1])