# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(data: T.Buffer((12, 9, 15, 48), "float32"), pool_max: T.Buffer((12, 9, 8, 24), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        for ax0 in T.parallel(12):
            pad_temp = T.allocate([833], "float32", "global")
            for ax1 in range(9):
                pad_temp_1 = T.Buffer((833,), data=pad_temp)
                for ax2, ax3_s in T.grid(17, 49):
                    data_1 = T.Buffer((77760,), data=data.data)
                    pad_temp_1[ax2 * 49 + ax3_s] = T.if_then_else(1 <= ax2 and ax2 < 16 and 1 <= ax3_s, data_1[ax0 * 6480 + ax1 * 720 + ax2 * 48 + ax3_s - 49], T.float32(-3.4028234663852886e+38))
                for ax2, ax3 in T.grid(8, 24):
                    pool_max_1 = T.Buffer((20736,), data=pool_max.data)
                    pool_max_1[ax0 * 1728 + ax1 * 192 + ax2 * 24 + ax3] = T.float32(-3.4028234663852886e+38)
                    for rv0, rv1 in T.grid(3, 3):
                        cse_var_1: T.int32 = ax0 * 1728 + ax1 * 192 + ax2 * 24 + ax3
                        pool_max_1[cse_var_1] = T.max(pool_max_1[cse_var_1], pad_temp_1[ax2 * 98 + rv0 * 49 + ax3 * 2 + rv1])