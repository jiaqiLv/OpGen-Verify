# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(data: T.Buffer((4, 10, 1, 19, 16), "float32"), pool_max: T.Buffer((4, 10, 1, 10, 8), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        for ax0 in T.parallel(4):
            pad_temp = T.allocate([10710], "float32", "global")
            pad_temp_1 = T.Buffer((10710,), data=pad_temp)
            for ax1, ax2, ax3, ax4 in T.grid(10, 3, 21, 17):
                data_1 = T.Buffer((12160,), data=data.data)
                pad_temp_1[ax1 * 1071 + ax2 * 357 + ax3 * 17 + ax4] = T.if_then_else(1 <= ax2 and ax2 < 2 and 1 <= ax3 and ax3 < 20 and 1 <= ax4, data_1[ax0 * 3040 + ax1 * 304 + ax2 * 304 + ax3 * 16 + ax4 - 321], T.float32(-3.4028234663852886e+38))
            for ax1, ax3, ax4 in T.grid(10, 10, 8):
                pool_max_1 = T.Buffer((3200,), data=pool_max.data)
                pool_max_1[ax0 * 800 + ax1 * 80 + ax3 * 8 + ax4] = T.float32(-3.4028234663852886e+38)
                for rv0, rv1, rv2 in T.grid(3, 3, 3):
                    cse_var_1: T.int32 = ax0 * 800 + ax1 * 80 + ax3 * 8 + ax4
                    pool_max_1[cse_var_1] = T.max(pool_max_1[cse_var_1], pad_temp_1[ax1 * 1071 + rv0 * 357 + ax3 * 34 + rv1 * 17 + ax4 * 2 + rv2])