# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(ph_0: T.Buffer((1, 16, 17), "float32"), compute: T.Buffer((1, 16, 17), "float32"), T_mod: T.Buffer((1, 16, 17), "float32"), compute_1: T.Buffer((1, 16, 17), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        compute_2 = T.allocate([17], "float32", "global")
        ph_0_1 = T.Buffer((272,), data=ph_0.data)
        for i0_i1_fused_i2_fused in T.parallel(272):
            compute_3 = T.Buffer((272,), data=compute.data)
            compute_3[i0_i1_fused_i2_fused] = T.cos(ph_0_1[i0_i1_fused_i2_fused])
        for ax1 in range(16):
            compute_3 = T.Buffer((17,), data=compute_2)
            for i2 in range(17):
                compute_3[i2] = T.exp(ph_0_1[ax1 * 17 + i2])
            for ax2 in range(17):
                cse_var_1: T.int32 = ax1 * 17 + ax2
                T_mod_1 = T.Buffer((272,), data=T_mod.data)
                T_mod_1[cse_var_1] = T.truncmod(compute_3[ax2], ph_0_1[cse_var_1])
        for i0_i1_fused in T.parallel(16):
            for i2 in range(17):
                cse_var_2: T.int32 = i0_i1_fused * 17 + i2
                compute_3 = T.Buffer((272,), data=compute_1.data)
                compute_3[cse_var_2] = T.exp(ph_0_1[cse_var_2])