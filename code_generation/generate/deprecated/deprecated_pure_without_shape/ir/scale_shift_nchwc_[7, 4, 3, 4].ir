# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(data: T.Buffer((7, 2, 3, 4, 4), "float32"), Scale: T.Buffer((2, 4), "float32"), Shift: T.Buffer((2, 4), "float32"), ScaleShift: T.Buffer((7, 2, 3, 4, 4), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        for j_outer_outer_outer, cb_outer_outer_outer, cc_outer_outer_inner, cb_outer_outer_inner, j_outer_inner, b_inner, i_inner in T.grid(2, 2, 2, 2, 2, 7, 3):
            cse_var_3: T.int32 = cb_outer_outer_outer * 2
            cse_var_2: T.int32 = cc_outer_outer_inner * 4 + cse_var_3 + cb_outer_outer_inner
            cse_var_1: T.int32 = b_inner * 96 + cc_outer_outer_inner * 48 + i_inner * 16 + j_outer_outer_outer * 8 + j_outer_inner * 4 + cse_var_3 + cb_outer_outer_inner
            ScaleShift_1 = T.Buffer((672,), data=ScaleShift.data)
            data_1 = T.Buffer((672,), data=data.data)
            Scale_1 = T.Buffer((8,), data=Scale.data)
            Shift_1 = T.Buffer((8,), data=Shift.data)
            ScaleShift_1[cse_var_1] = data_1[cse_var_1] * Scale_1[cse_var_2] + Shift_1[cse_var_2]