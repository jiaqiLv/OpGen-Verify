# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(data: T.Buffer((12, 6, 11, 15), "float32"), data_red: T.Buffer((), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        data_red_rf = T.allocate([18], "float32", "global")
        data_red_rf_1 = T.Buffer((18,), data=data_red_rf)
        for k0_k1_fused_k2_fused_k3_fused_inner_init in range(18):
            data_red_rf_1[k0_k1_fused_k2_fused_k3_fused_inner_init] = T.float32(-3.4028234663852886e+38)
        for k0_k1_fused_k2_fused_k3_fused_outer, k0_k1_fused_k2_fused_k3_fused_inner in T.grid(660, 18):
            data_1 = T.Buffer((11880,), data=data.data)
            data_red_rf_1[k0_k1_fused_k2_fused_k3_fused_inner] = T.max(data_red_rf_1[k0_k1_fused_k2_fused_k3_fused_inner], data_1[k0_k1_fused_k2_fused_k3_fused_outer * 18 + k0_k1_fused_k2_fused_k3_fused_inner])
        data_red_1 = T.Buffer((1,), data=data_red.data)
        data_red_1[0] = T.float32(-3.4028234663852886e+38)
        for k0_k1_fused_k2_fused_k3_fused_inner_v in range(18):
            data_red_1[0] = T.max(data_red_1[0], data_red_rf_1[k0_k1_fused_k2_fused_k3_fused_inner_v])