# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(data: T.Buffer((15, 12, 6, 8), "float32"), T_strided_slice: T.Buffer((3, 24, 12, 8), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        for ax0 in T.parallel(3):
            T_reshape = T.allocate([288], "float32x8", "global")
            T_transpose = T.allocate([288], "float32x8", "global")
            T_reshape_1 = T.allocate([1], "float32x8", "global")
            T_reshape_2 = T.Buffer((288,), "float32x8", data=T_reshape)
            for ax0_1, ax1, ax3, ax4 in T.grid(2, 2, 12, 6):
                data_1 = T.Buffer((8640,), data=data.data)
                T_reshape_2[ax0_1 * 144 + ax1 * 72 + ax3 * 6 + ax4] = data_1[ax0_1 * 3456 + ax1 * 1728 + ax0 * 576 + ax3 * 48 + ax4 * 8:ax0_1 * 3456 + ax1 * 1728 + ax0 * 576 + ax3 * 48 + ax4 * 8 + 8]
            T_transpose_1 = T.Buffer((288,), "float32x8", data=T_transpose)
            for ax1, ax2, ax3, ax4 in T.grid(12, 2, 6, 2):
                T_transpose_1[ax1 * 24 + ax2 * 12 + ax3 * 2 + ax4] = T_reshape_2[ax2 * 144 + ax4 * 72 + ax1 * 6 + ax3]
            for ax1, ax2 in T.grid(24, 12):
                T_reshape_3 = T.Buffer((1,), "float32x8", data=T_reshape_1, align=32)
                T_reshape_3[0] = T_transpose_1[ax1 * 12 + ax2]
                T_strided_slice_1 = T.Buffer((6912,), data=T_strided_slice.data)
                T_strided_slice_1[ax0 * 2304 + ax1 * 96 + ax2 * 8:ax0 * 2304 + ax1 * 96 + ax2 * 8 + 8] = T_reshape_3[0]