# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(data: T.Buffer((13, 18, 17, 13), "float32"), data_red: T.Buffer((), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        data_red_rf = T.allocate([13], "float32", "global")
        data_red_rf_1 = T.Buffer((13,), data=data_red_rf, align=32)
        for k0_k1_fused_k2_fused_k3_fused_inner_init in range(13):
            data_red_rf_1[k0_k1_fused_k2_fused_k3_fused_inner_init] = T.float32(1)
        for k0_k1_fused_k2_fused_k3_fused_outer in range(3978):
            cse_var_1: T.int32 = k0_k1_fused_k2_fused_k3_fused_outer * 13
            data_1 = T.Buffer((51714,), data=data.data)
            data_red_rf_1[0] = data_red_rf_1[0] * data_1[cse_var_1]
            data_red_rf_1[1] = data_red_rf_1[1] * data_1[cse_var_1 + 1]
            data_red_rf_1[2] = data_red_rf_1[2] * data_1[cse_var_1 + 2]
            data_red_rf_1[3] = data_red_rf_1[3] * data_1[cse_var_1 + 3]
            data_red_rf_1[4] = data_red_rf_1[4] * data_1[cse_var_1 + 4]
            data_red_rf_1[5] = data_red_rf_1[5] * data_1[cse_var_1 + 5]
            data_red_rf_1[6] = data_red_rf_1[6] * data_1[cse_var_1 + 6]
            data_red_rf_1[7] = data_red_rf_1[7] * data_1[cse_var_1 + 7]
            data_red_rf_1[8] = data_red_rf_1[8] * data_1[cse_var_1 + 8]
            data_red_rf_1[9] = data_red_rf_1[9] * data_1[cse_var_1 + 9]
            data_red_rf_1[10] = data_red_rf_1[10] * data_1[cse_var_1 + 10]
            data_red_rf_1[11] = data_red_rf_1[11] * data_1[cse_var_1 + 11]
            data_red_rf_1[12] = data_red_rf_1[12] * data_1[cse_var_1 + 12]
        data_red_1 = T.Buffer((1,), data=data_red.data)
        data_red_1[0] = T.float32(1)
        data_red_1[0] = data_red_1[0] * data_red_rf_1[0]
        data_red_1[0] = data_red_1[0] * data_red_rf_1[1]
        data_red_1[0] = data_red_1[0] * data_red_rf_1[2]
        data_red_1[0] = data_red_1[0] * data_red_rf_1[3]
        data_red_1[0] = data_red_1[0] * data_red_rf_1[4]
        data_red_1[0] = data_red_1[0] * data_red_rf_1[5]
        data_red_1[0] = data_red_1[0] * data_red_rf_1[6]
        data_red_1[0] = data_red_1[0] * data_red_rf_1[7]
        data_red_1[0] = data_red_1[0] * data_red_rf_1[8]
        data_red_1[0] = data_red_1[0] * data_red_rf_1[9]
        data_red_1[0] = data_red_1[0] * data_red_rf_1[10]
        data_red_1[0] = data_red_1[0] * data_red_rf_1[11]
        data_red_1[0] = data_red_1[0] * data_red_rf_1[12]