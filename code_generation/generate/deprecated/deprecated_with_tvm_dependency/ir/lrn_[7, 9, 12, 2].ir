# from tvm.script import ir as I
# from tvm.script import tir as T

@I.ir_module
class Module:
    @T.prim_func
    def main(data: T.Buffer((7, 9, 12, 2), "float32"), T_divide: T.Buffer((7, 9, 12, 2), "float32")):
        T.func_attr({"from_legacy_te_schedule": T.bool(True), "tir.noalias": T.bool(True)})
        for ax0_ax1_fused in T.parallel(63):
            tensor = T.allocate([2], "float32", "global")
            for ax2 in range(12):
                cse_var_2: T.int32 = ax0_ax1_fused * 24 + ax2 * 2
                cse_var_1: T.int32 = cse_var_2 + 1
                tensor_1 = T.Buffer((2,), data=tensor, align=8)
                tensor_1[0] = T.float32(0)
                data_1 = T.Buffer((1512,), data=data.data)
                tensor_1[0] = tensor_1[0] + data_1[cse_var_2] * data_1[cse_var_2]
                tensor_1[1] = T.float32(0)
                tensor_1[1] = tensor_1[1] + data_1[cse_var_1] * data_1[cse_var_1]
                for ax3 in range(2):
                    cse_var_3: T.int32 = cse_var_2 + ax3
                    T_divide_1 = T.Buffer((1512,), data=T_divide.data)
                    T_divide_1[cse_var_3] = data_1[cse_var_3] / T.pow(T.float32(2) + T.float32(9.9999997473787516e-05) * tensor_1[ax3], T.float32(0.75))